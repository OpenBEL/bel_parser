
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 47, 
	47, 10, 10, 10, 10, 
	92, 92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 
	92, 10, 10, 92, 92, 
	9, 122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 
	122, 10, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 10, 10, 
	92, 92, 9, 122, 10, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 1, 1, 1, 
	1, 114, 75, 113, 1, 59, 1, 1, 
	114, 114, 59, 1, 1, 113, 113, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 1, 114, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	1, 114, 38, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 897, 899, 
	901, 903, 1018, 1094, 1208, 1210, 1270, 1272, 
	1274, 1389, 1504, 1564, 1566, 1568, 1682, 1796, 
	1872, 1987, 2020, 2135, 2250, 2310, 2347, 2384, 
	2499, 2614, 2651, 2653, 2768, 2844, 2959, 2992, 
	3107, 3222, 3282, 3319, 3356, 3471, 3586, 3623, 
	3625, 3627, 3742, 3781, 3783, 3785, 3787, 3788, 
	3789, 3790, 3791, 3792, 3793
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 29, 
	30, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 29, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 31, 6, 32, 
	6, 6, 33, 35, 34, 16, 14, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	0, 0, 26, 0, 0, 0, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	0, 0, 0, 0, 0, 0, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 0, 0, 0, 36, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 37, 37, 37, 37, 
	37, 37, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 37, 37, 
	37, 38, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 39, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 37, 37, 
	37, 37, 37, 37, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	37, 37, 37, 40, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	42, 41, 44, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 45, 43, 46, 41, 
	45, 43, 47, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 47, 8, 48, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 8, 8, 8, 8, 8, 
	8, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 8, 8, 8, 
	49, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 47, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 47, 12, 48, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 12, 12, 
	12, 12, 12, 12, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	12, 12, 12, 50, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 53, 51, 54, 17, 53, 51, 
	55, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	0, 0, 0, 0, 0, 0, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 0, 0, 0, 56, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 55, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 58, 0, 0, 0, 0, 0, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 0, 0, 0, 57, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 0, 0, 
	0, 0, 0, 0, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	0, 0, 0, 59, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	60, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	0, 0, 0, 0, 0, 0, 0, 61, 
	0, 0, 0, 0, 0, 0, 0, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 0, 0, 0, 0, 0, 0, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 0, 0, 0, 62, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 63, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 63, 6, 6, 6, 6, 6, 
	6, 6, 64, 6, 65, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 65, 8, 66, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 8, 8, 8, 
	8, 8, 8, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 8, 
	8, 8, 67, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 65, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 65, 12, 
	66, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	12, 12, 12, 12, 12, 12, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 12, 12, 12, 68, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 70, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 71, 69, 72, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 72, 17, 17, 
	17, 17, 17, 17, 17, 17, 73, 17, 
	17, 74, 17, 75, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 75, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 76, 6, 
	76, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 76, 
	8, 66, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 8, 8, 8, 8, 8, 8, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 8, 8, 8, 67, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 77, 0, 0, 0, 0, 0, 
	0, 0, 78, 79, 0, 0, 80, 0, 
	0, 0, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 82, 0, 0, 0, 
	0, 0, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 0, 0, 
	0, 81, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 75, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 75, 6, 6, 
	6, 6, 6, 6, 6, 6, 83, 6, 
	6, 76, 6, 71, 69, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 79, 0, 0, 
	80, 0, 0, 0, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 84, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 0, 0, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 0, 0, 0, 85, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 86, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 87, 0, 0, 0, 0, 
	0, 0, 0, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 0, 0, 0, 
	0, 0, 0, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 0, 
	0, 0, 88, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 89, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 89, 6, 
	6, 6, 6, 6, 6, 6, 90, 6, 
	91, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 91, 
	8, 92, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 8, 8, 8, 8, 8, 8, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 8, 8, 8, 93, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 91, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 91, 12, 92, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 12, 12, 12, 12, 
	12, 12, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 12, 12, 
	12, 94, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 96, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 95, 98, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 98, 17, 17, 17, 17, 17, 17, 
	17, 17, 99, 17, 17, 100, 17, 101, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 101, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 102, 6, 102, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 102, 8, 92, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 8, 8, 8, 
	8, 8, 8, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 8, 
	8, 8, 93, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 103, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 103, 0, 
	0, 0, 0, 0, 0, 0, 104, 105, 
	0, 0, 106, 0, 0, 0, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	108, 0, 0, 0, 0, 0, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 0, 0, 0, 107, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 101, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 101, 6, 6, 6, 6, 6, 6, 
	6, 6, 109, 6, 6, 102, 6, 110, 
	6, 97, 95, 103, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 103, 0, 0, 0, 0, 0, 
	0, 0, 0, 105, 0, 0, 106, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 113, 6, 114, 6, 6, 
	115, 117, 116, 6, 6, 6, 6, 6, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 17, 6, 7, 
	16, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 62, 13, 
	14, 15, 15, 62, 17, 0, 19, 63, 
	19, 0, 21, 21, 22, 23, 64, 25, 
	26, 30, 29, 26, 27, 28, 65, 65, 
	29, 30, 25, 32, 33, 34, 32, 33, 
	34, 35, 36, 40, 43, 36, 37, 42, 
	38, 66, 39, 38, 39, 38, 41, 66, 
	39, 40, 35, 66, 43, 45, 46, 47, 
	45, 46, 47, 48, 49, 53, 57, 49, 
	50, 56, 51, 55, 52, 51, 52, 51, 
	54, 55, 52, 53, 48, 55, 67, 57, 
	68, 59, 60, 61, 61, 68
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	0, 19, 20, 21, 22, 23, 11, 24, 
	22, 25, 8, 13, 13, 13, 26, 0, 
	8, 11, 11, 13, 13, 13, 27, 28, 
	22, 22, 17, 29, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 30, 14, 0, 0, 15, 16, 31, 
	15, 5, 17, 32, 22, 2, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 33, 22, 
	34, 0, 0, 19, 20, 35
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	12, 1, 23, 23, 25, 25, 25, 25, 
	7, 10, 12, 12, 12, 1, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 12, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 0, 
	12, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 62;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 18;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 20;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 24;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 31;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 44;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 58;
class << self
	attr_accessor :bel_en_statement_observed_term
end
self.bel_en_statement_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 22 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 34 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 18 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 31
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 21 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 28 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 27 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 30 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 47, 
	47, 10, 10, 10, 10, 
	92, 92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 
	92, 10, 10, 92, 92, 
	9, 122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 
	122, 10, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 10, 10, 
	92, 92, 9, 122, 10, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 1, 1, 1, 
	1, 114, 75, 113, 1, 59, 1, 1, 
	114, 114, 59, 1, 1, 113, 113, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 1, 114, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	1, 114, 38, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 897, 899, 
	901, 903, 1018, 1094, 1208, 1210, 1270, 1272, 
	1274, 1389, 1504, 1564, 1566, 1568, 1682, 1796, 
	1872, 1987, 2020, 2135, 2250, 2310, 2347, 2384, 
	2499, 2614, 2651, 2653, 2768, 2844, 2959, 2992, 
	3107, 3222, 3282, 3319, 3356, 3471, 3586, 3623, 
	3625, 3627, 3742, 3781, 3783, 3785, 3787, 3788, 
	3789, 3790, 3791, 3792, 3793
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 29, 
	30, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 29, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 31, 6, 32, 
	6, 6, 33, 35, 34, 16, 14, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	0, 0, 26, 0, 0, 0, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	0, 0, 0, 0, 0, 0, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 0, 0, 0, 36, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 37, 37, 37, 37, 
	37, 37, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 37, 37, 
	37, 38, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 39, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 37, 37, 
	37, 37, 37, 37, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	37, 37, 37, 40, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	42, 41, 44, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 45, 43, 46, 41, 
	45, 43, 47, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 47, 8, 48, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 8, 8, 8, 8, 8, 
	8, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 8, 8, 8, 
	49, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 47, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 47, 12, 48, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 12, 12, 
	12, 12, 12, 12, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	12, 12, 12, 50, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 53, 51, 54, 17, 53, 51, 
	55, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	0, 0, 0, 0, 0, 0, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 0, 0, 0, 56, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 55, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 58, 0, 0, 0, 0, 0, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 0, 0, 0, 57, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 0, 0, 
	0, 0, 0, 0, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	0, 0, 0, 59, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	60, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	0, 0, 0, 0, 0, 0, 0, 61, 
	0, 0, 0, 0, 0, 0, 0, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 0, 0, 0, 0, 0, 0, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 0, 0, 0, 62, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 63, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 63, 6, 6, 6, 6, 6, 
	6, 6, 64, 6, 65, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 65, 8, 66, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 8, 8, 8, 
	8, 8, 8, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 8, 
	8, 8, 67, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 65, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 65, 12, 
	66, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	12, 12, 12, 12, 12, 12, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 12, 12, 12, 68, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 70, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 71, 69, 72, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 72, 17, 17, 
	17, 17, 17, 17, 17, 17, 73, 17, 
	17, 74, 17, 75, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 75, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 76, 6, 
	76, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 76, 
	8, 66, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 8, 8, 8, 8, 8, 8, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 8, 8, 8, 67, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 77, 0, 0, 0, 0, 0, 
	0, 0, 78, 79, 0, 0, 80, 0, 
	0, 0, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 82, 0, 0, 0, 
	0, 0, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 0, 0, 
	0, 81, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 75, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 75, 6, 6, 
	6, 6, 6, 6, 6, 6, 83, 6, 
	6, 76, 6, 71, 69, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 79, 0, 0, 
	80, 0, 0, 0, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 84, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 0, 0, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 0, 0, 0, 85, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 86, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 87, 0, 0, 0, 0, 
	0, 0, 0, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 0, 0, 0, 
	0, 0, 0, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 0, 
	0, 0, 88, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 89, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 89, 6, 
	6, 6, 6, 6, 6, 6, 90, 6, 
	91, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 91, 
	8, 92, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 8, 8, 8, 8, 8, 8, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 8, 8, 8, 93, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 91, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 91, 12, 92, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 12, 12, 12, 12, 
	12, 12, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 12, 12, 
	12, 94, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 96, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 95, 98, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 98, 17, 17, 17, 17, 17, 17, 
	17, 17, 99, 17, 17, 100, 17, 101, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 101, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 102, 6, 102, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 102, 8, 92, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 8, 8, 8, 
	8, 8, 8, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 8, 
	8, 8, 93, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 103, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 103, 0, 
	0, 0, 0, 0, 0, 0, 104, 105, 
	0, 0, 106, 0, 0, 0, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	108, 0, 0, 0, 0, 0, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 0, 0, 0, 107, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 101, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 101, 6, 6, 6, 6, 6, 6, 
	6, 6, 109, 6, 6, 102, 6, 110, 
	6, 97, 95, 103, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 103, 0, 0, 0, 0, 0, 
	0, 0, 0, 105, 0, 0, 106, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 113, 6, 114, 6, 6, 
	115, 117, 116, 6, 6, 6, 6, 6, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 17, 6, 7, 
	16, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 62, 13, 
	14, 15, 15, 62, 17, 0, 19, 63, 
	19, 0, 21, 21, 22, 23, 64, 25, 
	26, 30, 29, 26, 27, 28, 65, 65, 
	29, 30, 25, 32, 33, 34, 32, 33, 
	34, 35, 36, 40, 43, 36, 37, 42, 
	38, 66, 39, 38, 39, 38, 41, 66, 
	39, 40, 35, 66, 43, 45, 46, 47, 
	45, 46, 47, 48, 49, 53, 57, 49, 
	50, 56, 51, 55, 52, 51, 52, 51, 
	54, 55, 52, 53, 48, 55, 67, 57, 
	68, 59, 60, 61, 61, 68
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	0, 19, 20, 21, 22, 23, 11, 24, 
	22, 25, 8, 13, 13, 13, 26, 0, 
	8, 11, 11, 13, 13, 13, 27, 28, 
	22, 22, 17, 29, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 30, 14, 0, 0, 15, 16, 31, 
	15, 5, 17, 32, 22, 2, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 33, 22, 
	34, 0, 0, 19, 20, 35
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	12, 1, 23, 23, 25, 25, 25, 25, 
	7, 10, 12, 12, 12, 1, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 12, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 0, 
	12, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 62;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 18;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 20;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 24;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 31;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 44;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 58;
class << self
	attr_accessor :bel_en_statement_observed_term
end
self.bel_en_statement_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 22 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 34 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 18 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 31
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 21 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 28 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 27 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 30 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 47, 
	47, 10, 10, 10, 10, 
	92, 92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 
	92, 10, 10, 92, 92, 
	9, 122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 
	122, 10, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 10, 10, 
	92, 92, 9, 122, 10, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 1, 1, 1, 
	1, 114, 75, 113, 1, 59, 1, 1, 
	114, 114, 59, 1, 1, 113, 113, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 1, 114, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	1, 114, 38, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 897, 899, 
	901, 903, 1018, 1094, 1208, 1210, 1270, 1272, 
	1274, 1389, 1504, 1564, 1566, 1568, 1682, 1796, 
	1872, 1987, 2020, 2135, 2250, 2310, 2347, 2384, 
	2499, 2614, 2651, 2653, 2768, 2844, 2959, 2992, 
	3107, 3222, 3282, 3319, 3356, 3471, 3586, 3623, 
	3625, 3627, 3742, 3781, 3783, 3785, 3787, 3788, 
	3789, 3790, 3791, 3792, 3793
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 29, 
	30, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 29, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 31, 6, 32, 
	6, 6, 33, 35, 34, 16, 14, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	0, 0, 26, 0, 0, 0, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	0, 0, 0, 0, 0, 0, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 0, 0, 0, 36, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 37, 37, 37, 37, 
	37, 37, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 37, 37, 
	37, 38, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 39, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 37, 37, 
	37, 37, 37, 37, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	37, 37, 37, 40, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	42, 41, 44, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 45, 43, 46, 41, 
	45, 43, 47, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 47, 8, 48, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 8, 8, 8, 8, 8, 
	8, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 8, 8, 8, 
	49, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 47, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 47, 12, 48, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 12, 12, 
	12, 12, 12, 12, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	12, 12, 12, 50, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 53, 51, 54, 17, 53, 51, 
	55, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	0, 0, 0, 0, 0, 0, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 0, 0, 0, 56, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 55, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 58, 0, 0, 0, 0, 0, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 0, 0, 0, 57, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 0, 0, 
	0, 0, 0, 0, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	0, 0, 0, 59, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	60, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	0, 0, 0, 0, 0, 0, 0, 61, 
	0, 0, 0, 0, 0, 0, 0, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 0, 0, 0, 0, 0, 0, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 0, 0, 0, 62, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 63, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 63, 6, 6, 6, 6, 6, 
	6, 6, 64, 6, 65, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 65, 8, 66, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 8, 8, 8, 
	8, 8, 8, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 8, 
	8, 8, 67, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 65, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 65, 12, 
	66, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	12, 12, 12, 12, 12, 12, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 12, 12, 12, 68, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 70, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 71, 69, 72, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 72, 17, 17, 
	17, 17, 17, 17, 17, 17, 73, 17, 
	17, 74, 17, 75, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 75, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 76, 6, 
	76, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 76, 
	8, 66, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 8, 8, 8, 8, 8, 8, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 8, 8, 8, 67, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 77, 0, 0, 0, 0, 0, 
	0, 0, 78, 79, 0, 0, 80, 0, 
	0, 0, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 82, 0, 0, 0, 
	0, 0, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 0, 0, 
	0, 81, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 75, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 75, 6, 6, 
	6, 6, 6, 6, 6, 6, 83, 6, 
	6, 76, 6, 71, 69, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 79, 0, 0, 
	80, 0, 0, 0, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 84, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 0, 0, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 0, 0, 0, 85, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 86, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 87, 0, 0, 0, 0, 
	0, 0, 0, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 0, 0, 0, 
	0, 0, 0, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 0, 
	0, 0, 88, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 89, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 89, 6, 
	6, 6, 6, 6, 6, 6, 90, 6, 
	91, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 91, 
	8, 92, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 8, 8, 8, 8, 8, 8, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 8, 8, 8, 93, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 91, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 91, 12, 92, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 12, 12, 12, 12, 
	12, 12, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 12, 12, 
	12, 94, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 96, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 95, 98, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 98, 17, 17, 17, 17, 17, 17, 
	17, 17, 99, 17, 17, 100, 17, 101, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 101, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 102, 6, 102, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 102, 8, 92, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 8, 8, 8, 
	8, 8, 8, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 8, 
	8, 8, 93, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 103, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 103, 0, 
	0, 0, 0, 0, 0, 0, 104, 105, 
	0, 0, 106, 0, 0, 0, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	108, 0, 0, 0, 0, 0, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 0, 0, 0, 107, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 101, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 101, 6, 6, 6, 6, 6, 6, 
	6, 6, 109, 6, 6, 102, 6, 110, 
	6, 97, 95, 103, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 103, 0, 0, 0, 0, 0, 
	0, 0, 0, 105, 0, 0, 106, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 113, 6, 114, 6, 6, 
	115, 117, 116, 6, 6, 6, 6, 6, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 17, 6, 7, 
	16, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 62, 13, 
	14, 15, 15, 62, 17, 0, 19, 63, 
	19, 0, 21, 21, 22, 23, 64, 25, 
	26, 30, 29, 26, 27, 28, 65, 65, 
	29, 30, 25, 32, 33, 34, 32, 33, 
	34, 35, 36, 40, 43, 36, 37, 42, 
	38, 66, 39, 38, 39, 38, 41, 66, 
	39, 40, 35, 66, 43, 45, 46, 47, 
	45, 46, 47, 48, 49, 53, 57, 49, 
	50, 56, 51, 55, 52, 51, 52, 51, 
	54, 55, 52, 53, 48, 55, 67, 57, 
	68, 59, 60, 61, 61, 68
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	0, 19, 20, 21, 22, 23, 11, 24, 
	22, 25, 8, 13, 13, 13, 26, 0, 
	8, 11, 11, 13, 13, 13, 27, 28, 
	22, 22, 17, 29, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 30, 14, 0, 0, 15, 16, 31, 
	15, 5, 17, 32, 22, 2, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 33, 22, 
	34, 0, 0, 19, 20, 35
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	12, 1, 23, 23, 25, 25, 25, 25, 
	7, 10, 12, 12, 12, 1, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 12, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 0, 
	12, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 62;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 18;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 20;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 24;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 31;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 44;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 58;
class << self
	attr_accessor :bel_en_statement_observed_term
end
self.bel_en_statement_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 22 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 34 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 18 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 31
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 21 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 28 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 27 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 30 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 47, 
	47, 10, 10, 10, 10, 
	92, 92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 
	92, 10, 10, 92, 92, 
	9, 122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 
	122, 10, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 10, 10, 
	92, 92, 9, 122, 10, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 1, 1, 1, 
	1, 114, 75, 113, 1, 59, 1, 1, 
	114, 114, 59, 1, 1, 113, 113, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 1, 114, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	1, 114, 38, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 897, 899, 
	901, 903, 1018, 1094, 1208, 1210, 1270, 1272, 
	1274, 1389, 1504, 1564, 1566, 1568, 1682, 1796, 
	1872, 1987, 2020, 2135, 2250, 2310, 2347, 2384, 
	2499, 2614, 2651, 2653, 2768, 2844, 2959, 2992, 
	3107, 3222, 3282, 3319, 3356, 3471, 3586, 3623, 
	3625, 3627, 3742, 3781, 3783, 3785, 3787, 3788, 
	3789, 3790, 3791, 3792, 3793
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 29, 
	30, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 29, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 31, 6, 32, 
	6, 6, 33, 35, 34, 16, 14, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	0, 0, 26, 0, 0, 0, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	0, 0, 0, 0, 0, 0, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 0, 0, 0, 36, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 37, 37, 37, 37, 
	37, 37, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 37, 37, 
	37, 38, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 39, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 37, 37, 
	37, 37, 37, 37, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	37, 37, 37, 40, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	42, 41, 44, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 45, 43, 46, 41, 
	45, 43, 47, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 47, 8, 48, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 8, 8, 8, 8, 8, 
	8, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 8, 8, 8, 
	49, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 47, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 47, 12, 48, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 12, 12, 
	12, 12, 12, 12, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	12, 12, 12, 50, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 53, 51, 54, 17, 53, 51, 
	55, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	0, 0, 0, 0, 0, 0, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 0, 0, 0, 56, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 55, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 58, 0, 0, 0, 0, 0, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 0, 0, 0, 57, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 0, 0, 
	0, 0, 0, 0, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	0, 0, 0, 59, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	60, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	0, 0, 0, 0, 0, 0, 0, 61, 
	0, 0, 0, 0, 0, 0, 0, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 0, 0, 0, 0, 0, 0, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 0, 0, 0, 62, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 63, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 63, 6, 6, 6, 6, 6, 
	6, 6, 64, 6, 65, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 65, 8, 66, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 8, 8, 8, 
	8, 8, 8, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 8, 
	8, 8, 67, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 65, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 65, 12, 
	66, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	12, 12, 12, 12, 12, 12, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 12, 12, 12, 68, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 70, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 71, 69, 72, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 72, 17, 17, 
	17, 17, 17, 17, 17, 17, 73, 17, 
	17, 74, 17, 75, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 75, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 76, 6, 
	76, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 76, 
	8, 66, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 8, 8, 8, 8, 8, 8, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 8, 8, 8, 67, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 77, 0, 0, 0, 0, 0, 
	0, 0, 78, 79, 0, 0, 80, 0, 
	0, 0, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 82, 0, 0, 0, 
	0, 0, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 0, 0, 
	0, 81, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 75, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 75, 6, 6, 
	6, 6, 6, 6, 6, 6, 83, 6, 
	6, 76, 6, 71, 69, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 79, 0, 0, 
	80, 0, 0, 0, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 84, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 0, 0, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 0, 0, 0, 85, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 86, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 87, 0, 0, 0, 0, 
	0, 0, 0, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 0, 0, 0, 
	0, 0, 0, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 0, 
	0, 0, 88, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 89, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 89, 6, 
	6, 6, 6, 6, 6, 6, 90, 6, 
	91, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 91, 
	8, 92, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 8, 8, 8, 8, 8, 8, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 8, 8, 8, 93, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 91, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 91, 12, 92, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 12, 12, 12, 12, 
	12, 12, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 12, 12, 
	12, 94, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 96, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 95, 98, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 98, 17, 17, 17, 17, 17, 17, 
	17, 17, 99, 17, 17, 100, 17, 101, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 101, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 102, 6, 102, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 102, 8, 92, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 8, 8, 8, 
	8, 8, 8, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 8, 
	8, 8, 93, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 103, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 103, 0, 
	0, 0, 0, 0, 0, 0, 104, 105, 
	0, 0, 106, 0, 0, 0, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	108, 0, 0, 0, 0, 0, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 0, 0, 0, 107, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 101, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 101, 6, 6, 6, 6, 6, 6, 
	6, 6, 109, 6, 6, 102, 6, 110, 
	6, 97, 95, 103, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 103, 0, 0, 0, 0, 0, 
	0, 0, 0, 105, 0, 0, 106, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 113, 6, 114, 6, 6, 
	115, 117, 116, 6, 6, 6, 6, 6, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 17, 6, 7, 
	16, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 62, 13, 
	14, 15, 15, 62, 17, 0, 19, 63, 
	19, 0, 21, 21, 22, 23, 64, 25, 
	26, 30, 29, 26, 27, 28, 65, 65, 
	29, 30, 25, 32, 33, 34, 32, 33, 
	34, 35, 36, 40, 43, 36, 37, 42, 
	38, 66, 39, 38, 39, 38, 41, 66, 
	39, 40, 35, 66, 43, 45, 46, 47, 
	45, 46, 47, 48, 49, 53, 57, 49, 
	50, 56, 51, 55, 52, 51, 52, 51, 
	54, 55, 52, 53, 48, 55, 67, 57, 
	68, 59, 60, 61, 61, 68
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	0, 19, 20, 21, 22, 23, 11, 24, 
	22, 25, 8, 13, 13, 13, 26, 0, 
	8, 11, 11, 13, 13, 13, 27, 28, 
	22, 22, 17, 29, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 30, 14, 0, 0, 15, 16, 31, 
	15, 5, 17, 32, 22, 2, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 33, 22, 
	34, 0, 0, 19, 20, 35
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	12, 1, 23, 23, 25, 25, 25, 25, 
	7, 10, 12, 12, 12, 1, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 12, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 0, 
	12, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 62;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 18;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 20;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 24;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 31;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 44;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 58;
class << self
	attr_accessor :bel_en_statement_observed_term
end
self.bel_en_statement_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 22 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 34 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 18 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 31
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 21 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 28 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 27 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 30 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 47, 
	47, 10, 10, 10, 10, 
	92, 92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 
	92, 10, 10, 92, 92, 
	9, 122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 
	122, 10, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 10, 10, 
	92, 92, 9, 122, 10, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 1, 1, 1, 
	1, 114, 75, 113, 1, 59, 1, 1, 
	114, 114, 59, 1, 1, 113, 113, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 1, 114, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	1, 114, 38, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 897, 899, 
	901, 903, 1018, 1094, 1208, 1210, 1270, 1272, 
	1274, 1389, 1504, 1564, 1566, 1568, 1682, 1796, 
	1872, 1987, 2020, 2135, 2250, 2310, 2347, 2384, 
	2499, 2614, 2651, 2653, 2768, 2844, 2959, 2992, 
	3107, 3222, 3282, 3319, 3356, 3471, 3586, 3623, 
	3625, 3627, 3742, 3781, 3783, 3785, 3787, 3788, 
	3789, 3790, 3791, 3792, 3793
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 29, 
	30, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 29, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 31, 6, 32, 
	6, 6, 33, 35, 34, 16, 14, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	0, 0, 26, 0, 0, 0, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	0, 0, 0, 0, 0, 0, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 0, 0, 0, 36, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 37, 37, 37, 37, 
	37, 37, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 37, 37, 
	37, 38, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 39, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 37, 37, 
	37, 37, 37, 37, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	37, 37, 37, 40, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	42, 41, 44, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 45, 43, 46, 41, 
	45, 43, 47, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 47, 8, 48, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 8, 8, 8, 8, 8, 
	8, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 8, 8, 8, 
	49, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 47, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 47, 12, 48, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 12, 12, 
	12, 12, 12, 12, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	12, 12, 12, 50, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 53, 51, 54, 17, 53, 51, 
	55, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	0, 0, 0, 0, 0, 0, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 0, 0, 0, 56, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 55, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 58, 0, 0, 0, 0, 0, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 0, 0, 0, 57, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 0, 0, 
	0, 0, 0, 0, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	0, 0, 0, 59, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	60, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	0, 0, 0, 0, 0, 0, 0, 61, 
	0, 0, 0, 0, 0, 0, 0, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 0, 0, 0, 0, 0, 0, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 0, 0, 0, 62, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 63, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 63, 6, 6, 6, 6, 6, 
	6, 6, 64, 6, 65, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 65, 8, 66, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 8, 8, 8, 
	8, 8, 8, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 8, 
	8, 8, 67, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 65, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 65, 12, 
	66, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	12, 12, 12, 12, 12, 12, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 12, 12, 12, 68, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 70, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 71, 69, 72, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 72, 17, 17, 
	17, 17, 17, 17, 17, 17, 73, 17, 
	17, 74, 17, 75, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 75, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 76, 6, 
	76, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 76, 
	8, 66, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 8, 8, 8, 8, 8, 8, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 8, 8, 8, 67, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 77, 0, 0, 0, 0, 0, 
	0, 0, 78, 79, 0, 0, 80, 0, 
	0, 0, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 82, 0, 0, 0, 
	0, 0, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 0, 0, 
	0, 81, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 75, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 75, 6, 6, 
	6, 6, 6, 6, 6, 6, 83, 6, 
	6, 76, 6, 71, 69, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 79, 0, 0, 
	80, 0, 0, 0, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 84, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 0, 0, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 0, 0, 0, 85, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 86, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 87, 0, 0, 0, 0, 
	0, 0, 0, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 0, 0, 0, 
	0, 0, 0, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 0, 
	0, 0, 88, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 89, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 89, 6, 
	6, 6, 6, 6, 6, 6, 90, 6, 
	91, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 91, 
	8, 92, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 8, 8, 8, 8, 8, 8, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 8, 8, 8, 93, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 91, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 91, 12, 92, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 12, 12, 12, 12, 
	12, 12, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 12, 12, 
	12, 94, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 96, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 95, 98, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 98, 17, 17, 17, 17, 17, 17, 
	17, 17, 99, 17, 17, 100, 17, 101, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 101, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 102, 6, 102, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 102, 8, 92, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 8, 8, 8, 
	8, 8, 8, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 8, 
	8, 8, 93, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 103, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 103, 0, 
	0, 0, 0, 0, 0, 0, 104, 105, 
	0, 0, 106, 0, 0, 0, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	108, 0, 0, 0, 0, 0, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 0, 0, 0, 107, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 101, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 101, 6, 6, 6, 6, 6, 6, 
	6, 6, 109, 6, 6, 102, 6, 110, 
	6, 97, 95, 103, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 103, 0, 0, 0, 0, 0, 
	0, 0, 0, 105, 0, 0, 106, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 113, 6, 114, 6, 6, 
	115, 117, 116, 6, 6, 6, 6, 6, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 17, 6, 7, 
	16, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 62, 13, 
	14, 15, 15, 62, 17, 0, 19, 63, 
	19, 0, 21, 21, 22, 23, 64, 25, 
	26, 30, 29, 26, 27, 28, 65, 65, 
	29, 30, 25, 32, 33, 34, 32, 33, 
	34, 35, 36, 40, 43, 36, 37, 42, 
	38, 66, 39, 38, 39, 38, 41, 66, 
	39, 40, 35, 66, 43, 45, 46, 47, 
	45, 46, 47, 48, 49, 53, 57, 49, 
	50, 56, 51, 55, 52, 51, 52, 51, 
	54, 55, 52, 53, 48, 55, 67, 57, 
	68, 59, 60, 61, 61, 68
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	0, 19, 20, 21, 22, 23, 11, 24, 
	22, 25, 8, 13, 13, 13, 26, 0, 
	8, 11, 11, 13, 13, 13, 27, 28, 
	22, 22, 17, 29, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 30, 14, 0, 0, 15, 16, 31, 
	15, 5, 17, 32, 22, 2, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 33, 22, 
	34, 0, 0, 19, 20, 35
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	12, 1, 23, 23, 25, 25, 25, 25, 
	7, 10, 12, 12, 12, 1, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 12, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 0, 
	12, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 62;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 18;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 20;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 24;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 31;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 44;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 58;
class << self
	attr_accessor :bel_en_statement_observed_term
end
self.bel_en_statement_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 22 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 34 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 18 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 31
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 21 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 28 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 27 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 30 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require          'ast'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BEL
  module Parsers
    module Expression
      module StatementObservedTerm

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include ::AST::Sexp
          include BEL::Parsers::Buffer

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 47, 
	47, 10, 10, 10, 10, 
	92, 92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 
	92, 10, 10, 92, 92, 
	9, 122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 
	122, 10, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 10, 10, 
	92, 92, 9, 122, 10, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 1, 1, 1, 
	1, 114, 75, 113, 1, 59, 1, 1, 
	114, 114, 59, 1, 1, 113, 113, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 1, 114, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	1, 114, 38, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 897, 899, 
	901, 903, 1018, 1094, 1208, 1210, 1270, 1272, 
	1274, 1389, 1504, 1564, 1566, 1568, 1682, 1796, 
	1872, 1987, 2020, 2135, 2250, 2310, 2347, 2384, 
	2499, 2614, 2651, 2653, 2768, 2844, 2959, 2992, 
	3107, 3222, 3282, 3319, 3356, 3471, 3586, 3623, 
	3625, 3627, 3742, 3781, 3783, 3785, 3787, 3788, 
	3789, 3790, 3791, 3792, 3793
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 29, 
	30, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 29, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 31, 6, 32, 
	6, 6, 33, 35, 34, 16, 14, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	0, 0, 26, 0, 0, 0, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	0, 0, 0, 0, 0, 0, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 0, 0, 0, 36, 0, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 0, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 37, 37, 37, 37, 
	37, 37, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 37, 37, 
	37, 38, 37, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 37, 39, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 37, 37, 
	37, 37, 37, 37, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	37, 37, 37, 40, 37, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 37, 
	42, 41, 44, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 45, 43, 46, 41, 
	45, 43, 47, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 47, 8, 48, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 8, 8, 8, 8, 8, 
	8, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 8, 8, 8, 
	49, 8, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 8, 47, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 47, 12, 48, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 12, 12, 
	12, 12, 12, 12, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	12, 12, 12, 50, 12, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 12, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 53, 51, 54, 17, 53, 51, 
	55, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	0, 0, 0, 0, 0, 0, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 0, 0, 0, 56, 0, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 0, 55, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 58, 0, 0, 0, 0, 0, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 0, 0, 0, 57, 
	0, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 0, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 0, 0, 
	0, 0, 0, 0, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	0, 0, 0, 59, 0, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 0, 
	60, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	0, 0, 0, 0, 0, 0, 0, 61, 
	0, 0, 0, 0, 0, 0, 0, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 0, 0, 0, 0, 0, 0, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 0, 0, 0, 62, 0, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 0, 63, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 63, 6, 6, 6, 6, 6, 
	6, 6, 64, 6, 65, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 65, 8, 66, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 8, 8, 8, 
	8, 8, 8, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 8, 
	8, 8, 67, 8, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 8, 65, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 65, 12, 
	66, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	12, 12, 12, 12, 12, 12, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 12, 12, 12, 68, 12, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 12, 70, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 71, 69, 72, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 72, 17, 17, 
	17, 17, 17, 17, 17, 17, 73, 17, 
	17, 74, 17, 75, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 75, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 76, 6, 
	76, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 76, 
	8, 66, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 8, 8, 8, 8, 8, 8, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 8, 8, 8, 67, 8, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 8, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 77, 0, 0, 0, 0, 0, 
	0, 0, 78, 79, 0, 0, 80, 0, 
	0, 0, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 82, 0, 0, 0, 
	0, 0, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 0, 0, 
	0, 81, 0, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 0, 75, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 75, 6, 6, 
	6, 6, 6, 6, 6, 6, 83, 6, 
	6, 76, 6, 71, 69, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 79, 0, 0, 
	80, 0, 0, 0, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 84, 0, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 0, 0, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 0, 0, 0, 85, 
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 86, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 87, 0, 0, 0, 0, 
	0, 0, 0, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 0, 0, 0, 
	0, 0, 0, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 0, 
	0, 0, 88, 0, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 0, 89, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 89, 6, 
	6, 6, 6, 6, 6, 6, 90, 6, 
	91, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 91, 
	8, 92, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 8, 8, 8, 8, 8, 8, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 8, 8, 8, 93, 8, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 8, 91, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 91, 12, 92, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 12, 12, 12, 12, 
	12, 12, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 12, 12, 
	12, 94, 12, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 12, 96, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 95, 98, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 98, 17, 17, 17, 17, 17, 17, 
	17, 17, 99, 17, 17, 100, 17, 101, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 101, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 102, 6, 102, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 102, 8, 92, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 8, 8, 8, 
	8, 8, 8, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 8, 
	8, 8, 93, 8, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 8, 103, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 103, 0, 
	0, 0, 0, 0, 0, 0, 104, 105, 
	0, 0, 106, 0, 0, 0, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	108, 0, 0, 0, 0, 0, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 0, 0, 0, 107, 0, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 0, 101, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 101, 6, 6, 6, 6, 6, 6, 
	6, 6, 109, 6, 6, 102, 6, 110, 
	6, 97, 95, 103, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 103, 0, 0, 0, 0, 0, 
	0, 0, 0, 105, 0, 0, 106, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 113, 6, 114, 6, 6, 
	115, 117, 116, 6, 6, 6, 6, 6, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 17, 6, 7, 
	16, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 62, 13, 
	14, 15, 15, 62, 17, 0, 19, 63, 
	19, 0, 21, 21, 22, 23, 64, 25, 
	26, 30, 29, 26, 27, 28, 65, 65, 
	29, 30, 25, 32, 33, 34, 32, 33, 
	34, 35, 36, 40, 43, 36, 37, 42, 
	38, 66, 39, 38, 39, 38, 41, 66, 
	39, 40, 35, 66, 43, 45, 46, 47, 
	45, 46, 47, 48, 49, 53, 57, 49, 
	50, 56, 51, 55, 52, 51, 52, 51, 
	54, 55, 52, 53, 48, 55, 67, 57, 
	68, 59, 60, 61, 61, 68
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	0, 19, 20, 21, 22, 23, 11, 24, 
	22, 25, 8, 13, 13, 13, 26, 0, 
	8, 11, 11, 13, 13, 13, 27, 28, 
	22, 22, 17, 29, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 30, 14, 0, 0, 15, 16, 31, 
	15, 5, 17, 32, 22, 2, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 33, 22, 
	34, 0, 0, 19, 20, 35
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	12, 1, 23, 23, 25, 25, 25, 25, 
	7, 10, 12, 12, 12, 1, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 12, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 0, 
	12, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 62;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 18;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 20;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 24;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 31;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 44;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 58;
class << self
	attr_accessor :bel_en_statement_observed_term
end
self.bel_en_statement_observed_term = 1;


      # end: ragel        
          end

          def each
            @buffers = {}
            stack    = []
            data     = @content.unpack('C*')
            p        = 0
            pe       = data.length
            eof      = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 22 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 34 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 18 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 24 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 31
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 21 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:observed_term,
            s(:statement,
              s(:subject, @buffers[:term_stack][-1]),
              s(:relationship, nil),
              s(:object, nil),
              @buffers[:comment]))
  		end
	when 28 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 27 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 30 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 23 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 25 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end

          private

          def term_to_ast(term, ast=s(:term))
            fx, rest = *term
            ast = ast << s(:function, fx)
            rest.each do |arg|
              if arg.is_a?(String)
                ast = ast << s(:argument, s(:prefix, nil), s(:value, arg))
              elsif arg.first.is_a?(Symbol)
                ast = ast << s(:argument, term_to_ast(arg))
              else
                if arg.size == 1
                  ast = ast << s(:argument, s(:prefix, nil), s(:value, arg[0]))
                else
                  ast = ast << s(:argument, s(:prefix, arg[0]), s(:value, arg[1]))
                end
              end
            end

            ast
          end

          def statement_to_ast(statement, ast=s(:term))
            fx, rest = *term
            ast = ast << s(:function, fx)
            rest.each do |arg|
              if arg.is_a?(String)
                ast = ast << s(:argument, s(:prefix, nil), s(:value, arg))
              elsif arg.first.is_a?(Symbol)
                ast = ast << s(:argument, term_to_ast(arg))
              else
                if arg.size == 1
                  ast = ast << s(:argument, s(:prefix, nil), s(:value, arg[0]))
                else
                  ast = ast << s(:argument, s(:prefix, arg[0]), s(:value, arg[1]))
                end
              end
            end

            ast
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BEL::Parsers::Expression::StatementObservedTerm.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
