
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 30, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 30, 6, 
	31, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 6, 33, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 33, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 6, 35, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 35, 6, 6, 
	6, 6, 6, 6, 6, 36, 6, 37, 
	6, 37, 38, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	37, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 39, 
	6, 40, 6, 6, 41, 43, 42, 16, 
	14, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 0, 0, 26, 0, 0, 0, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 0, 0, 0, 0, 0, 0, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 0, 0, 0, 44, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 45, 45, 
	45, 45, 45, 45, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	45, 45, 45, 46, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	47, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	45, 45, 45, 45, 45, 45, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 45, 45, 45, 48, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 50, 49, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 53, 51, 
	54, 49, 53, 51, 55, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 55, 8, 56, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 8, 8, 8, 
	8, 8, 8, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 8, 
	8, 8, 57, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 55, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 55, 12, 
	56, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	12, 12, 12, 12, 12, 12, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 12, 12, 12, 58, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 60, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 61, 59, 62, 17, 
	61, 59, 63, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 0, 0, 0, 0, 0, 0, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 0, 0, 0, 64, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 63, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 66, 0, 0, 0, 
	0, 0, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 0, 0, 
	0, 65, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	0, 0, 0, 0, 0, 0, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 0, 0, 0, 67, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 68, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 68, 0, 0, 0, 0, 0, 0, 
	0, 69, 0, 0, 0, 0, 0, 0, 
	0, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 0, 0, 0, 0, 0, 
	0, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 0, 0, 0, 
	70, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 71, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 71, 6, 6, 6, 
	6, 6, 6, 6, 72, 6, 73, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 73, 8, 74, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 8, 
	8, 8, 8, 8, 8, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 8, 8, 8, 75, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 73, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	73, 12, 74, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 12, 12, 12, 12, 12, 12, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 12, 12, 12, 76, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 78, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 79, 77, 
	80, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 80, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	81, 17, 17, 82, 17, 83, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 83, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	84, 6, 84, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 84, 8, 74, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 8, 8, 8, 8, 8, 
	8, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 8, 8, 8, 
	75, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 85, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 85, 0, 0, 0, 
	0, 0, 0, 0, 86, 87, 0, 0, 
	88, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 90, 0, 
	0, 0, 0, 0, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	0, 0, 0, 89, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	83, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 83, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	91, 6, 6, 84, 6, 79, 77, 85, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 85, 0, 
	0, 0, 0, 0, 0, 0, 0, 87, 
	0, 0, 88, 0, 0, 0, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	0, 0, 0, 0, 0, 0, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 0, 0, 0, 92, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 0, 0, 0, 0, 
	0, 0, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 0, 0, 
	0, 93, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 94, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 94, 0, 0, 
	0, 0, 0, 0, 0, 95, 0, 0, 
	0, 0, 0, 0, 0, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 0, 
	0, 0, 0, 0, 0, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 0, 0, 0, 96, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 97, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	97, 6, 6, 6, 6, 6, 6, 6, 
	98, 6, 99, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 99, 8, 100, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 8, 8, 8, 8, 8, 
	8, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 8, 8, 8, 
	101, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 99, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 99, 12, 100, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 12, 12, 
	12, 12, 12, 12, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	12, 12, 12, 102, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	104, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 105, 103, 106, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 106, 17, 17, 17, 17, 
	17, 17, 17, 17, 107, 17, 17, 108, 
	17, 109, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	109, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 110, 6, 110, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 110, 8, 100, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 8, 
	8, 8, 8, 8, 8, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 8, 8, 8, 101, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 111, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	111, 0, 0, 0, 0, 0, 0, 0, 
	112, 113, 0, 0, 114, 0, 0, 0, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 116, 0, 0, 0, 0, 0, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 0, 0, 0, 115, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 109, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 109, 6, 6, 6, 6, 
	6, 6, 6, 6, 117, 6, 6, 110, 
	6, 118, 6, 105, 103, 111, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 111, 0, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	114, 0, 0, 0, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 0, 0, 
	0, 0, 0, 0, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	0, 0, 0, 119, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 6, 121, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 6, 123, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 124, 6, 125, 6, 6, 126, 
	128, 127, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 0, 0, 0, 0, 
	0, 0, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 0, 0, 
	0, 129, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 130, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 130, 0, 0, 
	0, 0, 0, 0, 0, 131, 0, 0, 
	0, 0, 0, 0, 0, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 0, 
	0, 0, 0, 0, 0, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 0, 0, 0, 132, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 133, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	133, 6, 6, 6, 6, 6, 6, 6, 
	134, 6, 135, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 135, 8, 136, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 8, 8, 8, 8, 8, 
	8, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 8, 8, 8, 
	137, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 135, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 135, 12, 136, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 12, 12, 
	12, 12, 12, 12, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	12, 12, 12, 138, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	140, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 141, 139, 142, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 142, 17, 17, 17, 17, 
	17, 17, 17, 17, 143, 17, 17, 144, 
	17, 145, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	145, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 146, 6, 146, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 146, 8, 136, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 8, 
	8, 8, 8, 8, 8, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 8, 8, 8, 137, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 147, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	147, 0, 0, 0, 0, 0, 0, 0, 
	148, 149, 0, 0, 150, 0, 0, 0, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 152, 0, 0, 0, 0, 0, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 0, 0, 0, 151, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 145, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 145, 6, 6, 6, 6, 
	6, 6, 6, 6, 153, 6, 6, 146, 
	6, 154, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	154, 6, 155, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 155, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	6, 157, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	157, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 6, 
	159, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 159, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 0, 0, 0, 0, 0, 0, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 0, 0, 0, 160, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 161, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 161, 0, 0, 0, 0, 0, 
	0, 0, 162, 0, 0, 0, 0, 0, 
	0, 0, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 0, 0, 0, 0, 
	0, 0, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 0, 0, 
	0, 163, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 164, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 164, 6, 6, 
	6, 6, 6, 6, 6, 165, 6, 166, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 166, 8, 
	167, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	8, 8, 8, 8, 8, 8, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 8, 8, 8, 168, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 166, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 166, 12, 167, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 12, 12, 12, 12, 12, 
	12, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 12, 12, 12, 
	169, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 171, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 172, 
	170, 173, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	173, 17, 17, 17, 17, 17, 17, 17, 
	17, 174, 17, 17, 175, 17, 176, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 176, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 177, 6, 177, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 177, 8, 167, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 8, 8, 8, 8, 
	8, 8, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 8, 8, 
	8, 168, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 179, 180, 0, 
	0, 181, 0, 0, 0, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 183, 
	0, 0, 0, 0, 0, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 0, 0, 0, 182, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 176, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	176, 6, 6, 6, 6, 6, 6, 6, 
	6, 184, 6, 6, 177, 6, 185, 186, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 185, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 187, 6, 188, 189, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 188, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 190, 6, 191, 6, 
	6, 192, 194, 193, 172, 170, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 0, 180, 0, 
	0, 181, 0, 0, 0, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 0, 
	0, 0, 0, 0, 0, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 0, 0, 0, 195, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 141, 139, 147, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 147, 0, 0, 0, 0, 0, 
	0, 0, 0, 149, 0, 0, 150, 0, 
	0, 0, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 0, 0, 0, 0, 
	0, 0, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 0, 0, 
	0, 196, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	0, 0, 0, 0, 0, 0, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 0, 0, 0, 197, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 198, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 198, 0, 0, 0, 0, 0, 0, 
	0, 199, 0, 0, 0, 0, 0, 0, 
	0, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 0, 0, 0, 0, 0, 
	0, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 0, 0, 0, 
	200, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 201, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 201, 6, 6, 6, 
	6, 6, 6, 6, 202, 6, 203, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 203, 8, 204, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 8, 
	8, 8, 8, 8, 8, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 8, 8, 8, 205, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 203, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	203, 12, 204, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 12, 12, 12, 12, 12, 12, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 12, 12, 12, 206, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 208, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 209, 207, 
	210, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 210, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	211, 17, 17, 212, 17, 213, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 213, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	214, 6, 214, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 214, 8, 204, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 8, 8, 8, 8, 8, 
	8, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 8, 8, 8, 
	205, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 215, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 215, 0, 0, 0, 
	0, 0, 0, 0, 216, 217, 0, 0, 
	218, 0, 0, 0, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 220, 0, 
	0, 0, 0, 0, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	0, 0, 0, 219, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	213, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 213, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	221, 6, 6, 214, 6, 222, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 222, 6, 223, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 223, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 6, 225, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 225, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 6, 227, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 227, 0, 0, 0, 0, 
	0, 0, 0, 228, 0, 0, 0, 0, 
	0, 0, 0, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 0, 0, 0, 
	0, 0, 0, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 0, 
	0, 0, 229, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 230, 
	6, 231, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	231, 0, 0, 0, 0, 0, 0, 0, 
	232, 0, 0, 0, 0, 0, 0, 0, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 0, 0, 0, 0, 0, 0, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 0, 0, 0, 233, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 234, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 234, 6, 6, 6, 6, 
	6, 6, 6, 235, 6, 236, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 236, 8, 237, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 8, 8, 
	8, 8, 8, 8, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	8, 8, 8, 238, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	236, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 236, 
	12, 237, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 12, 12, 12, 239, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 241, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 242, 240, 243, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 243, 17, 
	17, 17, 17, 17, 17, 17, 17, 244, 
	17, 17, 245, 17, 246, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 246, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 247, 
	6, 247, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	247, 8, 237, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 8, 8, 8, 8, 8, 8, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 8, 8, 8, 238, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 248, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 248, 0, 0, 0, 0, 
	0, 0, 0, 249, 250, 0, 0, 251, 
	0, 0, 0, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 253, 0, 0, 
	0, 0, 0, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 0, 
	0, 0, 252, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 246, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 246, 6, 
	6, 6, 6, 6, 6, 6, 6, 254, 
	6, 6, 247, 6, 242, 240, 248, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 248, 0, 0, 
	0, 0, 0, 0, 0, 0, 250, 0, 
	0, 251, 0, 0, 0, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 0, 
	0, 0, 0, 0, 0, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 0, 0, 0, 255, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 209, 207, 215, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 215, 0, 0, 0, 0, 0, 
	0, 0, 0, 217, 0, 0, 218, 0, 
	0, 0, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 0, 0, 0, 0, 
	0, 0, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 0, 0, 
	0, 256, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 13, 13, 
	14, 15, 14, 15, 16, 17, 133, 18, 
	19, 20, 20, 133, 22, 0, 24, 134, 
	24, 0, 26, 26, 27, 28, 135, 30, 
	31, 35, 34, 31, 32, 33, 136, 136, 
	34, 35, 30, 37, 38, 39, 37, 38, 
	39, 40, 41, 45, 48, 41, 42, 47, 
	43, 137, 44, 43, 44, 43, 46, 137, 
	44, 45, 40, 137, 48, 50, 51, 52, 
	50, 51, 52, 53, 54, 58, 62, 54, 
	55, 61, 56, 60, 57, 56, 57, 56, 
	59, 60, 57, 58, 53, 60, 138, 62, 
	64, 139, 64, 140, 66, 67, 68, 68, 
	140, 70, 71, 72, 70, 71, 72, 73, 
	74, 78, 102, 74, 75, 101, 76, 80, 
	77, 76, 77, 76, 79, 80, 77, 78, 
	73, 80, 81, 81, 82, 83, 82, 83, 
	84, 85, 86, 84, 85, 86, 87, 88, 
	92, 100, 88, 89, 99, 90, 94, 91, 
	90, 91, 90, 93, 94, 91, 92, 87, 
	94, 95, 141, 96, 95, 141, 96, 97, 
	98, 98, 141, 100, 102, 104, 105, 106, 
	104, 105, 106, 107, 108, 112, 132, 108, 
	109, 131, 110, 114, 111, 110, 111, 110, 
	113, 114, 111, 112, 107, 114, 115, 115, 
	116, 117, 116, 117, 118, 119, 142, 120, 
	121, 119, 120, 121, 122, 123, 127, 130, 
	123, 124, 129, 125, 142, 126, 125, 126, 
	125, 128, 142, 126, 127, 122, 142, 130, 
	132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 28, 11, 29, 
	27, 30, 8, 13, 13, 13, 31, 0, 
	8, 11, 11, 13, 13, 13, 32, 33, 
	27, 27, 17, 34, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 35, 14, 0, 0, 15, 16, 36, 
	15, 5, 17, 37, 27, 38, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 39, 27, 
	19, 40, 21, 41, 0, 0, 24, 25, 
	42, 38, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 14, 14, 
	14, 0, 0, 15, 16, 15, 15, 5, 
	17, 0, 43, 0, 19, 44, 21, 0, 
	38, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 14, 14, 14, 
	0, 0, 15, 16, 15, 15, 5, 17, 
	0, 45, 46, 45, 0, 47, 0, 0, 
	24, 25, 48, 27, 27, 49, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 38, 50, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 14, 51, 14, 0, 0, 
	15, 16, 52, 15, 5, 17, 53, 27, 
	27
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 1, 28, 
	28, 30, 30, 30, 30, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 12, 
	1, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 12, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 12, 0, 7, 1, 0, 
	0, 0, 0, 1, 1, 0, 7, 10, 
	12, 12, 0, 7, 1, 0, 0, 0, 
	0, 0, 0, 12, 1, 12, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 0, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 12, 0, 7, 1, 
	0, 12, 1, 12, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_statement_simple
end
self.bel_en_statement_simple = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_statement_nested
end
self.bel_en_statement_nested = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 37 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 44 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 43 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 45 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 47 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 42 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 48 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 18 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 46 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 33 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 53 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 51 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ s(:statement) ]
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 49 then
		begin

    @buffers[:statement_stack] << s(:statement)
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 30, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 30, 6, 
	31, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 6, 33, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 33, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 6, 35, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 35, 6, 6, 
	6, 6, 6, 6, 6, 36, 6, 37, 
	6, 37, 38, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	37, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 39, 
	6, 40, 6, 6, 41, 43, 42, 16, 
	14, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 0, 0, 26, 0, 0, 0, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 0, 0, 0, 0, 0, 0, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 0, 0, 0, 44, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 45, 45, 
	45, 45, 45, 45, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	45, 45, 45, 46, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	47, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	45, 45, 45, 45, 45, 45, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 45, 45, 45, 48, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 50, 49, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 53, 51, 
	54, 49, 53, 51, 55, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 55, 8, 56, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 8, 8, 8, 
	8, 8, 8, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 8, 
	8, 8, 57, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 55, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 55, 12, 
	56, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	12, 12, 12, 12, 12, 12, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 12, 12, 12, 58, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 60, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 61, 59, 62, 17, 
	61, 59, 63, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 0, 0, 0, 0, 0, 0, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 0, 0, 0, 64, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 63, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 66, 0, 0, 0, 
	0, 0, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 0, 0, 
	0, 65, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	0, 0, 0, 0, 0, 0, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 0, 0, 0, 67, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 68, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 68, 0, 0, 0, 0, 0, 0, 
	0, 69, 0, 0, 0, 0, 0, 0, 
	0, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 0, 0, 0, 0, 0, 
	0, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 0, 0, 0, 
	70, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 71, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 71, 6, 6, 6, 
	6, 6, 6, 6, 72, 6, 73, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 73, 8, 74, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 8, 
	8, 8, 8, 8, 8, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 8, 8, 8, 75, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 73, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	73, 12, 74, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 12, 12, 12, 12, 12, 12, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 12, 12, 12, 76, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 78, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 79, 77, 
	80, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 80, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	81, 17, 17, 82, 17, 83, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 83, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	84, 6, 84, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 84, 8, 74, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 8, 8, 8, 8, 8, 
	8, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 8, 8, 8, 
	75, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 85, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 85, 0, 0, 0, 
	0, 0, 0, 0, 86, 87, 0, 0, 
	88, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 90, 0, 
	0, 0, 0, 0, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	0, 0, 0, 89, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	83, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 83, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	91, 6, 6, 84, 6, 79, 77, 85, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 85, 0, 
	0, 0, 0, 0, 0, 0, 0, 87, 
	0, 0, 88, 0, 0, 0, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	0, 0, 0, 0, 0, 0, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 0, 0, 0, 92, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 0, 0, 0, 0, 
	0, 0, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 0, 0, 
	0, 93, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 94, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 94, 0, 0, 
	0, 0, 0, 0, 0, 95, 0, 0, 
	0, 0, 0, 0, 0, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 0, 
	0, 0, 0, 0, 0, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 0, 0, 0, 96, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 97, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	97, 6, 6, 6, 6, 6, 6, 6, 
	98, 6, 99, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 99, 8, 100, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 8, 8, 8, 8, 8, 
	8, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 8, 8, 8, 
	101, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 99, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 99, 12, 100, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 12, 12, 
	12, 12, 12, 12, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	12, 12, 12, 102, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	104, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 105, 103, 106, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 106, 17, 17, 17, 17, 
	17, 17, 17, 17, 107, 17, 17, 108, 
	17, 109, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	109, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 110, 6, 110, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 110, 8, 100, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 8, 
	8, 8, 8, 8, 8, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 8, 8, 8, 101, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 111, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	111, 0, 0, 0, 0, 0, 0, 0, 
	112, 113, 0, 0, 114, 0, 0, 0, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 116, 0, 0, 0, 0, 0, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 0, 0, 0, 115, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 109, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 109, 6, 6, 6, 6, 
	6, 6, 6, 6, 117, 6, 6, 110, 
	6, 118, 6, 105, 103, 111, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 111, 0, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	114, 0, 0, 0, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 0, 0, 
	0, 0, 0, 0, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	0, 0, 0, 119, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 6, 121, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 6, 123, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 124, 6, 125, 6, 6, 126, 
	128, 127, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 0, 0, 0, 0, 
	0, 0, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 0, 0, 
	0, 129, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 130, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 130, 0, 0, 
	0, 0, 0, 0, 0, 131, 0, 0, 
	0, 0, 0, 0, 0, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 0, 
	0, 0, 0, 0, 0, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 0, 0, 0, 132, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 133, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	133, 6, 6, 6, 6, 6, 6, 6, 
	134, 6, 135, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 135, 8, 136, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 8, 8, 8, 8, 8, 
	8, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 8, 8, 8, 
	137, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 135, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 135, 12, 136, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 12, 12, 
	12, 12, 12, 12, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	12, 12, 12, 138, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	140, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 141, 139, 142, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 142, 17, 17, 17, 17, 
	17, 17, 17, 17, 143, 17, 17, 144, 
	17, 145, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	145, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 146, 6, 146, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 146, 8, 136, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 8, 
	8, 8, 8, 8, 8, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 8, 8, 8, 137, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 147, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	147, 0, 0, 0, 0, 0, 0, 0, 
	148, 149, 0, 0, 150, 0, 0, 0, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 152, 0, 0, 0, 0, 0, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 0, 0, 0, 151, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 145, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 145, 6, 6, 6, 6, 
	6, 6, 6, 6, 153, 6, 6, 146, 
	6, 154, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	154, 6, 155, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 155, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	6, 157, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	157, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 6, 
	159, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 159, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 0, 0, 0, 0, 0, 0, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 0, 0, 0, 160, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 161, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 161, 0, 0, 0, 0, 0, 
	0, 0, 162, 0, 0, 0, 0, 0, 
	0, 0, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 0, 0, 0, 0, 
	0, 0, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 0, 0, 
	0, 163, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 164, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 164, 6, 6, 
	6, 6, 6, 6, 6, 165, 6, 166, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 166, 8, 
	167, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	8, 8, 8, 8, 8, 8, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 8, 8, 8, 168, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 166, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 166, 12, 167, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 12, 12, 12, 12, 12, 
	12, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 12, 12, 12, 
	169, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 171, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 172, 
	170, 173, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	173, 17, 17, 17, 17, 17, 17, 17, 
	17, 174, 17, 17, 175, 17, 176, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 176, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 177, 6, 177, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 177, 8, 167, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 8, 8, 8, 8, 
	8, 8, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 8, 8, 
	8, 168, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 179, 180, 0, 
	0, 181, 0, 0, 0, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 183, 
	0, 0, 0, 0, 0, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 0, 0, 0, 182, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 176, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	176, 6, 6, 6, 6, 6, 6, 6, 
	6, 184, 6, 6, 177, 6, 185, 186, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 185, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 187, 6, 188, 189, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 188, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 190, 6, 191, 6, 
	6, 192, 194, 193, 172, 170, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 0, 180, 0, 
	0, 181, 0, 0, 0, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 0, 
	0, 0, 0, 0, 0, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 0, 0, 0, 195, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 141, 139, 147, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 147, 0, 0, 0, 0, 0, 
	0, 0, 0, 149, 0, 0, 150, 0, 
	0, 0, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 0, 0, 0, 0, 
	0, 0, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 0, 0, 
	0, 196, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	0, 0, 0, 0, 0, 0, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 0, 0, 0, 197, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 198, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 198, 0, 0, 0, 0, 0, 0, 
	0, 199, 0, 0, 0, 0, 0, 0, 
	0, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 0, 0, 0, 0, 0, 
	0, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 0, 0, 0, 
	200, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 201, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 201, 6, 6, 6, 
	6, 6, 6, 6, 202, 6, 203, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 203, 8, 204, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 8, 
	8, 8, 8, 8, 8, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 8, 8, 8, 205, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 203, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	203, 12, 204, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 12, 12, 12, 12, 12, 12, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 12, 12, 12, 206, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 208, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 209, 207, 
	210, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 210, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	211, 17, 17, 212, 17, 213, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 213, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	214, 6, 214, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 214, 8, 204, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 8, 8, 8, 8, 8, 
	8, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 8, 8, 8, 
	205, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 215, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 215, 0, 0, 0, 
	0, 0, 0, 0, 216, 217, 0, 0, 
	218, 0, 0, 0, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 220, 0, 
	0, 0, 0, 0, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	0, 0, 0, 219, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	213, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 213, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	221, 6, 6, 214, 6, 222, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 222, 6, 223, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 223, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 6, 225, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 225, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 6, 227, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 227, 0, 0, 0, 0, 
	0, 0, 0, 228, 0, 0, 0, 0, 
	0, 0, 0, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 0, 0, 0, 
	0, 0, 0, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 0, 
	0, 0, 229, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 230, 
	6, 231, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	231, 0, 0, 0, 0, 0, 0, 0, 
	232, 0, 0, 0, 0, 0, 0, 0, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 0, 0, 0, 0, 0, 0, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 0, 0, 0, 233, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 234, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 234, 6, 6, 6, 6, 
	6, 6, 6, 235, 6, 236, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 236, 8, 237, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 8, 8, 
	8, 8, 8, 8, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	8, 8, 8, 238, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	236, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 236, 
	12, 237, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 12, 12, 12, 239, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 241, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 242, 240, 243, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 243, 17, 
	17, 17, 17, 17, 17, 17, 17, 244, 
	17, 17, 245, 17, 246, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 246, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 247, 
	6, 247, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	247, 8, 237, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 8, 8, 8, 8, 8, 8, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 8, 8, 8, 238, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 248, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 248, 0, 0, 0, 0, 
	0, 0, 0, 249, 250, 0, 0, 251, 
	0, 0, 0, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 253, 0, 0, 
	0, 0, 0, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 0, 
	0, 0, 252, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 246, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 246, 6, 
	6, 6, 6, 6, 6, 6, 6, 254, 
	6, 6, 247, 6, 242, 240, 248, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 248, 0, 0, 
	0, 0, 0, 0, 0, 0, 250, 0, 
	0, 251, 0, 0, 0, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 0, 
	0, 0, 0, 0, 0, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 0, 0, 0, 255, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 209, 207, 215, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 215, 0, 0, 0, 0, 0, 
	0, 0, 0, 217, 0, 0, 218, 0, 
	0, 0, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 0, 0, 0, 0, 
	0, 0, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 0, 0, 
	0, 256, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 13, 13, 
	14, 15, 14, 15, 16, 17, 133, 18, 
	19, 20, 20, 133, 22, 0, 24, 134, 
	24, 0, 26, 26, 27, 28, 135, 30, 
	31, 35, 34, 31, 32, 33, 136, 136, 
	34, 35, 30, 37, 38, 39, 37, 38, 
	39, 40, 41, 45, 48, 41, 42, 47, 
	43, 137, 44, 43, 44, 43, 46, 137, 
	44, 45, 40, 137, 48, 50, 51, 52, 
	50, 51, 52, 53, 54, 58, 62, 54, 
	55, 61, 56, 60, 57, 56, 57, 56, 
	59, 60, 57, 58, 53, 60, 138, 62, 
	64, 139, 64, 140, 66, 67, 68, 68, 
	140, 70, 71, 72, 70, 71, 72, 73, 
	74, 78, 102, 74, 75, 101, 76, 80, 
	77, 76, 77, 76, 79, 80, 77, 78, 
	73, 80, 81, 81, 82, 83, 82, 83, 
	84, 85, 86, 84, 85, 86, 87, 88, 
	92, 100, 88, 89, 99, 90, 94, 91, 
	90, 91, 90, 93, 94, 91, 92, 87, 
	94, 95, 141, 96, 95, 141, 96, 97, 
	98, 98, 141, 100, 102, 104, 105, 106, 
	104, 105, 106, 107, 108, 112, 132, 108, 
	109, 131, 110, 114, 111, 110, 111, 110, 
	113, 114, 111, 112, 107, 114, 115, 115, 
	116, 117, 116, 117, 118, 119, 142, 120, 
	121, 119, 120, 121, 122, 123, 127, 130, 
	123, 124, 129, 125, 142, 126, 125, 126, 
	125, 128, 142, 126, 127, 122, 142, 130, 
	132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 28, 11, 29, 
	27, 30, 8, 13, 13, 13, 31, 0, 
	8, 11, 11, 13, 13, 13, 32, 33, 
	27, 27, 17, 34, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 35, 14, 0, 0, 15, 16, 36, 
	15, 5, 17, 37, 27, 38, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 39, 27, 
	19, 40, 21, 41, 0, 0, 24, 25, 
	42, 38, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 14, 14, 
	14, 0, 0, 15, 16, 15, 15, 5, 
	17, 0, 43, 0, 19, 44, 21, 0, 
	38, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 14, 14, 14, 
	0, 0, 15, 16, 15, 15, 5, 17, 
	0, 45, 46, 45, 0, 47, 0, 0, 
	24, 25, 48, 27, 27, 49, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 38, 50, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 14, 51, 14, 0, 0, 
	15, 16, 52, 15, 5, 17, 53, 27, 
	27
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 1, 28, 
	28, 30, 30, 30, 30, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 12, 
	1, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 12, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 12, 0, 7, 1, 0, 
	0, 0, 0, 1, 1, 0, 7, 10, 
	12, 12, 0, 7, 1, 0, 0, 0, 
	0, 0, 0, 12, 1, 12, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 0, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 12, 0, 7, 1, 
	0, 12, 1, 12, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_statement_simple
end
self.bel_en_statement_simple = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_statement_nested
end
self.bel_en_statement_nested = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 37 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 44 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 43 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 45 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 47 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 42 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 48 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 18 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 46 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 33 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 53 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 51 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ s(:statement) ]
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 49 then
		begin

    @buffers[:statement_stack] << s(:statement)
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 30, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 30, 6, 
	31, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 6, 33, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 33, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 6, 35, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 35, 6, 6, 
	6, 6, 6, 6, 6, 36, 6, 37, 
	6, 37, 38, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	37, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 39, 
	6, 40, 6, 6, 41, 43, 42, 16, 
	14, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 0, 0, 26, 0, 0, 0, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 0, 0, 0, 0, 0, 0, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 0, 0, 0, 44, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 45, 45, 
	45, 45, 45, 45, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	45, 45, 45, 46, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	47, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	45, 45, 45, 45, 45, 45, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 45, 45, 45, 48, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 50, 49, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 53, 51, 
	54, 49, 53, 51, 55, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 55, 8, 56, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 8, 8, 8, 
	8, 8, 8, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 8, 
	8, 8, 57, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 55, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 55, 12, 
	56, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	12, 12, 12, 12, 12, 12, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 12, 12, 12, 58, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 60, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 61, 59, 62, 17, 
	61, 59, 63, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 0, 0, 0, 0, 0, 0, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 0, 0, 0, 64, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 63, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 66, 0, 0, 0, 
	0, 0, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 0, 0, 
	0, 65, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	0, 0, 0, 0, 0, 0, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 0, 0, 0, 67, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 68, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 68, 0, 0, 0, 0, 0, 0, 
	0, 69, 0, 0, 0, 0, 0, 0, 
	0, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 0, 0, 0, 0, 0, 
	0, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 0, 0, 0, 
	70, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 71, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 71, 6, 6, 6, 
	6, 6, 6, 6, 72, 6, 73, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 73, 8, 74, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 8, 
	8, 8, 8, 8, 8, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 8, 8, 8, 75, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 73, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	73, 12, 74, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 12, 12, 12, 12, 12, 12, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 12, 12, 12, 76, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 78, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 79, 77, 
	80, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 80, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	81, 17, 17, 82, 17, 83, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 83, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	84, 6, 84, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 84, 8, 74, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 8, 8, 8, 8, 8, 
	8, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 8, 8, 8, 
	75, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 85, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 85, 0, 0, 0, 
	0, 0, 0, 0, 86, 87, 0, 0, 
	88, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 90, 0, 
	0, 0, 0, 0, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	0, 0, 0, 89, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	83, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 83, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	91, 6, 6, 84, 6, 79, 77, 85, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 85, 0, 
	0, 0, 0, 0, 0, 0, 0, 87, 
	0, 0, 88, 0, 0, 0, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	0, 0, 0, 0, 0, 0, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 0, 0, 0, 92, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 0, 0, 0, 0, 
	0, 0, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 0, 0, 
	0, 93, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 94, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 94, 0, 0, 
	0, 0, 0, 0, 0, 95, 0, 0, 
	0, 0, 0, 0, 0, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 0, 
	0, 0, 0, 0, 0, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 0, 0, 0, 96, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 97, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	97, 6, 6, 6, 6, 6, 6, 6, 
	98, 6, 99, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 99, 8, 100, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 8, 8, 8, 8, 8, 
	8, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 8, 8, 8, 
	101, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 99, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 99, 12, 100, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 12, 12, 
	12, 12, 12, 12, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	12, 12, 12, 102, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	104, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 105, 103, 106, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 106, 17, 17, 17, 17, 
	17, 17, 17, 17, 107, 17, 17, 108, 
	17, 109, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	109, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 110, 6, 110, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 110, 8, 100, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 8, 
	8, 8, 8, 8, 8, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 8, 8, 8, 101, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 111, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	111, 0, 0, 0, 0, 0, 0, 0, 
	112, 113, 0, 0, 114, 0, 0, 0, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 116, 0, 0, 0, 0, 0, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 0, 0, 0, 115, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 109, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 109, 6, 6, 6, 6, 
	6, 6, 6, 6, 117, 6, 6, 110, 
	6, 118, 6, 105, 103, 111, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 111, 0, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	114, 0, 0, 0, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 0, 0, 
	0, 0, 0, 0, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	0, 0, 0, 119, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 6, 121, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 6, 123, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 124, 6, 125, 6, 6, 126, 
	128, 127, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 0, 0, 0, 0, 
	0, 0, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 0, 0, 
	0, 129, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 130, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 130, 0, 0, 
	0, 0, 0, 0, 0, 131, 0, 0, 
	0, 0, 0, 0, 0, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 0, 
	0, 0, 0, 0, 0, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 0, 0, 0, 132, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 133, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	133, 6, 6, 6, 6, 6, 6, 6, 
	134, 6, 135, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 135, 8, 136, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 8, 8, 8, 8, 8, 
	8, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 8, 8, 8, 
	137, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 135, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 135, 12, 136, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 12, 12, 
	12, 12, 12, 12, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	12, 12, 12, 138, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	140, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 141, 139, 142, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 142, 17, 17, 17, 17, 
	17, 17, 17, 17, 143, 17, 17, 144, 
	17, 145, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	145, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 146, 6, 146, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 146, 8, 136, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 8, 
	8, 8, 8, 8, 8, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 8, 8, 8, 137, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 147, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	147, 0, 0, 0, 0, 0, 0, 0, 
	148, 149, 0, 0, 150, 0, 0, 0, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 152, 0, 0, 0, 0, 0, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 0, 0, 0, 151, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 145, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 145, 6, 6, 6, 6, 
	6, 6, 6, 6, 153, 6, 6, 146, 
	6, 154, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	154, 6, 155, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 155, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	6, 157, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	157, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 6, 
	159, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 159, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 0, 0, 0, 0, 0, 0, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 0, 0, 0, 160, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 161, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 161, 0, 0, 0, 0, 0, 
	0, 0, 162, 0, 0, 0, 0, 0, 
	0, 0, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 0, 0, 0, 0, 
	0, 0, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 0, 0, 
	0, 163, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 164, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 164, 6, 6, 
	6, 6, 6, 6, 6, 165, 6, 166, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 166, 8, 
	167, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	8, 8, 8, 8, 8, 8, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 8, 8, 8, 168, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 166, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 166, 12, 167, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 12, 12, 12, 12, 12, 
	12, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 12, 12, 12, 
	169, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 171, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 172, 
	170, 173, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	173, 17, 17, 17, 17, 17, 17, 17, 
	17, 174, 17, 17, 175, 17, 176, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 176, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 177, 6, 177, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 177, 8, 167, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 8, 8, 8, 8, 
	8, 8, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 8, 8, 
	8, 168, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 179, 180, 0, 
	0, 181, 0, 0, 0, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 183, 
	0, 0, 0, 0, 0, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 0, 0, 0, 182, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 176, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	176, 6, 6, 6, 6, 6, 6, 6, 
	6, 184, 6, 6, 177, 6, 185, 186, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 185, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 187, 6, 188, 189, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 188, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 190, 6, 191, 6, 
	6, 192, 194, 193, 172, 170, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 0, 180, 0, 
	0, 181, 0, 0, 0, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 0, 
	0, 0, 0, 0, 0, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 0, 0, 0, 195, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 141, 139, 147, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 147, 0, 0, 0, 0, 0, 
	0, 0, 0, 149, 0, 0, 150, 0, 
	0, 0, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 0, 0, 0, 0, 
	0, 0, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 0, 0, 
	0, 196, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	0, 0, 0, 0, 0, 0, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 0, 0, 0, 197, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 198, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 198, 0, 0, 0, 0, 0, 0, 
	0, 199, 0, 0, 0, 0, 0, 0, 
	0, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 0, 0, 0, 0, 0, 
	0, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 0, 0, 0, 
	200, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 201, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 201, 6, 6, 6, 
	6, 6, 6, 6, 202, 6, 203, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 203, 8, 204, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 8, 
	8, 8, 8, 8, 8, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 8, 8, 8, 205, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 203, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	203, 12, 204, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 12, 12, 12, 12, 12, 12, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 12, 12, 12, 206, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 208, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 209, 207, 
	210, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 210, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	211, 17, 17, 212, 17, 213, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 213, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	214, 6, 214, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 214, 8, 204, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 8, 8, 8, 8, 8, 
	8, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 8, 8, 8, 
	205, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 215, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 215, 0, 0, 0, 
	0, 0, 0, 0, 216, 217, 0, 0, 
	218, 0, 0, 0, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 220, 0, 
	0, 0, 0, 0, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	0, 0, 0, 219, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	213, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 213, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	221, 6, 6, 214, 6, 222, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 222, 6, 223, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 223, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 6, 225, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 225, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 6, 227, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 227, 0, 0, 0, 0, 
	0, 0, 0, 228, 0, 0, 0, 0, 
	0, 0, 0, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 0, 0, 0, 
	0, 0, 0, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 0, 
	0, 0, 229, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 230, 
	6, 231, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	231, 0, 0, 0, 0, 0, 0, 0, 
	232, 0, 0, 0, 0, 0, 0, 0, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 0, 0, 0, 0, 0, 0, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 0, 0, 0, 233, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 234, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 234, 6, 6, 6, 6, 
	6, 6, 6, 235, 6, 236, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 236, 8, 237, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 8, 8, 
	8, 8, 8, 8, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	8, 8, 8, 238, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	236, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 236, 
	12, 237, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 12, 12, 12, 239, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 241, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 242, 240, 243, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 243, 17, 
	17, 17, 17, 17, 17, 17, 17, 244, 
	17, 17, 245, 17, 246, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 246, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 247, 
	6, 247, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	247, 8, 237, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 8, 8, 8, 8, 8, 8, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 8, 8, 8, 238, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 248, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 248, 0, 0, 0, 0, 
	0, 0, 0, 249, 250, 0, 0, 251, 
	0, 0, 0, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 253, 0, 0, 
	0, 0, 0, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 0, 
	0, 0, 252, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 246, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 246, 6, 
	6, 6, 6, 6, 6, 6, 6, 254, 
	6, 6, 247, 6, 242, 240, 248, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 248, 0, 0, 
	0, 0, 0, 0, 0, 0, 250, 0, 
	0, 251, 0, 0, 0, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 0, 
	0, 0, 0, 0, 0, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 0, 0, 0, 255, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 209, 207, 215, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 215, 0, 0, 0, 0, 0, 
	0, 0, 0, 217, 0, 0, 218, 0, 
	0, 0, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 0, 0, 0, 0, 
	0, 0, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 0, 0, 
	0, 256, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 13, 13, 
	14, 15, 14, 15, 16, 17, 133, 18, 
	19, 20, 20, 133, 22, 0, 24, 134, 
	24, 0, 26, 26, 27, 28, 135, 30, 
	31, 35, 34, 31, 32, 33, 136, 136, 
	34, 35, 30, 37, 38, 39, 37, 38, 
	39, 40, 41, 45, 48, 41, 42, 47, 
	43, 137, 44, 43, 44, 43, 46, 137, 
	44, 45, 40, 137, 48, 50, 51, 52, 
	50, 51, 52, 53, 54, 58, 62, 54, 
	55, 61, 56, 60, 57, 56, 57, 56, 
	59, 60, 57, 58, 53, 60, 138, 62, 
	64, 139, 64, 140, 66, 67, 68, 68, 
	140, 70, 71, 72, 70, 71, 72, 73, 
	74, 78, 102, 74, 75, 101, 76, 80, 
	77, 76, 77, 76, 79, 80, 77, 78, 
	73, 80, 81, 81, 82, 83, 82, 83, 
	84, 85, 86, 84, 85, 86, 87, 88, 
	92, 100, 88, 89, 99, 90, 94, 91, 
	90, 91, 90, 93, 94, 91, 92, 87, 
	94, 95, 141, 96, 95, 141, 96, 97, 
	98, 98, 141, 100, 102, 104, 105, 106, 
	104, 105, 106, 107, 108, 112, 132, 108, 
	109, 131, 110, 114, 111, 110, 111, 110, 
	113, 114, 111, 112, 107, 114, 115, 115, 
	116, 117, 116, 117, 118, 119, 142, 120, 
	121, 119, 120, 121, 122, 123, 127, 130, 
	123, 124, 129, 125, 142, 126, 125, 126, 
	125, 128, 142, 126, 127, 122, 142, 130, 
	132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 28, 11, 29, 
	27, 30, 8, 13, 13, 13, 31, 0, 
	8, 11, 11, 13, 13, 13, 32, 33, 
	27, 27, 17, 34, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 35, 14, 0, 0, 15, 16, 36, 
	15, 5, 17, 37, 27, 38, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 39, 27, 
	19, 40, 21, 41, 0, 0, 24, 25, 
	42, 38, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 14, 14, 
	14, 0, 0, 15, 16, 15, 15, 5, 
	17, 0, 43, 0, 19, 44, 21, 0, 
	38, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 14, 14, 14, 
	0, 0, 15, 16, 15, 15, 5, 17, 
	0, 45, 46, 45, 0, 47, 0, 0, 
	24, 25, 48, 27, 27, 49, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 38, 50, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 14, 51, 14, 0, 0, 
	15, 16, 52, 15, 5, 17, 53, 27, 
	27
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 1, 28, 
	28, 30, 30, 30, 30, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 12, 
	1, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 12, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 12, 0, 7, 1, 0, 
	0, 0, 0, 1, 1, 0, 7, 10, 
	12, 12, 0, 7, 1, 0, 0, 0, 
	0, 0, 0, 12, 1, 12, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 0, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 12, 0, 7, 1, 
	0, 12, 1, 12, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_statement_simple
end
self.bel_en_statement_simple = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_statement_nested
end
self.bel_en_statement_nested = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 37 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 44 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 43 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 45 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 47 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 42 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 48 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 18 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 46 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 33 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 53 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 51 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ s(:statement) ]
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 49 then
		begin

    @buffers[:statement_stack] << s(:statement)
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 30, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 30, 6, 
	31, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 6, 33, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 33, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 6, 35, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 35, 6, 6, 
	6, 6, 6, 6, 6, 36, 6, 37, 
	6, 37, 38, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	37, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 39, 
	6, 40, 6, 6, 41, 43, 42, 16, 
	14, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 0, 0, 26, 0, 0, 0, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 0, 0, 0, 0, 0, 0, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 0, 0, 0, 44, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 45, 45, 
	45, 45, 45, 45, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	45, 45, 45, 46, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	47, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	45, 45, 45, 45, 45, 45, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 45, 45, 45, 48, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 50, 49, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 53, 51, 
	54, 49, 53, 51, 55, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 55, 8, 56, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 8, 8, 8, 
	8, 8, 8, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 8, 
	8, 8, 57, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 55, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 55, 12, 
	56, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	12, 12, 12, 12, 12, 12, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 12, 12, 12, 58, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 60, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 61, 59, 62, 17, 
	61, 59, 63, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 0, 0, 0, 0, 0, 0, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 0, 0, 0, 64, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 63, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 66, 0, 0, 0, 
	0, 0, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 0, 0, 
	0, 65, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	0, 0, 0, 0, 0, 0, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 0, 0, 0, 67, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 68, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 68, 0, 0, 0, 0, 0, 0, 
	0, 69, 0, 0, 0, 0, 0, 0, 
	0, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 0, 0, 0, 0, 0, 
	0, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 0, 0, 0, 
	70, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 71, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 71, 6, 6, 6, 
	6, 6, 6, 6, 72, 6, 73, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 73, 8, 74, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 8, 
	8, 8, 8, 8, 8, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 8, 8, 8, 75, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 73, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	73, 12, 74, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 12, 12, 12, 12, 12, 12, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 12, 12, 12, 76, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 78, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 79, 77, 
	80, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 80, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	81, 17, 17, 82, 17, 83, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 83, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	84, 6, 84, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 84, 8, 74, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 8, 8, 8, 8, 8, 
	8, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 8, 8, 8, 
	75, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 85, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 85, 0, 0, 0, 
	0, 0, 0, 0, 86, 87, 0, 0, 
	88, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 90, 0, 
	0, 0, 0, 0, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	0, 0, 0, 89, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	83, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 83, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	91, 6, 6, 84, 6, 79, 77, 85, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 85, 0, 
	0, 0, 0, 0, 0, 0, 0, 87, 
	0, 0, 88, 0, 0, 0, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	0, 0, 0, 0, 0, 0, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 0, 0, 0, 92, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 0, 0, 0, 0, 
	0, 0, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 0, 0, 
	0, 93, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 94, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 94, 0, 0, 
	0, 0, 0, 0, 0, 95, 0, 0, 
	0, 0, 0, 0, 0, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 0, 
	0, 0, 0, 0, 0, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 0, 0, 0, 96, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 97, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	97, 6, 6, 6, 6, 6, 6, 6, 
	98, 6, 99, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 99, 8, 100, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 8, 8, 8, 8, 8, 
	8, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 8, 8, 8, 
	101, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 99, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 99, 12, 100, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 12, 12, 
	12, 12, 12, 12, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	12, 12, 12, 102, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	104, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 105, 103, 106, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 106, 17, 17, 17, 17, 
	17, 17, 17, 17, 107, 17, 17, 108, 
	17, 109, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	109, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 110, 6, 110, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 110, 8, 100, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 8, 
	8, 8, 8, 8, 8, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 8, 8, 8, 101, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 111, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	111, 0, 0, 0, 0, 0, 0, 0, 
	112, 113, 0, 0, 114, 0, 0, 0, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 116, 0, 0, 0, 0, 0, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 0, 0, 0, 115, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 109, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 109, 6, 6, 6, 6, 
	6, 6, 6, 6, 117, 6, 6, 110, 
	6, 118, 6, 105, 103, 111, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 111, 0, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	114, 0, 0, 0, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 0, 0, 
	0, 0, 0, 0, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	0, 0, 0, 119, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 6, 121, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 6, 123, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 124, 6, 125, 6, 6, 126, 
	128, 127, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 0, 0, 0, 0, 
	0, 0, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 0, 0, 
	0, 129, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 130, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 130, 0, 0, 
	0, 0, 0, 0, 0, 131, 0, 0, 
	0, 0, 0, 0, 0, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 0, 
	0, 0, 0, 0, 0, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 0, 0, 0, 132, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 133, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	133, 6, 6, 6, 6, 6, 6, 6, 
	134, 6, 135, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 135, 8, 136, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 8, 8, 8, 8, 8, 
	8, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 8, 8, 8, 
	137, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 135, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 135, 12, 136, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 12, 12, 
	12, 12, 12, 12, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	12, 12, 12, 138, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	140, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 141, 139, 142, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 142, 17, 17, 17, 17, 
	17, 17, 17, 17, 143, 17, 17, 144, 
	17, 145, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	145, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 146, 6, 146, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 146, 8, 136, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 8, 
	8, 8, 8, 8, 8, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 8, 8, 8, 137, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 147, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	147, 0, 0, 0, 0, 0, 0, 0, 
	148, 149, 0, 0, 150, 0, 0, 0, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 152, 0, 0, 0, 0, 0, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 0, 0, 0, 151, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 145, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 145, 6, 6, 6, 6, 
	6, 6, 6, 6, 153, 6, 6, 146, 
	6, 154, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	154, 6, 155, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 155, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	6, 157, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	157, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 6, 
	159, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 159, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 0, 0, 0, 0, 0, 0, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 0, 0, 0, 160, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 161, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 161, 0, 0, 0, 0, 0, 
	0, 0, 162, 0, 0, 0, 0, 0, 
	0, 0, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 0, 0, 0, 0, 
	0, 0, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 0, 0, 
	0, 163, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 164, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 164, 6, 6, 
	6, 6, 6, 6, 6, 165, 6, 166, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 166, 8, 
	167, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	8, 8, 8, 8, 8, 8, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 8, 8, 8, 168, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 166, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 166, 12, 167, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 12, 12, 12, 12, 12, 
	12, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 12, 12, 12, 
	169, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 171, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 172, 
	170, 173, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	173, 17, 17, 17, 17, 17, 17, 17, 
	17, 174, 17, 17, 175, 17, 176, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 176, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 177, 6, 177, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 177, 8, 167, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 8, 8, 8, 8, 
	8, 8, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 8, 8, 
	8, 168, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 179, 180, 0, 
	0, 181, 0, 0, 0, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 183, 
	0, 0, 0, 0, 0, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 0, 0, 0, 182, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 176, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	176, 6, 6, 6, 6, 6, 6, 6, 
	6, 184, 6, 6, 177, 6, 185, 186, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 185, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 187, 6, 188, 189, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 188, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 190, 6, 191, 6, 
	6, 192, 194, 193, 172, 170, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 0, 180, 0, 
	0, 181, 0, 0, 0, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 0, 
	0, 0, 0, 0, 0, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 0, 0, 0, 195, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 141, 139, 147, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 147, 0, 0, 0, 0, 0, 
	0, 0, 0, 149, 0, 0, 150, 0, 
	0, 0, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 0, 0, 0, 0, 
	0, 0, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 0, 0, 
	0, 196, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	0, 0, 0, 0, 0, 0, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 0, 0, 0, 197, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 198, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 198, 0, 0, 0, 0, 0, 0, 
	0, 199, 0, 0, 0, 0, 0, 0, 
	0, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 0, 0, 0, 0, 0, 
	0, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 0, 0, 0, 
	200, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 201, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 201, 6, 6, 6, 
	6, 6, 6, 6, 202, 6, 203, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 203, 8, 204, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 8, 
	8, 8, 8, 8, 8, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 8, 8, 8, 205, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 203, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	203, 12, 204, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 12, 12, 12, 12, 12, 12, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 12, 12, 12, 206, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 208, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 209, 207, 
	210, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 210, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	211, 17, 17, 212, 17, 213, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 213, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	214, 6, 214, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 214, 8, 204, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 8, 8, 8, 8, 8, 
	8, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 8, 8, 8, 
	205, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 215, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 215, 0, 0, 0, 
	0, 0, 0, 0, 216, 217, 0, 0, 
	218, 0, 0, 0, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 220, 0, 
	0, 0, 0, 0, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	0, 0, 0, 219, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	213, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 213, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	221, 6, 6, 214, 6, 222, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 222, 6, 223, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 223, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 6, 225, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 225, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 6, 227, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 227, 0, 0, 0, 0, 
	0, 0, 0, 228, 0, 0, 0, 0, 
	0, 0, 0, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 0, 0, 0, 
	0, 0, 0, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 0, 
	0, 0, 229, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 230, 
	6, 231, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	231, 0, 0, 0, 0, 0, 0, 0, 
	232, 0, 0, 0, 0, 0, 0, 0, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 0, 0, 0, 0, 0, 0, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 0, 0, 0, 233, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 234, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 234, 6, 6, 6, 6, 
	6, 6, 6, 235, 6, 236, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 236, 8, 237, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 8, 8, 
	8, 8, 8, 8, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	8, 8, 8, 238, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	236, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 236, 
	12, 237, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 12, 12, 12, 239, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 241, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 242, 240, 243, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 243, 17, 
	17, 17, 17, 17, 17, 17, 17, 244, 
	17, 17, 245, 17, 246, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 246, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 247, 
	6, 247, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	247, 8, 237, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 8, 8, 8, 8, 8, 8, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 8, 8, 8, 238, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 248, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 248, 0, 0, 0, 0, 
	0, 0, 0, 249, 250, 0, 0, 251, 
	0, 0, 0, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 253, 0, 0, 
	0, 0, 0, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 0, 
	0, 0, 252, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 246, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 246, 6, 
	6, 6, 6, 6, 6, 6, 6, 254, 
	6, 6, 247, 6, 242, 240, 248, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 248, 0, 0, 
	0, 0, 0, 0, 0, 0, 250, 0, 
	0, 251, 0, 0, 0, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 0, 
	0, 0, 0, 0, 0, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 0, 0, 0, 255, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 209, 207, 215, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 215, 0, 0, 0, 0, 0, 
	0, 0, 0, 217, 0, 0, 218, 0, 
	0, 0, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 0, 0, 0, 0, 
	0, 0, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 0, 0, 
	0, 256, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 13, 13, 
	14, 15, 14, 15, 16, 17, 133, 18, 
	19, 20, 20, 133, 22, 0, 24, 134, 
	24, 0, 26, 26, 27, 28, 135, 30, 
	31, 35, 34, 31, 32, 33, 136, 136, 
	34, 35, 30, 37, 38, 39, 37, 38, 
	39, 40, 41, 45, 48, 41, 42, 47, 
	43, 137, 44, 43, 44, 43, 46, 137, 
	44, 45, 40, 137, 48, 50, 51, 52, 
	50, 51, 52, 53, 54, 58, 62, 54, 
	55, 61, 56, 60, 57, 56, 57, 56, 
	59, 60, 57, 58, 53, 60, 138, 62, 
	64, 139, 64, 140, 66, 67, 68, 68, 
	140, 70, 71, 72, 70, 71, 72, 73, 
	74, 78, 102, 74, 75, 101, 76, 80, 
	77, 76, 77, 76, 79, 80, 77, 78, 
	73, 80, 81, 81, 82, 83, 82, 83, 
	84, 85, 86, 84, 85, 86, 87, 88, 
	92, 100, 88, 89, 99, 90, 94, 91, 
	90, 91, 90, 93, 94, 91, 92, 87, 
	94, 95, 141, 96, 95, 141, 96, 97, 
	98, 98, 141, 100, 102, 104, 105, 106, 
	104, 105, 106, 107, 108, 112, 132, 108, 
	109, 131, 110, 114, 111, 110, 111, 110, 
	113, 114, 111, 112, 107, 114, 115, 115, 
	116, 117, 116, 117, 118, 119, 142, 120, 
	121, 119, 120, 121, 122, 123, 127, 130, 
	123, 124, 129, 125, 142, 126, 125, 126, 
	125, 128, 142, 126, 127, 122, 142, 130, 
	132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 28, 11, 29, 
	27, 30, 8, 13, 13, 13, 31, 0, 
	8, 11, 11, 13, 13, 13, 32, 33, 
	27, 27, 17, 34, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 35, 14, 0, 0, 15, 16, 36, 
	15, 5, 17, 37, 27, 38, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 39, 27, 
	19, 40, 21, 41, 0, 0, 24, 25, 
	42, 38, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 14, 14, 
	14, 0, 0, 15, 16, 15, 15, 5, 
	17, 0, 43, 0, 19, 44, 21, 0, 
	38, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 14, 14, 14, 
	0, 0, 15, 16, 15, 15, 5, 17, 
	0, 45, 46, 45, 0, 47, 0, 0, 
	24, 25, 48, 27, 27, 49, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 38, 50, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 14, 51, 14, 0, 0, 
	15, 16, 52, 15, 5, 17, 53, 27, 
	27
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 1, 28, 
	28, 30, 30, 30, 30, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 12, 
	1, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 12, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 12, 0, 7, 1, 0, 
	0, 0, 0, 1, 1, 0, 7, 10, 
	12, 12, 0, 7, 1, 0, 0, 0, 
	0, 0, 0, 12, 1, 12, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 0, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 12, 0, 7, 1, 
	0, 12, 1, 12, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_statement_simple
end
self.bel_en_statement_simple = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_statement_nested
end
self.bel_en_statement_nested = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 37 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 44 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 43 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 45 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 47 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 42 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 48 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 18 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 46 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 33 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 53 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 51 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ s(:statement) ]
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 49 then
		begin

    @buffers[:statement_stack] << s(:statement)
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 30, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 30, 6, 
	31, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 6, 33, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 33, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 6, 35, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 35, 6, 6, 
	6, 6, 6, 6, 6, 36, 6, 37, 
	6, 37, 38, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	37, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 39, 
	6, 40, 6, 6, 41, 43, 42, 16, 
	14, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 0, 0, 26, 0, 0, 0, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 0, 0, 0, 0, 0, 0, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 0, 0, 0, 44, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 45, 45, 
	45, 45, 45, 45, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	45, 45, 45, 46, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	47, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	45, 45, 45, 45, 45, 45, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 45, 45, 45, 48, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 50, 49, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 53, 51, 
	54, 49, 53, 51, 55, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 55, 8, 56, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 8, 8, 8, 
	8, 8, 8, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 8, 
	8, 8, 57, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 55, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 55, 12, 
	56, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	12, 12, 12, 12, 12, 12, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 12, 12, 12, 58, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 60, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 61, 59, 62, 17, 
	61, 59, 63, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 0, 0, 0, 0, 0, 0, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 0, 0, 0, 64, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 63, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 66, 0, 0, 0, 
	0, 0, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 0, 0, 
	0, 65, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	0, 0, 0, 0, 0, 0, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 0, 0, 0, 67, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 68, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 68, 0, 0, 0, 0, 0, 0, 
	0, 69, 0, 0, 0, 0, 0, 0, 
	0, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 0, 0, 0, 0, 0, 
	0, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 0, 0, 0, 
	70, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 71, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 71, 6, 6, 6, 
	6, 6, 6, 6, 72, 6, 73, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 73, 8, 74, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 8, 
	8, 8, 8, 8, 8, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 8, 8, 8, 75, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 73, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	73, 12, 74, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 12, 12, 12, 12, 12, 12, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 12, 12, 12, 76, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 78, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 79, 77, 
	80, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 80, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	81, 17, 17, 82, 17, 83, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 83, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	84, 6, 84, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 84, 8, 74, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 8, 8, 8, 8, 8, 
	8, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 8, 8, 8, 
	75, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 85, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 85, 0, 0, 0, 
	0, 0, 0, 0, 86, 87, 0, 0, 
	88, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 90, 0, 
	0, 0, 0, 0, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	0, 0, 0, 89, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	83, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 83, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	91, 6, 6, 84, 6, 79, 77, 85, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 85, 0, 
	0, 0, 0, 0, 0, 0, 0, 87, 
	0, 0, 88, 0, 0, 0, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	0, 0, 0, 0, 0, 0, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 0, 0, 0, 92, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 0, 0, 0, 0, 
	0, 0, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 0, 0, 
	0, 93, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 94, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 94, 0, 0, 
	0, 0, 0, 0, 0, 95, 0, 0, 
	0, 0, 0, 0, 0, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 0, 
	0, 0, 0, 0, 0, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 0, 0, 0, 96, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 97, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	97, 6, 6, 6, 6, 6, 6, 6, 
	98, 6, 99, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 99, 8, 100, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 8, 8, 8, 8, 8, 
	8, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 8, 8, 8, 
	101, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 99, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 99, 12, 100, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 12, 12, 
	12, 12, 12, 12, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	12, 12, 12, 102, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	104, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 105, 103, 106, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 106, 17, 17, 17, 17, 
	17, 17, 17, 17, 107, 17, 17, 108, 
	17, 109, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	109, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 110, 6, 110, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 110, 8, 100, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 8, 
	8, 8, 8, 8, 8, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 8, 8, 8, 101, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 111, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	111, 0, 0, 0, 0, 0, 0, 0, 
	112, 113, 0, 0, 114, 0, 0, 0, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 116, 0, 0, 0, 0, 0, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 0, 0, 0, 115, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 109, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 109, 6, 6, 6, 6, 
	6, 6, 6, 6, 117, 6, 6, 110, 
	6, 118, 6, 105, 103, 111, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 111, 0, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	114, 0, 0, 0, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 0, 0, 
	0, 0, 0, 0, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	0, 0, 0, 119, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 6, 121, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 6, 123, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 124, 6, 125, 6, 6, 126, 
	128, 127, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 0, 0, 0, 0, 
	0, 0, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 0, 0, 
	0, 129, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 130, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 130, 0, 0, 
	0, 0, 0, 0, 0, 131, 0, 0, 
	0, 0, 0, 0, 0, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 0, 
	0, 0, 0, 0, 0, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 0, 0, 0, 132, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 133, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	133, 6, 6, 6, 6, 6, 6, 6, 
	134, 6, 135, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 135, 8, 136, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 8, 8, 8, 8, 8, 
	8, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 8, 8, 8, 
	137, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 135, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 135, 12, 136, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 12, 12, 
	12, 12, 12, 12, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	12, 12, 12, 138, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	140, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 141, 139, 142, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 142, 17, 17, 17, 17, 
	17, 17, 17, 17, 143, 17, 17, 144, 
	17, 145, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	145, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 146, 6, 146, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 146, 8, 136, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 8, 
	8, 8, 8, 8, 8, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 8, 8, 8, 137, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 147, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	147, 0, 0, 0, 0, 0, 0, 0, 
	148, 149, 0, 0, 150, 0, 0, 0, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 152, 0, 0, 0, 0, 0, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 0, 0, 0, 151, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 145, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 145, 6, 6, 6, 6, 
	6, 6, 6, 6, 153, 6, 6, 146, 
	6, 154, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	154, 6, 155, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 155, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	6, 157, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	157, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 6, 
	159, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 159, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 0, 0, 0, 0, 0, 0, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 0, 0, 0, 160, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 161, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 161, 0, 0, 0, 0, 0, 
	0, 0, 162, 0, 0, 0, 0, 0, 
	0, 0, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 0, 0, 0, 0, 
	0, 0, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 0, 0, 
	0, 163, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 164, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 164, 6, 6, 
	6, 6, 6, 6, 6, 165, 6, 166, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 166, 8, 
	167, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	8, 8, 8, 8, 8, 8, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 8, 8, 8, 168, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 166, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 166, 12, 167, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 12, 12, 12, 12, 12, 
	12, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 12, 12, 12, 
	169, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 171, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 172, 
	170, 173, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	173, 17, 17, 17, 17, 17, 17, 17, 
	17, 174, 17, 17, 175, 17, 176, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 176, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 177, 6, 177, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 177, 8, 167, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 8, 8, 8, 8, 
	8, 8, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 8, 8, 
	8, 168, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 179, 180, 0, 
	0, 181, 0, 0, 0, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 183, 
	0, 0, 0, 0, 0, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 0, 0, 0, 182, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 176, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	176, 6, 6, 6, 6, 6, 6, 6, 
	6, 184, 6, 6, 177, 6, 185, 186, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 185, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 187, 6, 188, 189, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 188, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 190, 6, 191, 6, 
	6, 192, 194, 193, 172, 170, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 0, 180, 0, 
	0, 181, 0, 0, 0, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 0, 
	0, 0, 0, 0, 0, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 0, 0, 0, 195, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 141, 139, 147, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 147, 0, 0, 0, 0, 0, 
	0, 0, 0, 149, 0, 0, 150, 0, 
	0, 0, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 0, 0, 0, 0, 
	0, 0, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 0, 0, 
	0, 196, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	0, 0, 0, 0, 0, 0, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 0, 0, 0, 197, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 198, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 198, 0, 0, 0, 0, 0, 0, 
	0, 199, 0, 0, 0, 0, 0, 0, 
	0, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 0, 0, 0, 0, 0, 
	0, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 0, 0, 0, 
	200, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 201, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 201, 6, 6, 6, 
	6, 6, 6, 6, 202, 6, 203, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 203, 8, 204, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 8, 
	8, 8, 8, 8, 8, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 8, 8, 8, 205, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 203, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	203, 12, 204, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 12, 12, 12, 12, 12, 12, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 12, 12, 12, 206, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 208, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 209, 207, 
	210, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 210, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	211, 17, 17, 212, 17, 213, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 213, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	214, 6, 214, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 214, 8, 204, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 8, 8, 8, 8, 8, 
	8, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 8, 8, 8, 
	205, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 215, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 215, 0, 0, 0, 
	0, 0, 0, 0, 216, 217, 0, 0, 
	218, 0, 0, 0, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 220, 0, 
	0, 0, 0, 0, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	0, 0, 0, 219, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	213, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 213, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	221, 6, 6, 214, 6, 222, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 222, 6, 223, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 223, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 6, 225, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 225, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 6, 227, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 227, 0, 0, 0, 0, 
	0, 0, 0, 228, 0, 0, 0, 0, 
	0, 0, 0, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 0, 0, 0, 
	0, 0, 0, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 0, 
	0, 0, 229, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 230, 
	6, 231, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	231, 0, 0, 0, 0, 0, 0, 0, 
	232, 0, 0, 0, 0, 0, 0, 0, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 0, 0, 0, 0, 0, 0, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 0, 0, 0, 233, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 234, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 234, 6, 6, 6, 6, 
	6, 6, 6, 235, 6, 236, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 236, 8, 237, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 8, 8, 
	8, 8, 8, 8, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	8, 8, 8, 238, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	236, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 236, 
	12, 237, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 12, 12, 12, 239, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 241, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 242, 240, 243, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 243, 17, 
	17, 17, 17, 17, 17, 17, 17, 244, 
	17, 17, 245, 17, 246, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 246, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 247, 
	6, 247, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	247, 8, 237, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 8, 8, 8, 8, 8, 8, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 8, 8, 8, 238, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 248, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 248, 0, 0, 0, 0, 
	0, 0, 0, 249, 250, 0, 0, 251, 
	0, 0, 0, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 253, 0, 0, 
	0, 0, 0, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 0, 
	0, 0, 252, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 246, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 246, 6, 
	6, 6, 6, 6, 6, 6, 6, 254, 
	6, 6, 247, 6, 242, 240, 248, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 248, 0, 0, 
	0, 0, 0, 0, 0, 0, 250, 0, 
	0, 251, 0, 0, 0, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 0, 
	0, 0, 0, 0, 0, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 0, 0, 0, 255, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 209, 207, 215, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 215, 0, 0, 0, 0, 0, 
	0, 0, 0, 217, 0, 0, 218, 0, 
	0, 0, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 0, 0, 0, 0, 
	0, 0, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 0, 0, 
	0, 256, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 13, 13, 
	14, 15, 14, 15, 16, 17, 133, 18, 
	19, 20, 20, 133, 22, 0, 24, 134, 
	24, 0, 26, 26, 27, 28, 135, 30, 
	31, 35, 34, 31, 32, 33, 136, 136, 
	34, 35, 30, 37, 38, 39, 37, 38, 
	39, 40, 41, 45, 48, 41, 42, 47, 
	43, 137, 44, 43, 44, 43, 46, 137, 
	44, 45, 40, 137, 48, 50, 51, 52, 
	50, 51, 52, 53, 54, 58, 62, 54, 
	55, 61, 56, 60, 57, 56, 57, 56, 
	59, 60, 57, 58, 53, 60, 138, 62, 
	64, 139, 64, 140, 66, 67, 68, 68, 
	140, 70, 71, 72, 70, 71, 72, 73, 
	74, 78, 102, 74, 75, 101, 76, 80, 
	77, 76, 77, 76, 79, 80, 77, 78, 
	73, 80, 81, 81, 82, 83, 82, 83, 
	84, 85, 86, 84, 85, 86, 87, 88, 
	92, 100, 88, 89, 99, 90, 94, 91, 
	90, 91, 90, 93, 94, 91, 92, 87, 
	94, 95, 141, 96, 95, 141, 96, 97, 
	98, 98, 141, 100, 102, 104, 105, 106, 
	104, 105, 106, 107, 108, 112, 132, 108, 
	109, 131, 110, 114, 111, 110, 111, 110, 
	113, 114, 111, 112, 107, 114, 115, 115, 
	116, 117, 116, 117, 118, 119, 142, 120, 
	121, 119, 120, 121, 122, 123, 127, 130, 
	123, 124, 129, 125, 142, 126, 125, 126, 
	125, 128, 142, 126, 127, 122, 142, 130, 
	132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 28, 11, 29, 
	27, 30, 8, 13, 13, 13, 31, 0, 
	8, 11, 11, 13, 13, 13, 32, 33, 
	27, 27, 17, 34, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 35, 14, 0, 0, 15, 16, 36, 
	15, 5, 17, 37, 27, 38, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 39, 27, 
	19, 40, 21, 41, 0, 0, 24, 25, 
	42, 38, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 14, 14, 
	14, 0, 0, 15, 16, 15, 15, 5, 
	17, 0, 43, 0, 19, 44, 21, 0, 
	38, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 14, 14, 14, 
	0, 0, 15, 16, 15, 15, 5, 17, 
	0, 45, 46, 45, 0, 47, 0, 0, 
	24, 25, 48, 27, 27, 49, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 38, 50, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 14, 51, 14, 0, 0, 
	15, 16, 52, 15, 5, 17, 53, 27, 
	27
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 1, 28, 
	28, 30, 30, 30, 30, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 12, 
	1, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 12, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 12, 0, 7, 1, 0, 
	0, 0, 0, 1, 1, 0, 7, 10, 
	12, 12, 0, 7, 1, 0, 0, 0, 
	0, 0, 0, 12, 1, 12, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 0, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 12, 0, 7, 1, 
	0, 12, 1, 12, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_statement_simple
end
self.bel_en_statement_simple = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_statement_nested
end
self.bel_en_statement_nested = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 37 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 44 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 43 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 45 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 47 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 42 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 48 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 18 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 46 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 33 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 53 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 51 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ s(:statement) ]
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 49 then
		begin

    @buffers[:statement_stack] << s(:statement)
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 30, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 30, 6, 
	31, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 6, 33, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 33, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 6, 35, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 35, 6, 6, 
	6, 6, 6, 6, 6, 36, 6, 37, 
	6, 37, 38, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	37, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 39, 
	6, 40, 6, 6, 41, 43, 42, 16, 
	14, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 0, 0, 26, 0, 0, 0, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 0, 0, 0, 0, 0, 0, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 0, 0, 0, 44, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 45, 45, 
	45, 45, 45, 45, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	45, 45, 45, 46, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	47, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	45, 45, 45, 45, 45, 45, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 45, 45, 45, 48, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 50, 49, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 53, 51, 
	54, 49, 53, 51, 55, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 55, 8, 56, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 8, 8, 8, 
	8, 8, 8, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 8, 
	8, 8, 57, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 55, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 55, 12, 
	56, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	12, 12, 12, 12, 12, 12, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 12, 12, 12, 58, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 60, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 61, 59, 62, 17, 
	61, 59, 63, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 0, 0, 0, 0, 0, 0, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 0, 0, 0, 64, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 63, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 66, 0, 0, 0, 
	0, 0, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 0, 0, 
	0, 65, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	0, 0, 0, 0, 0, 0, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 0, 0, 0, 67, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 68, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 68, 0, 0, 0, 0, 0, 0, 
	0, 69, 0, 0, 0, 0, 0, 0, 
	0, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 0, 0, 0, 0, 0, 
	0, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 0, 0, 0, 
	70, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 71, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 71, 6, 6, 6, 
	6, 6, 6, 6, 72, 6, 73, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 73, 8, 74, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 8, 
	8, 8, 8, 8, 8, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 8, 8, 8, 75, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 73, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	73, 12, 74, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 12, 12, 12, 12, 12, 12, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 12, 12, 12, 76, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 78, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 79, 77, 
	80, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 80, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	81, 17, 17, 82, 17, 83, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 83, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	84, 6, 84, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 84, 8, 74, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 8, 8, 8, 8, 8, 
	8, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 8, 8, 8, 
	75, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 85, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 85, 0, 0, 0, 
	0, 0, 0, 0, 86, 87, 0, 0, 
	88, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 90, 0, 
	0, 0, 0, 0, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	0, 0, 0, 89, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	83, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 83, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	91, 6, 6, 84, 6, 79, 77, 85, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 85, 0, 
	0, 0, 0, 0, 0, 0, 0, 87, 
	0, 0, 88, 0, 0, 0, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	0, 0, 0, 0, 0, 0, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 0, 0, 0, 92, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 0, 0, 0, 0, 
	0, 0, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 0, 0, 
	0, 93, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 94, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 94, 0, 0, 
	0, 0, 0, 0, 0, 95, 0, 0, 
	0, 0, 0, 0, 0, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 0, 
	0, 0, 0, 0, 0, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 0, 0, 0, 96, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 97, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	97, 6, 6, 6, 6, 6, 6, 6, 
	98, 6, 99, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 99, 8, 100, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 8, 8, 8, 8, 8, 
	8, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 8, 8, 8, 
	101, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 99, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 99, 12, 100, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 12, 12, 
	12, 12, 12, 12, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	12, 12, 12, 102, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	104, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 105, 103, 106, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 106, 17, 17, 17, 17, 
	17, 17, 17, 17, 107, 17, 17, 108, 
	17, 109, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	109, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 110, 6, 110, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 110, 8, 100, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 8, 
	8, 8, 8, 8, 8, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 8, 8, 8, 101, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 111, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	111, 0, 0, 0, 0, 0, 0, 0, 
	112, 113, 0, 0, 114, 0, 0, 0, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 116, 0, 0, 0, 0, 0, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 0, 0, 0, 115, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 109, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 109, 6, 6, 6, 6, 
	6, 6, 6, 6, 117, 6, 6, 110, 
	6, 118, 6, 105, 103, 111, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 111, 0, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	114, 0, 0, 0, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 0, 0, 
	0, 0, 0, 0, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	0, 0, 0, 119, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 6, 121, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 6, 123, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 124, 6, 125, 6, 6, 126, 
	128, 127, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 0, 0, 0, 0, 
	0, 0, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 0, 0, 
	0, 129, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 130, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 130, 0, 0, 
	0, 0, 0, 0, 0, 131, 0, 0, 
	0, 0, 0, 0, 0, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 0, 
	0, 0, 0, 0, 0, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 0, 0, 0, 132, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 133, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	133, 6, 6, 6, 6, 6, 6, 6, 
	134, 6, 135, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 135, 8, 136, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 8, 8, 8, 8, 8, 
	8, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 8, 8, 8, 
	137, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 135, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 135, 12, 136, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 12, 12, 
	12, 12, 12, 12, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	12, 12, 12, 138, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	140, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 141, 139, 142, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 142, 17, 17, 17, 17, 
	17, 17, 17, 17, 143, 17, 17, 144, 
	17, 145, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	145, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 146, 6, 146, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 146, 8, 136, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 8, 
	8, 8, 8, 8, 8, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 8, 8, 8, 137, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 147, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	147, 0, 0, 0, 0, 0, 0, 0, 
	148, 149, 0, 0, 150, 0, 0, 0, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 152, 0, 0, 0, 0, 0, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 0, 0, 0, 151, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 145, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 145, 6, 6, 6, 6, 
	6, 6, 6, 6, 153, 6, 6, 146, 
	6, 154, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	154, 6, 155, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 155, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	6, 157, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	157, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 6, 
	159, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 159, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 0, 0, 0, 0, 0, 0, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 0, 0, 0, 160, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 161, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 161, 0, 0, 0, 0, 0, 
	0, 0, 162, 0, 0, 0, 0, 0, 
	0, 0, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 0, 0, 0, 0, 
	0, 0, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 0, 0, 
	0, 163, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 164, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 164, 6, 6, 
	6, 6, 6, 6, 6, 165, 6, 166, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 166, 8, 
	167, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	8, 8, 8, 8, 8, 8, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 8, 8, 8, 168, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 166, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 166, 12, 167, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 12, 12, 12, 12, 12, 
	12, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 12, 12, 12, 
	169, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 171, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 172, 
	170, 173, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	173, 17, 17, 17, 17, 17, 17, 17, 
	17, 174, 17, 17, 175, 17, 176, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 176, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 177, 6, 177, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 177, 8, 167, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 8, 8, 8, 8, 
	8, 8, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 8, 8, 
	8, 168, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 179, 180, 0, 
	0, 181, 0, 0, 0, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 183, 
	0, 0, 0, 0, 0, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 0, 0, 0, 182, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 176, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	176, 6, 6, 6, 6, 6, 6, 6, 
	6, 184, 6, 6, 177, 6, 185, 186, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 185, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 187, 6, 188, 189, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 188, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 190, 6, 191, 6, 
	6, 192, 194, 193, 172, 170, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 0, 180, 0, 
	0, 181, 0, 0, 0, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 0, 
	0, 0, 0, 0, 0, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 0, 0, 0, 195, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 141, 139, 147, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 147, 0, 0, 0, 0, 0, 
	0, 0, 0, 149, 0, 0, 150, 0, 
	0, 0, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 0, 0, 0, 0, 
	0, 0, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 0, 0, 
	0, 196, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	0, 0, 0, 0, 0, 0, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 0, 0, 0, 197, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 198, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 198, 0, 0, 0, 0, 0, 0, 
	0, 199, 0, 0, 0, 0, 0, 0, 
	0, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 0, 0, 0, 0, 0, 
	0, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 0, 0, 0, 
	200, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 201, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 201, 6, 6, 6, 
	6, 6, 6, 6, 202, 6, 203, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 203, 8, 204, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 8, 
	8, 8, 8, 8, 8, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 8, 8, 8, 205, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 203, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	203, 12, 204, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 12, 12, 12, 12, 12, 12, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 12, 12, 12, 206, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 208, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 209, 207, 
	210, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 210, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	211, 17, 17, 212, 17, 213, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 213, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	214, 6, 214, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 214, 8, 204, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 8, 8, 8, 8, 8, 
	8, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 8, 8, 8, 
	205, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 215, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 215, 0, 0, 0, 
	0, 0, 0, 0, 216, 217, 0, 0, 
	218, 0, 0, 0, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 220, 0, 
	0, 0, 0, 0, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	0, 0, 0, 219, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	213, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 213, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	221, 6, 6, 214, 6, 222, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 222, 6, 223, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 223, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 6, 225, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 225, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 6, 227, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 227, 0, 0, 0, 0, 
	0, 0, 0, 228, 0, 0, 0, 0, 
	0, 0, 0, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 0, 0, 0, 
	0, 0, 0, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 0, 
	0, 0, 229, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 230, 
	6, 231, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	231, 0, 0, 0, 0, 0, 0, 0, 
	232, 0, 0, 0, 0, 0, 0, 0, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 0, 0, 0, 0, 0, 0, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 0, 0, 0, 233, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 234, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 234, 6, 6, 6, 6, 
	6, 6, 6, 235, 6, 236, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 236, 8, 237, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 8, 8, 
	8, 8, 8, 8, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	8, 8, 8, 238, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	236, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 236, 
	12, 237, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 12, 12, 12, 239, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 241, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 242, 240, 243, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 243, 17, 
	17, 17, 17, 17, 17, 17, 17, 244, 
	17, 17, 245, 17, 246, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 246, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 247, 
	6, 247, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	247, 8, 237, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 8, 8, 8, 8, 8, 8, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 8, 8, 8, 238, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 248, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 248, 0, 0, 0, 0, 
	0, 0, 0, 249, 250, 0, 0, 251, 
	0, 0, 0, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 253, 0, 0, 
	0, 0, 0, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 0, 
	0, 0, 252, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 246, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 246, 6, 
	6, 6, 6, 6, 6, 6, 6, 254, 
	6, 6, 247, 6, 242, 240, 248, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 248, 0, 0, 
	0, 0, 0, 0, 0, 0, 250, 0, 
	0, 251, 0, 0, 0, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 0, 
	0, 0, 0, 0, 0, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 0, 0, 0, 255, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 209, 207, 215, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 215, 0, 0, 0, 0, 0, 
	0, 0, 0, 217, 0, 0, 218, 0, 
	0, 0, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 0, 0, 0, 0, 
	0, 0, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 0, 0, 
	0, 256, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 13, 13, 
	14, 15, 14, 15, 16, 17, 133, 18, 
	19, 20, 20, 133, 22, 0, 24, 134, 
	24, 0, 26, 26, 27, 28, 135, 30, 
	31, 35, 34, 31, 32, 33, 136, 136, 
	34, 35, 30, 37, 38, 39, 37, 38, 
	39, 40, 41, 45, 48, 41, 42, 47, 
	43, 137, 44, 43, 44, 43, 46, 137, 
	44, 45, 40, 137, 48, 50, 51, 52, 
	50, 51, 52, 53, 54, 58, 62, 54, 
	55, 61, 56, 60, 57, 56, 57, 56, 
	59, 60, 57, 58, 53, 60, 138, 62, 
	64, 139, 64, 140, 66, 67, 68, 68, 
	140, 70, 71, 72, 70, 71, 72, 73, 
	74, 78, 102, 74, 75, 101, 76, 80, 
	77, 76, 77, 76, 79, 80, 77, 78, 
	73, 80, 81, 81, 82, 83, 82, 83, 
	84, 85, 86, 84, 85, 86, 87, 88, 
	92, 100, 88, 89, 99, 90, 94, 91, 
	90, 91, 90, 93, 94, 91, 92, 87, 
	94, 95, 141, 96, 95, 141, 96, 97, 
	98, 98, 141, 100, 102, 104, 105, 106, 
	104, 105, 106, 107, 108, 112, 132, 108, 
	109, 131, 110, 114, 111, 110, 111, 110, 
	113, 114, 111, 112, 107, 114, 115, 115, 
	116, 117, 116, 117, 118, 119, 142, 120, 
	121, 119, 120, 121, 122, 123, 127, 130, 
	123, 124, 129, 125, 142, 126, 125, 126, 
	125, 128, 142, 126, 127, 122, 142, 130, 
	132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 28, 11, 29, 
	27, 30, 8, 13, 13, 13, 31, 0, 
	8, 11, 11, 13, 13, 13, 32, 33, 
	27, 27, 17, 34, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 35, 14, 0, 0, 15, 16, 36, 
	15, 5, 17, 37, 27, 38, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 39, 27, 
	19, 40, 21, 41, 0, 0, 24, 25, 
	42, 38, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 14, 14, 
	14, 0, 0, 15, 16, 15, 15, 5, 
	17, 0, 43, 0, 19, 44, 21, 0, 
	38, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 14, 14, 14, 
	0, 0, 15, 16, 15, 15, 5, 17, 
	0, 45, 46, 45, 0, 47, 0, 0, 
	24, 25, 48, 27, 27, 49, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 38, 50, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 14, 51, 14, 0, 0, 
	15, 16, 52, 15, 5, 17, 53, 27, 
	27
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 1, 28, 
	28, 30, 30, 30, 30, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 12, 
	1, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 12, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 12, 0, 7, 1, 0, 
	0, 0, 0, 1, 1, 0, 7, 10, 
	12, 12, 0, 7, 1, 0, 0, 0, 
	0, 0, 0, 12, 1, 12, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 0, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 12, 0, 7, 1, 
	0, 12, 1, 12, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_statement_simple
end
self.bel_en_statement_simple = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_statement_nested
end
self.bel_en_statement_nested = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 37 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 44 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 43 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 45 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 47 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 42 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 48 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 18 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 46 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 33 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 53 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 51 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ s(:statement) ]
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 49 then
		begin

    @buffers[:statement_stack] << s(:statement)
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 30, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 30, 6, 
	31, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 6, 33, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 33, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 6, 35, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 35, 6, 6, 
	6, 6, 6, 6, 6, 36, 6, 37, 
	6, 37, 38, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	37, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 39, 
	6, 40, 6, 6, 41, 43, 42, 16, 
	14, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 0, 0, 26, 0, 0, 0, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 0, 0, 0, 0, 0, 0, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 0, 0, 0, 44, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 45, 45, 
	45, 45, 45, 45, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	45, 45, 45, 46, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	47, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	45, 45, 45, 45, 45, 45, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 45, 45, 45, 48, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 50, 49, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 53, 51, 
	54, 49, 53, 51, 55, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 55, 8, 56, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 8, 8, 8, 
	8, 8, 8, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 8, 
	8, 8, 57, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 55, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 55, 12, 
	56, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	12, 12, 12, 12, 12, 12, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 12, 12, 12, 58, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 60, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 61, 59, 62, 17, 
	61, 59, 63, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 0, 0, 0, 0, 0, 0, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 0, 0, 0, 64, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 63, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 66, 0, 0, 0, 
	0, 0, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 0, 0, 
	0, 65, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	0, 0, 0, 0, 0, 0, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 0, 0, 0, 67, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 68, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 68, 0, 0, 0, 0, 0, 0, 
	0, 69, 0, 0, 0, 0, 0, 0, 
	0, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 0, 0, 0, 0, 0, 
	0, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 0, 0, 0, 
	70, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 71, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 71, 6, 6, 6, 
	6, 6, 6, 6, 72, 6, 73, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 73, 8, 74, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 8, 
	8, 8, 8, 8, 8, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 8, 8, 8, 75, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 73, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	73, 12, 74, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 12, 12, 12, 12, 12, 12, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 12, 12, 12, 76, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 78, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 79, 77, 
	80, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 80, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	81, 17, 17, 82, 17, 83, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 83, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	84, 6, 84, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 84, 8, 74, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 8, 8, 8, 8, 8, 
	8, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 8, 8, 8, 
	75, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 85, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 85, 0, 0, 0, 
	0, 0, 0, 0, 86, 87, 0, 0, 
	88, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 90, 0, 
	0, 0, 0, 0, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	0, 0, 0, 89, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	83, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 83, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	91, 6, 6, 84, 6, 79, 77, 85, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 85, 0, 
	0, 0, 0, 0, 0, 0, 0, 87, 
	0, 0, 88, 0, 0, 0, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	0, 0, 0, 0, 0, 0, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 0, 0, 0, 92, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 0, 0, 0, 0, 
	0, 0, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 0, 0, 
	0, 93, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 94, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 94, 0, 0, 
	0, 0, 0, 0, 0, 95, 0, 0, 
	0, 0, 0, 0, 0, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 0, 
	0, 0, 0, 0, 0, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 0, 0, 0, 96, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 97, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	97, 6, 6, 6, 6, 6, 6, 6, 
	98, 6, 99, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 99, 8, 100, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 8, 8, 8, 8, 8, 
	8, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 8, 8, 8, 
	101, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 99, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 99, 12, 100, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 12, 12, 
	12, 12, 12, 12, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	12, 12, 12, 102, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	104, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 105, 103, 106, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 106, 17, 17, 17, 17, 
	17, 17, 17, 17, 107, 17, 17, 108, 
	17, 109, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	109, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 110, 6, 110, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 110, 8, 100, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 8, 
	8, 8, 8, 8, 8, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 8, 8, 8, 101, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 111, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	111, 0, 0, 0, 0, 0, 0, 0, 
	112, 113, 0, 0, 114, 0, 0, 0, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 116, 0, 0, 0, 0, 0, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 0, 0, 0, 115, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 109, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 109, 6, 6, 6, 6, 
	6, 6, 6, 6, 117, 6, 6, 110, 
	6, 118, 6, 105, 103, 111, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 111, 0, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	114, 0, 0, 0, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 0, 0, 
	0, 0, 0, 0, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	0, 0, 0, 119, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 6, 121, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 6, 123, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 124, 6, 125, 6, 6, 126, 
	128, 127, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 0, 0, 0, 0, 
	0, 0, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 0, 0, 
	0, 129, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 130, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 130, 0, 0, 
	0, 0, 0, 0, 0, 131, 0, 0, 
	0, 0, 0, 0, 0, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 0, 
	0, 0, 0, 0, 0, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 0, 0, 0, 132, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 133, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	133, 6, 6, 6, 6, 6, 6, 6, 
	134, 6, 135, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 135, 8, 136, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 8, 8, 8, 8, 8, 
	8, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 8, 8, 8, 
	137, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 135, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 135, 12, 136, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 12, 12, 
	12, 12, 12, 12, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	12, 12, 12, 138, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	140, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 141, 139, 142, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 142, 17, 17, 17, 17, 
	17, 17, 17, 17, 143, 17, 17, 144, 
	17, 145, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	145, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 146, 6, 146, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 146, 8, 136, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 8, 
	8, 8, 8, 8, 8, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 8, 8, 8, 137, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 147, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	147, 0, 0, 0, 0, 0, 0, 0, 
	148, 149, 0, 0, 150, 0, 0, 0, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 152, 0, 0, 0, 0, 0, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 0, 0, 0, 151, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 145, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 145, 6, 6, 6, 6, 
	6, 6, 6, 6, 153, 6, 6, 146, 
	6, 154, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	154, 6, 155, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 155, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	6, 157, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	157, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 6, 
	159, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 159, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 0, 0, 0, 0, 0, 0, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 0, 0, 0, 160, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 161, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 161, 0, 0, 0, 0, 0, 
	0, 0, 162, 0, 0, 0, 0, 0, 
	0, 0, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 0, 0, 0, 0, 
	0, 0, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 0, 0, 
	0, 163, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 164, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 164, 6, 6, 
	6, 6, 6, 6, 6, 165, 6, 166, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 166, 8, 
	167, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	8, 8, 8, 8, 8, 8, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 8, 8, 8, 168, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 166, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 166, 12, 167, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 12, 12, 12, 12, 12, 
	12, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 12, 12, 12, 
	169, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 171, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 172, 
	170, 173, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	173, 17, 17, 17, 17, 17, 17, 17, 
	17, 174, 17, 17, 175, 17, 176, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 176, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 177, 6, 177, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 177, 8, 167, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 8, 8, 8, 8, 
	8, 8, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 8, 8, 
	8, 168, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 179, 180, 0, 
	0, 181, 0, 0, 0, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 183, 
	0, 0, 0, 0, 0, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 0, 0, 0, 182, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 176, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	176, 6, 6, 6, 6, 6, 6, 6, 
	6, 184, 6, 6, 177, 6, 185, 186, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 185, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 187, 6, 188, 189, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 188, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 190, 6, 191, 6, 
	6, 192, 194, 193, 172, 170, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 0, 180, 0, 
	0, 181, 0, 0, 0, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 0, 
	0, 0, 0, 0, 0, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 0, 0, 0, 195, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 141, 139, 147, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 147, 0, 0, 0, 0, 0, 
	0, 0, 0, 149, 0, 0, 150, 0, 
	0, 0, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 0, 0, 0, 0, 
	0, 0, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 0, 0, 
	0, 196, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	0, 0, 0, 0, 0, 0, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 0, 0, 0, 197, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 198, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 198, 0, 0, 0, 0, 0, 0, 
	0, 199, 0, 0, 0, 0, 0, 0, 
	0, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 0, 0, 0, 0, 0, 
	0, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 0, 0, 0, 
	200, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 201, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 201, 6, 6, 6, 
	6, 6, 6, 6, 202, 6, 203, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 203, 8, 204, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 8, 
	8, 8, 8, 8, 8, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 8, 8, 8, 205, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 203, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	203, 12, 204, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 12, 12, 12, 12, 12, 12, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 12, 12, 12, 206, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 208, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 209, 207, 
	210, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 210, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	211, 17, 17, 212, 17, 213, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 213, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	214, 6, 214, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 214, 8, 204, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 8, 8, 8, 8, 8, 
	8, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 8, 8, 8, 
	205, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 215, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 215, 0, 0, 0, 
	0, 0, 0, 0, 216, 217, 0, 0, 
	218, 0, 0, 0, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 220, 0, 
	0, 0, 0, 0, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	0, 0, 0, 219, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	213, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 213, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	221, 6, 6, 214, 6, 222, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 222, 6, 223, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 223, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 6, 225, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 225, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 6, 227, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 227, 0, 0, 0, 0, 
	0, 0, 0, 228, 0, 0, 0, 0, 
	0, 0, 0, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 0, 0, 0, 
	0, 0, 0, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 0, 
	0, 0, 229, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 230, 
	6, 231, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	231, 0, 0, 0, 0, 0, 0, 0, 
	232, 0, 0, 0, 0, 0, 0, 0, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 0, 0, 0, 0, 0, 0, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 0, 0, 0, 233, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 234, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 234, 6, 6, 6, 6, 
	6, 6, 6, 235, 6, 236, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 236, 8, 237, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 8, 8, 
	8, 8, 8, 8, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	8, 8, 8, 238, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	236, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 236, 
	12, 237, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 12, 12, 12, 239, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 241, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 242, 240, 243, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 243, 17, 
	17, 17, 17, 17, 17, 17, 17, 244, 
	17, 17, 245, 17, 246, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 246, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 247, 
	6, 247, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	247, 8, 237, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 8, 8, 8, 8, 8, 8, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 8, 8, 8, 238, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 248, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 248, 0, 0, 0, 0, 
	0, 0, 0, 249, 250, 0, 0, 251, 
	0, 0, 0, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 253, 0, 0, 
	0, 0, 0, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 0, 
	0, 0, 252, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 246, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 246, 6, 
	6, 6, 6, 6, 6, 6, 6, 254, 
	6, 6, 247, 6, 242, 240, 248, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 248, 0, 0, 
	0, 0, 0, 0, 0, 0, 250, 0, 
	0, 251, 0, 0, 0, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 0, 
	0, 0, 0, 0, 0, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 0, 0, 0, 255, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 209, 207, 215, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 215, 0, 0, 0, 0, 0, 
	0, 0, 0, 217, 0, 0, 218, 0, 
	0, 0, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 0, 0, 0, 0, 
	0, 0, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 0, 0, 
	0, 256, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 13, 13, 
	14, 15, 14, 15, 16, 17, 133, 18, 
	19, 20, 20, 133, 22, 0, 24, 134, 
	24, 0, 26, 26, 27, 28, 135, 30, 
	31, 35, 34, 31, 32, 33, 136, 136, 
	34, 35, 30, 37, 38, 39, 37, 38, 
	39, 40, 41, 45, 48, 41, 42, 47, 
	43, 137, 44, 43, 44, 43, 46, 137, 
	44, 45, 40, 137, 48, 50, 51, 52, 
	50, 51, 52, 53, 54, 58, 62, 54, 
	55, 61, 56, 60, 57, 56, 57, 56, 
	59, 60, 57, 58, 53, 60, 138, 62, 
	64, 139, 64, 140, 66, 67, 68, 68, 
	140, 70, 71, 72, 70, 71, 72, 73, 
	74, 78, 102, 74, 75, 101, 76, 80, 
	77, 76, 77, 76, 79, 80, 77, 78, 
	73, 80, 81, 81, 82, 83, 82, 83, 
	84, 85, 86, 84, 85, 86, 87, 88, 
	92, 100, 88, 89, 99, 90, 94, 91, 
	90, 91, 90, 93, 94, 91, 92, 87, 
	94, 95, 141, 96, 95, 141, 96, 97, 
	98, 98, 141, 100, 102, 104, 105, 106, 
	104, 105, 106, 107, 108, 112, 132, 108, 
	109, 131, 110, 114, 111, 110, 111, 110, 
	113, 114, 111, 112, 107, 114, 115, 115, 
	116, 117, 116, 117, 118, 119, 142, 120, 
	121, 119, 120, 121, 122, 123, 127, 130, 
	123, 124, 129, 125, 142, 126, 125, 126, 
	125, 128, 142, 126, 127, 122, 142, 130, 
	132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 28, 11, 29, 
	27, 30, 8, 13, 13, 13, 31, 0, 
	8, 11, 11, 13, 13, 13, 32, 33, 
	27, 27, 17, 34, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 35, 14, 0, 0, 15, 16, 36, 
	15, 5, 17, 37, 27, 38, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 39, 27, 
	19, 40, 21, 41, 0, 0, 24, 25, 
	42, 38, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 14, 14, 
	14, 0, 0, 15, 16, 15, 15, 5, 
	17, 0, 43, 0, 19, 44, 21, 0, 
	38, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 14, 14, 14, 
	0, 0, 15, 16, 15, 15, 5, 17, 
	0, 45, 46, 45, 0, 47, 0, 0, 
	24, 25, 48, 27, 27, 49, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 38, 50, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 14, 51, 14, 0, 0, 
	15, 16, 52, 15, 5, 17, 53, 27, 
	27
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 1, 28, 
	28, 30, 30, 30, 30, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 12, 
	1, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 12, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 12, 0, 7, 1, 0, 
	0, 0, 0, 1, 1, 0, 7, 10, 
	12, 12, 0, 7, 1, 0, 0, 0, 
	0, 0, 0, 12, 1, 12, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 0, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 12, 0, 7, 1, 
	0, 12, 1, 12, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_statement_simple
end
self.bel_en_statement_simple = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_statement_nested
end
self.bel_en_statement_nested = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 37 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 44 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 43 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 45 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 47 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 42 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 48 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 18 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 46 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 33 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 53 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 51 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ s(:statement) ]
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 49 then
		begin

    @buffers[:statement_stack] << s(:statement)
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require          'ast'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BEL
  module Parsers
    module Expression
      module StatementNested

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include ::AST::Sexp
          include BEL::Parsers::Buffer

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 40, 
	41, 41, 9, 47, 47, 47, 
	10, 10, 10, 10, 92, 
	92, 9, 122, 48, 122, 
	10, 122, 34, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 92, 92, 
	9, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 10, 10, 92, 
	92, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	92, 92, 9, 122, 92, 
	92, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 41, 41, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 122, 
	9, 44, 92, 92, 9, 122, 
	92, 92, 9, 122, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 32, 
	1, 39, 1, 1, 1, 1, 114, 75, 
	113, 1, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 75, 114, 32, 114, 
	114, 59, 36, 36, 114, 114, 36, 1, 
	114, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 1, 1, 114, 94, 
	117, 38, 1, 1, 1, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 36, 36, 114, 114, 36, 39, 39, 
	1, 1, 1, 1, 114, 1, 114, 75, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 24, 118, 118, 114, 1, 114, 
	32, 114, 114, 59, 36, 36, 114, 114, 
	36, 1, 114, 1, 114, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1151, 1153, 1193, 1195, 1197, 1199, 1201, 1316, 
	1392, 1506, 1508, 1568, 1570, 1572, 1687, 1802, 
	1862, 1864, 1866, 1980, 2094, 2170, 2285, 2318, 
	2433, 2548, 2608, 2645, 2682, 2797, 2912, 2949, 
	2951, 3066, 3142, 3257, 3290, 3405, 3520, 3580, 
	3617, 3654, 3769, 3884, 3921, 3923, 3925, 4040, 
	4135, 4253, 4292, 4294, 4296, 4298, 4374, 4489, 
	4522, 4637, 4752, 4812, 4849, 4886, 5001, 5116, 
	5153, 5178, 5297, 5416, 5531, 5646, 5679, 5794, 
	5909, 5969, 6006, 6043, 6158, 6273, 6310, 6350, 
	6390, 6392, 6394, 6396, 6398, 6513, 6515, 6630, 
	6706, 6821, 6854, 6969, 7084, 7144, 7181, 7218, 
	7333, 7448, 7485, 7510, 7629, 7748, 7863, 7865, 
	7980, 8013, 8128, 8243, 8303, 8340, 8377, 8492, 
	8607, 8644, 8646, 8761, 8763, 8878, 8879, 8880, 
	8881, 8882, 8883, 8884, 8885, 8886, 8887
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 24, 25, 
	0, 0, 26, 0, 0, 0, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	28, 0, 0, 0, 0, 0, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 0, 0, 0, 27, 0, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 0, 21, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 21, 6, 6, 6, 6, 6, 6, 
	6, 6, 29, 6, 6, 22, 6, 30, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 30, 6, 
	31, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 6, 33, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 33, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 6, 35, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 35, 6, 6, 
	6, 6, 6, 6, 6, 36, 6, 37, 
	6, 37, 38, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	37, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 39, 
	6, 40, 6, 6, 41, 43, 42, 16, 
	14, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 0, 0, 26, 0, 0, 0, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 0, 0, 0, 0, 0, 0, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 0, 0, 0, 44, 
	0, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 0, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 45, 45, 
	45, 45, 45, 45, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	45, 45, 45, 46, 45, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 45, 
	47, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	45, 45, 45, 45, 45, 45, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 45, 45, 45, 48, 45, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 45, 50, 49, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 53, 51, 
	54, 49, 53, 51, 55, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 55, 8, 56, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 8, 8, 8, 
	8, 8, 8, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 8, 
	8, 8, 57, 8, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 8, 55, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 55, 12, 
	56, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	12, 12, 12, 12, 12, 12, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 12, 12, 12, 58, 12, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 12, 60, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 61, 59, 62, 17, 
	61, 59, 63, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 0, 0, 0, 0, 0, 0, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 0, 0, 0, 64, 
	0, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 0, 63, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 66, 0, 0, 0, 
	0, 0, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 0, 0, 
	0, 65, 0, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 0, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	0, 0, 0, 0, 0, 0, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 0, 0, 0, 67, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 0, 68, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 68, 0, 0, 0, 0, 0, 0, 
	0, 69, 0, 0, 0, 0, 0, 0, 
	0, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 0, 0, 0, 0, 0, 
	0, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 0, 0, 0, 
	70, 0, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 71, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 71, 6, 6, 6, 
	6, 6, 6, 6, 72, 6, 73, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 73, 8, 74, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 8, 
	8, 8, 8, 8, 8, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 8, 8, 8, 75, 8, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	8, 73, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	73, 12, 74, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 12, 12, 12, 12, 12, 12, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 12, 12, 12, 76, 
	12, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 12, 78, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 79, 77, 
	80, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 80, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	81, 17, 17, 82, 17, 83, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 83, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	84, 6, 84, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 84, 8, 74, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 8, 8, 8, 8, 8, 
	8, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 8, 8, 8, 
	75, 8, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 8, 85, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 85, 0, 0, 0, 
	0, 0, 0, 0, 86, 87, 0, 0, 
	88, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 90, 0, 
	0, 0, 0, 0, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	0, 0, 0, 89, 0, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 0, 
	83, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 83, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	91, 6, 6, 84, 6, 79, 77, 85, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 85, 0, 
	0, 0, 0, 0, 0, 0, 0, 87, 
	0, 0, 88, 0, 0, 0, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	0, 0, 0, 0, 0, 0, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 0, 0, 0, 92, 0, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 0, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 0, 0, 0, 0, 
	0, 0, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 0, 0, 
	0, 93, 0, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 0, 94, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 94, 0, 0, 
	0, 0, 0, 0, 0, 95, 0, 0, 
	0, 0, 0, 0, 0, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 0, 
	0, 0, 0, 0, 0, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 0, 0, 0, 96, 0, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	0, 97, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	97, 6, 6, 6, 6, 6, 6, 6, 
	98, 6, 99, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 99, 8, 100, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 8, 8, 8, 8, 8, 
	8, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 8, 8, 8, 
	101, 8, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 8, 99, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 99, 12, 100, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 12, 12, 
	12, 12, 12, 12, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	12, 12, 12, 102, 12, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 12, 
	104, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 105, 103, 106, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 106, 17, 17, 17, 17, 
	17, 17, 17, 17, 107, 17, 17, 108, 
	17, 109, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	109, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 110, 6, 110, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 110, 8, 100, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 8, 
	8, 8, 8, 8, 8, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 8, 8, 8, 101, 8, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	8, 111, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	111, 0, 0, 0, 0, 0, 0, 0, 
	112, 113, 0, 0, 114, 0, 0, 0, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 116, 0, 0, 0, 0, 0, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 0, 0, 0, 115, 
	0, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 0, 109, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 109, 6, 6, 6, 6, 
	6, 6, 6, 6, 117, 6, 6, 110, 
	6, 118, 6, 105, 103, 111, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 111, 0, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	114, 0, 0, 0, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 0, 0, 
	0, 0, 0, 0, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	0, 0, 0, 119, 0, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 0, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 6, 121, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 6, 123, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 124, 6, 125, 6, 6, 126, 
	128, 127, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 0, 0, 0, 0, 
	0, 0, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 0, 0, 
	0, 129, 0, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 0, 130, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 130, 0, 0, 
	0, 0, 0, 0, 0, 131, 0, 0, 
	0, 0, 0, 0, 0, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 0, 
	0, 0, 0, 0, 0, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 0, 0, 0, 132, 0, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	0, 133, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	133, 6, 6, 6, 6, 6, 6, 6, 
	134, 6, 135, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 135, 8, 136, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 8, 8, 8, 8, 8, 
	8, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 8, 8, 8, 
	137, 8, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 8, 135, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 135, 12, 136, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 12, 12, 
	12, 12, 12, 12, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	12, 12, 12, 138, 12, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 12, 
	140, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 141, 139, 142, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 142, 17, 17, 17, 17, 
	17, 17, 17, 17, 143, 17, 17, 144, 
	17, 145, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	145, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 146, 6, 146, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 146, 8, 136, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 8, 
	8, 8, 8, 8, 8, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 8, 8, 8, 137, 8, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	8, 147, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	147, 0, 0, 0, 0, 0, 0, 0, 
	148, 149, 0, 0, 150, 0, 0, 0, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 152, 0, 0, 0, 0, 0, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 0, 0, 0, 151, 
	0, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 0, 145, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 145, 6, 6, 6, 6, 
	6, 6, 6, 6, 153, 6, 6, 146, 
	6, 154, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	154, 6, 155, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 155, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	6, 157, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	157, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 6, 
	159, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 159, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 0, 0, 0, 0, 0, 0, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 0, 0, 0, 160, 0, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 0, 161, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 161, 0, 0, 0, 0, 0, 
	0, 0, 162, 0, 0, 0, 0, 0, 
	0, 0, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 0, 0, 0, 0, 
	0, 0, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 0, 0, 
	0, 163, 0, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 0, 164, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 164, 6, 6, 
	6, 6, 6, 6, 6, 165, 6, 166, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 166, 8, 
	167, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	8, 8, 8, 8, 8, 8, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 8, 8, 8, 168, 8, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 8, 166, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 166, 12, 167, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 12, 12, 12, 12, 12, 
	12, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 12, 12, 12, 
	169, 12, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 12, 171, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 172, 
	170, 173, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	173, 17, 17, 17, 17, 17, 17, 17, 
	17, 174, 17, 17, 175, 17, 176, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 176, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 177, 6, 177, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 177, 8, 167, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 8, 8, 8, 8, 
	8, 8, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 8, 8, 
	8, 168, 8, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 8, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 179, 180, 0, 
	0, 181, 0, 0, 0, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 183, 
	0, 0, 0, 0, 0, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 0, 0, 0, 182, 0, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	0, 176, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	176, 6, 6, 6, 6, 6, 6, 6, 
	6, 184, 6, 6, 177, 6, 185, 186, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 185, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 187, 6, 188, 189, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 188, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 190, 6, 191, 6, 
	6, 192, 194, 193, 172, 170, 178, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 178, 0, 0, 
	0, 0, 0, 0, 0, 0, 180, 0, 
	0, 181, 0, 0, 0, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 0, 
	0, 0, 0, 0, 0, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 0, 0, 0, 195, 0, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	0, 141, 139, 147, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 147, 0, 0, 0, 0, 0, 
	0, 0, 0, 149, 0, 0, 150, 0, 
	0, 0, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 0, 0, 0, 0, 
	0, 0, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 0, 0, 
	0, 196, 0, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 0, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	0, 0, 0, 0, 0, 0, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 0, 0, 0, 197, 0, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 0, 198, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 198, 0, 0, 0, 0, 0, 0, 
	0, 199, 0, 0, 0, 0, 0, 0, 
	0, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 0, 0, 0, 0, 0, 
	0, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 0, 0, 0, 
	200, 0, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 0, 201, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 201, 6, 6, 6, 
	6, 6, 6, 6, 202, 6, 203, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 203, 8, 204, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 8, 
	8, 8, 8, 8, 8, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 8, 8, 8, 205, 8, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	8, 203, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	203, 12, 204, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 12, 12, 12, 12, 12, 12, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 12, 12, 12, 206, 
	12, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 12, 208, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 209, 207, 
	210, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 210, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	211, 17, 17, 212, 17, 213, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 213, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	214, 6, 214, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 214, 8, 204, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 8, 8, 8, 8, 8, 
	8, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 8, 8, 8, 
	205, 8, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 8, 215, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 215, 0, 0, 0, 
	0, 0, 0, 0, 216, 217, 0, 0, 
	218, 0, 0, 0, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 220, 0, 
	0, 0, 0, 0, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	0, 0, 0, 219, 0, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 0, 
	213, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 213, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	221, 6, 6, 214, 6, 222, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 222, 6, 223, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 223, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 6, 225, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 225, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 6, 227, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 227, 0, 0, 0, 0, 
	0, 0, 0, 228, 0, 0, 0, 0, 
	0, 0, 0, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 0, 0, 0, 
	0, 0, 0, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 0, 
	0, 0, 229, 0, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 0, 230, 
	6, 231, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	231, 0, 0, 0, 0, 0, 0, 0, 
	232, 0, 0, 0, 0, 0, 0, 0, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 0, 0, 0, 0, 0, 0, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 0, 0, 0, 233, 
	0, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 0, 234, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 234, 6, 6, 6, 6, 
	6, 6, 6, 235, 6, 236, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 236, 8, 237, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 8, 8, 
	8, 8, 8, 8, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	8, 8, 8, 238, 8, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 8, 
	236, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 236, 
	12, 237, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 12, 12, 12, 12, 12, 12, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 12, 12, 12, 239, 12, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 12, 241, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 242, 240, 243, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 243, 17, 
	17, 17, 17, 17, 17, 17, 17, 244, 
	17, 17, 245, 17, 246, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 246, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 247, 
	6, 247, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	247, 8, 237, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 8, 8, 8, 8, 8, 8, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 8, 8, 8, 238, 
	8, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 8, 248, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 248, 0, 0, 0, 0, 
	0, 0, 0, 249, 250, 0, 0, 251, 
	0, 0, 0, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 253, 0, 0, 
	0, 0, 0, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 0, 
	0, 0, 252, 0, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 0, 246, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 246, 6, 
	6, 6, 6, 6, 6, 6, 6, 254, 
	6, 6, 247, 6, 242, 240, 248, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 248, 0, 0, 
	0, 0, 0, 0, 0, 0, 250, 0, 
	0, 251, 0, 0, 0, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 0, 
	0, 0, 0, 0, 0, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 0, 0, 0, 255, 0, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	0, 209, 207, 215, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 215, 0, 0, 0, 0, 0, 
	0, 0, 0, 217, 0, 0, 218, 0, 
	0, 0, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 0, 0, 0, 0, 
	0, 0, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 0, 0, 
	0, 256, 0, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 0, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 22, 6, 7, 
	21, 0, 8, 12, 9, 8, 9, 8, 
	11, 12, 9, 10, 5, 12, 13, 13, 
	14, 15, 14, 15, 16, 17, 133, 18, 
	19, 20, 20, 133, 22, 0, 24, 134, 
	24, 0, 26, 26, 27, 28, 135, 30, 
	31, 35, 34, 31, 32, 33, 136, 136, 
	34, 35, 30, 37, 38, 39, 37, 38, 
	39, 40, 41, 45, 48, 41, 42, 47, 
	43, 137, 44, 43, 44, 43, 46, 137, 
	44, 45, 40, 137, 48, 50, 51, 52, 
	50, 51, 52, 53, 54, 58, 62, 54, 
	55, 61, 56, 60, 57, 56, 57, 56, 
	59, 60, 57, 58, 53, 60, 138, 62, 
	64, 139, 64, 140, 66, 67, 68, 68, 
	140, 70, 71, 72, 70, 71, 72, 73, 
	74, 78, 102, 74, 75, 101, 76, 80, 
	77, 76, 77, 76, 79, 80, 77, 78, 
	73, 80, 81, 81, 82, 83, 82, 83, 
	84, 85, 86, 84, 85, 86, 87, 88, 
	92, 100, 88, 89, 99, 90, 94, 91, 
	90, 91, 90, 93, 94, 91, 92, 87, 
	94, 95, 141, 96, 95, 141, 96, 97, 
	98, 98, 141, 100, 102, 104, 105, 106, 
	104, 105, 106, 107, 108, 112, 132, 108, 
	109, 131, 110, 114, 111, 110, 111, 110, 
	113, 114, 111, 112, 107, 114, 115, 115, 
	116, 117, 116, 117, 118, 119, 142, 120, 
	121, 119, 120, 121, 122, 123, 127, 130, 
	123, 124, 129, 125, 142, 126, 125, 126, 
	125, 128, 142, 126, 127, 122, 142, 130, 
	132
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 12, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 28, 11, 29, 
	27, 30, 8, 13, 13, 13, 31, 0, 
	8, 11, 11, 13, 13, 13, 32, 33, 
	27, 27, 17, 34, 3, 4, 5, 0, 
	6, 0, 8, 9, 11, 13, 13, 13, 
	14, 35, 14, 0, 0, 15, 16, 36, 
	15, 5, 17, 37, 27, 38, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 39, 27, 
	19, 40, 21, 41, 0, 0, 24, 25, 
	42, 38, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 14, 14, 
	14, 0, 0, 15, 16, 15, 15, 5, 
	17, 0, 43, 0, 19, 44, 21, 0, 
	38, 3, 4, 5, 0, 6, 0, 8, 
	9, 11, 13, 13, 13, 14, 14, 14, 
	0, 0, 15, 16, 15, 15, 5, 17, 
	0, 45, 46, 45, 0, 47, 0, 0, 
	24, 25, 48, 27, 27, 49, 3, 4, 
	5, 0, 6, 0, 8, 9, 11, 13, 
	13, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 5, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 38, 50, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 14, 51, 14, 0, 0, 
	15, 16, 52, 15, 5, 17, 53, 27, 
	27
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 12, 1, 28, 
	28, 30, 30, 30, 30, 7, 10, 12, 
	12, 12, 1, 1, 1, 1, 0, 7, 
	10, 12, 12, 0, 7, 1, 0, 12, 
	1, 1, 1, 0, 7, 10, 12, 12, 
	0, 7, 1, 0, 0, 12, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	7, 10, 12, 12, 0, 7, 1, 0, 
	0, 0, 0, 1, 1, 0, 7, 10, 
	12, 12, 0, 7, 1, 0, 0, 0, 
	0, 0, 0, 12, 1, 12, 1, 1, 
	1, 0, 7, 10, 12, 12, 0, 7, 
	1, 0, 0, 0, 0, 1, 0, 1, 
	0, 7, 10, 12, 12, 0, 7, 1, 
	0, 12, 1, 12, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_statement_simple
end
self.bel_en_statement_simple = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_statement_nested
end
self.bel_en_statement_nested = 1;


      # end: ragel        
          end

          def each
            @buffers = {}
            eof      = :ignored
            stack    = []
            data     = @content.unpack('C*')
            p        = 0
            pe       = data.length
            eof      = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 37 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 44 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 41 then
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 43 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 45 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 47 then
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter = s(:parameter,
                   s(:prefix, @buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
	when 16 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 31 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = s(:relationship,
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 42 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || s(:comment, nil)
  		end
	when 48 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = s(:comment,
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield s(:nested_statement, @buffers[:statement_stack][-1])
  		end
	when 18 then
		begin

    @buffers[:subject]    = s(:subject,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 46 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= s(:comment, nil)
    yield s(:statement_simple,
            s(:statement,
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 33 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    yield @parameter
  		end
	when 15 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = s(:identifier,
                            utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:function, fx)
  		end
	when 32 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    yield @parameter
  		end
	when 14 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
	when 53 then
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:term_stack] << s(:term)
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 52 then
		begin

    @buffers[:ident] = s(:identifier,
                         utf8_string(@buffers[:ident]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:ident])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 51 then
		begin

    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]))
  		end
		begin

    @parameter ||= s(:parameter, s(:prefix, nil))
    @parameter   = @parameter << s(:value, @buffers[:string])
  		end
		begin

    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << s(:argument, @parameter)
    @parameter                = nil
  		end
		begin

    @buffers[:object]     = s(:object,
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, @buffers[:object])
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << s(:object, inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    @buffers[:statement_stack] = [ s(:statement) ]
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 49 then
		begin

    @buffers[:statement_stack] << s(:statement)
  		end
		begin

    @buffers[:term_stack] = [ s(:term) ]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 28 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = s(:identifier,
                             utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 30 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = s(:string,
                          utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BEL::Parsers::Expression::StatementNested.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
