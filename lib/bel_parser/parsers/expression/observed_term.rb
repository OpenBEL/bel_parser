
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	10, 47, 47, 47, 10, 
	10, 10, 10, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 39, 1, 1, 
	1, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 38, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 935, 937, 
	939, 941, 943, 1058, 1134, 1248, 1250, 1310, 
	1312, 1314, 1429, 1544, 1604, 1606, 1608, 1722, 
	1836, 1912, 2027, 2060, 2175, 2290, 2350, 2387, 
	2424, 2539, 2654, 2691, 2693, 2808, 2884, 2999, 
	3032, 3147, 3262, 3322, 3359, 3396, 3511, 3626, 
	3663, 3665, 3667, 3782, 3821, 3823, 3825, 3827, 
	3828, 3829, 3830, 3831, 3832, 3833
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	33, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 34, 30, 32, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 32, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 34, 6, 35, 
	6, 6, 36, 38, 37, 16, 14, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 23, 26, 
	23, 23, 27, 23, 23, 23, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	23, 23, 23, 23, 23, 23, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 23, 23, 23, 39, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 40, 40, 40, 40, 
	40, 40, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 40, 40, 
	40, 41, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 42, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 40, 40, 
	40, 40, 40, 40, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	40, 40, 40, 43, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	45, 44, 47, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 48, 46, 49, 44, 
	48, 46, 50, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 50, 8, 51, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 8, 8, 8, 8, 8, 
	8, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 8, 8, 8, 
	52, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 50, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 12, 51, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 12, 12, 
	12, 12, 12, 12, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	12, 12, 12, 53, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	55, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 56, 54, 58, 57, 56, 54, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 0, 0, 0, 60, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 59, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 62, 0, 0, 0, 0, 0, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 0, 0, 0, 61, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 0, 0, 
	0, 0, 0, 0, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	0, 0, 0, 63, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	64, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 64, 
	0, 0, 0, 0, 0, 0, 0, 65, 
	0, 0, 0, 0, 0, 0, 0, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 0, 0, 0, 66, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 67, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 67, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 69, 8, 70, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 8, 8, 8, 
	8, 8, 8, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 8, 
	8, 8, 71, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 69, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 69, 12, 
	70, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	12, 12, 12, 12, 12, 12, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 12, 12, 12, 72, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 74, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 75, 73, 76, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 76, 17, 17, 
	17, 17, 17, 17, 17, 17, 77, 17, 
	17, 78, 17, 79, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 79, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 80, 6, 
	80, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 80, 
	8, 70, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 8, 8, 8, 8, 8, 8, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 8, 8, 8, 71, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 81, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 81, 23, 23, 23, 23, 23, 
	23, 23, 82, 83, 23, 23, 84, 23, 
	23, 23, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 23, 23, 23, 
	23, 23, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 23, 23, 
	23, 85, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 79, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 79, 30, 30, 
	30, 30, 30, 30, 30, 30, 87, 30, 
	30, 80, 30, 75, 73, 81, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 81, 23, 23, 23, 
	23, 23, 23, 23, 23, 83, 23, 23, 
	84, 23, 23, 23, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 23, 23, 
	23, 23, 23, 23, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	23, 23, 23, 88, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 0, 0, 0, 0, 0, 0, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 0, 0, 0, 89, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 90, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 90, 0, 0, 0, 0, 
	0, 0, 0, 91, 0, 0, 0, 0, 
	0, 0, 0, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 0, 0, 0, 
	0, 0, 0, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 0, 
	0, 0, 92, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 93, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 93, 6, 
	6, 6, 6, 6, 6, 6, 94, 6, 
	95, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 95, 
	8, 96, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 8, 8, 8, 8, 8, 8, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 8, 8, 8, 97, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 95, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 95, 12, 96, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 12, 12, 12, 12, 
	12, 12, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 12, 12, 
	12, 98, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 100, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	101, 99, 102, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 102, 17, 17, 17, 17, 17, 17, 
	17, 17, 103, 17, 17, 104, 17, 105, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 105, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 106, 6, 106, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 106, 8, 96, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 8, 8, 8, 
	8, 8, 8, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 8, 
	8, 8, 97, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 107, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 107, 23, 
	23, 23, 23, 23, 23, 23, 108, 109, 
	23, 23, 110, 23, 23, 23, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	112, 23, 23, 23, 23, 23, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 23, 23, 23, 111, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 105, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 105, 30, 30, 30, 30, 30, 30, 
	30, 30, 113, 30, 30, 106, 30, 114, 
	30, 101, 99, 107, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 107, 23, 23, 23, 23, 23, 
	23, 23, 23, 109, 23, 23, 110, 23, 
	23, 23, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 23, 23, 23, 23, 
	23, 23, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 23, 23, 
	23, 115, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 116, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 117, 6, 118, 6, 6, 
	119, 121, 120, 6, 6, 6, 6, 30, 
	30, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 18, 6, 7, 
	17, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 63, 14, 15, 16, 16, 63, 18, 
	0, 20, 64, 20, 0, 22, 22, 23, 
	24, 65, 26, 27, 31, 30, 27, 28, 
	29, 0, 66, 66, 30, 31, 26, 33, 
	34, 35, 33, 34, 35, 36, 37, 41, 
	44, 37, 38, 43, 39, 67, 40, 39, 
	40, 39, 42, 67, 40, 41, 36, 67, 
	44, 46, 47, 48, 46, 47, 48, 49, 
	50, 54, 58, 50, 51, 57, 52, 56, 
	53, 52, 53, 52, 55, 56, 53, 54, 
	49, 56, 68, 58, 69, 60, 61, 62, 
	62, 69
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	0, 21, 0, 0, 22, 23, 24, 25, 
	26, 11, 27, 25, 28, 8, 13, 13, 
	13, 29, 0, 8, 11, 11, 13, 13, 
	13, 12, 30, 31, 25, 25, 19, 32, 
	3, 4, 5, 0, 6, 0, 8, 9, 
	11, 13, 13, 13, 15, 33, 15, 0, 
	0, 17, 18, 34, 17, 5, 19, 35, 
	25, 2, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 15, 
	15, 0, 0, 17, 18, 17, 17, 5, 
	19, 0, 36, 25, 37, 0, 0, 22, 
	23, 38
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 12, 16, 26, 26, 28, 28, 28, 
	28, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 63;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 19;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 21;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 32;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 45;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 59;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 25 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 27 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 32
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 31 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 30 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	10, 47, 47, 47, 10, 
	10, 10, 10, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 39, 1, 1, 
	1, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 38, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 935, 937, 
	939, 941, 943, 1058, 1134, 1248, 1250, 1310, 
	1312, 1314, 1429, 1544, 1604, 1606, 1608, 1722, 
	1836, 1912, 2027, 2060, 2175, 2290, 2350, 2387, 
	2424, 2539, 2654, 2691, 2693, 2808, 2884, 2999, 
	3032, 3147, 3262, 3322, 3359, 3396, 3511, 3626, 
	3663, 3665, 3667, 3782, 3821, 3823, 3825, 3827, 
	3828, 3829, 3830, 3831, 3832, 3833
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	33, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 34, 30, 32, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 32, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 34, 6, 35, 
	6, 6, 36, 38, 37, 16, 14, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 23, 26, 
	23, 23, 27, 23, 23, 23, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	23, 23, 23, 23, 23, 23, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 23, 23, 23, 39, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 40, 40, 40, 40, 
	40, 40, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 40, 40, 
	40, 41, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 42, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 40, 40, 
	40, 40, 40, 40, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	40, 40, 40, 43, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	45, 44, 47, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 48, 46, 49, 44, 
	48, 46, 50, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 50, 8, 51, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 8, 8, 8, 8, 8, 
	8, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 8, 8, 8, 
	52, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 50, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 12, 51, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 12, 12, 
	12, 12, 12, 12, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	12, 12, 12, 53, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	55, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 56, 54, 58, 57, 56, 54, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 0, 0, 0, 60, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 59, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 62, 0, 0, 0, 0, 0, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 0, 0, 0, 61, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 0, 0, 
	0, 0, 0, 0, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	0, 0, 0, 63, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	64, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 64, 
	0, 0, 0, 0, 0, 0, 0, 65, 
	0, 0, 0, 0, 0, 0, 0, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 0, 0, 0, 66, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 67, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 67, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 69, 8, 70, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 8, 8, 8, 
	8, 8, 8, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 8, 
	8, 8, 71, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 69, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 69, 12, 
	70, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	12, 12, 12, 12, 12, 12, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 12, 12, 12, 72, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 74, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 75, 73, 76, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 76, 17, 17, 
	17, 17, 17, 17, 17, 17, 77, 17, 
	17, 78, 17, 79, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 79, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 80, 6, 
	80, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 80, 
	8, 70, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 8, 8, 8, 8, 8, 8, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 8, 8, 8, 71, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 81, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 81, 23, 23, 23, 23, 23, 
	23, 23, 82, 83, 23, 23, 84, 23, 
	23, 23, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 23, 23, 23, 
	23, 23, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 23, 23, 
	23, 85, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 79, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 79, 30, 30, 
	30, 30, 30, 30, 30, 30, 87, 30, 
	30, 80, 30, 75, 73, 81, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 81, 23, 23, 23, 
	23, 23, 23, 23, 23, 83, 23, 23, 
	84, 23, 23, 23, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 23, 23, 
	23, 23, 23, 23, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	23, 23, 23, 88, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 0, 0, 0, 0, 0, 0, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 0, 0, 0, 89, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 90, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 90, 0, 0, 0, 0, 
	0, 0, 0, 91, 0, 0, 0, 0, 
	0, 0, 0, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 0, 0, 0, 
	0, 0, 0, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 0, 
	0, 0, 92, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 93, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 93, 6, 
	6, 6, 6, 6, 6, 6, 94, 6, 
	95, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 95, 
	8, 96, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 8, 8, 8, 8, 8, 8, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 8, 8, 8, 97, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 95, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 95, 12, 96, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 12, 12, 12, 12, 
	12, 12, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 12, 12, 
	12, 98, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 100, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	101, 99, 102, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 102, 17, 17, 17, 17, 17, 17, 
	17, 17, 103, 17, 17, 104, 17, 105, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 105, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 106, 6, 106, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 106, 8, 96, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 8, 8, 8, 
	8, 8, 8, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 8, 
	8, 8, 97, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 107, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 107, 23, 
	23, 23, 23, 23, 23, 23, 108, 109, 
	23, 23, 110, 23, 23, 23, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	112, 23, 23, 23, 23, 23, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 23, 23, 23, 111, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 105, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 105, 30, 30, 30, 30, 30, 30, 
	30, 30, 113, 30, 30, 106, 30, 114, 
	30, 101, 99, 107, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 107, 23, 23, 23, 23, 23, 
	23, 23, 23, 109, 23, 23, 110, 23, 
	23, 23, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 23, 23, 23, 23, 
	23, 23, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 23, 23, 
	23, 115, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 116, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 117, 6, 118, 6, 6, 
	119, 121, 120, 6, 6, 6, 6, 30, 
	30, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 18, 6, 7, 
	17, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 63, 14, 15, 16, 16, 63, 18, 
	0, 20, 64, 20, 0, 22, 22, 23, 
	24, 65, 26, 27, 31, 30, 27, 28, 
	29, 0, 66, 66, 30, 31, 26, 33, 
	34, 35, 33, 34, 35, 36, 37, 41, 
	44, 37, 38, 43, 39, 67, 40, 39, 
	40, 39, 42, 67, 40, 41, 36, 67, 
	44, 46, 47, 48, 46, 47, 48, 49, 
	50, 54, 58, 50, 51, 57, 52, 56, 
	53, 52, 53, 52, 55, 56, 53, 54, 
	49, 56, 68, 58, 69, 60, 61, 62, 
	62, 69
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	0, 21, 0, 0, 22, 23, 24, 25, 
	26, 11, 27, 25, 28, 8, 13, 13, 
	13, 29, 0, 8, 11, 11, 13, 13, 
	13, 12, 30, 31, 25, 25, 19, 32, 
	3, 4, 5, 0, 6, 0, 8, 9, 
	11, 13, 13, 13, 15, 33, 15, 0, 
	0, 17, 18, 34, 17, 5, 19, 35, 
	25, 2, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 15, 
	15, 0, 0, 17, 18, 17, 17, 5, 
	19, 0, 36, 25, 37, 0, 0, 22, 
	23, 38
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 12, 16, 26, 26, 28, 28, 28, 
	28, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 63;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 19;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 21;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 32;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 45;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 59;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 25 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 27 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 32
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 31 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 30 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	10, 47, 47, 47, 10, 
	10, 10, 10, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 39, 1, 1, 
	1, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 38, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 935, 937, 
	939, 941, 943, 1058, 1134, 1248, 1250, 1310, 
	1312, 1314, 1429, 1544, 1604, 1606, 1608, 1722, 
	1836, 1912, 2027, 2060, 2175, 2290, 2350, 2387, 
	2424, 2539, 2654, 2691, 2693, 2808, 2884, 2999, 
	3032, 3147, 3262, 3322, 3359, 3396, 3511, 3626, 
	3663, 3665, 3667, 3782, 3821, 3823, 3825, 3827, 
	3828, 3829, 3830, 3831, 3832, 3833
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	33, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 34, 30, 32, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 32, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 34, 6, 35, 
	6, 6, 36, 38, 37, 16, 14, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 23, 26, 
	23, 23, 27, 23, 23, 23, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	23, 23, 23, 23, 23, 23, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 23, 23, 23, 39, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 40, 40, 40, 40, 
	40, 40, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 40, 40, 
	40, 41, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 42, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 40, 40, 
	40, 40, 40, 40, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	40, 40, 40, 43, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	45, 44, 47, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 48, 46, 49, 44, 
	48, 46, 50, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 50, 8, 51, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 8, 8, 8, 8, 8, 
	8, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 8, 8, 8, 
	52, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 50, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 12, 51, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 12, 12, 
	12, 12, 12, 12, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	12, 12, 12, 53, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	55, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 56, 54, 58, 57, 56, 54, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 0, 0, 0, 60, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 59, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 62, 0, 0, 0, 0, 0, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 0, 0, 0, 61, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 0, 0, 
	0, 0, 0, 0, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	0, 0, 0, 63, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	64, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 64, 
	0, 0, 0, 0, 0, 0, 0, 65, 
	0, 0, 0, 0, 0, 0, 0, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 0, 0, 0, 66, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 67, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 67, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 69, 8, 70, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 8, 8, 8, 
	8, 8, 8, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 8, 
	8, 8, 71, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 69, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 69, 12, 
	70, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	12, 12, 12, 12, 12, 12, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 12, 12, 12, 72, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 74, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 75, 73, 76, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 76, 17, 17, 
	17, 17, 17, 17, 17, 17, 77, 17, 
	17, 78, 17, 79, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 79, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 80, 6, 
	80, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 80, 
	8, 70, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 8, 8, 8, 8, 8, 8, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 8, 8, 8, 71, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 81, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 81, 23, 23, 23, 23, 23, 
	23, 23, 82, 83, 23, 23, 84, 23, 
	23, 23, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 23, 23, 23, 
	23, 23, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 23, 23, 
	23, 85, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 79, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 79, 30, 30, 
	30, 30, 30, 30, 30, 30, 87, 30, 
	30, 80, 30, 75, 73, 81, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 81, 23, 23, 23, 
	23, 23, 23, 23, 23, 83, 23, 23, 
	84, 23, 23, 23, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 23, 23, 
	23, 23, 23, 23, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	23, 23, 23, 88, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 0, 0, 0, 0, 0, 0, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 0, 0, 0, 89, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 90, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 90, 0, 0, 0, 0, 
	0, 0, 0, 91, 0, 0, 0, 0, 
	0, 0, 0, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 0, 0, 0, 
	0, 0, 0, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 0, 
	0, 0, 92, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 93, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 93, 6, 
	6, 6, 6, 6, 6, 6, 94, 6, 
	95, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 95, 
	8, 96, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 8, 8, 8, 8, 8, 8, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 8, 8, 8, 97, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 95, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 95, 12, 96, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 12, 12, 12, 12, 
	12, 12, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 12, 12, 
	12, 98, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 100, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	101, 99, 102, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 102, 17, 17, 17, 17, 17, 17, 
	17, 17, 103, 17, 17, 104, 17, 105, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 105, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 106, 6, 106, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 106, 8, 96, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 8, 8, 8, 
	8, 8, 8, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 8, 
	8, 8, 97, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 107, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 107, 23, 
	23, 23, 23, 23, 23, 23, 108, 109, 
	23, 23, 110, 23, 23, 23, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	112, 23, 23, 23, 23, 23, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 23, 23, 23, 111, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 105, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 105, 30, 30, 30, 30, 30, 30, 
	30, 30, 113, 30, 30, 106, 30, 114, 
	30, 101, 99, 107, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 107, 23, 23, 23, 23, 23, 
	23, 23, 23, 109, 23, 23, 110, 23, 
	23, 23, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 23, 23, 23, 23, 
	23, 23, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 23, 23, 
	23, 115, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 116, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 117, 6, 118, 6, 6, 
	119, 121, 120, 6, 6, 6, 6, 30, 
	30, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 18, 6, 7, 
	17, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 63, 14, 15, 16, 16, 63, 18, 
	0, 20, 64, 20, 0, 22, 22, 23, 
	24, 65, 26, 27, 31, 30, 27, 28, 
	29, 0, 66, 66, 30, 31, 26, 33, 
	34, 35, 33, 34, 35, 36, 37, 41, 
	44, 37, 38, 43, 39, 67, 40, 39, 
	40, 39, 42, 67, 40, 41, 36, 67, 
	44, 46, 47, 48, 46, 47, 48, 49, 
	50, 54, 58, 50, 51, 57, 52, 56, 
	53, 52, 53, 52, 55, 56, 53, 54, 
	49, 56, 68, 58, 69, 60, 61, 62, 
	62, 69
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	0, 21, 0, 0, 22, 23, 24, 25, 
	26, 11, 27, 25, 28, 8, 13, 13, 
	13, 29, 0, 8, 11, 11, 13, 13, 
	13, 12, 30, 31, 25, 25, 19, 32, 
	3, 4, 5, 0, 6, 0, 8, 9, 
	11, 13, 13, 13, 15, 33, 15, 0, 
	0, 17, 18, 34, 17, 5, 19, 35, 
	25, 2, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 15, 
	15, 0, 0, 17, 18, 17, 17, 5, 
	19, 0, 36, 25, 37, 0, 0, 22, 
	23, 38
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 12, 16, 26, 26, 28, 28, 28, 
	28, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 63;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 19;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 21;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 32;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 45;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 59;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 25 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 27 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 32
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 31 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 30 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	10, 47, 47, 47, 10, 
	10, 10, 10, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 39, 1, 1, 
	1, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 38, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 935, 937, 
	939, 941, 943, 1058, 1134, 1248, 1250, 1310, 
	1312, 1314, 1429, 1544, 1604, 1606, 1608, 1722, 
	1836, 1912, 2027, 2060, 2175, 2290, 2350, 2387, 
	2424, 2539, 2654, 2691, 2693, 2808, 2884, 2999, 
	3032, 3147, 3262, 3322, 3359, 3396, 3511, 3626, 
	3663, 3665, 3667, 3782, 3821, 3823, 3825, 3827, 
	3828, 3829, 3830, 3831, 3832, 3833
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	33, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 34, 30, 32, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 32, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 34, 6, 35, 
	6, 6, 36, 38, 37, 16, 14, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 23, 26, 
	23, 23, 27, 23, 23, 23, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	23, 23, 23, 23, 23, 23, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 23, 23, 23, 39, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 40, 40, 40, 40, 
	40, 40, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 40, 40, 
	40, 41, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 42, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 40, 40, 
	40, 40, 40, 40, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	40, 40, 40, 43, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	45, 44, 47, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 48, 46, 49, 44, 
	48, 46, 50, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 50, 8, 51, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 8, 8, 8, 8, 8, 
	8, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 8, 8, 8, 
	52, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 50, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 12, 51, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 12, 12, 
	12, 12, 12, 12, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	12, 12, 12, 53, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	55, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 56, 54, 58, 57, 56, 54, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 0, 0, 0, 60, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 59, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 62, 0, 0, 0, 0, 0, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 0, 0, 0, 61, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 0, 0, 
	0, 0, 0, 0, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	0, 0, 0, 63, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	64, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 64, 
	0, 0, 0, 0, 0, 0, 0, 65, 
	0, 0, 0, 0, 0, 0, 0, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 0, 0, 0, 66, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 67, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 67, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 69, 8, 70, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 8, 8, 8, 
	8, 8, 8, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 8, 
	8, 8, 71, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 69, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 69, 12, 
	70, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	12, 12, 12, 12, 12, 12, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 12, 12, 12, 72, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 74, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 75, 73, 76, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 76, 17, 17, 
	17, 17, 17, 17, 17, 17, 77, 17, 
	17, 78, 17, 79, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 79, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 80, 6, 
	80, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 80, 
	8, 70, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 8, 8, 8, 8, 8, 8, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 8, 8, 8, 71, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 81, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 81, 23, 23, 23, 23, 23, 
	23, 23, 82, 83, 23, 23, 84, 23, 
	23, 23, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 23, 23, 23, 
	23, 23, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 23, 23, 
	23, 85, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 79, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 79, 30, 30, 
	30, 30, 30, 30, 30, 30, 87, 30, 
	30, 80, 30, 75, 73, 81, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 81, 23, 23, 23, 
	23, 23, 23, 23, 23, 83, 23, 23, 
	84, 23, 23, 23, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 23, 23, 
	23, 23, 23, 23, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	23, 23, 23, 88, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 0, 0, 0, 0, 0, 0, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 0, 0, 0, 89, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 90, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 90, 0, 0, 0, 0, 
	0, 0, 0, 91, 0, 0, 0, 0, 
	0, 0, 0, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 0, 0, 0, 
	0, 0, 0, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 0, 
	0, 0, 92, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 93, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 93, 6, 
	6, 6, 6, 6, 6, 6, 94, 6, 
	95, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 95, 
	8, 96, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 8, 8, 8, 8, 8, 8, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 8, 8, 8, 97, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 95, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 95, 12, 96, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 12, 12, 12, 12, 
	12, 12, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 12, 12, 
	12, 98, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 100, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	101, 99, 102, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 102, 17, 17, 17, 17, 17, 17, 
	17, 17, 103, 17, 17, 104, 17, 105, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 105, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 106, 6, 106, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 106, 8, 96, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 8, 8, 8, 
	8, 8, 8, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 8, 
	8, 8, 97, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 107, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 107, 23, 
	23, 23, 23, 23, 23, 23, 108, 109, 
	23, 23, 110, 23, 23, 23, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	112, 23, 23, 23, 23, 23, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 23, 23, 23, 111, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 105, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 105, 30, 30, 30, 30, 30, 30, 
	30, 30, 113, 30, 30, 106, 30, 114, 
	30, 101, 99, 107, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 107, 23, 23, 23, 23, 23, 
	23, 23, 23, 109, 23, 23, 110, 23, 
	23, 23, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 23, 23, 23, 23, 
	23, 23, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 23, 23, 
	23, 115, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 116, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 117, 6, 118, 6, 6, 
	119, 121, 120, 6, 6, 6, 6, 30, 
	30, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 18, 6, 7, 
	17, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 63, 14, 15, 16, 16, 63, 18, 
	0, 20, 64, 20, 0, 22, 22, 23, 
	24, 65, 26, 27, 31, 30, 27, 28, 
	29, 0, 66, 66, 30, 31, 26, 33, 
	34, 35, 33, 34, 35, 36, 37, 41, 
	44, 37, 38, 43, 39, 67, 40, 39, 
	40, 39, 42, 67, 40, 41, 36, 67, 
	44, 46, 47, 48, 46, 47, 48, 49, 
	50, 54, 58, 50, 51, 57, 52, 56, 
	53, 52, 53, 52, 55, 56, 53, 54, 
	49, 56, 68, 58, 69, 60, 61, 62, 
	62, 69
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	0, 21, 0, 0, 22, 23, 24, 25, 
	26, 11, 27, 25, 28, 8, 13, 13, 
	13, 29, 0, 8, 11, 11, 13, 13, 
	13, 12, 30, 31, 25, 25, 19, 32, 
	3, 4, 5, 0, 6, 0, 8, 9, 
	11, 13, 13, 13, 15, 33, 15, 0, 
	0, 17, 18, 34, 17, 5, 19, 35, 
	25, 2, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 15, 
	15, 0, 0, 17, 18, 17, 17, 5, 
	19, 0, 36, 25, 37, 0, 0, 22, 
	23, 38
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 12, 16, 26, 26, 28, 28, 28, 
	28, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 63;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 19;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 21;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 32;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 45;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 59;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 25 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 27 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 32
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 31 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 30 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	10, 47, 47, 47, 10, 
	10, 10, 10, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 39, 1, 1, 
	1, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 38, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 935, 937, 
	939, 941, 943, 1058, 1134, 1248, 1250, 1310, 
	1312, 1314, 1429, 1544, 1604, 1606, 1608, 1722, 
	1836, 1912, 2027, 2060, 2175, 2290, 2350, 2387, 
	2424, 2539, 2654, 2691, 2693, 2808, 2884, 2999, 
	3032, 3147, 3262, 3322, 3359, 3396, 3511, 3626, 
	3663, 3665, 3667, 3782, 3821, 3823, 3825, 3827, 
	3828, 3829, 3830, 3831, 3832, 3833
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	33, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 34, 30, 32, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 32, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 34, 6, 35, 
	6, 6, 36, 38, 37, 16, 14, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 23, 26, 
	23, 23, 27, 23, 23, 23, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	23, 23, 23, 23, 23, 23, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 23, 23, 23, 39, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 40, 40, 40, 40, 
	40, 40, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 40, 40, 
	40, 41, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 42, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 40, 40, 
	40, 40, 40, 40, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	40, 40, 40, 43, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	45, 44, 47, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 48, 46, 49, 44, 
	48, 46, 50, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 50, 8, 51, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 8, 8, 8, 8, 8, 
	8, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 8, 8, 8, 
	52, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 50, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 12, 51, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 12, 12, 
	12, 12, 12, 12, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	12, 12, 12, 53, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	55, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 56, 54, 58, 57, 56, 54, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 0, 0, 0, 60, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 59, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 62, 0, 0, 0, 0, 0, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 0, 0, 0, 61, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 0, 0, 
	0, 0, 0, 0, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	0, 0, 0, 63, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	64, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 64, 
	0, 0, 0, 0, 0, 0, 0, 65, 
	0, 0, 0, 0, 0, 0, 0, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 0, 0, 0, 66, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 67, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 67, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 69, 8, 70, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 8, 8, 8, 
	8, 8, 8, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 8, 
	8, 8, 71, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 69, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 69, 12, 
	70, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	12, 12, 12, 12, 12, 12, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 12, 12, 12, 72, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 74, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 75, 73, 76, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 76, 17, 17, 
	17, 17, 17, 17, 17, 17, 77, 17, 
	17, 78, 17, 79, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 79, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 80, 6, 
	80, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 80, 
	8, 70, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 8, 8, 8, 8, 8, 8, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 8, 8, 8, 71, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 81, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 81, 23, 23, 23, 23, 23, 
	23, 23, 82, 83, 23, 23, 84, 23, 
	23, 23, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 23, 23, 23, 
	23, 23, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 23, 23, 
	23, 85, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 79, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 79, 30, 30, 
	30, 30, 30, 30, 30, 30, 87, 30, 
	30, 80, 30, 75, 73, 81, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 81, 23, 23, 23, 
	23, 23, 23, 23, 23, 83, 23, 23, 
	84, 23, 23, 23, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 23, 23, 
	23, 23, 23, 23, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	23, 23, 23, 88, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 0, 0, 0, 0, 0, 0, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 0, 0, 0, 89, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 90, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 90, 0, 0, 0, 0, 
	0, 0, 0, 91, 0, 0, 0, 0, 
	0, 0, 0, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 0, 0, 0, 
	0, 0, 0, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 0, 
	0, 0, 92, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 93, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 93, 6, 
	6, 6, 6, 6, 6, 6, 94, 6, 
	95, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 95, 
	8, 96, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 8, 8, 8, 8, 8, 8, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 8, 8, 8, 97, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 95, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 95, 12, 96, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 12, 12, 12, 12, 
	12, 12, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 12, 12, 
	12, 98, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 100, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	101, 99, 102, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 102, 17, 17, 17, 17, 17, 17, 
	17, 17, 103, 17, 17, 104, 17, 105, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 105, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 106, 6, 106, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 106, 8, 96, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 8, 8, 8, 
	8, 8, 8, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 8, 
	8, 8, 97, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 107, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 107, 23, 
	23, 23, 23, 23, 23, 23, 108, 109, 
	23, 23, 110, 23, 23, 23, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	112, 23, 23, 23, 23, 23, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 23, 23, 23, 111, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 105, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 105, 30, 30, 30, 30, 30, 30, 
	30, 30, 113, 30, 30, 106, 30, 114, 
	30, 101, 99, 107, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 107, 23, 23, 23, 23, 23, 
	23, 23, 23, 109, 23, 23, 110, 23, 
	23, 23, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 23, 23, 23, 23, 
	23, 23, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 23, 23, 
	23, 115, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 116, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 117, 6, 118, 6, 6, 
	119, 121, 120, 6, 6, 6, 6, 30, 
	30, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 18, 6, 7, 
	17, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 63, 14, 15, 16, 16, 63, 18, 
	0, 20, 64, 20, 0, 22, 22, 23, 
	24, 65, 26, 27, 31, 30, 27, 28, 
	29, 0, 66, 66, 30, 31, 26, 33, 
	34, 35, 33, 34, 35, 36, 37, 41, 
	44, 37, 38, 43, 39, 67, 40, 39, 
	40, 39, 42, 67, 40, 41, 36, 67, 
	44, 46, 47, 48, 46, 47, 48, 49, 
	50, 54, 58, 50, 51, 57, 52, 56, 
	53, 52, 53, 52, 55, 56, 53, 54, 
	49, 56, 68, 58, 69, 60, 61, 62, 
	62, 69
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	0, 21, 0, 0, 22, 23, 24, 25, 
	26, 11, 27, 25, 28, 8, 13, 13, 
	13, 29, 0, 8, 11, 11, 13, 13, 
	13, 12, 30, 31, 25, 25, 19, 32, 
	3, 4, 5, 0, 6, 0, 8, 9, 
	11, 13, 13, 13, 15, 33, 15, 0, 
	0, 17, 18, 34, 17, 5, 19, 35, 
	25, 2, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 15, 
	15, 0, 0, 17, 18, 17, 17, 5, 
	19, 0, 36, 25, 37, 0, 0, 22, 
	23, 38
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 12, 16, 26, 26, 28, 28, 28, 
	28, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 63;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 19;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 21;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 32;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 45;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 59;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 25 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 27 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 32
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 31 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 30 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module ObservedTerm

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	10, 47, 47, 47, 10, 
	10, 10, 10, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 39, 39, 1, 1, 
	1, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 38, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 895, 935, 937, 
	939, 941, 943, 1058, 1134, 1248, 1250, 1310, 
	1312, 1314, 1429, 1544, 1604, 1606, 1608, 1722, 
	1836, 1912, 2027, 2060, 2175, 2290, 2350, 2387, 
	2424, 2539, 2654, 2691, 2693, 2808, 2884, 2999, 
	3032, 3147, 3262, 3322, 3359, 3396, 3511, 3626, 
	3663, 3665, 3667, 3782, 3821, 3823, 3825, 3827, 
	3828, 3829, 3830, 3831, 3832, 3833
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	33, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 34, 30, 32, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 32, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 34, 6, 35, 
	6, 6, 36, 38, 37, 16, 14, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 23, 26, 
	23, 23, 27, 23, 23, 23, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	23, 23, 23, 23, 23, 23, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 23, 23, 23, 39, 23, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 23, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 40, 40, 40, 40, 
	40, 40, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 40, 40, 
	40, 41, 40, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 40, 42, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 40, 40, 
	40, 40, 40, 40, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	40, 40, 40, 43, 40, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 40, 
	45, 44, 47, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 48, 46, 49, 44, 
	48, 46, 50, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 50, 8, 51, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 8, 8, 8, 8, 8, 
	8, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 8, 8, 8, 
	52, 8, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 8, 50, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 50, 12, 51, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 12, 12, 
	12, 12, 12, 12, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	12, 12, 12, 53, 12, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 12, 
	55, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 56, 54, 58, 57, 56, 54, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	0, 0, 0, 0, 0, 0, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 0, 0, 0, 60, 0, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 0, 59, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 62, 0, 0, 0, 0, 0, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 0, 0, 0, 61, 
	0, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 0, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 0, 0, 
	0, 0, 0, 0, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	0, 0, 0, 63, 0, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 0, 
	64, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 64, 
	0, 0, 0, 0, 0, 0, 0, 65, 
	0, 0, 0, 0, 0, 0, 0, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 0, 0, 0, 66, 0, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 0, 67, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 67, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 69, 8, 70, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 8, 8, 8, 
	8, 8, 8, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 8, 
	8, 8, 71, 8, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 8, 69, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 69, 12, 
	70, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	12, 12, 12, 12, 12, 12, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 12, 12, 12, 72, 12, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 12, 74, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 75, 73, 76, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 76, 17, 17, 
	17, 17, 17, 17, 17, 17, 77, 17, 
	17, 78, 17, 79, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 79, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 80, 6, 
	80, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 80, 
	8, 70, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 8, 8, 8, 8, 8, 8, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 8, 8, 8, 71, 8, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 8, 81, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 81, 23, 23, 23, 23, 23, 
	23, 23, 82, 83, 23, 23, 84, 23, 
	23, 23, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 23, 23, 23, 
	23, 23, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 23, 23, 
	23, 85, 23, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 23, 79, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 79, 30, 30, 
	30, 30, 30, 30, 30, 30, 87, 30, 
	30, 80, 30, 75, 73, 81, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 81, 23, 23, 23, 
	23, 23, 23, 23, 23, 83, 23, 23, 
	84, 23, 23, 23, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 23, 23, 
	23, 23, 23, 23, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	23, 23, 23, 88, 23, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 23, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 0, 0, 0, 0, 0, 0, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 0, 0, 0, 89, 
	0, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 0, 90, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 90, 0, 0, 0, 0, 
	0, 0, 0, 91, 0, 0, 0, 0, 
	0, 0, 0, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 0, 0, 0, 
	0, 0, 0, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 0, 
	0, 0, 92, 0, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 93, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 93, 6, 
	6, 6, 6, 6, 6, 6, 94, 6, 
	95, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 95, 
	8, 96, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 8, 8, 8, 8, 8, 8, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 8, 8, 8, 97, 8, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 8, 95, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 95, 12, 96, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 12, 12, 12, 12, 
	12, 12, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 12, 12, 
	12, 98, 12, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 12, 100, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	101, 99, 102, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 102, 17, 17, 17, 17, 17, 17, 
	17, 17, 103, 17, 17, 104, 17, 105, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 105, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 106, 6, 106, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 106, 8, 96, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 8, 8, 8, 
	8, 8, 8, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 8, 
	8, 8, 97, 8, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 8, 107, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 107, 23, 
	23, 23, 23, 23, 23, 23, 108, 109, 
	23, 23, 110, 23, 23, 23, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	112, 23, 23, 23, 23, 23, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 23, 23, 23, 111, 23, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 23, 105, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 105, 30, 30, 30, 30, 30, 30, 
	30, 30, 113, 30, 30, 106, 30, 114, 
	30, 101, 99, 107, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 107, 23, 23, 23, 23, 23, 
	23, 23, 23, 109, 23, 23, 110, 23, 
	23, 23, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 23, 23, 23, 23, 
	23, 23, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 23, 23, 
	23, 115, 23, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 23, 116, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 117, 6, 118, 6, 6, 
	119, 121, 120, 6, 6, 6, 6, 30, 
	30, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 18, 6, 7, 
	17, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 63, 14, 15, 16, 16, 63, 18, 
	0, 20, 64, 20, 0, 22, 22, 23, 
	24, 65, 26, 27, 31, 30, 27, 28, 
	29, 0, 66, 66, 30, 31, 26, 33, 
	34, 35, 33, 34, 35, 36, 37, 41, 
	44, 37, 38, 43, 39, 67, 40, 39, 
	40, 39, 42, 67, 40, 41, 36, 67, 
	44, 46, 47, 48, 46, 47, 48, 49, 
	50, 54, 58, 50, 51, 57, 52, 56, 
	53, 52, 53, 52, 55, 56, 53, 54, 
	49, 56, 68, 58, 69, 60, 61, 62, 
	62, 69
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	0, 21, 0, 0, 22, 23, 24, 25, 
	26, 11, 27, 25, 28, 8, 13, 13, 
	13, 29, 0, 8, 11, 11, 13, 13, 
	13, 12, 30, 31, 25, 25, 19, 32, 
	3, 4, 5, 0, 6, 0, 8, 9, 
	11, 13, 13, 13, 15, 33, 15, 0, 
	0, 17, 18, 34, 17, 5, 19, 35, 
	25, 2, 3, 4, 5, 0, 6, 0, 
	8, 9, 11, 13, 13, 13, 15, 15, 
	15, 0, 0, 17, 18, 17, 17, 5, 
	19, 0, 36, 25, 37, 0, 0, 22, 
	23, 38
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 0, 
	0, 12, 16, 26, 26, 28, 28, 28, 
	28, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 63;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 19;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 21;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 32;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 45;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 59;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


      # end: ragel        
          end

          def each
            @buffers = {}
            stack    = []
            data     = @content.unpack('C*')
            p        = 0
            pe       = data.length
            eof      = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 25 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 35 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 27 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 32
		_goto_level = _again
		next
	end

  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 29 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield observed_term(
            statement(
              subject(@buffers[:term_stack][-1]),
              relationship(nil),
              object(nil),
              @buffers[:comment]))
  		end
	when 31 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 30 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 33 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 32 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 28 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::ObservedTerm.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
