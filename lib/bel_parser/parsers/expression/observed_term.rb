
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	47, 47, 47, 47, 9, 32, 
	9, 47, 0, 0, 10, 
	10, 10, 122, 0, 0, 
	0, 0, 0, 0, 48, 122, 
	48, 122, 9, 122, 9, 
	122, 0, 0, 10, 10, 
	0, 0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	1, 1, 24, 39, 0, 1, 113, 0, 
	0, 0, 75, 75, 114, 114, 0, 1, 
	0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1516, 1576, 1636, 1637, 1692, 1747, 1748, 
	1863, 1978, 2010, 2070, 2130, 2131, 2186, 2241, 
	2242, 2318, 2433, 2466, 2581, 2696, 2728, 2788, 
	2848, 2885, 2922, 3037, 3092, 3147, 3148, 3263, 
	3300, 3415, 3530, 3645, 3646, 3722, 3837, 3870, 
	3985, 4100, 4132, 4192, 4252, 4289, 4326, 4441, 
	4496, 4551, 4552, 4667, 4704, 4819, 4934, 5049, 
	5050, 5052, 5054, 5079, 5119, 5120, 5122, 5236, 
	5237, 5238, 5239, 5315, 5391, 5506, 5621, 5622, 
	5624, 5625, 5627
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 36, 37, 38, 
	38, 38, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 39, 
	1, 1, 1, 1, 40, 1, 41, 1, 
	1, 42, 1, 1, 1, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 1, 
	1, 1, 1, 1, 1, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 1, 1, 1, 43, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 44, 8, 8, 8, 8, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	44, 1, 9, 1, 1, 1, 1, 10, 
	1, 45, 1, 1, 46, 1, 1, 1, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 1, 1, 1, 1, 1, 1, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 1, 1, 1, 12, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 28, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 28, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 1, 1, 31, 
	1, 1, 1, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 1, 1, 1, 
	1, 1, 1, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 1, 
	1, 1, 47, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 16, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 1, 1, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 1, 1, 1, 48, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 49, 1, 50, 1, 1, 
	1, 1, 51, 1, 53, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 55, 53, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 59, 58, 56, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 61, 60, 60, 62, 63, 63, 63, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 62, 1, 64, 1, 1, 
	1, 1, 65, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 1, 
	1, 1, 66, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 62, 
	63, 63, 63, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 62, 1, 
	64, 1, 1, 1, 1, 65, 1, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 1, 1, 1, 67, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 63, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 63, 1, 64, 1, 1, 1, 1, 
	65, 1, 69, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 70, 68, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 71, 69, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 74, 72, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 77, 
	76, 76, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 1, 1, 1, 1, 
	1, 1, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 1, 1, 
	1, 78, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 79, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 79, 1, 1, 
	1, 1, 1, 1, 1, 80, 1, 1, 
	1, 1, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 1, 1, 1, 1, 1, 1, 
	83, 1, 84, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 84, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 84, 85, 85, 
	85, 85, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 84, 1, 86, 1, 
	1, 1, 1, 87, 1, 1, 1, 1, 
	1, 1, 1, 1, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 1, 1, 
	1, 1, 1, 1, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	1, 1, 1, 89, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 85, 
	1, 86, 1, 1, 1, 1, 87, 1, 
	91, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 92, 90, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	96, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 1, 1, 98, 1, 99, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	100, 1, 100, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 91, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 101, 94, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 103, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 106, 107, 1, 1, 108, 
	1, 1, 1, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 110, 1, 1, 
	1, 1, 1, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 1, 
	1, 1, 109, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 1, 
	1, 1, 1, 1, 1, 1, 1, 111, 
	1, 1, 100, 1, 112, 113, 113, 113, 
	113, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 114, 1, 1, 
	1, 1, 115, 1, 116, 1, 1, 117, 
	1, 1, 1, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 118, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 119, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 119, 1, 
	86, 1, 1, 1, 1, 87, 1, 120, 
	1, 1, 121, 1, 1, 1, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 1, 1, 1, 89, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 105, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 105, 1, 1, 1, 1, 1, 1, 
	1, 1, 107, 1, 1, 108, 1, 1, 
	1, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 1, 1, 1, 1, 1, 
	1, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 1, 1, 1, 
	122, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 93, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 1, 1, 1, 123, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 124, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 124, 1, 1, 1, 1, 1, 1, 
	1, 125, 1, 1, 1, 1, 1, 1, 
	1, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 1, 1, 1, 1, 1, 
	1, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	126, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 127, 1, 1, 1, 
	1, 1, 1, 1, 128, 1, 129, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 129, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 129, 130, 130, 130, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	129, 1, 131, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 1, 1, 1, 1, 1, 1, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 1, 1, 1, 134, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 130, 130, 130, 130, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 131, 1, 1, 
	1, 1, 132, 1, 136, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 137, 135, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 141, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 1, 1, 143, 
	1, 144, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 145, 1, 145, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 145, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 136, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 147, 146, 
	139, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 149, 148, 148, 
	150, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 150, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	152, 1, 1, 153, 1, 1, 1, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 155, 1, 1, 1, 1, 1, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 1, 1, 1, 154, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 144, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 144, 1, 1, 1, 1, 1, 
	1, 1, 1, 156, 1, 1, 145, 1, 
	157, 158, 158, 158, 158, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 157, 
	1, 159, 1, 1, 1, 1, 160, 1, 
	161, 1, 1, 162, 1, 1, 1, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 163, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 164, 130, 130, 130, 130, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 164, 1, 131, 1, 1, 1, 
	1, 132, 1, 165, 1, 1, 166, 1, 
	1, 1, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 1, 1, 1, 1, 
	1, 1, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 1, 1, 
	1, 134, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 150, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 152, 1, 
	1, 153, 1, 1, 1, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 1, 
	1, 1, 1, 1, 1, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 1, 1, 1, 167, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 138, 168, 1, 169, 1, 171, 1, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 171, 170, 34, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 173, 1, 1, 
	175, 174, 176, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 1, 1, 1, 178, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 180, 1, 1, 
	1, 1, 1, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 1, 
	1, 1, 179, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 181, 
	182, 182, 182, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 181, 1, 
	183, 1, 1, 1, 1, 184, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 186, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 64, 1, 1, 1, 1, 
	65, 1, 1, 1, 1, 1, 1, 1, 
	1, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 1, 1, 1, 1, 1, 
	1, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 1, 1, 
	67, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 187, 1, 
	1, 1, 188, 171, 1, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 171, 170, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 21, 8, 9, 22, 
	8, 9, 22, 10, 83, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 83, 11, 
	15, 19, 83, 18, 85, 20, 6, 7, 
	12, 83, 11, 21, 20, 83, 11, 21, 
	86, 24, 25, 28, 26, 88, 27, 26, 
	88, 27, 29, 30, 29, 30, 32, 33, 
	34, 37, 91, 90, 35, 89, 36, 35, 
	89, 36, 38, 39, 38, 39, 41, 42, 
	43, 41, 42, 43, 44, 45, 46, 51, 
	54, 58, 47, 48, 59, 47, 48, 59, 
	49, 94, 50, 49, 50, 52, 53, 52, 
	53, 49, 55, 94, 50, 54, 56, 94, 
	57, 45, 46, 51, 94, 50, 58, 57, 
	94, 50, 58, 61, 62, 63, 61, 62, 
	63, 64, 65, 66, 71, 74, 78, 67, 
	68, 79, 67, 68, 79, 69, 95, 70, 
	69, 70, 72, 73, 72, 73, 69, 75, 
	95, 70, 74, 76, 95, 77, 65, 66, 
	71, 95, 70, 78, 77, 95, 70, 78, 
	81, 82, 97, 98, 84, 17, 85, 84, 
	87, 86, 90, 91, 92, 93, 33, 34, 
	37, 90, 93, 96, 97
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 0, 
	0, 0, 0, 8, 9, 12, 13, 12, 
	0, 14, 0, 15, 15, 15, 0, 0, 
	12, 12, 0, 0, 16, 17, 16, 16, 
	5, 18, 0, 0, 19, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	9, 0, 0, 0, 12, 26, 12, 0, 
	27, 0, 12, 12, 0, 0, 0, 0, 
	0, 0, 9, 9, 12, 13, 12, 0, 
	14, 0, 12, 12, 0, 0, 29, 3, 
	4, 5, 0, 6, 0, 0, 0, 0, 
	8, 9, 12, 13, 12, 0, 14, 0, 
	15, 33, 15, 0, 0, 12, 12, 0, 
	0, 16, 17, 34, 16, 5, 18, 35, 
	20, 21, 21, 21, 36, 20, 22, 23, 
	37, 23, 0, 2, 3, 4, 5, 0, 
	6, 0, 0, 0, 0, 8, 9, 12, 
	13, 12, 0, 14, 0, 15, 15, 15, 
	0, 0, 12, 12, 0, 0, 16, 17, 
	16, 16, 5, 18, 0, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	0, 0, 19, 19, 38, 0, 0, 39, 
	18, 0, 0, 0, 18, 21, 21, 21, 
	21, 22, 0, 47, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 7, 10, 11, 
	11, 10, 0, 7, 11, 11, 11, 7, 
	0, 0, 0, 7, 7, 7, 11, 0, 
	24, 25, 25, 25, 25, 25, 25, 1, 
	1, 0, 28, 28, 28, 28, 28, 28, 
	1, 30, 31, 32, 1, 0, 28, 28, 
	0, 0, 1, 28, 28, 28, 1, 0, 
	1, 1, 1, 28, 1, 1, 0, 7, 
	7, 10, 11, 11, 10, 0, 7, 11, 
	11, 11, 7, 0, 7, 7, 7, 11, 
	0, 0, 0, 38, 0, 39, 40, 41, 
	0, 42, 43, 44, 45, 46, 0, 47, 
	0, 48, 48
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 83;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 23;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 24;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 40;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 60;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 80;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 21 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 6 then
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 35 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 19 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 40
		_goto_level = _again
		next
	end

  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 23 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 22 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 15 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 20 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 33 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 24 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin
 $stderr.puts "EOF!" 		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 40 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 30 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 25 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 43 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 44 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	47, 47, 47, 47, 9, 32, 
	9, 47, 0, 0, 10, 
	10, 10, 122, 0, 0, 
	0, 0, 0, 0, 48, 122, 
	48, 122, 9, 122, 9, 
	122, 0, 0, 10, 10, 
	0, 0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	1, 1, 24, 39, 0, 1, 113, 0, 
	0, 0, 75, 75, 114, 114, 0, 1, 
	0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1516, 1576, 1636, 1637, 1692, 1747, 1748, 
	1863, 1978, 2010, 2070, 2130, 2131, 2186, 2241, 
	2242, 2318, 2433, 2466, 2581, 2696, 2728, 2788, 
	2848, 2885, 2922, 3037, 3092, 3147, 3148, 3263, 
	3300, 3415, 3530, 3645, 3646, 3722, 3837, 3870, 
	3985, 4100, 4132, 4192, 4252, 4289, 4326, 4441, 
	4496, 4551, 4552, 4667, 4704, 4819, 4934, 5049, 
	5050, 5052, 5054, 5079, 5119, 5120, 5122, 5236, 
	5237, 5238, 5239, 5315, 5391, 5506, 5621, 5622, 
	5624, 5625, 5627
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 36, 37, 38, 
	38, 38, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 39, 
	1, 1, 1, 1, 40, 1, 41, 1, 
	1, 42, 1, 1, 1, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 1, 
	1, 1, 1, 1, 1, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 1, 1, 1, 43, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 44, 8, 8, 8, 8, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	44, 1, 9, 1, 1, 1, 1, 10, 
	1, 45, 1, 1, 46, 1, 1, 1, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 1, 1, 1, 1, 1, 1, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 1, 1, 1, 12, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 28, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 28, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 1, 1, 31, 
	1, 1, 1, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 1, 1, 1, 
	1, 1, 1, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 1, 
	1, 1, 47, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 16, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 1, 1, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 1, 1, 1, 48, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 49, 1, 50, 1, 1, 
	1, 1, 51, 1, 53, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 55, 53, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 59, 58, 56, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 61, 60, 60, 62, 63, 63, 63, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 62, 1, 64, 1, 1, 
	1, 1, 65, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 1, 
	1, 1, 66, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 62, 
	63, 63, 63, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 62, 1, 
	64, 1, 1, 1, 1, 65, 1, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 1, 1, 1, 67, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 63, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 63, 1, 64, 1, 1, 1, 1, 
	65, 1, 69, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 70, 68, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 71, 69, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 74, 72, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 77, 
	76, 76, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 1, 1, 1, 1, 
	1, 1, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 1, 1, 
	1, 78, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 79, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 79, 1, 1, 
	1, 1, 1, 1, 1, 80, 1, 1, 
	1, 1, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 1, 1, 1, 1, 1, 1, 
	83, 1, 84, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 84, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 84, 85, 85, 
	85, 85, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 84, 1, 86, 1, 
	1, 1, 1, 87, 1, 1, 1, 1, 
	1, 1, 1, 1, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 1, 1, 
	1, 1, 1, 1, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	1, 1, 1, 89, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 85, 
	1, 86, 1, 1, 1, 1, 87, 1, 
	91, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 92, 90, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	96, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 1, 1, 98, 1, 99, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	100, 1, 100, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 91, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 101, 94, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 103, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 106, 107, 1, 1, 108, 
	1, 1, 1, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 110, 1, 1, 
	1, 1, 1, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 1, 
	1, 1, 109, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 1, 
	1, 1, 1, 1, 1, 1, 1, 111, 
	1, 1, 100, 1, 112, 113, 113, 113, 
	113, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 114, 1, 1, 
	1, 1, 115, 1, 116, 1, 1, 117, 
	1, 1, 1, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 118, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 119, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 119, 1, 
	86, 1, 1, 1, 1, 87, 1, 120, 
	1, 1, 121, 1, 1, 1, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 1, 1, 1, 89, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 105, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 105, 1, 1, 1, 1, 1, 1, 
	1, 1, 107, 1, 1, 108, 1, 1, 
	1, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 1, 1, 1, 1, 1, 
	1, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 1, 1, 1, 
	122, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 93, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 1, 1, 1, 123, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 124, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 124, 1, 1, 1, 1, 1, 1, 
	1, 125, 1, 1, 1, 1, 1, 1, 
	1, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 1, 1, 1, 1, 1, 
	1, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	126, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 127, 1, 1, 1, 
	1, 1, 1, 1, 128, 1, 129, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 129, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 129, 130, 130, 130, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	129, 1, 131, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 1, 1, 1, 1, 1, 1, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 1, 1, 1, 134, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 130, 130, 130, 130, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 131, 1, 1, 
	1, 1, 132, 1, 136, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 137, 135, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 141, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 1, 1, 143, 
	1, 144, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 145, 1, 145, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 145, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 136, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 147, 146, 
	139, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 149, 148, 148, 
	150, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 150, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	152, 1, 1, 153, 1, 1, 1, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 155, 1, 1, 1, 1, 1, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 1, 1, 1, 154, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 144, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 144, 1, 1, 1, 1, 1, 
	1, 1, 1, 156, 1, 1, 145, 1, 
	157, 158, 158, 158, 158, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 157, 
	1, 159, 1, 1, 1, 1, 160, 1, 
	161, 1, 1, 162, 1, 1, 1, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 163, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 164, 130, 130, 130, 130, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 164, 1, 131, 1, 1, 1, 
	1, 132, 1, 165, 1, 1, 166, 1, 
	1, 1, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 1, 1, 1, 1, 
	1, 1, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 1, 1, 
	1, 134, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 150, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 152, 1, 
	1, 153, 1, 1, 1, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 1, 
	1, 1, 1, 1, 1, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 1, 1, 1, 167, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 138, 168, 1, 169, 1, 171, 1, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 171, 170, 34, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 173, 1, 1, 
	175, 174, 176, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 1, 1, 1, 178, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 180, 1, 1, 
	1, 1, 1, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 1, 
	1, 1, 179, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 181, 
	182, 182, 182, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 181, 1, 
	183, 1, 1, 1, 1, 184, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 186, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 64, 1, 1, 1, 1, 
	65, 1, 1, 1, 1, 1, 1, 1, 
	1, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 1, 1, 1, 1, 1, 
	1, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 1, 1, 
	67, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 187, 1, 
	1, 1, 188, 171, 1, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 171, 170, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 21, 8, 9, 22, 
	8, 9, 22, 10, 83, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 83, 11, 
	15, 19, 83, 18, 85, 20, 6, 7, 
	12, 83, 11, 21, 20, 83, 11, 21, 
	86, 24, 25, 28, 26, 88, 27, 26, 
	88, 27, 29, 30, 29, 30, 32, 33, 
	34, 37, 91, 90, 35, 89, 36, 35, 
	89, 36, 38, 39, 38, 39, 41, 42, 
	43, 41, 42, 43, 44, 45, 46, 51, 
	54, 58, 47, 48, 59, 47, 48, 59, 
	49, 94, 50, 49, 50, 52, 53, 52, 
	53, 49, 55, 94, 50, 54, 56, 94, 
	57, 45, 46, 51, 94, 50, 58, 57, 
	94, 50, 58, 61, 62, 63, 61, 62, 
	63, 64, 65, 66, 71, 74, 78, 67, 
	68, 79, 67, 68, 79, 69, 95, 70, 
	69, 70, 72, 73, 72, 73, 69, 75, 
	95, 70, 74, 76, 95, 77, 65, 66, 
	71, 95, 70, 78, 77, 95, 70, 78, 
	81, 82, 97, 98, 84, 17, 85, 84, 
	87, 86, 90, 91, 92, 93, 33, 34, 
	37, 90, 93, 96, 97
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 0, 
	0, 0, 0, 8, 9, 12, 13, 12, 
	0, 14, 0, 15, 15, 15, 0, 0, 
	12, 12, 0, 0, 16, 17, 16, 16, 
	5, 18, 0, 0, 19, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	9, 0, 0, 0, 12, 26, 12, 0, 
	27, 0, 12, 12, 0, 0, 0, 0, 
	0, 0, 9, 9, 12, 13, 12, 0, 
	14, 0, 12, 12, 0, 0, 29, 3, 
	4, 5, 0, 6, 0, 0, 0, 0, 
	8, 9, 12, 13, 12, 0, 14, 0, 
	15, 33, 15, 0, 0, 12, 12, 0, 
	0, 16, 17, 34, 16, 5, 18, 35, 
	20, 21, 21, 21, 36, 20, 22, 23, 
	37, 23, 0, 2, 3, 4, 5, 0, 
	6, 0, 0, 0, 0, 8, 9, 12, 
	13, 12, 0, 14, 0, 15, 15, 15, 
	0, 0, 12, 12, 0, 0, 16, 17, 
	16, 16, 5, 18, 0, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	0, 0, 19, 19, 38, 0, 0, 39, 
	18, 0, 0, 0, 18, 21, 21, 21, 
	21, 22, 0, 47, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 7, 10, 11, 
	11, 10, 0, 7, 11, 11, 11, 7, 
	0, 0, 0, 7, 7, 7, 11, 0, 
	24, 25, 25, 25, 25, 25, 25, 1, 
	1, 0, 28, 28, 28, 28, 28, 28, 
	1, 30, 31, 32, 1, 0, 28, 28, 
	0, 0, 1, 28, 28, 28, 1, 0, 
	1, 1, 1, 28, 1, 1, 0, 7, 
	7, 10, 11, 11, 10, 0, 7, 11, 
	11, 11, 7, 0, 7, 7, 7, 11, 
	0, 0, 0, 38, 0, 39, 40, 41, 
	0, 42, 43, 44, 45, 46, 0, 47, 
	0, 48, 48
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 83;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 23;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 24;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 40;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 60;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 80;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 21 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 6 then
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 35 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 19 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 40
		_goto_level = _again
		next
	end

  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 23 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 22 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 15 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 20 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 33 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 24 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin
 $stderr.puts "EOF!" 		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 40 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 30 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 25 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 43 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 44 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	47, 47, 47, 47, 9, 32, 
	9, 47, 0, 0, 10, 
	10, 10, 122, 0, 0, 
	0, 0, 0, 0, 48, 122, 
	48, 122, 9, 122, 9, 
	122, 0, 0, 10, 10, 
	0, 0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	1, 1, 24, 39, 0, 1, 113, 0, 
	0, 0, 75, 75, 114, 114, 0, 1, 
	0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1516, 1576, 1636, 1637, 1692, 1747, 1748, 
	1863, 1978, 2010, 2070, 2130, 2131, 2186, 2241, 
	2242, 2318, 2433, 2466, 2581, 2696, 2728, 2788, 
	2848, 2885, 2922, 3037, 3092, 3147, 3148, 3263, 
	3300, 3415, 3530, 3645, 3646, 3722, 3837, 3870, 
	3985, 4100, 4132, 4192, 4252, 4289, 4326, 4441, 
	4496, 4551, 4552, 4667, 4704, 4819, 4934, 5049, 
	5050, 5052, 5054, 5079, 5119, 5120, 5122, 5236, 
	5237, 5238, 5239, 5315, 5391, 5506, 5621, 5622, 
	5624, 5625, 5627
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 36, 37, 38, 
	38, 38, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 39, 
	1, 1, 1, 1, 40, 1, 41, 1, 
	1, 42, 1, 1, 1, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 1, 
	1, 1, 1, 1, 1, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 1, 1, 1, 43, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 44, 8, 8, 8, 8, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	44, 1, 9, 1, 1, 1, 1, 10, 
	1, 45, 1, 1, 46, 1, 1, 1, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 1, 1, 1, 1, 1, 1, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 1, 1, 1, 12, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 28, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 28, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 1, 1, 31, 
	1, 1, 1, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 1, 1, 1, 
	1, 1, 1, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 1, 
	1, 1, 47, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 16, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 1, 1, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 1, 1, 1, 48, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 49, 1, 50, 1, 1, 
	1, 1, 51, 1, 53, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 55, 53, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 59, 58, 56, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 61, 60, 60, 62, 63, 63, 63, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 62, 1, 64, 1, 1, 
	1, 1, 65, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 1, 
	1, 1, 66, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 62, 
	63, 63, 63, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 62, 1, 
	64, 1, 1, 1, 1, 65, 1, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 1, 1, 1, 67, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 63, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 63, 1, 64, 1, 1, 1, 1, 
	65, 1, 69, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 70, 68, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 71, 69, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 74, 72, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 77, 
	76, 76, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 1, 1, 1, 1, 
	1, 1, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 1, 1, 
	1, 78, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 79, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 79, 1, 1, 
	1, 1, 1, 1, 1, 80, 1, 1, 
	1, 1, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 1, 1, 1, 1, 1, 1, 
	83, 1, 84, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 84, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 84, 85, 85, 
	85, 85, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 84, 1, 86, 1, 
	1, 1, 1, 87, 1, 1, 1, 1, 
	1, 1, 1, 1, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 1, 1, 
	1, 1, 1, 1, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	1, 1, 1, 89, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 85, 
	1, 86, 1, 1, 1, 1, 87, 1, 
	91, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 92, 90, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	96, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 1, 1, 98, 1, 99, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	100, 1, 100, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 91, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 101, 94, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 103, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 106, 107, 1, 1, 108, 
	1, 1, 1, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 110, 1, 1, 
	1, 1, 1, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 1, 
	1, 1, 109, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 1, 
	1, 1, 1, 1, 1, 1, 1, 111, 
	1, 1, 100, 1, 112, 113, 113, 113, 
	113, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 114, 1, 1, 
	1, 1, 115, 1, 116, 1, 1, 117, 
	1, 1, 1, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 118, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 119, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 119, 1, 
	86, 1, 1, 1, 1, 87, 1, 120, 
	1, 1, 121, 1, 1, 1, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 1, 1, 1, 89, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 105, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 105, 1, 1, 1, 1, 1, 1, 
	1, 1, 107, 1, 1, 108, 1, 1, 
	1, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 1, 1, 1, 1, 1, 
	1, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 1, 1, 1, 
	122, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 93, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 1, 1, 1, 123, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 124, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 124, 1, 1, 1, 1, 1, 1, 
	1, 125, 1, 1, 1, 1, 1, 1, 
	1, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 1, 1, 1, 1, 1, 
	1, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	126, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 127, 1, 1, 1, 
	1, 1, 1, 1, 128, 1, 129, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 129, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 129, 130, 130, 130, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	129, 1, 131, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 1, 1, 1, 1, 1, 1, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 1, 1, 1, 134, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 130, 130, 130, 130, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 131, 1, 1, 
	1, 1, 132, 1, 136, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 137, 135, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 141, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 1, 1, 143, 
	1, 144, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 145, 1, 145, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 145, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 136, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 147, 146, 
	139, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 149, 148, 148, 
	150, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 150, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	152, 1, 1, 153, 1, 1, 1, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 155, 1, 1, 1, 1, 1, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 1, 1, 1, 154, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 144, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 144, 1, 1, 1, 1, 1, 
	1, 1, 1, 156, 1, 1, 145, 1, 
	157, 158, 158, 158, 158, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 157, 
	1, 159, 1, 1, 1, 1, 160, 1, 
	161, 1, 1, 162, 1, 1, 1, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 163, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 164, 130, 130, 130, 130, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 164, 1, 131, 1, 1, 1, 
	1, 132, 1, 165, 1, 1, 166, 1, 
	1, 1, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 1, 1, 1, 1, 
	1, 1, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 1, 1, 
	1, 134, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 150, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 152, 1, 
	1, 153, 1, 1, 1, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 1, 
	1, 1, 1, 1, 1, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 1, 1, 1, 167, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 138, 168, 1, 169, 1, 171, 1, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 171, 170, 34, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 173, 1, 1, 
	175, 174, 176, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 1, 1, 1, 178, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 180, 1, 1, 
	1, 1, 1, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 1, 
	1, 1, 179, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 181, 
	182, 182, 182, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 181, 1, 
	183, 1, 1, 1, 1, 184, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 186, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 64, 1, 1, 1, 1, 
	65, 1, 1, 1, 1, 1, 1, 1, 
	1, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 1, 1, 1, 1, 1, 
	1, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 1, 1, 
	67, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 187, 1, 
	1, 1, 188, 171, 1, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 171, 170, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 21, 8, 9, 22, 
	8, 9, 22, 10, 83, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 83, 11, 
	15, 19, 83, 18, 85, 20, 6, 7, 
	12, 83, 11, 21, 20, 83, 11, 21, 
	86, 24, 25, 28, 26, 88, 27, 26, 
	88, 27, 29, 30, 29, 30, 32, 33, 
	34, 37, 91, 90, 35, 89, 36, 35, 
	89, 36, 38, 39, 38, 39, 41, 42, 
	43, 41, 42, 43, 44, 45, 46, 51, 
	54, 58, 47, 48, 59, 47, 48, 59, 
	49, 94, 50, 49, 50, 52, 53, 52, 
	53, 49, 55, 94, 50, 54, 56, 94, 
	57, 45, 46, 51, 94, 50, 58, 57, 
	94, 50, 58, 61, 62, 63, 61, 62, 
	63, 64, 65, 66, 71, 74, 78, 67, 
	68, 79, 67, 68, 79, 69, 95, 70, 
	69, 70, 72, 73, 72, 73, 69, 75, 
	95, 70, 74, 76, 95, 77, 65, 66, 
	71, 95, 70, 78, 77, 95, 70, 78, 
	81, 82, 97, 98, 84, 17, 85, 84, 
	87, 86, 90, 91, 92, 93, 33, 34, 
	37, 90, 93, 96, 97
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 0, 
	0, 0, 0, 8, 9, 12, 13, 12, 
	0, 14, 0, 15, 15, 15, 0, 0, 
	12, 12, 0, 0, 16, 17, 16, 16, 
	5, 18, 0, 0, 19, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	9, 0, 0, 0, 12, 26, 12, 0, 
	27, 0, 12, 12, 0, 0, 0, 0, 
	0, 0, 9, 9, 12, 13, 12, 0, 
	14, 0, 12, 12, 0, 0, 29, 3, 
	4, 5, 0, 6, 0, 0, 0, 0, 
	8, 9, 12, 13, 12, 0, 14, 0, 
	15, 33, 15, 0, 0, 12, 12, 0, 
	0, 16, 17, 34, 16, 5, 18, 35, 
	20, 21, 21, 21, 36, 20, 22, 23, 
	37, 23, 0, 2, 3, 4, 5, 0, 
	6, 0, 0, 0, 0, 8, 9, 12, 
	13, 12, 0, 14, 0, 15, 15, 15, 
	0, 0, 12, 12, 0, 0, 16, 17, 
	16, 16, 5, 18, 0, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	0, 0, 19, 19, 38, 0, 0, 39, 
	18, 0, 0, 0, 18, 21, 21, 21, 
	21, 22, 0, 47, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 7, 10, 11, 
	11, 10, 0, 7, 11, 11, 11, 7, 
	0, 0, 0, 7, 7, 7, 11, 0, 
	24, 25, 25, 25, 25, 25, 25, 1, 
	1, 0, 28, 28, 28, 28, 28, 28, 
	1, 30, 31, 32, 1, 0, 28, 28, 
	0, 0, 1, 28, 28, 28, 1, 0, 
	1, 1, 1, 28, 1, 1, 0, 7, 
	7, 10, 11, 11, 10, 0, 7, 11, 
	11, 11, 7, 0, 7, 7, 7, 11, 
	0, 0, 0, 38, 0, 39, 40, 41, 
	0, 42, 43, 44, 45, 46, 0, 47, 
	0, 48, 48
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 83;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 23;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 24;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 40;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 60;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 80;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 21 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 6 then
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 35 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 19 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 40
		_goto_level = _again
		next
	end

  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 23 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 22 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 15 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 20 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 33 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 24 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin
 $stderr.puts "EOF!" 		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 40 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 30 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 25 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 43 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 44 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	47, 47, 47, 47, 9, 32, 
	9, 47, 0, 0, 10, 
	10, 10, 122, 0, 0, 
	0, 0, 0, 0, 48, 122, 
	48, 122, 9, 122, 9, 
	122, 0, 0, 10, 10, 
	0, 0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	1, 1, 24, 39, 0, 1, 113, 0, 
	0, 0, 75, 75, 114, 114, 0, 1, 
	0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1516, 1576, 1636, 1637, 1692, 1747, 1748, 
	1863, 1978, 2010, 2070, 2130, 2131, 2186, 2241, 
	2242, 2318, 2433, 2466, 2581, 2696, 2728, 2788, 
	2848, 2885, 2922, 3037, 3092, 3147, 3148, 3263, 
	3300, 3415, 3530, 3645, 3646, 3722, 3837, 3870, 
	3985, 4100, 4132, 4192, 4252, 4289, 4326, 4441, 
	4496, 4551, 4552, 4667, 4704, 4819, 4934, 5049, 
	5050, 5052, 5054, 5079, 5119, 5120, 5122, 5236, 
	5237, 5238, 5239, 5315, 5391, 5506, 5621, 5622, 
	5624, 5625, 5627
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 36, 37, 38, 
	38, 38, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 39, 
	1, 1, 1, 1, 40, 1, 41, 1, 
	1, 42, 1, 1, 1, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 1, 
	1, 1, 1, 1, 1, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 1, 1, 1, 43, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 44, 8, 8, 8, 8, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	44, 1, 9, 1, 1, 1, 1, 10, 
	1, 45, 1, 1, 46, 1, 1, 1, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 1, 1, 1, 1, 1, 1, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 1, 1, 1, 12, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 28, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 28, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 1, 1, 31, 
	1, 1, 1, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 1, 1, 1, 
	1, 1, 1, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 1, 
	1, 1, 47, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 16, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 1, 1, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 1, 1, 1, 48, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 49, 1, 50, 1, 1, 
	1, 1, 51, 1, 53, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 55, 53, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 59, 58, 56, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 61, 60, 60, 62, 63, 63, 63, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 62, 1, 64, 1, 1, 
	1, 1, 65, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 1, 
	1, 1, 66, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 62, 
	63, 63, 63, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 62, 1, 
	64, 1, 1, 1, 1, 65, 1, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 1, 1, 1, 67, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 63, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 63, 1, 64, 1, 1, 1, 1, 
	65, 1, 69, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 70, 68, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 71, 69, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 74, 72, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 77, 
	76, 76, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 1, 1, 1, 1, 
	1, 1, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 1, 1, 
	1, 78, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 79, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 79, 1, 1, 
	1, 1, 1, 1, 1, 80, 1, 1, 
	1, 1, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 1, 1, 1, 1, 1, 1, 
	83, 1, 84, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 84, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 84, 85, 85, 
	85, 85, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 84, 1, 86, 1, 
	1, 1, 1, 87, 1, 1, 1, 1, 
	1, 1, 1, 1, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 1, 1, 
	1, 1, 1, 1, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	1, 1, 1, 89, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 85, 
	1, 86, 1, 1, 1, 1, 87, 1, 
	91, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 92, 90, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	96, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 1, 1, 98, 1, 99, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	100, 1, 100, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 91, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 101, 94, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 103, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 106, 107, 1, 1, 108, 
	1, 1, 1, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 110, 1, 1, 
	1, 1, 1, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 1, 
	1, 1, 109, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 1, 
	1, 1, 1, 1, 1, 1, 1, 111, 
	1, 1, 100, 1, 112, 113, 113, 113, 
	113, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 114, 1, 1, 
	1, 1, 115, 1, 116, 1, 1, 117, 
	1, 1, 1, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 118, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 119, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 119, 1, 
	86, 1, 1, 1, 1, 87, 1, 120, 
	1, 1, 121, 1, 1, 1, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 1, 1, 1, 89, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 105, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 105, 1, 1, 1, 1, 1, 1, 
	1, 1, 107, 1, 1, 108, 1, 1, 
	1, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 1, 1, 1, 1, 1, 
	1, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 1, 1, 1, 
	122, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 93, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 1, 1, 1, 123, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 124, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 124, 1, 1, 1, 1, 1, 1, 
	1, 125, 1, 1, 1, 1, 1, 1, 
	1, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 1, 1, 1, 1, 1, 
	1, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	126, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 127, 1, 1, 1, 
	1, 1, 1, 1, 128, 1, 129, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 129, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 129, 130, 130, 130, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	129, 1, 131, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 1, 1, 1, 1, 1, 1, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 1, 1, 1, 134, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 130, 130, 130, 130, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 131, 1, 1, 
	1, 1, 132, 1, 136, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 137, 135, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 141, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 1, 1, 143, 
	1, 144, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 145, 1, 145, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 145, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 136, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 147, 146, 
	139, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 149, 148, 148, 
	150, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 150, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	152, 1, 1, 153, 1, 1, 1, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 155, 1, 1, 1, 1, 1, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 1, 1, 1, 154, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 144, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 144, 1, 1, 1, 1, 1, 
	1, 1, 1, 156, 1, 1, 145, 1, 
	157, 158, 158, 158, 158, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 157, 
	1, 159, 1, 1, 1, 1, 160, 1, 
	161, 1, 1, 162, 1, 1, 1, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 163, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 164, 130, 130, 130, 130, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 164, 1, 131, 1, 1, 1, 
	1, 132, 1, 165, 1, 1, 166, 1, 
	1, 1, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 1, 1, 1, 1, 
	1, 1, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 1, 1, 
	1, 134, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 150, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 152, 1, 
	1, 153, 1, 1, 1, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 1, 
	1, 1, 1, 1, 1, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 1, 1, 1, 167, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 138, 168, 1, 169, 1, 171, 1, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 171, 170, 34, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 173, 1, 1, 
	175, 174, 176, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 1, 1, 1, 178, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 180, 1, 1, 
	1, 1, 1, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 1, 
	1, 1, 179, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 181, 
	182, 182, 182, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 181, 1, 
	183, 1, 1, 1, 1, 184, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 186, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 64, 1, 1, 1, 1, 
	65, 1, 1, 1, 1, 1, 1, 1, 
	1, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 1, 1, 1, 1, 1, 
	1, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 1, 1, 
	67, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 187, 1, 
	1, 1, 188, 171, 1, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 171, 170, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 21, 8, 9, 22, 
	8, 9, 22, 10, 83, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 83, 11, 
	15, 19, 83, 18, 85, 20, 6, 7, 
	12, 83, 11, 21, 20, 83, 11, 21, 
	86, 24, 25, 28, 26, 88, 27, 26, 
	88, 27, 29, 30, 29, 30, 32, 33, 
	34, 37, 91, 90, 35, 89, 36, 35, 
	89, 36, 38, 39, 38, 39, 41, 42, 
	43, 41, 42, 43, 44, 45, 46, 51, 
	54, 58, 47, 48, 59, 47, 48, 59, 
	49, 94, 50, 49, 50, 52, 53, 52, 
	53, 49, 55, 94, 50, 54, 56, 94, 
	57, 45, 46, 51, 94, 50, 58, 57, 
	94, 50, 58, 61, 62, 63, 61, 62, 
	63, 64, 65, 66, 71, 74, 78, 67, 
	68, 79, 67, 68, 79, 69, 95, 70, 
	69, 70, 72, 73, 72, 73, 69, 75, 
	95, 70, 74, 76, 95, 77, 65, 66, 
	71, 95, 70, 78, 77, 95, 70, 78, 
	81, 82, 97, 98, 84, 17, 85, 84, 
	87, 86, 90, 91, 92, 93, 33, 34, 
	37, 90, 93, 96, 97
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 0, 
	0, 0, 0, 8, 9, 12, 13, 12, 
	0, 14, 0, 15, 15, 15, 0, 0, 
	12, 12, 0, 0, 16, 17, 16, 16, 
	5, 18, 0, 0, 19, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	9, 0, 0, 0, 12, 26, 12, 0, 
	27, 0, 12, 12, 0, 0, 0, 0, 
	0, 0, 9, 9, 12, 13, 12, 0, 
	14, 0, 12, 12, 0, 0, 29, 3, 
	4, 5, 0, 6, 0, 0, 0, 0, 
	8, 9, 12, 13, 12, 0, 14, 0, 
	15, 33, 15, 0, 0, 12, 12, 0, 
	0, 16, 17, 34, 16, 5, 18, 35, 
	20, 21, 21, 21, 36, 20, 22, 23, 
	37, 23, 0, 2, 3, 4, 5, 0, 
	6, 0, 0, 0, 0, 8, 9, 12, 
	13, 12, 0, 14, 0, 15, 15, 15, 
	0, 0, 12, 12, 0, 0, 16, 17, 
	16, 16, 5, 18, 0, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	0, 0, 19, 19, 38, 0, 0, 39, 
	18, 0, 0, 0, 18, 21, 21, 21, 
	21, 22, 0, 47, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 7, 10, 11, 
	11, 10, 0, 7, 11, 11, 11, 7, 
	0, 0, 0, 7, 7, 7, 11, 0, 
	24, 25, 25, 25, 25, 25, 25, 1, 
	1, 0, 28, 28, 28, 28, 28, 28, 
	1, 30, 31, 32, 1, 0, 28, 28, 
	0, 0, 1, 28, 28, 28, 1, 0, 
	1, 1, 1, 28, 1, 1, 0, 7, 
	7, 10, 11, 11, 10, 0, 7, 11, 
	11, 11, 7, 0, 7, 7, 7, 11, 
	0, 0, 0, 38, 0, 39, 40, 41, 
	0, 42, 43, 44, 45, 46, 0, 47, 
	0, 48, 48
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 83;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 23;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 24;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 40;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 60;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 80;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 21 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 6 then
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 35 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 19 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 40
		_goto_level = _again
		next
	end

  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 23 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 22 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 15 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 20 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 33 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 24 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin
 $stderr.puts "EOF!" 		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 40 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 30 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 25 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 43 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 44 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	47, 47, 47, 47, 9, 32, 
	9, 47, 0, 0, 10, 
	10, 10, 122, 0, 0, 
	0, 0, 0, 0, 48, 122, 
	48, 122, 9, 122, 9, 
	122, 0, 0, 10, 10, 
	0, 0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	1, 1, 24, 39, 0, 1, 113, 0, 
	0, 0, 75, 75, 114, 114, 0, 1, 
	0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1516, 1576, 1636, 1637, 1692, 1747, 1748, 
	1863, 1978, 2010, 2070, 2130, 2131, 2186, 2241, 
	2242, 2318, 2433, 2466, 2581, 2696, 2728, 2788, 
	2848, 2885, 2922, 3037, 3092, 3147, 3148, 3263, 
	3300, 3415, 3530, 3645, 3646, 3722, 3837, 3870, 
	3985, 4100, 4132, 4192, 4252, 4289, 4326, 4441, 
	4496, 4551, 4552, 4667, 4704, 4819, 4934, 5049, 
	5050, 5052, 5054, 5079, 5119, 5120, 5122, 5236, 
	5237, 5238, 5239, 5315, 5391, 5506, 5621, 5622, 
	5624, 5625, 5627
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 36, 37, 38, 
	38, 38, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 39, 
	1, 1, 1, 1, 40, 1, 41, 1, 
	1, 42, 1, 1, 1, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 1, 
	1, 1, 1, 1, 1, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 1, 1, 1, 43, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 44, 8, 8, 8, 8, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	44, 1, 9, 1, 1, 1, 1, 10, 
	1, 45, 1, 1, 46, 1, 1, 1, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 1, 1, 1, 1, 1, 1, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 1, 1, 1, 12, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 28, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 28, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 1, 1, 31, 
	1, 1, 1, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 1, 1, 1, 
	1, 1, 1, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 1, 
	1, 1, 47, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 16, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 1, 1, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 1, 1, 1, 48, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 49, 1, 50, 1, 1, 
	1, 1, 51, 1, 53, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 55, 53, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 59, 58, 56, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 61, 60, 60, 62, 63, 63, 63, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 62, 1, 64, 1, 1, 
	1, 1, 65, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 1, 
	1, 1, 66, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 62, 
	63, 63, 63, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 62, 1, 
	64, 1, 1, 1, 1, 65, 1, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 1, 1, 1, 67, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 63, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 63, 1, 64, 1, 1, 1, 1, 
	65, 1, 69, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 70, 68, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 71, 69, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 74, 72, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 77, 
	76, 76, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 1, 1, 1, 1, 
	1, 1, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 1, 1, 
	1, 78, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 79, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 79, 1, 1, 
	1, 1, 1, 1, 1, 80, 1, 1, 
	1, 1, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 1, 1, 1, 1, 1, 1, 
	83, 1, 84, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 84, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 84, 85, 85, 
	85, 85, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 84, 1, 86, 1, 
	1, 1, 1, 87, 1, 1, 1, 1, 
	1, 1, 1, 1, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 1, 1, 
	1, 1, 1, 1, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	1, 1, 1, 89, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 85, 
	1, 86, 1, 1, 1, 1, 87, 1, 
	91, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 92, 90, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	96, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 1, 1, 98, 1, 99, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	100, 1, 100, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 91, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 101, 94, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 103, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 106, 107, 1, 1, 108, 
	1, 1, 1, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 110, 1, 1, 
	1, 1, 1, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 1, 
	1, 1, 109, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 1, 
	1, 1, 1, 1, 1, 1, 1, 111, 
	1, 1, 100, 1, 112, 113, 113, 113, 
	113, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 114, 1, 1, 
	1, 1, 115, 1, 116, 1, 1, 117, 
	1, 1, 1, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 118, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 119, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 119, 1, 
	86, 1, 1, 1, 1, 87, 1, 120, 
	1, 1, 121, 1, 1, 1, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 1, 1, 1, 89, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 105, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 105, 1, 1, 1, 1, 1, 1, 
	1, 1, 107, 1, 1, 108, 1, 1, 
	1, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 1, 1, 1, 1, 1, 
	1, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 1, 1, 1, 
	122, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 93, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 1, 1, 1, 123, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 124, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 124, 1, 1, 1, 1, 1, 1, 
	1, 125, 1, 1, 1, 1, 1, 1, 
	1, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 1, 1, 1, 1, 1, 
	1, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	126, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 127, 1, 1, 1, 
	1, 1, 1, 1, 128, 1, 129, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 129, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 129, 130, 130, 130, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	129, 1, 131, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 1, 1, 1, 1, 1, 1, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 1, 1, 1, 134, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 130, 130, 130, 130, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 131, 1, 1, 
	1, 1, 132, 1, 136, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 137, 135, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 141, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 1, 1, 143, 
	1, 144, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 145, 1, 145, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 145, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 136, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 147, 146, 
	139, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 149, 148, 148, 
	150, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 150, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	152, 1, 1, 153, 1, 1, 1, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 155, 1, 1, 1, 1, 1, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 1, 1, 1, 154, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 144, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 144, 1, 1, 1, 1, 1, 
	1, 1, 1, 156, 1, 1, 145, 1, 
	157, 158, 158, 158, 158, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 157, 
	1, 159, 1, 1, 1, 1, 160, 1, 
	161, 1, 1, 162, 1, 1, 1, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 163, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 164, 130, 130, 130, 130, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 164, 1, 131, 1, 1, 1, 
	1, 132, 1, 165, 1, 1, 166, 1, 
	1, 1, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 1, 1, 1, 1, 
	1, 1, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 1, 1, 
	1, 134, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 150, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 152, 1, 
	1, 153, 1, 1, 1, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 1, 
	1, 1, 1, 1, 1, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 1, 1, 1, 167, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 138, 168, 1, 169, 1, 171, 1, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 171, 170, 34, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 173, 1, 1, 
	175, 174, 176, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 1, 1, 1, 178, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 180, 1, 1, 
	1, 1, 1, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 1, 
	1, 1, 179, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 181, 
	182, 182, 182, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 181, 1, 
	183, 1, 1, 1, 1, 184, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 186, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 64, 1, 1, 1, 1, 
	65, 1, 1, 1, 1, 1, 1, 1, 
	1, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 1, 1, 1, 1, 1, 
	1, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 1, 1, 
	67, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 187, 1, 
	1, 1, 188, 171, 1, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 171, 170, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 21, 8, 9, 22, 
	8, 9, 22, 10, 83, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 83, 11, 
	15, 19, 83, 18, 85, 20, 6, 7, 
	12, 83, 11, 21, 20, 83, 11, 21, 
	86, 24, 25, 28, 26, 88, 27, 26, 
	88, 27, 29, 30, 29, 30, 32, 33, 
	34, 37, 91, 90, 35, 89, 36, 35, 
	89, 36, 38, 39, 38, 39, 41, 42, 
	43, 41, 42, 43, 44, 45, 46, 51, 
	54, 58, 47, 48, 59, 47, 48, 59, 
	49, 94, 50, 49, 50, 52, 53, 52, 
	53, 49, 55, 94, 50, 54, 56, 94, 
	57, 45, 46, 51, 94, 50, 58, 57, 
	94, 50, 58, 61, 62, 63, 61, 62, 
	63, 64, 65, 66, 71, 74, 78, 67, 
	68, 79, 67, 68, 79, 69, 95, 70, 
	69, 70, 72, 73, 72, 73, 69, 75, 
	95, 70, 74, 76, 95, 77, 65, 66, 
	71, 95, 70, 78, 77, 95, 70, 78, 
	81, 82, 97, 98, 84, 17, 85, 84, 
	87, 86, 90, 91, 92, 93, 33, 34, 
	37, 90, 93, 96, 97
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 0, 
	0, 0, 0, 8, 9, 12, 13, 12, 
	0, 14, 0, 15, 15, 15, 0, 0, 
	12, 12, 0, 0, 16, 17, 16, 16, 
	5, 18, 0, 0, 19, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	9, 0, 0, 0, 12, 26, 12, 0, 
	27, 0, 12, 12, 0, 0, 0, 0, 
	0, 0, 9, 9, 12, 13, 12, 0, 
	14, 0, 12, 12, 0, 0, 29, 3, 
	4, 5, 0, 6, 0, 0, 0, 0, 
	8, 9, 12, 13, 12, 0, 14, 0, 
	15, 33, 15, 0, 0, 12, 12, 0, 
	0, 16, 17, 34, 16, 5, 18, 35, 
	20, 21, 21, 21, 36, 20, 22, 23, 
	37, 23, 0, 2, 3, 4, 5, 0, 
	6, 0, 0, 0, 0, 8, 9, 12, 
	13, 12, 0, 14, 0, 15, 15, 15, 
	0, 0, 12, 12, 0, 0, 16, 17, 
	16, 16, 5, 18, 0, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	0, 0, 19, 19, 38, 0, 0, 39, 
	18, 0, 0, 0, 18, 21, 21, 21, 
	21, 22, 0, 47, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 7, 10, 11, 
	11, 10, 0, 7, 11, 11, 11, 7, 
	0, 0, 0, 7, 7, 7, 11, 0, 
	24, 25, 25, 25, 25, 25, 25, 1, 
	1, 0, 28, 28, 28, 28, 28, 28, 
	1, 30, 31, 32, 1, 0, 28, 28, 
	0, 0, 1, 28, 28, 28, 1, 0, 
	1, 1, 1, 28, 1, 1, 0, 7, 
	7, 10, 11, 11, 10, 0, 7, 11, 
	11, 11, 7, 0, 7, 7, 7, 11, 
	0, 0, 0, 38, 0, 39, 40, 41, 
	0, 42, 43, 44, 45, 46, 0, 47, 
	0, 48, 48
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 83;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 23;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 24;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 40;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 60;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 80;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 21 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 6 then
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 35 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 19 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 40
		_goto_level = _again
		next
	end

  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 23 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 22 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 15 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 20 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 33 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 24 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin
 $stderr.puts "EOF!" 		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 40 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 30 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 25 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 43 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 44 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module ObservedTerm

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	47, 47, 47, 47, 9, 32, 
	9, 47, 0, 0, 10, 
	10, 10, 122, 0, 0, 
	0, 0, 0, 0, 48, 122, 
	48, 122, 9, 122, 9, 
	122, 0, 0, 10, 10, 
	0, 0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	1, 1, 24, 39, 0, 1, 113, 0, 
	0, 0, 75, 75, 114, 114, 0, 1, 
	0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1516, 1576, 1636, 1637, 1692, 1747, 1748, 
	1863, 1978, 2010, 2070, 2130, 2131, 2186, 2241, 
	2242, 2318, 2433, 2466, 2581, 2696, 2728, 2788, 
	2848, 2885, 2922, 3037, 3092, 3147, 3148, 3263, 
	3300, 3415, 3530, 3645, 3646, 3722, 3837, 3870, 
	3985, 4100, 4132, 4192, 4252, 4289, 4326, 4441, 
	4496, 4551, 4552, 4667, 4704, 4819, 4934, 5049, 
	5050, 5052, 5054, 5079, 5119, 5120, 5122, 5236, 
	5237, 5238, 5239, 5315, 5391, 5506, 5621, 5622, 
	5624, 5625, 5627
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 36, 37, 38, 
	38, 38, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 39, 
	1, 1, 1, 1, 40, 1, 41, 1, 
	1, 42, 1, 1, 1, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 1, 
	1, 1, 1, 1, 1, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 1, 1, 1, 43, 1, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	1, 44, 8, 8, 8, 8, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	44, 1, 9, 1, 1, 1, 1, 10, 
	1, 45, 1, 1, 46, 1, 1, 1, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 1, 1, 1, 1, 1, 1, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 1, 1, 1, 12, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 28, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 28, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 1, 1, 31, 
	1, 1, 1, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 1, 1, 1, 
	1, 1, 1, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 1, 
	1, 1, 47, 1, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 1, 16, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 1, 1, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 1, 1, 1, 48, 
	1, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 1, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 49, 1, 50, 1, 1, 
	1, 1, 51, 1, 53, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 55, 53, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 59, 58, 56, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 61, 60, 60, 62, 63, 63, 63, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 62, 1, 64, 1, 1, 
	1, 1, 65, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 1, 1, 1, 
	1, 1, 1, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 1, 
	1, 1, 66, 1, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 1, 62, 
	63, 63, 63, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 62, 1, 
	64, 1, 1, 1, 1, 65, 1, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 1, 1, 1, 67, 1, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 1, 63, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 63, 1, 64, 1, 1, 1, 1, 
	65, 1, 69, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 70, 68, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 71, 69, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 74, 72, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 77, 
	76, 76, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 1, 1, 1, 1, 
	1, 1, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 1, 1, 
	1, 78, 1, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 1, 79, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 79, 1, 1, 
	1, 1, 1, 1, 1, 80, 1, 1, 
	1, 1, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 1, 1, 1, 1, 1, 1, 
	83, 1, 84, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 84, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 84, 85, 85, 
	85, 85, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 84, 1, 86, 1, 
	1, 1, 1, 87, 1, 1, 1, 1, 
	1, 1, 1, 1, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 1, 1, 
	1, 1, 1, 1, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	1, 1, 1, 89, 1, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 1, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 85, 
	1, 86, 1, 1, 1, 1, 87, 1, 
	91, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 92, 90, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	96, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	97, 1, 1, 98, 1, 99, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	100, 1, 100, 85, 85, 85, 85, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 86, 1, 1, 1, 1, 
	87, 1, 1, 1, 1, 1, 1, 1, 
	1, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 1, 1, 1, 1, 1, 
	1, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 1, 1, 1, 
	88, 1, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 1, 91, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 101, 94, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 103, 105, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 105, 1, 1, 1, 1, 
	1, 1, 1, 106, 107, 1, 1, 108, 
	1, 1, 1, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 110, 1, 1, 
	1, 1, 1, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 1, 
	1, 1, 109, 1, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 1, 99, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 1, 
	1, 1, 1, 1, 1, 1, 1, 111, 
	1, 1, 100, 1, 112, 113, 113, 113, 
	113, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 114, 1, 1, 
	1, 1, 115, 1, 116, 1, 1, 117, 
	1, 1, 1, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 118, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 119, 
	85, 85, 85, 85, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 119, 1, 
	86, 1, 1, 1, 1, 87, 1, 120, 
	1, 1, 121, 1, 1, 1, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	1, 1, 1, 1, 1, 1, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 1, 1, 1, 89, 1, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 1, 105, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 105, 1, 1, 1, 1, 1, 1, 
	1, 1, 107, 1, 1, 108, 1, 1, 
	1, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 1, 1, 1, 1, 1, 
	1, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 1, 1, 1, 
	122, 1, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 1, 93, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	1, 1, 1, 1, 1, 1, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 1, 1, 1, 123, 1, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 1, 124, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 124, 1, 1, 1, 1, 1, 1, 
	1, 125, 1, 1, 1, 1, 1, 1, 
	1, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 1, 1, 1, 1, 1, 
	1, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	126, 1, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 127, 1, 1, 1, 
	1, 1, 1, 1, 128, 1, 129, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 129, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 129, 130, 130, 130, 130, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	129, 1, 131, 1, 1, 1, 1, 132, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 1, 1, 1, 1, 1, 1, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 1, 1, 1, 134, 
	1, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 1, 130, 130, 130, 130, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 131, 1, 1, 
	1, 1, 132, 1, 136, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 135, 135, 
	135, 135, 135, 135, 135, 135, 137, 135, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 141, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 141, 1, 1, 1, 1, 
	1, 1, 1, 1, 142, 1, 1, 143, 
	1, 144, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 145, 1, 145, 130, 
	130, 130, 130, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 145, 1, 131, 
	1, 1, 1, 1, 132, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 1, 
	1, 1, 1, 1, 1, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 1, 1, 1, 133, 1, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	1, 136, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 147, 146, 
	139, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 149, 148, 148, 
	150, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 150, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	152, 1, 1, 153, 1, 1, 1, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 155, 1, 1, 1, 1, 1, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 1, 1, 1, 154, 1, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 1, 144, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 144, 1, 1, 1, 1, 1, 
	1, 1, 1, 156, 1, 1, 145, 1, 
	157, 158, 158, 158, 158, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 157, 
	1, 159, 1, 1, 1, 1, 160, 1, 
	161, 1, 1, 162, 1, 1, 1, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 163, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 164, 130, 130, 130, 130, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 164, 1, 131, 1, 1, 1, 
	1, 132, 1, 165, 1, 1, 166, 1, 
	1, 1, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 1, 1, 1, 1, 
	1, 1, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 1, 1, 
	1, 134, 1, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 1, 150, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 152, 1, 
	1, 153, 1, 1, 1, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 1, 
	1, 1, 1, 1, 1, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 1, 1, 1, 167, 1, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	1, 138, 168, 1, 169, 1, 171, 1, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 171, 170, 34, 
	172, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 173, 1, 1, 
	175, 174, 176, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 1, 1, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 177, 
	1, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 1, 1, 1, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 1, 1, 1, 178, 1, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 1, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 180, 1, 1, 
	1, 1, 1, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 1, 
	1, 1, 179, 1, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 181, 
	182, 182, 182, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 181, 1, 
	183, 1, 1, 1, 1, 184, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 186, 63, 63, 63, 63, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 64, 1, 1, 1, 1, 
	65, 1, 1, 1, 1, 1, 1, 1, 
	1, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 1, 1, 1, 1, 1, 
	1, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 1, 1, 
	67, 1, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 1, 1, 187, 1, 
	1, 1, 188, 171, 1, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 171, 170, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 21, 8, 9, 22, 
	8, 9, 22, 10, 83, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 83, 11, 
	15, 19, 83, 18, 85, 20, 6, 7, 
	12, 83, 11, 21, 20, 83, 11, 21, 
	86, 24, 25, 28, 26, 88, 27, 26, 
	88, 27, 29, 30, 29, 30, 32, 33, 
	34, 37, 91, 90, 35, 89, 36, 35, 
	89, 36, 38, 39, 38, 39, 41, 42, 
	43, 41, 42, 43, 44, 45, 46, 51, 
	54, 58, 47, 48, 59, 47, 48, 59, 
	49, 94, 50, 49, 50, 52, 53, 52, 
	53, 49, 55, 94, 50, 54, 56, 94, 
	57, 45, 46, 51, 94, 50, 58, 57, 
	94, 50, 58, 61, 62, 63, 61, 62, 
	63, 64, 65, 66, 71, 74, 78, 67, 
	68, 79, 67, 68, 79, 69, 95, 70, 
	69, 70, 72, 73, 72, 73, 69, 75, 
	95, 70, 74, 76, 95, 77, 65, 66, 
	71, 95, 70, 78, 77, 95, 70, 78, 
	81, 82, 97, 98, 84, 17, 85, 84, 
	87, 86, 90, 91, 92, 93, 33, 34, 
	37, 90, 93, 96, 97
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 5, 0, 6, 0, 
	0, 0, 0, 8, 9, 12, 13, 12, 
	0, 14, 0, 15, 15, 15, 0, 0, 
	12, 12, 0, 0, 16, 17, 16, 16, 
	5, 18, 0, 0, 19, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	9, 0, 0, 0, 12, 26, 12, 0, 
	27, 0, 12, 12, 0, 0, 0, 0, 
	0, 0, 9, 9, 12, 13, 12, 0, 
	14, 0, 12, 12, 0, 0, 29, 3, 
	4, 5, 0, 6, 0, 0, 0, 0, 
	8, 9, 12, 13, 12, 0, 14, 0, 
	15, 33, 15, 0, 0, 12, 12, 0, 
	0, 16, 17, 34, 16, 5, 18, 35, 
	20, 21, 21, 21, 36, 20, 22, 23, 
	37, 23, 0, 2, 3, 4, 5, 0, 
	6, 0, 0, 0, 0, 8, 9, 12, 
	13, 12, 0, 14, 0, 15, 15, 15, 
	0, 0, 12, 12, 0, 0, 16, 17, 
	16, 16, 5, 18, 0, 20, 21, 21, 
	21, 20, 20, 22, 23, 23, 23, 0, 
	0, 0, 19, 19, 38, 0, 0, 39, 
	18, 0, 0, 0, 18, 21, 21, 21, 
	21, 22, 0, 47, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 7, 10, 11, 
	11, 10, 0, 7, 11, 11, 11, 7, 
	0, 0, 0, 7, 7, 7, 11, 0, 
	24, 25, 25, 25, 25, 25, 25, 1, 
	1, 0, 28, 28, 28, 28, 28, 28, 
	1, 30, 31, 32, 1, 0, 28, 28, 
	0, 0, 1, 28, 28, 28, 1, 0, 
	1, 1, 1, 28, 1, 1, 0, 7, 
	7, 10, 11, 11, 10, 0, 7, 11, 
	11, 11, 7, 0, 7, 7, 7, 11, 
	0, 0, 0, 38, 0, 39, 40, 41, 
	0, 42, 43, 44, 45, 46, 0, 47, 
	0, 48, 48
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 83;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 23;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 24;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 40;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 60;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 80;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


      # end: ragel
          end

          def each
            @buffers    = {}
            @incomplete = {}
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 21 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 6 then
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 35 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 19 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 3 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 40
		_goto_level = _again
		next
	end

  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 23 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 22 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 4 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM finish_function'
    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    $stderr.puts 'TERM term_fx'
    fx = @buffers[:function]
    fx_node = function(fx)
    new_term = @buffers[:term_stack][-1] << fx_node
    @buffers[:term_stack][-1] = new_term
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 27 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 15 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 20 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 16 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 33 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 36 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 29 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'TERM start_function'
    @buffers[:function] = []
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'TERM append_function'
    @buffers[:function] << data[p].ord
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 1 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 24 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 10 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin
 $stderr.puts "EOF!" 		end
	when 38 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 40 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 30 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 25 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 47 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 39 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 43 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 44 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::ObservedTerm.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
