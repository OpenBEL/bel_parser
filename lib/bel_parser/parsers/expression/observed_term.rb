
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	48, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 0, 
	0, 39, 92, 39, 92, 
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 47, 47, 47, 47, 
	9, 32, 9, 47, 0, 
	0, 10, 10, 10, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 10, 10, 0, 
	0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 39, 
	0, 0, 10, 10, 0, 
	0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	75, 31, 59, 59, 0, 54, 54, 0, 
	114, 114, 31, 59, 59, 0, 54, 54, 
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 114, 114, 114, 0, 75, 114, 32, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	54, 54, 0, 114, 36, 114, 114, 114, 
	0, 1, 1, 24, 39, 0, 1, 113, 
	0, 113, 0, 0, 1, 0, 113, 113, 
	114, 114, 31, 0, 1, 0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1560, 1592, 1652, 1712, 1713, 1768, 1823, 
	1824, 1939, 2054, 2086, 2146, 2206, 2207, 2262, 
	2317, 2318, 2394, 2509, 2542, 2657, 2772, 2804, 
	2864, 2924, 2961, 2998, 3113, 3168, 3223, 3224, 
	3339, 3376, 3491, 3606, 3721, 3722, 3798, 3913, 
	3946, 4061, 4176, 4208, 4268, 4328, 4365, 4402, 
	4517, 4572, 4627, 4628, 4743, 4780, 4895, 5010, 
	5125, 5126, 5128, 5130, 5155, 5195, 5196, 5198, 
	5312, 5313, 5427, 5428, 5429, 5431, 5432, 5546, 
	5660, 5775, 5890, 5922, 5923, 5925, 5926, 5928
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 1, 10, 
	1, 1, 1, 1, 11, 1, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 20, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 20, 1, 1, 
	1, 1, 1, 1, 1, 1, 21, 1, 
	1, 22, 1, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 24, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 15, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 18, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 29, 7, 7, 7, 7, 7, 7, 
	7, 30, 31, 7, 7, 32, 7, 7, 
	7, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 7, 7, 7, 7, 
	7, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 7, 7, 7, 
	33, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	24, 1, 36, 1, 1, 37, 38, 39, 
	39, 39, 39, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 38, 7, 40, 
	7, 7, 7, 7, 41, 7, 42, 7, 
	7, 43, 7, 7, 7, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 7, 
	7, 7, 7, 7, 7, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 7, 7, 7, 44, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 45, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	45, 7, 10, 7, 7, 7, 7, 11, 
	7, 46, 7, 7, 47, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 13, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 29, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 29, 7, 7, 7, 7, 
	7, 7, 7, 7, 31, 7, 7, 32, 
	7, 7, 7, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 7, 7, 7, 
	7, 7, 7, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 7, 
	7, 7, 48, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 17, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 49, 49, 49, 49, 49, 49, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 49, 49, 49, 50, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 1, 1, 
	1, 1, 1, 1, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	1, 1, 1, 51, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	52, 52, 52, 52, 52, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 52, 
	1, 53, 1, 1, 1, 1, 54, 1, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 60, 58, 
	58, 56, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 62, 61, 
	59, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 63, 63, 
	65, 66, 66, 66, 66, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	7, 67, 7, 7, 7, 7, 68, 7, 
	7, 7, 7, 7, 7, 7, 7, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 7, 7, 7, 7, 7, 7, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 7, 7, 7, 69, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 65, 66, 66, 66, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 65, 7, 67, 7, 7, 7, 
	7, 68, 7, 7, 7, 7, 7, 7, 
	7, 7, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 7, 7, 7, 7, 
	7, 7, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 7, 7, 
	7, 70, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 66, 66, 
	66, 66, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 66, 1, 67, 
	1, 1, 1, 1, 68, 1, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 75, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 76, 74, 74, 72, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 78, 77, 75, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 80, 79, 79, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 1, 1, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 1, 1, 1, 81, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 83, 1, 1, 1, 1, 1, 1, 
	1, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 1, 1, 1, 
	84, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 85, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 85, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 87, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 87, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 87, 88, 88, 88, 88, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	87, 7, 89, 7, 7, 7, 7, 90, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 7, 7, 7, 7, 7, 7, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 7, 7, 7, 92, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 88, 88, 88, 88, 
	88, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 88, 1, 89, 1, 1, 
	1, 1, 90, 1, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	97, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 98, 96, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 99, 1, 1, 1, 1, 
	1, 1, 1, 1, 100, 1, 1, 101, 
	1, 102, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 103, 1, 103, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 103, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 94, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 105, 104, 
	97, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 107, 106, 106, 
	108, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 108, 
	7, 7, 7, 7, 7, 7, 7, 109, 
	110, 7, 7, 111, 7, 7, 7, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 113, 7, 7, 7, 7, 7, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 7, 7, 7, 112, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 102, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 102, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 103, 1, 
	115, 116, 116, 116, 116, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 115, 
	7, 117, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 120, 7, 7, 7, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 7, 7, 7, 121, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 122, 88, 88, 88, 88, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 89, 7, 7, 7, 
	7, 90, 7, 123, 7, 7, 124, 7, 
	7, 7, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 7, 7, 7, 7, 
	7, 7, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 7, 7, 
	7, 92, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 108, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 108, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 7, 
	7, 111, 7, 7, 7, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 7, 
	7, 7, 7, 7, 7, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 7, 7, 7, 125, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 96, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	1, 1, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 1, 1, 
	1, 126, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 127, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 128, 1, 1, 
	1, 1, 1, 1, 1, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 1, 
	1, 1, 1, 1, 1, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 1, 1, 1, 129, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 130, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	131, 1, 132, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 132, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 132, 133, 133, 
	133, 133, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 132, 7, 134, 7, 
	7, 7, 7, 135, 7, 7, 7, 7, 
	7, 7, 7, 7, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 7, 7, 
	7, 7, 7, 7, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	7, 7, 7, 137, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	133, 133, 133, 133, 133, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 133, 
	1, 134, 1, 1, 1, 1, 135, 1, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 142, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 143, 141, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 144, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	145, 1, 1, 146, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 147, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	148, 1, 148, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 148, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 139, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 150, 149, 142, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 152, 151, 151, 153, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 154, 155, 7, 7, 156, 
	7, 7, 7, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 158, 7, 7, 
	7, 7, 7, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 7, 
	7, 7, 157, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 147, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 159, 
	1, 1, 148, 1, 160, 161, 161, 161, 
	161, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 160, 7, 162, 7, 7, 
	7, 7, 163, 7, 164, 7, 7, 165, 
	7, 7, 7, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 7, 7, 7, 
	7, 7, 7, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 7, 
	7, 7, 166, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 167, 
	133, 133, 133, 133, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 167, 7, 
	134, 7, 7, 7, 7, 135, 7, 168, 
	7, 7, 169, 7, 7, 7, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 7, 7, 7, 137, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 153, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 153, 7, 7, 7, 7, 7, 7, 
	7, 7, 155, 7, 7, 156, 7, 7, 
	7, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 7, 7, 7, 7, 7, 
	7, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 7, 7, 7, 
	170, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 141, 171, 1, 
	172, 1, 174, 1, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 174, 173, 35, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 176, 1, 1, 178, 177, 179, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 49, 49, 
	49, 49, 49, 49, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	49, 49, 49, 180, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	1, 182, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 181, 181, 181, 181, 181, 181, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 181, 181, 183, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 1, 184, 1, 1, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 7, 7, 7, 186, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 185, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 188, 7, 7, 7, 7, 7, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 7, 7, 7, 187, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 189, 190, 191, 191, 
	191, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 189, 7, 192, 7, 7, 
	7, 7, 193, 7, 7, 7, 7, 7, 
	7, 7, 7, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 7, 7, 7, 
	7, 7, 7, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 7, 
	7, 7, 194, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 195, 
	196, 66, 66, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 195, 7, 
	67, 7, 7, 7, 7, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	7, 7, 7, 7, 7, 7, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 7, 7, 7, 70, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 66, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 197, 1, 1, 1, 198, 
	174, 1, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 174, 
	173, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 21, 8, 9, 
	22, 8, 9, 22, 10, 84, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 84, 
	11, 15, 19, 84, 18, 86, 20, 6, 
	7, 12, 84, 11, 21, 20, 84, 11, 
	21, 0, 87, 89, 25, 26, 29, 27, 
	91, 28, 27, 91, 28, 30, 31, 30, 
	31, 33, 34, 35, 38, 95, 94, 36, 
	92, 37, 36, 92, 37, 39, 40, 39, 
	40, 42, 43, 44, 42, 43, 44, 45, 
	46, 47, 52, 55, 59, 48, 49, 60, 
	48, 49, 60, 50, 99, 51, 50, 51, 
	53, 54, 53, 54, 50, 56, 99, 51, 
	55, 57, 99, 58, 46, 47, 52, 99, 
	51, 59, 58, 99, 51, 59, 62, 63, 
	64, 62, 63, 64, 65, 66, 67, 72, 
	75, 79, 68, 69, 80, 68, 69, 80, 
	70, 100, 71, 70, 71, 73, 74, 73, 
	74, 70, 76, 100, 71, 75, 77, 100, 
	78, 66, 67, 72, 100, 71, 79, 78, 
	100, 71, 79, 82, 83, 102, 103, 85, 
	17, 86, 85, 88, 87, 0, 90, 89, 
	93, 93, 94, 95, 96, 97, 98, 34, 
	35, 38, 94, 97, 98, 101, 102
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 13, 14, 
	13, 0, 15, 0, 17, 17, 17, 0, 
	0, 13, 13, 0, 0, 19, 20, 19, 
	19, 0, 21, 0, 0, 22, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 10, 0, 0, 0, 13, 
	32, 13, 0, 33, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 10, 10, 13, 
	14, 13, 0, 15, 0, 13, 13, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 8, 10, 13, 14, 13, 
	0, 15, 0, 17, 44, 17, 0, 0, 
	13, 13, 0, 0, 19, 20, 47, 19, 
	0, 21, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	8, 10, 13, 14, 13, 0, 15, 0, 
	17, 17, 17, 0, 0, 13, 13, 0, 
	0, 19, 20, 19, 19, 0, 21, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 0, 0, 22, 22, 52, 
	0, 0, 53, 3, 0, 57, 21, 0, 
	59, 61, 0, 0, 21, 25, 64, 25, 
	25, 25, 26, 0, 66, 67, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 12, 
	12, 16, 0, 6, 12, 12, 12, 18, 
	0, 0, 0, 23, 23, 23, 12, 28, 
	0, 30, 31, 31, 31, 31, 31, 31, 
	34, 34, 35, 36, 36, 36, 36, 36, 
	36, 1, 38, 39, 40, 41, 42, 43, 
	43, 0, 0, 45, 43, 43, 43, 46, 
	0, 49, 49, 49, 43, 1, 1, 0, 
	6, 9, 11, 12, 12, 16, 0, 6, 
	12, 12, 12, 18, 0, 23, 23, 23, 
	12, 0, 0, 0, 52, 0, 53, 54, 
	55, 56, 58, 0, 59, 0, 60, 62, 
	63, 65, 35, 0, 67, 0, 68, 68
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 84;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 23;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 24;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 25;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 32;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 41;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 81;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 41
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 66 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 55 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 16 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 54 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 11 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 68 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 60 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	48, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 0, 
	0, 39, 92, 39, 92, 
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 47, 47, 47, 47, 
	9, 32, 9, 47, 0, 
	0, 10, 10, 10, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 10, 10, 0, 
	0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 39, 
	0, 0, 10, 10, 0, 
	0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	75, 31, 59, 59, 0, 54, 54, 0, 
	114, 114, 31, 59, 59, 0, 54, 54, 
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 114, 114, 114, 0, 75, 114, 32, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	54, 54, 0, 114, 36, 114, 114, 114, 
	0, 1, 1, 24, 39, 0, 1, 113, 
	0, 113, 0, 0, 1, 0, 113, 113, 
	114, 114, 31, 0, 1, 0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1560, 1592, 1652, 1712, 1713, 1768, 1823, 
	1824, 1939, 2054, 2086, 2146, 2206, 2207, 2262, 
	2317, 2318, 2394, 2509, 2542, 2657, 2772, 2804, 
	2864, 2924, 2961, 2998, 3113, 3168, 3223, 3224, 
	3339, 3376, 3491, 3606, 3721, 3722, 3798, 3913, 
	3946, 4061, 4176, 4208, 4268, 4328, 4365, 4402, 
	4517, 4572, 4627, 4628, 4743, 4780, 4895, 5010, 
	5125, 5126, 5128, 5130, 5155, 5195, 5196, 5198, 
	5312, 5313, 5427, 5428, 5429, 5431, 5432, 5546, 
	5660, 5775, 5890, 5922, 5923, 5925, 5926, 5928
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 1, 10, 
	1, 1, 1, 1, 11, 1, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 20, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 20, 1, 1, 
	1, 1, 1, 1, 1, 1, 21, 1, 
	1, 22, 1, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 24, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 15, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 18, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 29, 7, 7, 7, 7, 7, 7, 
	7, 30, 31, 7, 7, 32, 7, 7, 
	7, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 7, 7, 7, 7, 
	7, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 7, 7, 7, 
	33, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	24, 1, 36, 1, 1, 37, 38, 39, 
	39, 39, 39, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 38, 7, 40, 
	7, 7, 7, 7, 41, 7, 42, 7, 
	7, 43, 7, 7, 7, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 7, 
	7, 7, 7, 7, 7, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 7, 7, 7, 44, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 45, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	45, 7, 10, 7, 7, 7, 7, 11, 
	7, 46, 7, 7, 47, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 13, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 29, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 29, 7, 7, 7, 7, 
	7, 7, 7, 7, 31, 7, 7, 32, 
	7, 7, 7, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 7, 7, 7, 
	7, 7, 7, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 7, 
	7, 7, 48, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 17, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 49, 49, 49, 49, 49, 49, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 49, 49, 49, 50, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 1, 1, 
	1, 1, 1, 1, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	1, 1, 1, 51, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	52, 52, 52, 52, 52, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 52, 
	1, 53, 1, 1, 1, 1, 54, 1, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 60, 58, 
	58, 56, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 62, 61, 
	59, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 63, 63, 
	65, 66, 66, 66, 66, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	7, 67, 7, 7, 7, 7, 68, 7, 
	7, 7, 7, 7, 7, 7, 7, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 7, 7, 7, 7, 7, 7, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 7, 7, 7, 69, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 65, 66, 66, 66, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 65, 7, 67, 7, 7, 7, 
	7, 68, 7, 7, 7, 7, 7, 7, 
	7, 7, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 7, 7, 7, 7, 
	7, 7, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 7, 7, 
	7, 70, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 66, 66, 
	66, 66, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 66, 1, 67, 
	1, 1, 1, 1, 68, 1, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 75, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 76, 74, 74, 72, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 78, 77, 75, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 80, 79, 79, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 1, 1, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 1, 1, 1, 81, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 83, 1, 1, 1, 1, 1, 1, 
	1, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 1, 1, 1, 
	84, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 85, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 85, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 87, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 87, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 87, 88, 88, 88, 88, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	87, 7, 89, 7, 7, 7, 7, 90, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 7, 7, 7, 7, 7, 7, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 7, 7, 7, 92, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 88, 88, 88, 88, 
	88, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 88, 1, 89, 1, 1, 
	1, 1, 90, 1, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	97, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 98, 96, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 99, 1, 1, 1, 1, 
	1, 1, 1, 1, 100, 1, 1, 101, 
	1, 102, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 103, 1, 103, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 103, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 94, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 105, 104, 
	97, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 107, 106, 106, 
	108, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 108, 
	7, 7, 7, 7, 7, 7, 7, 109, 
	110, 7, 7, 111, 7, 7, 7, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 113, 7, 7, 7, 7, 7, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 7, 7, 7, 112, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 102, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 102, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 103, 1, 
	115, 116, 116, 116, 116, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 115, 
	7, 117, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 120, 7, 7, 7, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 7, 7, 7, 121, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 122, 88, 88, 88, 88, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 89, 7, 7, 7, 
	7, 90, 7, 123, 7, 7, 124, 7, 
	7, 7, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 7, 7, 7, 7, 
	7, 7, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 7, 7, 
	7, 92, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 108, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 108, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 7, 
	7, 111, 7, 7, 7, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 7, 
	7, 7, 7, 7, 7, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 7, 7, 7, 125, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 96, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	1, 1, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 1, 1, 
	1, 126, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 127, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 128, 1, 1, 
	1, 1, 1, 1, 1, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 1, 
	1, 1, 1, 1, 1, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 1, 1, 1, 129, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 130, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	131, 1, 132, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 132, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 132, 133, 133, 
	133, 133, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 132, 7, 134, 7, 
	7, 7, 7, 135, 7, 7, 7, 7, 
	7, 7, 7, 7, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 7, 7, 
	7, 7, 7, 7, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	7, 7, 7, 137, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	133, 133, 133, 133, 133, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 133, 
	1, 134, 1, 1, 1, 1, 135, 1, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 142, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 143, 141, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 144, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	145, 1, 1, 146, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 147, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	148, 1, 148, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 148, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 139, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 150, 149, 142, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 152, 151, 151, 153, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 154, 155, 7, 7, 156, 
	7, 7, 7, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 158, 7, 7, 
	7, 7, 7, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 7, 
	7, 7, 157, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 147, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 159, 
	1, 1, 148, 1, 160, 161, 161, 161, 
	161, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 160, 7, 162, 7, 7, 
	7, 7, 163, 7, 164, 7, 7, 165, 
	7, 7, 7, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 7, 7, 7, 
	7, 7, 7, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 7, 
	7, 7, 166, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 167, 
	133, 133, 133, 133, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 167, 7, 
	134, 7, 7, 7, 7, 135, 7, 168, 
	7, 7, 169, 7, 7, 7, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 7, 7, 7, 137, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 153, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 153, 7, 7, 7, 7, 7, 7, 
	7, 7, 155, 7, 7, 156, 7, 7, 
	7, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 7, 7, 7, 7, 7, 
	7, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 7, 7, 7, 
	170, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 141, 171, 1, 
	172, 1, 174, 1, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 174, 173, 35, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 176, 1, 1, 178, 177, 179, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 49, 49, 
	49, 49, 49, 49, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	49, 49, 49, 180, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	1, 182, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 181, 181, 181, 181, 181, 181, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 181, 181, 183, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 1, 184, 1, 1, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 7, 7, 7, 186, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 185, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 188, 7, 7, 7, 7, 7, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 7, 7, 7, 187, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 189, 190, 191, 191, 
	191, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 189, 7, 192, 7, 7, 
	7, 7, 193, 7, 7, 7, 7, 7, 
	7, 7, 7, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 7, 7, 7, 
	7, 7, 7, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 7, 
	7, 7, 194, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 195, 
	196, 66, 66, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 195, 7, 
	67, 7, 7, 7, 7, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	7, 7, 7, 7, 7, 7, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 7, 7, 7, 70, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 66, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 197, 1, 1, 1, 198, 
	174, 1, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 174, 
	173, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 21, 8, 9, 
	22, 8, 9, 22, 10, 84, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 84, 
	11, 15, 19, 84, 18, 86, 20, 6, 
	7, 12, 84, 11, 21, 20, 84, 11, 
	21, 0, 87, 89, 25, 26, 29, 27, 
	91, 28, 27, 91, 28, 30, 31, 30, 
	31, 33, 34, 35, 38, 95, 94, 36, 
	92, 37, 36, 92, 37, 39, 40, 39, 
	40, 42, 43, 44, 42, 43, 44, 45, 
	46, 47, 52, 55, 59, 48, 49, 60, 
	48, 49, 60, 50, 99, 51, 50, 51, 
	53, 54, 53, 54, 50, 56, 99, 51, 
	55, 57, 99, 58, 46, 47, 52, 99, 
	51, 59, 58, 99, 51, 59, 62, 63, 
	64, 62, 63, 64, 65, 66, 67, 72, 
	75, 79, 68, 69, 80, 68, 69, 80, 
	70, 100, 71, 70, 71, 73, 74, 73, 
	74, 70, 76, 100, 71, 75, 77, 100, 
	78, 66, 67, 72, 100, 71, 79, 78, 
	100, 71, 79, 82, 83, 102, 103, 85, 
	17, 86, 85, 88, 87, 0, 90, 89, 
	93, 93, 94, 95, 96, 97, 98, 34, 
	35, 38, 94, 97, 98, 101, 102
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 13, 14, 
	13, 0, 15, 0, 17, 17, 17, 0, 
	0, 13, 13, 0, 0, 19, 20, 19, 
	19, 0, 21, 0, 0, 22, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 10, 0, 0, 0, 13, 
	32, 13, 0, 33, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 10, 10, 13, 
	14, 13, 0, 15, 0, 13, 13, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 8, 10, 13, 14, 13, 
	0, 15, 0, 17, 44, 17, 0, 0, 
	13, 13, 0, 0, 19, 20, 47, 19, 
	0, 21, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	8, 10, 13, 14, 13, 0, 15, 0, 
	17, 17, 17, 0, 0, 13, 13, 0, 
	0, 19, 20, 19, 19, 0, 21, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 0, 0, 22, 22, 52, 
	0, 0, 53, 3, 0, 57, 21, 0, 
	59, 61, 0, 0, 21, 25, 64, 25, 
	25, 25, 26, 0, 66, 67, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 12, 
	12, 16, 0, 6, 12, 12, 12, 18, 
	0, 0, 0, 23, 23, 23, 12, 28, 
	0, 30, 31, 31, 31, 31, 31, 31, 
	34, 34, 35, 36, 36, 36, 36, 36, 
	36, 1, 38, 39, 40, 41, 42, 43, 
	43, 0, 0, 45, 43, 43, 43, 46, 
	0, 49, 49, 49, 43, 1, 1, 0, 
	6, 9, 11, 12, 12, 16, 0, 6, 
	12, 12, 12, 18, 0, 23, 23, 23, 
	12, 0, 0, 0, 52, 0, 53, 54, 
	55, 56, 58, 0, 59, 0, 60, 62, 
	63, 65, 35, 0, 67, 0, 68, 68
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 84;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 23;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 24;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 25;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 32;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 41;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 81;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 41
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 66 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 55 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 16 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 54 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 11 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 68 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 60 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	48, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 0, 
	0, 39, 92, 39, 92, 
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 47, 47, 47, 47, 
	9, 32, 9, 47, 0, 
	0, 10, 10, 10, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 10, 10, 0, 
	0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 39, 
	0, 0, 10, 10, 0, 
	0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	75, 31, 59, 59, 0, 54, 54, 0, 
	114, 114, 31, 59, 59, 0, 54, 54, 
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 114, 114, 114, 0, 75, 114, 32, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	54, 54, 0, 114, 36, 114, 114, 114, 
	0, 1, 1, 24, 39, 0, 1, 113, 
	0, 113, 0, 0, 1, 0, 113, 113, 
	114, 114, 31, 0, 1, 0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1560, 1592, 1652, 1712, 1713, 1768, 1823, 
	1824, 1939, 2054, 2086, 2146, 2206, 2207, 2262, 
	2317, 2318, 2394, 2509, 2542, 2657, 2772, 2804, 
	2864, 2924, 2961, 2998, 3113, 3168, 3223, 3224, 
	3339, 3376, 3491, 3606, 3721, 3722, 3798, 3913, 
	3946, 4061, 4176, 4208, 4268, 4328, 4365, 4402, 
	4517, 4572, 4627, 4628, 4743, 4780, 4895, 5010, 
	5125, 5126, 5128, 5130, 5155, 5195, 5196, 5198, 
	5312, 5313, 5427, 5428, 5429, 5431, 5432, 5546, 
	5660, 5775, 5890, 5922, 5923, 5925, 5926, 5928
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 1, 10, 
	1, 1, 1, 1, 11, 1, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 20, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 20, 1, 1, 
	1, 1, 1, 1, 1, 1, 21, 1, 
	1, 22, 1, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 24, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 15, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 18, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 29, 7, 7, 7, 7, 7, 7, 
	7, 30, 31, 7, 7, 32, 7, 7, 
	7, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 7, 7, 7, 7, 
	7, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 7, 7, 7, 
	33, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	24, 1, 36, 1, 1, 37, 38, 39, 
	39, 39, 39, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 38, 7, 40, 
	7, 7, 7, 7, 41, 7, 42, 7, 
	7, 43, 7, 7, 7, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 7, 
	7, 7, 7, 7, 7, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 7, 7, 7, 44, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 45, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	45, 7, 10, 7, 7, 7, 7, 11, 
	7, 46, 7, 7, 47, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 13, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 29, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 29, 7, 7, 7, 7, 
	7, 7, 7, 7, 31, 7, 7, 32, 
	7, 7, 7, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 7, 7, 7, 
	7, 7, 7, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 7, 
	7, 7, 48, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 17, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 49, 49, 49, 49, 49, 49, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 49, 49, 49, 50, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 1, 1, 
	1, 1, 1, 1, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	1, 1, 1, 51, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	52, 52, 52, 52, 52, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 52, 
	1, 53, 1, 1, 1, 1, 54, 1, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 60, 58, 
	58, 56, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 62, 61, 
	59, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 63, 63, 
	65, 66, 66, 66, 66, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	7, 67, 7, 7, 7, 7, 68, 7, 
	7, 7, 7, 7, 7, 7, 7, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 7, 7, 7, 7, 7, 7, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 7, 7, 7, 69, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 65, 66, 66, 66, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 65, 7, 67, 7, 7, 7, 
	7, 68, 7, 7, 7, 7, 7, 7, 
	7, 7, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 7, 7, 7, 7, 
	7, 7, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 7, 7, 
	7, 70, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 66, 66, 
	66, 66, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 66, 1, 67, 
	1, 1, 1, 1, 68, 1, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 75, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 76, 74, 74, 72, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 78, 77, 75, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 80, 79, 79, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 1, 1, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 1, 1, 1, 81, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 83, 1, 1, 1, 1, 1, 1, 
	1, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 1, 1, 1, 
	84, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 85, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 85, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 87, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 87, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 87, 88, 88, 88, 88, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	87, 7, 89, 7, 7, 7, 7, 90, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 7, 7, 7, 7, 7, 7, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 7, 7, 7, 92, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 88, 88, 88, 88, 
	88, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 88, 1, 89, 1, 1, 
	1, 1, 90, 1, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	97, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 98, 96, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 99, 1, 1, 1, 1, 
	1, 1, 1, 1, 100, 1, 1, 101, 
	1, 102, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 103, 1, 103, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 103, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 94, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 105, 104, 
	97, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 107, 106, 106, 
	108, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 108, 
	7, 7, 7, 7, 7, 7, 7, 109, 
	110, 7, 7, 111, 7, 7, 7, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 113, 7, 7, 7, 7, 7, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 7, 7, 7, 112, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 102, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 102, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 103, 1, 
	115, 116, 116, 116, 116, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 115, 
	7, 117, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 120, 7, 7, 7, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 7, 7, 7, 121, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 122, 88, 88, 88, 88, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 89, 7, 7, 7, 
	7, 90, 7, 123, 7, 7, 124, 7, 
	7, 7, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 7, 7, 7, 7, 
	7, 7, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 7, 7, 
	7, 92, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 108, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 108, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 7, 
	7, 111, 7, 7, 7, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 7, 
	7, 7, 7, 7, 7, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 7, 7, 7, 125, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 96, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	1, 1, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 1, 1, 
	1, 126, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 127, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 128, 1, 1, 
	1, 1, 1, 1, 1, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 1, 
	1, 1, 1, 1, 1, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 1, 1, 1, 129, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 130, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	131, 1, 132, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 132, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 132, 133, 133, 
	133, 133, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 132, 7, 134, 7, 
	7, 7, 7, 135, 7, 7, 7, 7, 
	7, 7, 7, 7, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 7, 7, 
	7, 7, 7, 7, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	7, 7, 7, 137, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	133, 133, 133, 133, 133, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 133, 
	1, 134, 1, 1, 1, 1, 135, 1, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 142, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 143, 141, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 144, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	145, 1, 1, 146, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 147, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	148, 1, 148, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 148, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 139, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 150, 149, 142, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 152, 151, 151, 153, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 154, 155, 7, 7, 156, 
	7, 7, 7, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 158, 7, 7, 
	7, 7, 7, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 7, 
	7, 7, 157, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 147, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 159, 
	1, 1, 148, 1, 160, 161, 161, 161, 
	161, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 160, 7, 162, 7, 7, 
	7, 7, 163, 7, 164, 7, 7, 165, 
	7, 7, 7, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 7, 7, 7, 
	7, 7, 7, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 7, 
	7, 7, 166, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 167, 
	133, 133, 133, 133, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 167, 7, 
	134, 7, 7, 7, 7, 135, 7, 168, 
	7, 7, 169, 7, 7, 7, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 7, 7, 7, 137, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 153, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 153, 7, 7, 7, 7, 7, 7, 
	7, 7, 155, 7, 7, 156, 7, 7, 
	7, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 7, 7, 7, 7, 7, 
	7, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 7, 7, 7, 
	170, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 141, 171, 1, 
	172, 1, 174, 1, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 174, 173, 35, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 176, 1, 1, 178, 177, 179, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 49, 49, 
	49, 49, 49, 49, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	49, 49, 49, 180, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	1, 182, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 181, 181, 181, 181, 181, 181, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 181, 181, 183, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 1, 184, 1, 1, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 7, 7, 7, 186, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 185, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 188, 7, 7, 7, 7, 7, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 7, 7, 7, 187, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 189, 190, 191, 191, 
	191, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 189, 7, 192, 7, 7, 
	7, 7, 193, 7, 7, 7, 7, 7, 
	7, 7, 7, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 7, 7, 7, 
	7, 7, 7, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 7, 
	7, 7, 194, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 195, 
	196, 66, 66, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 195, 7, 
	67, 7, 7, 7, 7, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	7, 7, 7, 7, 7, 7, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 7, 7, 7, 70, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 66, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 197, 1, 1, 1, 198, 
	174, 1, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 174, 
	173, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 21, 8, 9, 
	22, 8, 9, 22, 10, 84, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 84, 
	11, 15, 19, 84, 18, 86, 20, 6, 
	7, 12, 84, 11, 21, 20, 84, 11, 
	21, 0, 87, 89, 25, 26, 29, 27, 
	91, 28, 27, 91, 28, 30, 31, 30, 
	31, 33, 34, 35, 38, 95, 94, 36, 
	92, 37, 36, 92, 37, 39, 40, 39, 
	40, 42, 43, 44, 42, 43, 44, 45, 
	46, 47, 52, 55, 59, 48, 49, 60, 
	48, 49, 60, 50, 99, 51, 50, 51, 
	53, 54, 53, 54, 50, 56, 99, 51, 
	55, 57, 99, 58, 46, 47, 52, 99, 
	51, 59, 58, 99, 51, 59, 62, 63, 
	64, 62, 63, 64, 65, 66, 67, 72, 
	75, 79, 68, 69, 80, 68, 69, 80, 
	70, 100, 71, 70, 71, 73, 74, 73, 
	74, 70, 76, 100, 71, 75, 77, 100, 
	78, 66, 67, 72, 100, 71, 79, 78, 
	100, 71, 79, 82, 83, 102, 103, 85, 
	17, 86, 85, 88, 87, 0, 90, 89, 
	93, 93, 94, 95, 96, 97, 98, 34, 
	35, 38, 94, 97, 98, 101, 102
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 13, 14, 
	13, 0, 15, 0, 17, 17, 17, 0, 
	0, 13, 13, 0, 0, 19, 20, 19, 
	19, 0, 21, 0, 0, 22, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 10, 0, 0, 0, 13, 
	32, 13, 0, 33, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 10, 10, 13, 
	14, 13, 0, 15, 0, 13, 13, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 8, 10, 13, 14, 13, 
	0, 15, 0, 17, 44, 17, 0, 0, 
	13, 13, 0, 0, 19, 20, 47, 19, 
	0, 21, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	8, 10, 13, 14, 13, 0, 15, 0, 
	17, 17, 17, 0, 0, 13, 13, 0, 
	0, 19, 20, 19, 19, 0, 21, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 0, 0, 22, 22, 52, 
	0, 0, 53, 3, 0, 57, 21, 0, 
	59, 61, 0, 0, 21, 25, 64, 25, 
	25, 25, 26, 0, 66, 67, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 12, 
	12, 16, 0, 6, 12, 12, 12, 18, 
	0, 0, 0, 23, 23, 23, 12, 28, 
	0, 30, 31, 31, 31, 31, 31, 31, 
	34, 34, 35, 36, 36, 36, 36, 36, 
	36, 1, 38, 39, 40, 41, 42, 43, 
	43, 0, 0, 45, 43, 43, 43, 46, 
	0, 49, 49, 49, 43, 1, 1, 0, 
	6, 9, 11, 12, 12, 16, 0, 6, 
	12, 12, 12, 18, 0, 23, 23, 23, 
	12, 0, 0, 0, 52, 0, 53, 54, 
	55, 56, 58, 0, 59, 0, 60, 62, 
	63, 65, 35, 0, 67, 0, 68, 68
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 84;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 23;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 24;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 25;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 32;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 41;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 81;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 41
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 66 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 55 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 16 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 54 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 11 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 68 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 60 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	48, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 0, 
	0, 39, 92, 39, 92, 
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 47, 47, 47, 47, 
	9, 32, 9, 47, 0, 
	0, 10, 10, 10, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 10, 10, 0, 
	0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 39, 
	0, 0, 10, 10, 0, 
	0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	75, 31, 59, 59, 0, 54, 54, 0, 
	114, 114, 31, 59, 59, 0, 54, 54, 
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 114, 114, 114, 0, 75, 114, 32, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	54, 54, 0, 114, 36, 114, 114, 114, 
	0, 1, 1, 24, 39, 0, 1, 113, 
	0, 113, 0, 0, 1, 0, 113, 113, 
	114, 114, 31, 0, 1, 0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1560, 1592, 1652, 1712, 1713, 1768, 1823, 
	1824, 1939, 2054, 2086, 2146, 2206, 2207, 2262, 
	2317, 2318, 2394, 2509, 2542, 2657, 2772, 2804, 
	2864, 2924, 2961, 2998, 3113, 3168, 3223, 3224, 
	3339, 3376, 3491, 3606, 3721, 3722, 3798, 3913, 
	3946, 4061, 4176, 4208, 4268, 4328, 4365, 4402, 
	4517, 4572, 4627, 4628, 4743, 4780, 4895, 5010, 
	5125, 5126, 5128, 5130, 5155, 5195, 5196, 5198, 
	5312, 5313, 5427, 5428, 5429, 5431, 5432, 5546, 
	5660, 5775, 5890, 5922, 5923, 5925, 5926, 5928
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 1, 10, 
	1, 1, 1, 1, 11, 1, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 20, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 20, 1, 1, 
	1, 1, 1, 1, 1, 1, 21, 1, 
	1, 22, 1, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 24, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 15, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 18, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 29, 7, 7, 7, 7, 7, 7, 
	7, 30, 31, 7, 7, 32, 7, 7, 
	7, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 7, 7, 7, 7, 
	7, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 7, 7, 7, 
	33, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	24, 1, 36, 1, 1, 37, 38, 39, 
	39, 39, 39, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 38, 7, 40, 
	7, 7, 7, 7, 41, 7, 42, 7, 
	7, 43, 7, 7, 7, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 7, 
	7, 7, 7, 7, 7, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 7, 7, 7, 44, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 45, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	45, 7, 10, 7, 7, 7, 7, 11, 
	7, 46, 7, 7, 47, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 13, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 29, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 29, 7, 7, 7, 7, 
	7, 7, 7, 7, 31, 7, 7, 32, 
	7, 7, 7, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 7, 7, 7, 
	7, 7, 7, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 7, 
	7, 7, 48, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 17, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 49, 49, 49, 49, 49, 49, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 49, 49, 49, 50, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 1, 1, 
	1, 1, 1, 1, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	1, 1, 1, 51, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	52, 52, 52, 52, 52, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 52, 
	1, 53, 1, 1, 1, 1, 54, 1, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 60, 58, 
	58, 56, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 62, 61, 
	59, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 63, 63, 
	65, 66, 66, 66, 66, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	7, 67, 7, 7, 7, 7, 68, 7, 
	7, 7, 7, 7, 7, 7, 7, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 7, 7, 7, 7, 7, 7, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 7, 7, 7, 69, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 65, 66, 66, 66, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 65, 7, 67, 7, 7, 7, 
	7, 68, 7, 7, 7, 7, 7, 7, 
	7, 7, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 7, 7, 7, 7, 
	7, 7, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 7, 7, 
	7, 70, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 66, 66, 
	66, 66, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 66, 1, 67, 
	1, 1, 1, 1, 68, 1, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 75, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 76, 74, 74, 72, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 78, 77, 75, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 80, 79, 79, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 1, 1, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 1, 1, 1, 81, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 83, 1, 1, 1, 1, 1, 1, 
	1, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 1, 1, 1, 
	84, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 85, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 85, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 87, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 87, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 87, 88, 88, 88, 88, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	87, 7, 89, 7, 7, 7, 7, 90, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 7, 7, 7, 7, 7, 7, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 7, 7, 7, 92, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 88, 88, 88, 88, 
	88, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 88, 1, 89, 1, 1, 
	1, 1, 90, 1, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	97, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 98, 96, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 99, 1, 1, 1, 1, 
	1, 1, 1, 1, 100, 1, 1, 101, 
	1, 102, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 103, 1, 103, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 103, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 94, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 105, 104, 
	97, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 107, 106, 106, 
	108, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 108, 
	7, 7, 7, 7, 7, 7, 7, 109, 
	110, 7, 7, 111, 7, 7, 7, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 113, 7, 7, 7, 7, 7, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 7, 7, 7, 112, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 102, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 102, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 103, 1, 
	115, 116, 116, 116, 116, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 115, 
	7, 117, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 120, 7, 7, 7, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 7, 7, 7, 121, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 122, 88, 88, 88, 88, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 89, 7, 7, 7, 
	7, 90, 7, 123, 7, 7, 124, 7, 
	7, 7, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 7, 7, 7, 7, 
	7, 7, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 7, 7, 
	7, 92, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 108, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 108, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 7, 
	7, 111, 7, 7, 7, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 7, 
	7, 7, 7, 7, 7, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 7, 7, 7, 125, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 96, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	1, 1, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 1, 1, 
	1, 126, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 127, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 128, 1, 1, 
	1, 1, 1, 1, 1, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 1, 
	1, 1, 1, 1, 1, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 1, 1, 1, 129, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 130, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	131, 1, 132, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 132, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 132, 133, 133, 
	133, 133, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 132, 7, 134, 7, 
	7, 7, 7, 135, 7, 7, 7, 7, 
	7, 7, 7, 7, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 7, 7, 
	7, 7, 7, 7, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	7, 7, 7, 137, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	133, 133, 133, 133, 133, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 133, 
	1, 134, 1, 1, 1, 1, 135, 1, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 142, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 143, 141, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 144, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	145, 1, 1, 146, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 147, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	148, 1, 148, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 148, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 139, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 150, 149, 142, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 152, 151, 151, 153, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 154, 155, 7, 7, 156, 
	7, 7, 7, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 158, 7, 7, 
	7, 7, 7, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 7, 
	7, 7, 157, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 147, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 159, 
	1, 1, 148, 1, 160, 161, 161, 161, 
	161, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 160, 7, 162, 7, 7, 
	7, 7, 163, 7, 164, 7, 7, 165, 
	7, 7, 7, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 7, 7, 7, 
	7, 7, 7, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 7, 
	7, 7, 166, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 167, 
	133, 133, 133, 133, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 167, 7, 
	134, 7, 7, 7, 7, 135, 7, 168, 
	7, 7, 169, 7, 7, 7, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 7, 7, 7, 137, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 153, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 153, 7, 7, 7, 7, 7, 7, 
	7, 7, 155, 7, 7, 156, 7, 7, 
	7, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 7, 7, 7, 7, 7, 
	7, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 7, 7, 7, 
	170, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 141, 171, 1, 
	172, 1, 174, 1, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 174, 173, 35, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 176, 1, 1, 178, 177, 179, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 49, 49, 
	49, 49, 49, 49, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	49, 49, 49, 180, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	1, 182, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 181, 181, 181, 181, 181, 181, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 181, 181, 183, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 1, 184, 1, 1, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 7, 7, 7, 186, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 185, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 188, 7, 7, 7, 7, 7, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 7, 7, 7, 187, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 189, 190, 191, 191, 
	191, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 189, 7, 192, 7, 7, 
	7, 7, 193, 7, 7, 7, 7, 7, 
	7, 7, 7, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 7, 7, 7, 
	7, 7, 7, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 7, 
	7, 7, 194, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 195, 
	196, 66, 66, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 195, 7, 
	67, 7, 7, 7, 7, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	7, 7, 7, 7, 7, 7, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 7, 7, 7, 70, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 66, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 197, 1, 1, 1, 198, 
	174, 1, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 174, 
	173, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 21, 8, 9, 
	22, 8, 9, 22, 10, 84, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 84, 
	11, 15, 19, 84, 18, 86, 20, 6, 
	7, 12, 84, 11, 21, 20, 84, 11, 
	21, 0, 87, 89, 25, 26, 29, 27, 
	91, 28, 27, 91, 28, 30, 31, 30, 
	31, 33, 34, 35, 38, 95, 94, 36, 
	92, 37, 36, 92, 37, 39, 40, 39, 
	40, 42, 43, 44, 42, 43, 44, 45, 
	46, 47, 52, 55, 59, 48, 49, 60, 
	48, 49, 60, 50, 99, 51, 50, 51, 
	53, 54, 53, 54, 50, 56, 99, 51, 
	55, 57, 99, 58, 46, 47, 52, 99, 
	51, 59, 58, 99, 51, 59, 62, 63, 
	64, 62, 63, 64, 65, 66, 67, 72, 
	75, 79, 68, 69, 80, 68, 69, 80, 
	70, 100, 71, 70, 71, 73, 74, 73, 
	74, 70, 76, 100, 71, 75, 77, 100, 
	78, 66, 67, 72, 100, 71, 79, 78, 
	100, 71, 79, 82, 83, 102, 103, 85, 
	17, 86, 85, 88, 87, 0, 90, 89, 
	93, 93, 94, 95, 96, 97, 98, 34, 
	35, 38, 94, 97, 98, 101, 102
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 13, 14, 
	13, 0, 15, 0, 17, 17, 17, 0, 
	0, 13, 13, 0, 0, 19, 20, 19, 
	19, 0, 21, 0, 0, 22, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 10, 0, 0, 0, 13, 
	32, 13, 0, 33, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 10, 10, 13, 
	14, 13, 0, 15, 0, 13, 13, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 8, 10, 13, 14, 13, 
	0, 15, 0, 17, 44, 17, 0, 0, 
	13, 13, 0, 0, 19, 20, 47, 19, 
	0, 21, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	8, 10, 13, 14, 13, 0, 15, 0, 
	17, 17, 17, 0, 0, 13, 13, 0, 
	0, 19, 20, 19, 19, 0, 21, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 0, 0, 22, 22, 52, 
	0, 0, 53, 3, 0, 57, 21, 0, 
	59, 61, 0, 0, 21, 25, 64, 25, 
	25, 25, 26, 0, 66, 67, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 12, 
	12, 16, 0, 6, 12, 12, 12, 18, 
	0, 0, 0, 23, 23, 23, 12, 28, 
	0, 30, 31, 31, 31, 31, 31, 31, 
	34, 34, 35, 36, 36, 36, 36, 36, 
	36, 1, 38, 39, 40, 41, 42, 43, 
	43, 0, 0, 45, 43, 43, 43, 46, 
	0, 49, 49, 49, 43, 1, 1, 0, 
	6, 9, 11, 12, 12, 16, 0, 6, 
	12, 12, 12, 18, 0, 23, 23, 23, 
	12, 0, 0, 0, 52, 0, 53, 54, 
	55, 56, 58, 0, 59, 0, 60, 62, 
	63, 65, 35, 0, 67, 0, 68, 68
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 84;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 23;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 24;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 25;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 32;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 41;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 81;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 41
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 66 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 55 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 16 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 54 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 11 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 68 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 60 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	48, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 0, 
	0, 39, 92, 39, 92, 
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 47, 47, 47, 47, 
	9, 32, 9, 47, 0, 
	0, 10, 10, 10, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 10, 10, 0, 
	0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 39, 
	0, 0, 10, 10, 0, 
	0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	75, 31, 59, 59, 0, 54, 54, 0, 
	114, 114, 31, 59, 59, 0, 54, 54, 
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 114, 114, 114, 0, 75, 114, 32, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	54, 54, 0, 114, 36, 114, 114, 114, 
	0, 1, 1, 24, 39, 0, 1, 113, 
	0, 113, 0, 0, 1, 0, 113, 113, 
	114, 114, 31, 0, 1, 0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1560, 1592, 1652, 1712, 1713, 1768, 1823, 
	1824, 1939, 2054, 2086, 2146, 2206, 2207, 2262, 
	2317, 2318, 2394, 2509, 2542, 2657, 2772, 2804, 
	2864, 2924, 2961, 2998, 3113, 3168, 3223, 3224, 
	3339, 3376, 3491, 3606, 3721, 3722, 3798, 3913, 
	3946, 4061, 4176, 4208, 4268, 4328, 4365, 4402, 
	4517, 4572, 4627, 4628, 4743, 4780, 4895, 5010, 
	5125, 5126, 5128, 5130, 5155, 5195, 5196, 5198, 
	5312, 5313, 5427, 5428, 5429, 5431, 5432, 5546, 
	5660, 5775, 5890, 5922, 5923, 5925, 5926, 5928
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 1, 10, 
	1, 1, 1, 1, 11, 1, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 20, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 20, 1, 1, 
	1, 1, 1, 1, 1, 1, 21, 1, 
	1, 22, 1, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 24, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 15, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 18, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 29, 7, 7, 7, 7, 7, 7, 
	7, 30, 31, 7, 7, 32, 7, 7, 
	7, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 7, 7, 7, 7, 
	7, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 7, 7, 7, 
	33, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	24, 1, 36, 1, 1, 37, 38, 39, 
	39, 39, 39, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 38, 7, 40, 
	7, 7, 7, 7, 41, 7, 42, 7, 
	7, 43, 7, 7, 7, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 7, 
	7, 7, 7, 7, 7, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 7, 7, 7, 44, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 45, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	45, 7, 10, 7, 7, 7, 7, 11, 
	7, 46, 7, 7, 47, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 13, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 29, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 29, 7, 7, 7, 7, 
	7, 7, 7, 7, 31, 7, 7, 32, 
	7, 7, 7, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 7, 7, 7, 
	7, 7, 7, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 7, 
	7, 7, 48, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 17, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 49, 49, 49, 49, 49, 49, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 49, 49, 49, 50, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 1, 1, 
	1, 1, 1, 1, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	1, 1, 1, 51, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	52, 52, 52, 52, 52, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 52, 
	1, 53, 1, 1, 1, 1, 54, 1, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 60, 58, 
	58, 56, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 62, 61, 
	59, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 63, 63, 
	65, 66, 66, 66, 66, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	7, 67, 7, 7, 7, 7, 68, 7, 
	7, 7, 7, 7, 7, 7, 7, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 7, 7, 7, 7, 7, 7, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 7, 7, 7, 69, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 65, 66, 66, 66, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 65, 7, 67, 7, 7, 7, 
	7, 68, 7, 7, 7, 7, 7, 7, 
	7, 7, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 7, 7, 7, 7, 
	7, 7, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 7, 7, 
	7, 70, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 66, 66, 
	66, 66, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 66, 1, 67, 
	1, 1, 1, 1, 68, 1, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 75, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 76, 74, 74, 72, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 78, 77, 75, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 80, 79, 79, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 1, 1, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 1, 1, 1, 81, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 83, 1, 1, 1, 1, 1, 1, 
	1, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 1, 1, 1, 
	84, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 85, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 85, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 87, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 87, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 87, 88, 88, 88, 88, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	87, 7, 89, 7, 7, 7, 7, 90, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 7, 7, 7, 7, 7, 7, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 7, 7, 7, 92, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 88, 88, 88, 88, 
	88, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 88, 1, 89, 1, 1, 
	1, 1, 90, 1, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	97, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 98, 96, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 99, 1, 1, 1, 1, 
	1, 1, 1, 1, 100, 1, 1, 101, 
	1, 102, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 103, 1, 103, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 103, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 94, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 105, 104, 
	97, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 107, 106, 106, 
	108, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 108, 
	7, 7, 7, 7, 7, 7, 7, 109, 
	110, 7, 7, 111, 7, 7, 7, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 113, 7, 7, 7, 7, 7, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 7, 7, 7, 112, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 102, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 102, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 103, 1, 
	115, 116, 116, 116, 116, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 115, 
	7, 117, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 120, 7, 7, 7, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 7, 7, 7, 121, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 122, 88, 88, 88, 88, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 89, 7, 7, 7, 
	7, 90, 7, 123, 7, 7, 124, 7, 
	7, 7, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 7, 7, 7, 7, 
	7, 7, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 7, 7, 
	7, 92, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 108, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 108, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 7, 
	7, 111, 7, 7, 7, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 7, 
	7, 7, 7, 7, 7, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 7, 7, 7, 125, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 96, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	1, 1, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 1, 1, 
	1, 126, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 127, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 128, 1, 1, 
	1, 1, 1, 1, 1, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 1, 
	1, 1, 1, 1, 1, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 1, 1, 1, 129, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 130, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	131, 1, 132, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 132, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 132, 133, 133, 
	133, 133, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 132, 7, 134, 7, 
	7, 7, 7, 135, 7, 7, 7, 7, 
	7, 7, 7, 7, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 7, 7, 
	7, 7, 7, 7, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	7, 7, 7, 137, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	133, 133, 133, 133, 133, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 133, 
	1, 134, 1, 1, 1, 1, 135, 1, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 142, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 143, 141, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 144, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	145, 1, 1, 146, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 147, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	148, 1, 148, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 148, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 139, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 150, 149, 142, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 152, 151, 151, 153, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 154, 155, 7, 7, 156, 
	7, 7, 7, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 158, 7, 7, 
	7, 7, 7, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 7, 
	7, 7, 157, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 147, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 159, 
	1, 1, 148, 1, 160, 161, 161, 161, 
	161, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 160, 7, 162, 7, 7, 
	7, 7, 163, 7, 164, 7, 7, 165, 
	7, 7, 7, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 7, 7, 7, 
	7, 7, 7, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 7, 
	7, 7, 166, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 167, 
	133, 133, 133, 133, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 167, 7, 
	134, 7, 7, 7, 7, 135, 7, 168, 
	7, 7, 169, 7, 7, 7, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 7, 7, 7, 137, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 153, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 153, 7, 7, 7, 7, 7, 7, 
	7, 7, 155, 7, 7, 156, 7, 7, 
	7, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 7, 7, 7, 7, 7, 
	7, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 7, 7, 7, 
	170, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 141, 171, 1, 
	172, 1, 174, 1, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 174, 173, 35, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 176, 1, 1, 178, 177, 179, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 49, 49, 
	49, 49, 49, 49, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	49, 49, 49, 180, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	1, 182, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 181, 181, 181, 181, 181, 181, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 181, 181, 183, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 1, 184, 1, 1, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 7, 7, 7, 186, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 185, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 188, 7, 7, 7, 7, 7, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 7, 7, 7, 187, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 189, 190, 191, 191, 
	191, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 189, 7, 192, 7, 7, 
	7, 7, 193, 7, 7, 7, 7, 7, 
	7, 7, 7, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 7, 7, 7, 
	7, 7, 7, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 7, 
	7, 7, 194, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 195, 
	196, 66, 66, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 195, 7, 
	67, 7, 7, 7, 7, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	7, 7, 7, 7, 7, 7, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 7, 7, 7, 70, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 66, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 197, 1, 1, 1, 198, 
	174, 1, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 174, 
	173, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 21, 8, 9, 
	22, 8, 9, 22, 10, 84, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 84, 
	11, 15, 19, 84, 18, 86, 20, 6, 
	7, 12, 84, 11, 21, 20, 84, 11, 
	21, 0, 87, 89, 25, 26, 29, 27, 
	91, 28, 27, 91, 28, 30, 31, 30, 
	31, 33, 34, 35, 38, 95, 94, 36, 
	92, 37, 36, 92, 37, 39, 40, 39, 
	40, 42, 43, 44, 42, 43, 44, 45, 
	46, 47, 52, 55, 59, 48, 49, 60, 
	48, 49, 60, 50, 99, 51, 50, 51, 
	53, 54, 53, 54, 50, 56, 99, 51, 
	55, 57, 99, 58, 46, 47, 52, 99, 
	51, 59, 58, 99, 51, 59, 62, 63, 
	64, 62, 63, 64, 65, 66, 67, 72, 
	75, 79, 68, 69, 80, 68, 69, 80, 
	70, 100, 71, 70, 71, 73, 74, 73, 
	74, 70, 76, 100, 71, 75, 77, 100, 
	78, 66, 67, 72, 100, 71, 79, 78, 
	100, 71, 79, 82, 83, 102, 103, 85, 
	17, 86, 85, 88, 87, 0, 90, 89, 
	93, 93, 94, 95, 96, 97, 98, 34, 
	35, 38, 94, 97, 98, 101, 102
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 13, 14, 
	13, 0, 15, 0, 17, 17, 17, 0, 
	0, 13, 13, 0, 0, 19, 20, 19, 
	19, 0, 21, 0, 0, 22, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 10, 0, 0, 0, 13, 
	32, 13, 0, 33, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 10, 10, 13, 
	14, 13, 0, 15, 0, 13, 13, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 8, 10, 13, 14, 13, 
	0, 15, 0, 17, 44, 17, 0, 0, 
	13, 13, 0, 0, 19, 20, 47, 19, 
	0, 21, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	8, 10, 13, 14, 13, 0, 15, 0, 
	17, 17, 17, 0, 0, 13, 13, 0, 
	0, 19, 20, 19, 19, 0, 21, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 0, 0, 22, 22, 52, 
	0, 0, 53, 3, 0, 57, 21, 0, 
	59, 61, 0, 0, 21, 25, 64, 25, 
	25, 25, 26, 0, 66, 67, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 12, 
	12, 16, 0, 6, 12, 12, 12, 18, 
	0, 0, 0, 23, 23, 23, 12, 28, 
	0, 30, 31, 31, 31, 31, 31, 31, 
	34, 34, 35, 36, 36, 36, 36, 36, 
	36, 1, 38, 39, 40, 41, 42, 43, 
	43, 0, 0, 45, 43, 43, 43, 46, 
	0, 49, 49, 49, 43, 1, 1, 0, 
	6, 9, 11, 12, 12, 16, 0, 6, 
	12, 12, 12, 18, 0, 23, 23, 23, 
	12, 0, 0, 0, 52, 0, 53, 54, 
	55, 56, 58, 0, 59, 0, 60, 62, 
	63, 65, 35, 0, 67, 0, 68, 68
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 84;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 23;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 24;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 25;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 32;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 41;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 81;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 41
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 66 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 55 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 16 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 54 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 11 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 68 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 60 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	48, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 0, 
	0, 39, 92, 39, 92, 
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 47, 47, 47, 47, 
	9, 32, 9, 47, 0, 
	0, 10, 10, 10, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 10, 10, 0, 
	0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 39, 
	0, 0, 10, 10, 0, 
	0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	75, 31, 59, 59, 0, 54, 54, 0, 
	114, 114, 31, 59, 59, 0, 54, 54, 
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 114, 114, 114, 0, 75, 114, 32, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	54, 54, 0, 114, 36, 114, 114, 114, 
	0, 1, 1, 24, 39, 0, 1, 113, 
	0, 113, 0, 0, 1, 0, 113, 113, 
	114, 114, 31, 0, 1, 0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1560, 1592, 1652, 1712, 1713, 1768, 1823, 
	1824, 1939, 2054, 2086, 2146, 2206, 2207, 2262, 
	2317, 2318, 2394, 2509, 2542, 2657, 2772, 2804, 
	2864, 2924, 2961, 2998, 3113, 3168, 3223, 3224, 
	3339, 3376, 3491, 3606, 3721, 3722, 3798, 3913, 
	3946, 4061, 4176, 4208, 4268, 4328, 4365, 4402, 
	4517, 4572, 4627, 4628, 4743, 4780, 4895, 5010, 
	5125, 5126, 5128, 5130, 5155, 5195, 5196, 5198, 
	5312, 5313, 5427, 5428, 5429, 5431, 5432, 5546, 
	5660, 5775, 5890, 5922, 5923, 5925, 5926, 5928
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 1, 10, 
	1, 1, 1, 1, 11, 1, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 20, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 20, 1, 1, 
	1, 1, 1, 1, 1, 1, 21, 1, 
	1, 22, 1, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 24, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 15, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 18, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 29, 7, 7, 7, 7, 7, 7, 
	7, 30, 31, 7, 7, 32, 7, 7, 
	7, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 7, 7, 7, 7, 
	7, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 7, 7, 7, 
	33, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	24, 1, 36, 1, 1, 37, 38, 39, 
	39, 39, 39, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 38, 7, 40, 
	7, 7, 7, 7, 41, 7, 42, 7, 
	7, 43, 7, 7, 7, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 7, 
	7, 7, 7, 7, 7, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 7, 7, 7, 44, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 45, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	45, 7, 10, 7, 7, 7, 7, 11, 
	7, 46, 7, 7, 47, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 13, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 29, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 29, 7, 7, 7, 7, 
	7, 7, 7, 7, 31, 7, 7, 32, 
	7, 7, 7, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 7, 7, 7, 
	7, 7, 7, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 7, 
	7, 7, 48, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 17, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 49, 49, 49, 49, 49, 49, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 49, 49, 49, 50, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 1, 1, 
	1, 1, 1, 1, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	1, 1, 1, 51, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	52, 52, 52, 52, 52, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 52, 
	1, 53, 1, 1, 1, 1, 54, 1, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 60, 58, 
	58, 56, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 62, 61, 
	59, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 63, 63, 
	65, 66, 66, 66, 66, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	7, 67, 7, 7, 7, 7, 68, 7, 
	7, 7, 7, 7, 7, 7, 7, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 7, 7, 7, 7, 7, 7, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 7, 7, 7, 69, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 65, 66, 66, 66, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 65, 7, 67, 7, 7, 7, 
	7, 68, 7, 7, 7, 7, 7, 7, 
	7, 7, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 7, 7, 7, 7, 
	7, 7, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 7, 7, 
	7, 70, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 66, 66, 
	66, 66, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 66, 1, 67, 
	1, 1, 1, 1, 68, 1, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 75, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 76, 74, 74, 72, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 78, 77, 75, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 80, 79, 79, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 1, 1, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 1, 1, 1, 81, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 83, 1, 1, 1, 1, 1, 1, 
	1, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 1, 1, 1, 
	84, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 85, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 85, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 87, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 87, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 87, 88, 88, 88, 88, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	87, 7, 89, 7, 7, 7, 7, 90, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 7, 7, 7, 7, 7, 7, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 7, 7, 7, 92, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 88, 88, 88, 88, 
	88, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 88, 1, 89, 1, 1, 
	1, 1, 90, 1, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	97, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 98, 96, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 99, 1, 1, 1, 1, 
	1, 1, 1, 1, 100, 1, 1, 101, 
	1, 102, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 103, 1, 103, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 103, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 94, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 105, 104, 
	97, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 107, 106, 106, 
	108, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 108, 
	7, 7, 7, 7, 7, 7, 7, 109, 
	110, 7, 7, 111, 7, 7, 7, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 113, 7, 7, 7, 7, 7, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 7, 7, 7, 112, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 102, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 102, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 103, 1, 
	115, 116, 116, 116, 116, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 115, 
	7, 117, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 120, 7, 7, 7, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 7, 7, 7, 121, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 122, 88, 88, 88, 88, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 89, 7, 7, 7, 
	7, 90, 7, 123, 7, 7, 124, 7, 
	7, 7, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 7, 7, 7, 7, 
	7, 7, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 7, 7, 
	7, 92, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 108, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 108, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 7, 
	7, 111, 7, 7, 7, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 7, 
	7, 7, 7, 7, 7, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 7, 7, 7, 125, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 96, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	1, 1, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 1, 1, 
	1, 126, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 127, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 128, 1, 1, 
	1, 1, 1, 1, 1, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 1, 
	1, 1, 1, 1, 1, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 1, 1, 1, 129, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 130, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	131, 1, 132, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 132, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 132, 133, 133, 
	133, 133, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 132, 7, 134, 7, 
	7, 7, 7, 135, 7, 7, 7, 7, 
	7, 7, 7, 7, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 7, 7, 
	7, 7, 7, 7, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	7, 7, 7, 137, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	133, 133, 133, 133, 133, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 133, 
	1, 134, 1, 1, 1, 1, 135, 1, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 142, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 143, 141, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 144, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	145, 1, 1, 146, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 147, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	148, 1, 148, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 148, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 139, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 150, 149, 142, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 152, 151, 151, 153, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 154, 155, 7, 7, 156, 
	7, 7, 7, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 158, 7, 7, 
	7, 7, 7, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 7, 
	7, 7, 157, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 147, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 159, 
	1, 1, 148, 1, 160, 161, 161, 161, 
	161, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 160, 7, 162, 7, 7, 
	7, 7, 163, 7, 164, 7, 7, 165, 
	7, 7, 7, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 7, 7, 7, 
	7, 7, 7, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 7, 
	7, 7, 166, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 167, 
	133, 133, 133, 133, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 167, 7, 
	134, 7, 7, 7, 7, 135, 7, 168, 
	7, 7, 169, 7, 7, 7, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 7, 7, 7, 137, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 153, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 153, 7, 7, 7, 7, 7, 7, 
	7, 7, 155, 7, 7, 156, 7, 7, 
	7, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 7, 7, 7, 7, 7, 
	7, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 7, 7, 7, 
	170, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 141, 171, 1, 
	172, 1, 174, 1, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 174, 173, 35, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 176, 1, 1, 178, 177, 179, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 49, 49, 
	49, 49, 49, 49, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	49, 49, 49, 180, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	1, 182, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 181, 181, 181, 181, 181, 181, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 181, 181, 183, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 1, 184, 1, 1, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 7, 7, 7, 186, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 185, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 188, 7, 7, 7, 7, 7, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 7, 7, 7, 187, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 189, 190, 191, 191, 
	191, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 189, 7, 192, 7, 7, 
	7, 7, 193, 7, 7, 7, 7, 7, 
	7, 7, 7, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 7, 7, 7, 
	7, 7, 7, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 7, 
	7, 7, 194, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 195, 
	196, 66, 66, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 195, 7, 
	67, 7, 7, 7, 7, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	7, 7, 7, 7, 7, 7, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 7, 7, 7, 70, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 66, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 197, 1, 1, 1, 198, 
	174, 1, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 174, 
	173, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 21, 8, 9, 
	22, 8, 9, 22, 10, 84, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 84, 
	11, 15, 19, 84, 18, 86, 20, 6, 
	7, 12, 84, 11, 21, 20, 84, 11, 
	21, 0, 87, 89, 25, 26, 29, 27, 
	91, 28, 27, 91, 28, 30, 31, 30, 
	31, 33, 34, 35, 38, 95, 94, 36, 
	92, 37, 36, 92, 37, 39, 40, 39, 
	40, 42, 43, 44, 42, 43, 44, 45, 
	46, 47, 52, 55, 59, 48, 49, 60, 
	48, 49, 60, 50, 99, 51, 50, 51, 
	53, 54, 53, 54, 50, 56, 99, 51, 
	55, 57, 99, 58, 46, 47, 52, 99, 
	51, 59, 58, 99, 51, 59, 62, 63, 
	64, 62, 63, 64, 65, 66, 67, 72, 
	75, 79, 68, 69, 80, 68, 69, 80, 
	70, 100, 71, 70, 71, 73, 74, 73, 
	74, 70, 76, 100, 71, 75, 77, 100, 
	78, 66, 67, 72, 100, 71, 79, 78, 
	100, 71, 79, 82, 83, 102, 103, 85, 
	17, 86, 85, 88, 87, 0, 90, 89, 
	93, 93, 94, 95, 96, 97, 98, 34, 
	35, 38, 94, 97, 98, 101, 102
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 13, 14, 
	13, 0, 15, 0, 17, 17, 17, 0, 
	0, 13, 13, 0, 0, 19, 20, 19, 
	19, 0, 21, 0, 0, 22, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 10, 0, 0, 0, 13, 
	32, 13, 0, 33, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 10, 10, 13, 
	14, 13, 0, 15, 0, 13, 13, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 8, 10, 13, 14, 13, 
	0, 15, 0, 17, 44, 17, 0, 0, 
	13, 13, 0, 0, 19, 20, 47, 19, 
	0, 21, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	8, 10, 13, 14, 13, 0, 15, 0, 
	17, 17, 17, 0, 0, 13, 13, 0, 
	0, 19, 20, 19, 19, 0, 21, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 0, 0, 22, 22, 52, 
	0, 0, 53, 3, 0, 57, 21, 0, 
	59, 61, 0, 0, 21, 25, 64, 25, 
	25, 25, 26, 0, 66, 67, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 12, 
	12, 16, 0, 6, 12, 12, 12, 18, 
	0, 0, 0, 23, 23, 23, 12, 28, 
	0, 30, 31, 31, 31, 31, 31, 31, 
	34, 34, 35, 36, 36, 36, 36, 36, 
	36, 1, 38, 39, 40, 41, 42, 43, 
	43, 0, 0, 45, 43, 43, 43, 46, 
	0, 49, 49, 49, 43, 1, 1, 0, 
	6, 9, 11, 12, 12, 16, 0, 6, 
	12, 12, 12, 18, 0, 23, 23, 23, 
	12, 0, 0, 0, 52, 0, 53, 54, 
	55, 56, 58, 0, 59, 0, 60, 62, 
	63, 65, 35, 0, 67, 0, 68, 68
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 84;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 23;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 24;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 25;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 32;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 41;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 81;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 41
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 66 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 55 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 16 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 54 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 11 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 68 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 60 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module ObservedTerm

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 10, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 48, 122, 
	48, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 0, 
	0, 39, 92, 39, 92, 
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 39, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 47, 47, 47, 47, 
	9, 32, 9, 47, 0, 
	0, 10, 10, 10, 122, 
	0, 0, 10, 122, 0, 0, 
	0, 0, 10, 10, 0, 
	0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 39, 
	0, 0, 10, 10, 0, 
	0, 10, 10, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 1, 1, 114, 114, 114, 0, 75, 
	75, 31, 59, 59, 0, 54, 54, 0, 
	114, 114, 31, 59, 59, 0, 54, 54, 
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 114, 114, 114, 0, 75, 114, 32, 
	114, 114, 31, 59, 59, 36, 36, 114, 
	54, 54, 0, 114, 36, 114, 114, 114, 
	0, 1, 1, 24, 39, 0, 1, 113, 
	0, 113, 0, 0, 1, 0, 113, 113, 
	114, 114, 31, 0, 1, 0, 1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1060, 1062, 1177, 1292, 1407, 1408, 
	1484, 1560, 1592, 1652, 1712, 1713, 1768, 1823, 
	1824, 1939, 2054, 2086, 2146, 2206, 2207, 2262, 
	2317, 2318, 2394, 2509, 2542, 2657, 2772, 2804, 
	2864, 2924, 2961, 2998, 3113, 3168, 3223, 3224, 
	3339, 3376, 3491, 3606, 3721, 3722, 3798, 3913, 
	3946, 4061, 4176, 4208, 4268, 4328, 4365, 4402, 
	4517, 4572, 4627, 4628, 4743, 4780, 4895, 5010, 
	5125, 5126, 5128, 5130, 5155, 5195, 5196, 5198, 
	5312, 5313, 5427, 5428, 5429, 5431, 5432, 5546, 
	5660, 5775, 5890, 5922, 5923, 5925, 5926, 5928
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 1, 10, 
	1, 1, 1, 1, 11, 1, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 20, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 20, 1, 1, 
	1, 1, 1, 1, 1, 1, 21, 1, 
	1, 22, 1, 23, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 23, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 24, 1, 
	24, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 24, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 15, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 18, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 28, 
	27, 27, 29, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 29, 7, 7, 7, 7, 7, 7, 
	7, 30, 31, 7, 7, 32, 7, 7, 
	7, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 34, 7, 7, 7, 7, 
	7, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 7, 7, 7, 
	33, 7, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 7, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 23, 1, 1, 1, 
	1, 1, 1, 1, 1, 35, 1, 1, 
	24, 1, 36, 1, 1, 37, 38, 39, 
	39, 39, 39, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 38, 7, 40, 
	7, 7, 7, 7, 41, 7, 42, 7, 
	7, 43, 7, 7, 7, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 7, 
	7, 7, 7, 7, 7, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 7, 7, 7, 44, 7, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	7, 45, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	45, 7, 10, 7, 7, 7, 7, 11, 
	7, 46, 7, 7, 47, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 13, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 29, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 29, 7, 7, 7, 7, 
	7, 7, 7, 7, 31, 7, 7, 32, 
	7, 7, 7, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 7, 7, 7, 
	7, 7, 7, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 7, 
	7, 7, 48, 7, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 7, 17, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 49, 49, 49, 49, 49, 49, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 49, 49, 49, 50, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 49, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 1, 1, 
	1, 1, 1, 1, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	1, 1, 1, 51, 1, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 1, 
	52, 52, 52, 52, 52, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 52, 
	1, 53, 1, 1, 1, 1, 54, 1, 
	56, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 60, 58, 
	58, 56, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 62, 61, 
	59, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 63, 63, 
	65, 66, 66, 66, 66, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 65, 
	7, 67, 7, 7, 7, 7, 68, 7, 
	7, 7, 7, 7, 7, 7, 7, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 7, 7, 7, 7, 7, 7, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 7, 7, 7, 69, 7, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 7, 65, 66, 66, 66, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 65, 7, 67, 7, 7, 7, 
	7, 68, 7, 7, 7, 7, 7, 7, 
	7, 7, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 7, 7, 7, 7, 
	7, 7, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 7, 7, 
	7, 70, 7, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 7, 66, 66, 
	66, 66, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 66, 1, 67, 
	1, 1, 1, 1, 68, 1, 72, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	73, 71, 75, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 76, 74, 74, 72, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 78, 77, 75, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 80, 79, 79, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 1, 1, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 1, 1, 1, 81, 1, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 1, 82, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 82, 1, 1, 1, 1, 1, 1, 
	1, 83, 1, 1, 1, 1, 1, 1, 
	1, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 1, 1, 1, 1, 1, 
	1, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 1, 1, 1, 
	84, 1, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 1, 85, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 85, 1, 1, 1, 
	1, 1, 1, 1, 86, 1, 87, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 87, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 87, 88, 88, 88, 88, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	87, 7, 89, 7, 7, 7, 7, 90, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 7, 7, 7, 7, 7, 7, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 7, 7, 7, 92, 
	7, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 7, 88, 88, 88, 88, 
	88, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 88, 1, 89, 1, 1, 
	1, 1, 90, 1, 94, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 95, 93, 
	97, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 98, 96, 99, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 99, 1, 1, 1, 1, 
	1, 1, 1, 1, 100, 1, 1, 101, 
	1, 102, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	102, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 103, 1, 103, 88, 
	88, 88, 88, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 103, 7, 89, 
	7, 7, 7, 7, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 7, 
	7, 7, 7, 7, 7, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 7, 7, 7, 91, 7, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	7, 94, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 105, 104, 
	97, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 107, 106, 106, 
	108, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 108, 
	7, 7, 7, 7, 7, 7, 7, 109, 
	110, 7, 7, 111, 7, 7, 7, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 113, 7, 7, 7, 7, 7, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 7, 7, 7, 112, 7, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 7, 102, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 102, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 103, 1, 
	115, 116, 116, 116, 116, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 115, 
	7, 117, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 120, 7, 7, 7, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 7, 7, 7, 121, 7, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 7, 122, 88, 88, 88, 88, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 89, 7, 7, 7, 
	7, 90, 7, 123, 7, 7, 124, 7, 
	7, 7, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 7, 7, 7, 7, 
	7, 7, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 7, 7, 
	7, 92, 7, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 7, 108, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 108, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 7, 
	7, 111, 7, 7, 7, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 7, 
	7, 7, 7, 7, 7, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 7, 7, 7, 125, 7, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	7, 96, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 1, 1, 1, 1, 
	1, 1, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 1, 1, 
	1, 126, 1, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 1, 127, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 127, 1, 1, 
	1, 1, 1, 1, 1, 128, 1, 1, 
	1, 1, 1, 1, 1, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 1, 
	1, 1, 1, 1, 1, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 1, 1, 1, 129, 1, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	1, 130, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	131, 1, 132, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 132, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 132, 133, 133, 
	133, 133, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 132, 7, 134, 7, 
	7, 7, 7, 135, 7, 7, 7, 7, 
	7, 7, 7, 7, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 7, 7, 
	7, 7, 7, 7, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	7, 7, 7, 137, 7, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 7, 
	133, 133, 133, 133, 133, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 133, 
	1, 134, 1, 1, 1, 1, 135, 1, 
	139, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 140, 138, 142, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 143, 141, 
	144, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 144, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	145, 1, 1, 146, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 147, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	148, 1, 148, 133, 133, 133, 133, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 148, 7, 134, 7, 7, 7, 7, 
	135, 7, 7, 7, 7, 7, 7, 7, 
	7, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 7, 7, 7, 7, 7, 
	7, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 7, 7, 7, 
	136, 7, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 7, 139, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 150, 149, 142, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 152, 151, 151, 153, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 154, 155, 7, 7, 156, 
	7, 7, 7, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 158, 7, 7, 
	7, 7, 7, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 7, 
	7, 7, 157, 7, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 7, 147, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 159, 
	1, 1, 148, 1, 160, 161, 161, 161, 
	161, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 160, 7, 162, 7, 7, 
	7, 7, 163, 7, 164, 7, 7, 165, 
	7, 7, 7, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 7, 7, 7, 
	7, 7, 7, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 7, 
	7, 7, 166, 7, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 7, 167, 
	133, 133, 133, 133, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 167, 7, 
	134, 7, 7, 7, 7, 135, 7, 168, 
	7, 7, 169, 7, 7, 7, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 7, 7, 7, 137, 7, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 7, 153, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 153, 7, 7, 7, 7, 7, 7, 
	7, 7, 155, 7, 7, 156, 7, 7, 
	7, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 7, 7, 7, 7, 7, 
	7, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 7, 7, 7, 
	170, 7, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 7, 141, 171, 1, 
	172, 1, 174, 1, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 174, 173, 35, 175, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 176, 1, 1, 178, 177, 179, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 49, 49, 
	49, 49, 49, 49, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	49, 49, 49, 180, 49, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 49, 
	1, 182, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 181, 181, 181, 181, 181, 181, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 181, 181, 183, 181, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 181, 181, 1, 184, 1, 1, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 7, 7, 7, 186, 7, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 7, 185, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 188, 7, 7, 7, 7, 7, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 7, 7, 7, 187, 
	7, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 7, 189, 190, 191, 191, 
	191, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 189, 7, 192, 7, 7, 
	7, 7, 193, 7, 7, 7, 7, 7, 
	7, 7, 7, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 7, 7, 7, 
	7, 7, 7, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 7, 
	7, 7, 194, 7, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 7, 195, 
	196, 66, 66, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 195, 7, 
	67, 7, 7, 7, 7, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	7, 7, 7, 7, 7, 7, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 7, 7, 7, 70, 7, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 7, 66, 66, 66, 66, 66, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 67, 1, 1, 1, 1, 
	68, 1, 1, 197, 1, 1, 1, 198, 
	174, 1, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 174, 
	173, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 21, 8, 9, 
	22, 8, 9, 22, 10, 84, 11, 10, 
	11, 13, 14, 13, 14, 10, 16, 84, 
	11, 15, 19, 84, 18, 86, 20, 6, 
	7, 12, 84, 11, 21, 20, 84, 11, 
	21, 0, 87, 89, 25, 26, 29, 27, 
	91, 28, 27, 91, 28, 30, 31, 30, 
	31, 33, 34, 35, 38, 95, 94, 36, 
	92, 37, 36, 92, 37, 39, 40, 39, 
	40, 42, 43, 44, 42, 43, 44, 45, 
	46, 47, 52, 55, 59, 48, 49, 60, 
	48, 49, 60, 50, 99, 51, 50, 51, 
	53, 54, 53, 54, 50, 56, 99, 51, 
	55, 57, 99, 58, 46, 47, 52, 99, 
	51, 59, 58, 99, 51, 59, 62, 63, 
	64, 62, 63, 64, 65, 66, 67, 72, 
	75, 79, 68, 69, 80, 68, 69, 80, 
	70, 100, 71, 70, 71, 73, 74, 73, 
	74, 70, 76, 100, 71, 75, 77, 100, 
	78, 66, 67, 72, 100, 71, 79, 78, 
	100, 71, 79, 82, 83, 102, 103, 85, 
	17, 86, 85, 88, 87, 0, 90, 89, 
	93, 93, 94, 95, 96, 97, 98, 34, 
	35, 38, 94, 97, 98, 101, 102
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 13, 14, 
	13, 0, 15, 0, 17, 17, 17, 0, 
	0, 13, 13, 0, 0, 19, 20, 19, 
	19, 0, 21, 0, 0, 22, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 10, 0, 0, 0, 13, 
	32, 13, 0, 33, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 10, 10, 13, 
	14, 13, 0, 15, 0, 13, 13, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 8, 10, 13, 14, 13, 
	0, 15, 0, 17, 44, 17, 0, 0, 
	13, 13, 0, 0, 19, 20, 47, 19, 
	0, 21, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	8, 10, 13, 14, 13, 0, 15, 0, 
	17, 17, 17, 0, 0, 13, 13, 0, 
	0, 19, 20, 19, 19, 0, 21, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 0, 0, 22, 22, 52, 
	0, 0, 53, 3, 0, 57, 21, 0, 
	59, 61, 0, 0, 21, 25, 64, 25, 
	25, 25, 26, 0, 66, 67, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 12, 
	12, 16, 0, 6, 12, 12, 12, 18, 
	0, 0, 0, 23, 23, 23, 12, 28, 
	0, 30, 31, 31, 31, 31, 31, 31, 
	34, 34, 35, 36, 36, 36, 36, 36, 
	36, 1, 38, 39, 40, 41, 42, 43, 
	43, 0, 0, 45, 43, 43, 43, 46, 
	0, 49, 49, 49, 43, 1, 1, 0, 
	6, 9, 11, 12, 12, 16, 0, 6, 
	12, 12, 12, 18, 0, 23, 23, 23, 
	12, 0, 0, 0, 52, 0, 53, 54, 
	55, 56, 58, 0, 59, 0, 60, 62, 
	63, 65, 35, 0, 67, 0, 68, 68
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 84;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 23;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 24;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 25;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 32;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 41;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 81;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


      # end: ragel
          end

          def each
            @buffers    = {}
            @incomplete = {}
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 41
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 15 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 66 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 55 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 16 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 52 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 54 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 11 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    $stderr.puts stmt.inspect
    yield stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 68 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 60 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    @id_end = p
    chars = data[@id_start...@id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::ObservedTerm.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
