
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	33, 126, 48, 122, 9, 34, 
	34, 92, 34, 92, 0, 
	0, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	0, 0, 33, 126, 9, 
	126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	9, 126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 47, 47, 
	47, 47, 10, 10, 9, 
	47, 0, 0, 10, 10, 
	9, 126, 10, 126, 9, 44, 
	9, 44, 9, 126, 9, 
	34, 9, 34, 10, 92, 
	10, 92, 34, 92, 9, 44, 
	9, 47, 10, 47, 10, 
	10, 10, 10, 9, 126, 
	9, 126, 10, 126, 10, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 126, 
	10, 126, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 34, 0, 0, 33, 
	126, 10, 10, 0, 0, 
	10, 126, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	94, 75, 26, 59, 59, 0, 114, 114, 
	26, 59, 59, 0, 94, 118, 32, 118, 
	114, 26, 59, 59, 36, 36, 118, 94, 
	36, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	118, 32, 118, 114, 26, 59, 59, 36, 
	36, 118, 94, 36, 118, 118, 118, 114, 
	114, 118, 0, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 39, 0, 1, 
	118, 117, 36, 36, 118, 26, 26, 83, 
	83, 59, 36, 39, 38, 1, 1, 118, 
	118, 117, 117, 118, 118, 114, 114, 118, 
	117, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 26, 0, 94, 1, 0, 
	117, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 955, 
	957, 1076, 1171, 1289, 1290, 1409, 1528, 1643, 
	1758, 1877, 1996, 2115, 2234, 2353, 2472, 2591, 
	2710, 2805, 2881, 2908, 2968, 3028, 3029, 3144, 
	3259, 3286, 3346, 3406, 3407, 3502, 3621, 3654, 
	3773, 3888, 3915, 3975, 4035, 4072, 4109, 4228, 
	4323, 4360, 4479, 4598, 4717, 4832, 4947, 5066, 
	5067, 5186, 5305, 5424, 5543, 5662, 5781, 5900, 
	5995, 6114, 6147, 6266, 6381, 6408, 6468, 6528, 
	6565, 6602, 6721, 6816, 6853, 6972, 7091, 7210, 
	7325, 7440, 7559, 7560, 7679, 7798, 7917, 8036, 
	8155, 8274, 8393, 8395, 8397, 8399, 8439, 8440, 
	8442, 8561, 8679, 8716, 8753, 8872, 8899, 8926, 
	9010, 9094, 9154, 9191, 9231, 9270, 9272, 9274, 
	9393, 9512, 9630, 9748, 9867, 9986, 10101, 10216, 
	10335, 10453, 10454, 10568, 10569, 10570, 10572, 10573, 
	10687, 10801, 10916, 11031, 11058, 11059, 11154, 11156, 
	11157, 11275, 11277
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 31, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	35, 27, 27, 27, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 37, 27, 
	27, 27, 27, 27, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 36, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 32, 27, 1, 27, 27, 
	27, 27, 1, 28, 27, 27, 27, 27, 
	27, 27, 38, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 1, 1, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 39, 31, 39, 39, 39, 39, 
	31, 40, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	31, 18, 25, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 25, 10, 11, 10, 10, 10, 10, 
	7, 28, 10, 10, 10, 10, 10, 10, 
	10, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 10, 10, 10, 10, 10, 
	10, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	26, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	7, 41, 42, 42, 42, 42, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	41, 27, 43, 27, 27, 27, 27, 7, 
	28, 44, 27, 27, 45, 27, 27, 27, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 27, 27, 27, 27, 27, 27, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 46, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 7, 
	47, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 47, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	48, 7, 7, 49, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 7, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 32, 32, 32, 32, 32, 
	32, 32, 32, 50, 32, 32, 51, 32, 
	32, 32, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 32, 32, 32, 
	32, 32, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 32, 32, 
	32, 52, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 33, 27, 32, 
	27, 27, 27, 27, 32, 28, 34, 27, 
	27, 35, 27, 27, 27, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 27, 
	27, 27, 27, 27, 27, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 53, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	54, 27, 27, 27, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 56, 27, 
	27, 27, 27, 27, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 55, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 32, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 10, 10, 10, 
	10, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 57, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 27, 32, 27, 27, 27, 
	27, 32, 28, 34, 27, 27, 54, 27, 
	27, 27, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 59, 27, 27, 27, 
	27, 27, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 58, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 32, 41, 42, 42, 42, 42, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 41, 27, 43, 27, 27, 27, 27, 
	7, 28, 44, 27, 27, 60, 27, 27, 
	27, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 27, 27, 27, 27, 27, 
	27, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	61, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	7, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 27, 32, 27, 27, 27, 27, 32, 
	28, 34, 27, 27, 54, 27, 27, 27, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 27, 27, 27, 27, 27, 27, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 62, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 32, 
	41, 42, 42, 42, 42, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 41, 
	27, 43, 27, 27, 27, 27, 7, 28, 
	44, 27, 27, 60, 27, 27, 27, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 27, 27, 27, 27, 27, 27, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 63, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 7, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 33, 27, 
	32, 27, 27, 27, 27, 32, 28, 34, 
	27, 27, 54, 27, 27, 27, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	27, 27, 27, 27, 27, 27, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 64, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 32, 66, 65, 
	66, 66, 66, 66, 65, 65, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 65, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 67, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 69, 69, 69, 69, 69, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	69, 68, 70, 68, 72, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 73, 71, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 76, 74, 74, 77, 78, 78, 
	78, 78, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 77, 7, 79, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 7, 7, 
	7, 7, 7, 7, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	7, 7, 7, 80, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	77, 78, 78, 78, 78, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 77, 
	7, 79, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 7, 7, 7, 7, 7, 7, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 7, 7, 7, 81, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 78, 78, 78, 78, 78, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 78, 14, 79, 14, 83, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	84, 82, 86, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 87, 85, 85, 88, 
	1, 88, 88, 88, 88, 1, 1, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 1, 89, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 89, 90, 1, 
	90, 90, 90, 90, 1, 91, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 1, 92, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 94, 95, 
	95, 95, 95, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 94, 96, 97, 
	96, 96, 96, 96, 7, 7, 96, 96, 
	96, 96, 96, 96, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	96, 96, 96, 96, 96, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 7, 94, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 94, 7, 97, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	95, 95, 95, 95, 95, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 95, 
	14, 97, 14, 101, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 102, 100, 104, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 105, 103, 106, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 106, 14, 14, 14, 14, 14, 
	14, 14, 14, 107, 14, 14, 108, 14, 
	109, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 110, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 96, 97, 96, 
	96, 96, 96, 7, 7, 96, 96, 96, 
	96, 96, 96, 96, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 96, 96, 
	96, 96, 96, 96, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 111, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 7, 112, 1, 112, 112, 
	112, 112, 1, 113, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 1, 109, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 109, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 110, 1, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	112, 32, 112, 112, 112, 112, 32, 113, 
	116, 112, 112, 117, 112, 112, 112, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 112, 112, 112, 112, 112, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 118, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 32, 110, 
	95, 95, 95, 95, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 96, 
	97, 96, 96, 96, 96, 7, 113, 96, 
	96, 96, 96, 96, 96, 96, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	96, 96, 96, 96, 96, 96, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 111, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 7, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 124, 112, 112, 112, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 112, 
	112, 112, 112, 112, 112, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 125, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 7, 126, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 126, 7, 97, 7, 
	7, 7, 7, 7, 7, 127, 7, 7, 
	128, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	129, 32, 32, 130, 32, 32, 32, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 32, 32, 32, 32, 32, 32, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 32, 32, 32, 131, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 117, 112, 
	112, 112, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 112, 112, 112, 112, 
	112, 112, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 132, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 32, 103, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 133, 112, 
	112, 112, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 135, 112, 112, 112, 
	112, 112, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 134, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 32, 110, 95, 95, 95, 95, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 110, 96, 97, 96, 96, 96, 96, 
	7, 113, 96, 96, 96, 96, 96, 96, 
	96, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 96, 96, 96, 96, 96, 
	96, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	136, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	7, 115, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	115, 112, 32, 112, 112, 112, 112, 32, 
	113, 116, 112, 112, 133, 112, 112, 112, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 138, 112, 112, 112, 112, 112, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 137, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 32, 
	120, 121, 121, 121, 121, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 120, 
	112, 122, 112, 112, 112, 112, 7, 113, 
	123, 112, 112, 139, 112, 112, 112, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 112, 112, 112, 112, 112, 112, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 140, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 7, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 115, 112, 
	32, 112, 112, 112, 112, 32, 113, 116, 
	112, 112, 133, 112, 112, 112, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	112, 112, 112, 112, 112, 112, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 141, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 32, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 139, 112, 112, 112, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 112, 
	112, 112, 112, 112, 112, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 142, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 7, 115, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 115, 112, 32, 112, 
	112, 112, 112, 32, 113, 116, 112, 112, 
	133, 112, 112, 112, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 112, 112, 
	112, 112, 112, 112, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 143, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 32, 144, 1, 144, 144, 
	144, 144, 1, 1, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 1, 145, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 145, 146, 1, 146, 146, 146, 
	146, 1, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 1, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 149, 1, 150, 151, 151, 151, 151, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 150, 152, 153, 152, 152, 152, 
	152, 7, 7, 152, 152, 152, 152, 152, 
	152, 152, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 152, 152, 152, 152, 
	152, 152, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 154, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 7, 150, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 151, 151, 151, 
	151, 151, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 151, 14, 153, 14, 
	157, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 158, 156, 160, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 161, 159, 
	162, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 162, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	163, 14, 14, 164, 14, 165, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 165, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	166, 1, 166, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 166, 152, 153, 152, 152, 152, 152, 
	7, 7, 152, 152, 152, 152, 152, 152, 
	152, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 152, 152, 152, 152, 152, 
	152, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	167, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	7, 168, 1, 168, 168, 168, 168, 1, 
	169, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 1, 
	165, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 165, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	170, 1, 1, 166, 1, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 168, 32, 168, 
	168, 168, 168, 32, 169, 172, 168, 168, 
	173, 168, 168, 168, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 175, 168, 
	168, 168, 168, 168, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 174, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 32, 166, 151, 151, 151, 
	151, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 166, 152, 153, 152, 152, 
	152, 152, 7, 169, 152, 152, 152, 152, 
	152, 152, 152, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 152, 152, 152, 
	152, 152, 152, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 167, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 7, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 180, 168, 
	168, 168, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 168, 168, 168, 168, 
	168, 168, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 181, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 7, 182, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 182, 7, 153, 7, 7, 7, 7, 
	7, 7, 183, 7, 7, 184, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 185, 32, 32, 
	186, 32, 32, 32, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 32, 32, 
	32, 32, 32, 32, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	32, 32, 32, 187, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 173, 168, 168, 168, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 168, 168, 168, 168, 168, 168, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 188, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 32, 159, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 189, 168, 168, 168, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 191, 168, 168, 168, 168, 168, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 190, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 32, 166, 
	151, 151, 151, 151, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 166, 152, 
	153, 152, 152, 152, 152, 7, 169, 152, 
	152, 152, 152, 152, 152, 152, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	152, 152, 152, 152, 152, 152, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 192, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 7, 171, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 171, 168, 32, 
	168, 168, 168, 168, 32, 169, 172, 168, 
	168, 189, 168, 168, 168, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 194, 
	168, 168, 168, 168, 168, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 193, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 32, 176, 177, 177, 
	177, 177, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 176, 168, 178, 168, 
	168, 168, 168, 7, 169, 179, 168, 168, 
	195, 168, 168, 168, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 168, 168, 
	168, 168, 168, 168, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 196, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 7, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 171, 168, 32, 168, 168, 
	168, 168, 32, 169, 172, 168, 168, 189, 
	168, 168, 168, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 168, 168, 168, 
	168, 168, 168, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 197, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 32, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 195, 168, 
	168, 168, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 168, 168, 168, 168, 
	168, 168, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 198, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 7, 171, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 171, 168, 32, 168, 168, 168, 168, 
	32, 169, 172, 168, 168, 189, 168, 168, 
	168, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 168, 168, 168, 168, 168, 
	168, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	199, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	32, 200, 1, 201, 1, 1, 202, 29, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 204, 1, 1, 
	206, 205, 29, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 29, 27, 1, 27, 27, 27, 27, 
	1, 28, 27, 27, 27, 27, 27, 27, 
	207, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	1, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 205, 210, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 210, 205, 
	205, 205, 205, 205, 205, 205, 205, 211, 
	205, 205, 212, 205, 210, 206, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 210, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 212, 
	205, 212, 213, 214, 214, 214, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	212, 215, 216, 215, 215, 215, 215, 205, 
	205, 215, 215, 215, 215, 215, 215, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 215, 215, 215, 215, 215, 215, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 217, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 205, 
	9, 9, 9, 9, 9, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 9, 
	14, 11, 14, 214, 213, 214, 214, 214, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 214, 205, 216, 205, 219, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	221, 218, 223, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 224, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 225, 222, 19, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	20, 18, 226, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 226, 205, 205, 205, 205, 205, 205, 
	205, 205, 227, 205, 205, 228, 205, 211, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 211, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 229, 205, 206, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 230, 205, 206, 31, 
	223, 222, 231, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 231, 208, 205, 208, 208, 208, 208, 
	205, 209, 232, 208, 208, 233, 208, 208, 
	208, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 235, 208, 208, 208, 208, 
	208, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	234, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	205, 211, 206, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	211, 208, 205, 208, 208, 208, 208, 205, 
	209, 208, 208, 208, 208, 208, 208, 236, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 205, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 208, 
	205, 208, 208, 208, 208, 205, 209, 208, 
	208, 208, 208, 208, 208, 237, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 205, 206, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 39, 31, 39, 
	39, 39, 39, 31, 40, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 31, 212, 213, 214, 214, 
	214, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 212, 215, 216, 215, 215, 
	215, 215, 205, 209, 215, 215, 215, 215, 
	215, 215, 215, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 215, 215, 215, 
	215, 215, 215, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 217, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 205, 238, 239, 240, 240, 240, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 238, 208, 241, 208, 208, 208, 
	208, 205, 209, 242, 208, 208, 243, 208, 
	208, 208, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 208, 208, 208, 208, 
	208, 208, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 244, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 205, 245, 213, 214, 214, 214, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 245, 205, 216, 205, 205, 205, 205, 
	205, 205, 246, 205, 205, 247, 205, 205, 
	205, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 205, 205, 205, 205, 205, 
	205, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 205, 205, 205, 
	248, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 231, 206, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 231, 205, 205, 205, 
	205, 205, 205, 205, 205, 249, 205, 205, 
	250, 205, 205, 205, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 205, 205, 
	205, 205, 205, 205, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	205, 205, 205, 251, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	231, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 231, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	232, 208, 208, 233, 208, 208, 208, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 208, 208, 208, 208, 208, 208, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 252, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 205, 253, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 254, 65, 
	254, 254, 254, 254, 65, 65, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 65, 1, 256, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 255, 255, 
	255, 255, 255, 255, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 255, 255, 257, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 68, 258, 14, 1, 259, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 32, 32, 32, 
	32, 32, 32, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 32, 
	32, 32, 260, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 259, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 262, 
	32, 32, 32, 32, 32, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 32, 32, 32, 261, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 263, 264, 265, 265, 265, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	263, 7, 266, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 7, 7, 7, 7, 7, 7, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 7, 7, 7, 267, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 268, 269, 78, 78, 
	78, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 268, 7, 79, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 7, 7, 7, 
	7, 7, 7, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 7, 
	7, 7, 81, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 78, 
	78, 78, 78, 78, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 78, 14, 
	79, 14, 1, 112, 1, 112, 112, 112, 
	112, 1, 113, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 1, 270, 1, 1, 270, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 168, 1, 168, 168, 
	168, 168, 1, 169, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 1, 272, 271, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 25, 23, 0, 8, 
	9, 19, 8, 9, 19, 10, 101, 11, 
	10, 11, 16, 12, 13, 101, 15, 103, 
	0, 10, 104, 20, 16, 21, 18, 105, 
	106, 22, 6, 7, 104, 20, 24, 22, 
	101, 11, 101, 11, 23, 24, 26, 25, 
	30, 27, 27, 28, 26, 29, 29, 31, 
	31, 0, 128, 130, 0, 34, 35, 36, 
	132, 37, 36, 132, 37, 39, 40, 41, 
	136, 135, 42, 133, 43, 42, 133, 43, 
	45, 46, 45, 47, 46, 47, 48, 49, 
	55, 50, 64, 61, 51, 52, 63, 51, 
	52, 63, 53, 140, 54, 53, 54, 57, 
	55, 56, 140, 53, 141, 58, 57, 59, 
	60, 49, 50, 141, 58, 62, 60, 140, 
	54, 140, 54, 61, 62, 65, 64, 69, 
	66, 66, 67, 65, 68, 68, 70, 70, 
	72, 73, 72, 74, 73, 74, 75, 76, 
	82, 77, 91, 88, 78, 79, 90, 78, 
	79, 90, 80, 142, 81, 80, 81, 84, 
	82, 83, 142, 80, 144, 85, 84, 86, 
	87, 76, 77, 144, 85, 89, 87, 142, 
	81, 142, 81, 88, 89, 92, 91, 96, 
	93, 93, 94, 92, 95, 95, 97, 97, 
	99, 100, 145, 102, 14, 103, 102, 17, 
	105, 106, 107, 115, 108, 109, 110, 105, 
	111, 119, 112, 113, 114, 118, 112, 113, 
	114, 118, 107, 115, 108, 116, 117, 107, 
	120, 123, 119, 124, 121, 122, 125, 109, 
	110, 111, 120, 123, 127, 125, 115, 108, 
	126, 115, 108, 126, 127, 129, 128, 0, 
	131, 130, 134, 134, 135, 136, 137, 138, 
	139, 40, 41, 135, 138, 139, 143, 145, 
	146
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 0, 21, 
	23, 24, 24, 24, 0, 25, 0, 21, 
	26, 28, 29, 29, 28, 28, 30, 32, 
	32, 32, 24, 24, 0, 0, 24, 0, 
	25, 9, 0, 25, 28, 30, 0, 30, 
	0, 37, 8, 11, 39, 0, 0, 15, 
	41, 15, 0, 42, 0, 0, 0, 0, 
	11, 11, 15, 16, 15, 0, 17, 0, 
	46, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 51, 19, 0, 0, 9, 
	0, 20, 52, 24, 54, 24, 0, 25, 
	28, 29, 29, 56, 28, 30, 32, 58, 
	32, 54, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	2, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 19, 19, 0, 0, 9, 
	0, 20, 0, 24, 24, 24, 0, 25, 
	28, 29, 29, 28, 28, 30, 32, 32, 
	32, 24, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	0, 0, 21, 63, 0, 0, 64, 0, 
	0, 20, 0, 0, 0, 64, 0, 8, 
	0, 9, 15, 71, 16, 15, 0, 64, 
	17, 0, 19, 19, 19, 0, 0, 24, 
	24, 24, 0, 25, 0, 0, 28, 75, 
	29, 29, 28, 28, 30, 32, 32, 32, 
	11, 24, 24, 0, 0, 3, 0, 80, 
	25, 0, 82, 84, 0, 0, 25, 29, 
	87, 29, 29, 30, 0, 89, 91, 0, 
	93
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	22, 1, 1, 14, 6, 27, 31, 33, 
	22, 22, 34, 35, 36, 35, 27, 22, 
	37, 0, 38, 40, 40, 40, 43, 43, 
	44, 45, 45, 45, 1, 1, 0, 47, 
	48, 49, 50, 50, 13, 0, 47, 1, 
	0, 53, 47, 55, 57, 59, 53, 50, 
	53, 60, 61, 62, 61, 55, 53, 1, 
	1, 0, 6, 10, 12, 14, 14, 18, 
	0, 6, 1, 0, 22, 6, 27, 31, 
	33, 22, 14, 22, 34, 35, 36, 35, 
	27, 22, 0, 0, 0, 63, 0, 64, 
	65, 66, 64, 64, 67, 68, 69, 70, 
	70, 72, 73, 64, 64, 64, 70, 74, 
	66, 66, 66, 67, 74, 76, 76, 74, 
	77, 78, 79, 81, 0, 82, 0, 83, 
	85, 86, 88, 90, 0, 1, 91, 0, 
	92, 93, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 101;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 32;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 33;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 34;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 44;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 98;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 80 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 39 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 52 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 21 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 89 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 46 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 42 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 87 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 28 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 84 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 41 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 71 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 51 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 75 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 54 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 78 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 81 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 90 then
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 77 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 79 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 38 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 68 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 61 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 92 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 88 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 40 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 72 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 62 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 48 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 31 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 86 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 60 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 85 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 47 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 76 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 69 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 34 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 74 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 70 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 67 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	33, 126, 48, 122, 9, 34, 
	34, 92, 34, 92, 0, 
	0, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	0, 0, 33, 126, 9, 
	126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	9, 126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 47, 47, 
	47, 47, 10, 10, 9, 
	47, 0, 0, 10, 10, 
	9, 126, 10, 126, 9, 44, 
	9, 44, 9, 126, 9, 
	34, 9, 34, 10, 92, 
	10, 92, 34, 92, 9, 44, 
	9, 47, 10, 47, 10, 
	10, 10, 10, 9, 126, 
	9, 126, 10, 126, 10, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 126, 
	10, 126, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 34, 0, 0, 33, 
	126, 10, 10, 0, 0, 
	10, 126, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	94, 75, 26, 59, 59, 0, 114, 114, 
	26, 59, 59, 0, 94, 118, 32, 118, 
	114, 26, 59, 59, 36, 36, 118, 94, 
	36, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	118, 32, 118, 114, 26, 59, 59, 36, 
	36, 118, 94, 36, 118, 118, 118, 114, 
	114, 118, 0, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 39, 0, 1, 
	118, 117, 36, 36, 118, 26, 26, 83, 
	83, 59, 36, 39, 38, 1, 1, 118, 
	118, 117, 117, 118, 118, 114, 114, 118, 
	117, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 26, 0, 94, 1, 0, 
	117, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 955, 
	957, 1076, 1171, 1289, 1290, 1409, 1528, 1643, 
	1758, 1877, 1996, 2115, 2234, 2353, 2472, 2591, 
	2710, 2805, 2881, 2908, 2968, 3028, 3029, 3144, 
	3259, 3286, 3346, 3406, 3407, 3502, 3621, 3654, 
	3773, 3888, 3915, 3975, 4035, 4072, 4109, 4228, 
	4323, 4360, 4479, 4598, 4717, 4832, 4947, 5066, 
	5067, 5186, 5305, 5424, 5543, 5662, 5781, 5900, 
	5995, 6114, 6147, 6266, 6381, 6408, 6468, 6528, 
	6565, 6602, 6721, 6816, 6853, 6972, 7091, 7210, 
	7325, 7440, 7559, 7560, 7679, 7798, 7917, 8036, 
	8155, 8274, 8393, 8395, 8397, 8399, 8439, 8440, 
	8442, 8561, 8679, 8716, 8753, 8872, 8899, 8926, 
	9010, 9094, 9154, 9191, 9231, 9270, 9272, 9274, 
	9393, 9512, 9630, 9748, 9867, 9986, 10101, 10216, 
	10335, 10453, 10454, 10568, 10569, 10570, 10572, 10573, 
	10687, 10801, 10916, 11031, 11058, 11059, 11154, 11156, 
	11157, 11275, 11277
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 31, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	35, 27, 27, 27, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 37, 27, 
	27, 27, 27, 27, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 36, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 32, 27, 1, 27, 27, 
	27, 27, 1, 28, 27, 27, 27, 27, 
	27, 27, 38, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 1, 1, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 39, 31, 39, 39, 39, 39, 
	31, 40, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	31, 18, 25, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 25, 10, 11, 10, 10, 10, 10, 
	7, 28, 10, 10, 10, 10, 10, 10, 
	10, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 10, 10, 10, 10, 10, 
	10, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	26, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	7, 41, 42, 42, 42, 42, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	41, 27, 43, 27, 27, 27, 27, 7, 
	28, 44, 27, 27, 45, 27, 27, 27, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 27, 27, 27, 27, 27, 27, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 46, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 7, 
	47, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 47, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	48, 7, 7, 49, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 7, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 32, 32, 32, 32, 32, 
	32, 32, 32, 50, 32, 32, 51, 32, 
	32, 32, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 32, 32, 32, 
	32, 32, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 32, 32, 
	32, 52, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 33, 27, 32, 
	27, 27, 27, 27, 32, 28, 34, 27, 
	27, 35, 27, 27, 27, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 27, 
	27, 27, 27, 27, 27, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 53, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	54, 27, 27, 27, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 56, 27, 
	27, 27, 27, 27, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 55, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 32, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 10, 10, 10, 
	10, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 57, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 27, 32, 27, 27, 27, 
	27, 32, 28, 34, 27, 27, 54, 27, 
	27, 27, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 59, 27, 27, 27, 
	27, 27, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 58, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 32, 41, 42, 42, 42, 42, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 41, 27, 43, 27, 27, 27, 27, 
	7, 28, 44, 27, 27, 60, 27, 27, 
	27, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 27, 27, 27, 27, 27, 
	27, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	61, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	7, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 27, 32, 27, 27, 27, 27, 32, 
	28, 34, 27, 27, 54, 27, 27, 27, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 27, 27, 27, 27, 27, 27, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 62, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 32, 
	41, 42, 42, 42, 42, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 41, 
	27, 43, 27, 27, 27, 27, 7, 28, 
	44, 27, 27, 60, 27, 27, 27, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 27, 27, 27, 27, 27, 27, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 63, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 7, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 33, 27, 
	32, 27, 27, 27, 27, 32, 28, 34, 
	27, 27, 54, 27, 27, 27, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	27, 27, 27, 27, 27, 27, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 64, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 32, 66, 65, 
	66, 66, 66, 66, 65, 65, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 65, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 67, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 69, 69, 69, 69, 69, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	69, 68, 70, 68, 72, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 73, 71, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 76, 74, 74, 77, 78, 78, 
	78, 78, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 77, 7, 79, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 7, 7, 
	7, 7, 7, 7, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	7, 7, 7, 80, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	77, 78, 78, 78, 78, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 77, 
	7, 79, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 7, 7, 7, 7, 7, 7, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 7, 7, 7, 81, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 78, 78, 78, 78, 78, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 78, 14, 79, 14, 83, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	84, 82, 86, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 87, 85, 85, 88, 
	1, 88, 88, 88, 88, 1, 1, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 1, 89, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 89, 90, 1, 
	90, 90, 90, 90, 1, 91, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 1, 92, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 94, 95, 
	95, 95, 95, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 94, 96, 97, 
	96, 96, 96, 96, 7, 7, 96, 96, 
	96, 96, 96, 96, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	96, 96, 96, 96, 96, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 7, 94, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 94, 7, 97, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	95, 95, 95, 95, 95, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 95, 
	14, 97, 14, 101, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 102, 100, 104, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 105, 103, 106, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 106, 14, 14, 14, 14, 14, 
	14, 14, 14, 107, 14, 14, 108, 14, 
	109, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 110, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 96, 97, 96, 
	96, 96, 96, 7, 7, 96, 96, 96, 
	96, 96, 96, 96, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 96, 96, 
	96, 96, 96, 96, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 111, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 7, 112, 1, 112, 112, 
	112, 112, 1, 113, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 1, 109, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 109, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 110, 1, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	112, 32, 112, 112, 112, 112, 32, 113, 
	116, 112, 112, 117, 112, 112, 112, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 112, 112, 112, 112, 112, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 118, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 32, 110, 
	95, 95, 95, 95, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 96, 
	97, 96, 96, 96, 96, 7, 113, 96, 
	96, 96, 96, 96, 96, 96, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	96, 96, 96, 96, 96, 96, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 111, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 7, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 124, 112, 112, 112, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 112, 
	112, 112, 112, 112, 112, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 125, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 7, 126, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 126, 7, 97, 7, 
	7, 7, 7, 7, 7, 127, 7, 7, 
	128, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	129, 32, 32, 130, 32, 32, 32, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 32, 32, 32, 32, 32, 32, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 32, 32, 32, 131, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 117, 112, 
	112, 112, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 112, 112, 112, 112, 
	112, 112, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 132, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 32, 103, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 133, 112, 
	112, 112, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 135, 112, 112, 112, 
	112, 112, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 134, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 32, 110, 95, 95, 95, 95, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 110, 96, 97, 96, 96, 96, 96, 
	7, 113, 96, 96, 96, 96, 96, 96, 
	96, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 96, 96, 96, 96, 96, 
	96, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	136, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	7, 115, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	115, 112, 32, 112, 112, 112, 112, 32, 
	113, 116, 112, 112, 133, 112, 112, 112, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 138, 112, 112, 112, 112, 112, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 137, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 32, 
	120, 121, 121, 121, 121, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 120, 
	112, 122, 112, 112, 112, 112, 7, 113, 
	123, 112, 112, 139, 112, 112, 112, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 112, 112, 112, 112, 112, 112, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 140, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 7, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 115, 112, 
	32, 112, 112, 112, 112, 32, 113, 116, 
	112, 112, 133, 112, 112, 112, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	112, 112, 112, 112, 112, 112, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 141, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 32, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 139, 112, 112, 112, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 112, 
	112, 112, 112, 112, 112, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 142, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 7, 115, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 115, 112, 32, 112, 
	112, 112, 112, 32, 113, 116, 112, 112, 
	133, 112, 112, 112, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 112, 112, 
	112, 112, 112, 112, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 143, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 32, 144, 1, 144, 144, 
	144, 144, 1, 1, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 1, 145, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 145, 146, 1, 146, 146, 146, 
	146, 1, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 1, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 149, 1, 150, 151, 151, 151, 151, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 150, 152, 153, 152, 152, 152, 
	152, 7, 7, 152, 152, 152, 152, 152, 
	152, 152, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 152, 152, 152, 152, 
	152, 152, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 154, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 7, 150, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 151, 151, 151, 
	151, 151, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 151, 14, 153, 14, 
	157, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 158, 156, 160, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 161, 159, 
	162, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 162, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	163, 14, 14, 164, 14, 165, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 165, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	166, 1, 166, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 166, 152, 153, 152, 152, 152, 152, 
	7, 7, 152, 152, 152, 152, 152, 152, 
	152, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 152, 152, 152, 152, 152, 
	152, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	167, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	7, 168, 1, 168, 168, 168, 168, 1, 
	169, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 1, 
	165, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 165, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	170, 1, 1, 166, 1, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 168, 32, 168, 
	168, 168, 168, 32, 169, 172, 168, 168, 
	173, 168, 168, 168, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 175, 168, 
	168, 168, 168, 168, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 174, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 32, 166, 151, 151, 151, 
	151, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 166, 152, 153, 152, 152, 
	152, 152, 7, 169, 152, 152, 152, 152, 
	152, 152, 152, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 152, 152, 152, 
	152, 152, 152, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 167, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 7, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 180, 168, 
	168, 168, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 168, 168, 168, 168, 
	168, 168, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 181, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 7, 182, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 182, 7, 153, 7, 7, 7, 7, 
	7, 7, 183, 7, 7, 184, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 185, 32, 32, 
	186, 32, 32, 32, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 32, 32, 
	32, 32, 32, 32, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	32, 32, 32, 187, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 173, 168, 168, 168, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 168, 168, 168, 168, 168, 168, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 188, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 32, 159, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 189, 168, 168, 168, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 191, 168, 168, 168, 168, 168, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 190, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 32, 166, 
	151, 151, 151, 151, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 166, 152, 
	153, 152, 152, 152, 152, 7, 169, 152, 
	152, 152, 152, 152, 152, 152, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	152, 152, 152, 152, 152, 152, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 192, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 7, 171, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 171, 168, 32, 
	168, 168, 168, 168, 32, 169, 172, 168, 
	168, 189, 168, 168, 168, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 194, 
	168, 168, 168, 168, 168, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 193, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 32, 176, 177, 177, 
	177, 177, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 176, 168, 178, 168, 
	168, 168, 168, 7, 169, 179, 168, 168, 
	195, 168, 168, 168, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 168, 168, 
	168, 168, 168, 168, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 196, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 7, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 171, 168, 32, 168, 168, 
	168, 168, 32, 169, 172, 168, 168, 189, 
	168, 168, 168, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 168, 168, 168, 
	168, 168, 168, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 197, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 32, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 195, 168, 
	168, 168, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 168, 168, 168, 168, 
	168, 168, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 198, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 7, 171, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 171, 168, 32, 168, 168, 168, 168, 
	32, 169, 172, 168, 168, 189, 168, 168, 
	168, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 168, 168, 168, 168, 168, 
	168, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	199, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	32, 200, 1, 201, 1, 1, 202, 29, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 204, 1, 1, 
	206, 205, 29, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 29, 27, 1, 27, 27, 27, 27, 
	1, 28, 27, 27, 27, 27, 27, 27, 
	207, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	1, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 205, 210, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 210, 205, 
	205, 205, 205, 205, 205, 205, 205, 211, 
	205, 205, 212, 205, 210, 206, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 210, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 212, 
	205, 212, 213, 214, 214, 214, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	212, 215, 216, 215, 215, 215, 215, 205, 
	205, 215, 215, 215, 215, 215, 215, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 215, 215, 215, 215, 215, 215, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 217, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 205, 
	9, 9, 9, 9, 9, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 9, 
	14, 11, 14, 214, 213, 214, 214, 214, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 214, 205, 216, 205, 219, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	221, 218, 223, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 224, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 225, 222, 19, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	20, 18, 226, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 226, 205, 205, 205, 205, 205, 205, 
	205, 205, 227, 205, 205, 228, 205, 211, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 211, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 229, 205, 206, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 230, 205, 206, 31, 
	223, 222, 231, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 231, 208, 205, 208, 208, 208, 208, 
	205, 209, 232, 208, 208, 233, 208, 208, 
	208, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 235, 208, 208, 208, 208, 
	208, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	234, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	205, 211, 206, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	211, 208, 205, 208, 208, 208, 208, 205, 
	209, 208, 208, 208, 208, 208, 208, 236, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 205, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 208, 
	205, 208, 208, 208, 208, 205, 209, 208, 
	208, 208, 208, 208, 208, 237, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 205, 206, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 39, 31, 39, 
	39, 39, 39, 31, 40, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 31, 212, 213, 214, 214, 
	214, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 212, 215, 216, 215, 215, 
	215, 215, 205, 209, 215, 215, 215, 215, 
	215, 215, 215, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 215, 215, 215, 
	215, 215, 215, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 217, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 205, 238, 239, 240, 240, 240, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 238, 208, 241, 208, 208, 208, 
	208, 205, 209, 242, 208, 208, 243, 208, 
	208, 208, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 208, 208, 208, 208, 
	208, 208, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 244, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 205, 245, 213, 214, 214, 214, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 245, 205, 216, 205, 205, 205, 205, 
	205, 205, 246, 205, 205, 247, 205, 205, 
	205, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 205, 205, 205, 205, 205, 
	205, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 205, 205, 205, 
	248, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 231, 206, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 231, 205, 205, 205, 
	205, 205, 205, 205, 205, 249, 205, 205, 
	250, 205, 205, 205, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 205, 205, 
	205, 205, 205, 205, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	205, 205, 205, 251, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	231, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 231, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	232, 208, 208, 233, 208, 208, 208, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 208, 208, 208, 208, 208, 208, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 252, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 205, 253, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 254, 65, 
	254, 254, 254, 254, 65, 65, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 65, 1, 256, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 255, 255, 
	255, 255, 255, 255, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 255, 255, 257, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 68, 258, 14, 1, 259, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 32, 32, 32, 
	32, 32, 32, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 32, 
	32, 32, 260, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 259, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 262, 
	32, 32, 32, 32, 32, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 32, 32, 32, 261, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 263, 264, 265, 265, 265, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	263, 7, 266, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 7, 7, 7, 7, 7, 7, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 7, 7, 7, 267, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 268, 269, 78, 78, 
	78, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 268, 7, 79, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 7, 7, 7, 
	7, 7, 7, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 7, 
	7, 7, 81, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 78, 
	78, 78, 78, 78, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 78, 14, 
	79, 14, 1, 112, 1, 112, 112, 112, 
	112, 1, 113, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 1, 270, 1, 1, 270, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 168, 1, 168, 168, 
	168, 168, 1, 169, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 1, 272, 271, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 25, 23, 0, 8, 
	9, 19, 8, 9, 19, 10, 101, 11, 
	10, 11, 16, 12, 13, 101, 15, 103, 
	0, 10, 104, 20, 16, 21, 18, 105, 
	106, 22, 6, 7, 104, 20, 24, 22, 
	101, 11, 101, 11, 23, 24, 26, 25, 
	30, 27, 27, 28, 26, 29, 29, 31, 
	31, 0, 128, 130, 0, 34, 35, 36, 
	132, 37, 36, 132, 37, 39, 40, 41, 
	136, 135, 42, 133, 43, 42, 133, 43, 
	45, 46, 45, 47, 46, 47, 48, 49, 
	55, 50, 64, 61, 51, 52, 63, 51, 
	52, 63, 53, 140, 54, 53, 54, 57, 
	55, 56, 140, 53, 141, 58, 57, 59, 
	60, 49, 50, 141, 58, 62, 60, 140, 
	54, 140, 54, 61, 62, 65, 64, 69, 
	66, 66, 67, 65, 68, 68, 70, 70, 
	72, 73, 72, 74, 73, 74, 75, 76, 
	82, 77, 91, 88, 78, 79, 90, 78, 
	79, 90, 80, 142, 81, 80, 81, 84, 
	82, 83, 142, 80, 144, 85, 84, 86, 
	87, 76, 77, 144, 85, 89, 87, 142, 
	81, 142, 81, 88, 89, 92, 91, 96, 
	93, 93, 94, 92, 95, 95, 97, 97, 
	99, 100, 145, 102, 14, 103, 102, 17, 
	105, 106, 107, 115, 108, 109, 110, 105, 
	111, 119, 112, 113, 114, 118, 112, 113, 
	114, 118, 107, 115, 108, 116, 117, 107, 
	120, 123, 119, 124, 121, 122, 125, 109, 
	110, 111, 120, 123, 127, 125, 115, 108, 
	126, 115, 108, 126, 127, 129, 128, 0, 
	131, 130, 134, 134, 135, 136, 137, 138, 
	139, 40, 41, 135, 138, 139, 143, 145, 
	146
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 0, 21, 
	23, 24, 24, 24, 0, 25, 0, 21, 
	26, 28, 29, 29, 28, 28, 30, 32, 
	32, 32, 24, 24, 0, 0, 24, 0, 
	25, 9, 0, 25, 28, 30, 0, 30, 
	0, 37, 8, 11, 39, 0, 0, 15, 
	41, 15, 0, 42, 0, 0, 0, 0, 
	11, 11, 15, 16, 15, 0, 17, 0, 
	46, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 51, 19, 0, 0, 9, 
	0, 20, 52, 24, 54, 24, 0, 25, 
	28, 29, 29, 56, 28, 30, 32, 58, 
	32, 54, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	2, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 19, 19, 0, 0, 9, 
	0, 20, 0, 24, 24, 24, 0, 25, 
	28, 29, 29, 28, 28, 30, 32, 32, 
	32, 24, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	0, 0, 21, 63, 0, 0, 64, 0, 
	0, 20, 0, 0, 0, 64, 0, 8, 
	0, 9, 15, 71, 16, 15, 0, 64, 
	17, 0, 19, 19, 19, 0, 0, 24, 
	24, 24, 0, 25, 0, 0, 28, 75, 
	29, 29, 28, 28, 30, 32, 32, 32, 
	11, 24, 24, 0, 0, 3, 0, 80, 
	25, 0, 82, 84, 0, 0, 25, 29, 
	87, 29, 29, 30, 0, 89, 91, 0, 
	93
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	22, 1, 1, 14, 6, 27, 31, 33, 
	22, 22, 34, 35, 36, 35, 27, 22, 
	37, 0, 38, 40, 40, 40, 43, 43, 
	44, 45, 45, 45, 1, 1, 0, 47, 
	48, 49, 50, 50, 13, 0, 47, 1, 
	0, 53, 47, 55, 57, 59, 53, 50, 
	53, 60, 61, 62, 61, 55, 53, 1, 
	1, 0, 6, 10, 12, 14, 14, 18, 
	0, 6, 1, 0, 22, 6, 27, 31, 
	33, 22, 14, 22, 34, 35, 36, 35, 
	27, 22, 0, 0, 0, 63, 0, 64, 
	65, 66, 64, 64, 67, 68, 69, 70, 
	70, 72, 73, 64, 64, 64, 70, 74, 
	66, 66, 66, 67, 74, 76, 76, 74, 
	77, 78, 79, 81, 0, 82, 0, 83, 
	85, 86, 88, 90, 0, 1, 91, 0, 
	92, 93, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 101;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 32;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 33;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 34;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 44;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 98;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 80 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 39 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 52 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 21 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 89 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 46 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 42 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 87 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 28 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 84 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 41 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 71 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 51 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 75 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 54 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 78 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 81 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 90 then
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 77 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 79 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 38 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 68 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 61 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 92 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 88 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 40 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 72 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 62 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 48 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 31 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 86 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 60 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 85 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 47 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 76 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 69 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 34 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 74 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 70 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 67 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	33, 126, 48, 122, 9, 34, 
	34, 92, 34, 92, 0, 
	0, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	0, 0, 33, 126, 9, 
	126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	9, 126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 47, 47, 
	47, 47, 10, 10, 9, 
	47, 0, 0, 10, 10, 
	9, 126, 10, 126, 9, 44, 
	9, 44, 9, 126, 9, 
	34, 9, 34, 10, 92, 
	10, 92, 34, 92, 9, 44, 
	9, 47, 10, 47, 10, 
	10, 10, 10, 9, 126, 
	9, 126, 10, 126, 10, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 126, 
	10, 126, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 34, 0, 0, 33, 
	126, 10, 10, 0, 0, 
	10, 126, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	94, 75, 26, 59, 59, 0, 114, 114, 
	26, 59, 59, 0, 94, 118, 32, 118, 
	114, 26, 59, 59, 36, 36, 118, 94, 
	36, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	118, 32, 118, 114, 26, 59, 59, 36, 
	36, 118, 94, 36, 118, 118, 118, 114, 
	114, 118, 0, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 39, 0, 1, 
	118, 117, 36, 36, 118, 26, 26, 83, 
	83, 59, 36, 39, 38, 1, 1, 118, 
	118, 117, 117, 118, 118, 114, 114, 118, 
	117, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 26, 0, 94, 1, 0, 
	117, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 955, 
	957, 1076, 1171, 1289, 1290, 1409, 1528, 1643, 
	1758, 1877, 1996, 2115, 2234, 2353, 2472, 2591, 
	2710, 2805, 2881, 2908, 2968, 3028, 3029, 3144, 
	3259, 3286, 3346, 3406, 3407, 3502, 3621, 3654, 
	3773, 3888, 3915, 3975, 4035, 4072, 4109, 4228, 
	4323, 4360, 4479, 4598, 4717, 4832, 4947, 5066, 
	5067, 5186, 5305, 5424, 5543, 5662, 5781, 5900, 
	5995, 6114, 6147, 6266, 6381, 6408, 6468, 6528, 
	6565, 6602, 6721, 6816, 6853, 6972, 7091, 7210, 
	7325, 7440, 7559, 7560, 7679, 7798, 7917, 8036, 
	8155, 8274, 8393, 8395, 8397, 8399, 8439, 8440, 
	8442, 8561, 8679, 8716, 8753, 8872, 8899, 8926, 
	9010, 9094, 9154, 9191, 9231, 9270, 9272, 9274, 
	9393, 9512, 9630, 9748, 9867, 9986, 10101, 10216, 
	10335, 10453, 10454, 10568, 10569, 10570, 10572, 10573, 
	10687, 10801, 10916, 11031, 11058, 11059, 11154, 11156, 
	11157, 11275, 11277
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 31, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	35, 27, 27, 27, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 37, 27, 
	27, 27, 27, 27, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 36, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 32, 27, 1, 27, 27, 
	27, 27, 1, 28, 27, 27, 27, 27, 
	27, 27, 38, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 1, 1, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 39, 31, 39, 39, 39, 39, 
	31, 40, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	31, 18, 25, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 25, 10, 11, 10, 10, 10, 10, 
	7, 28, 10, 10, 10, 10, 10, 10, 
	10, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 10, 10, 10, 10, 10, 
	10, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	26, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	7, 41, 42, 42, 42, 42, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	41, 27, 43, 27, 27, 27, 27, 7, 
	28, 44, 27, 27, 45, 27, 27, 27, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 27, 27, 27, 27, 27, 27, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 46, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 7, 
	47, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 47, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	48, 7, 7, 49, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 7, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 32, 32, 32, 32, 32, 
	32, 32, 32, 50, 32, 32, 51, 32, 
	32, 32, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 32, 32, 32, 
	32, 32, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 32, 32, 
	32, 52, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 33, 27, 32, 
	27, 27, 27, 27, 32, 28, 34, 27, 
	27, 35, 27, 27, 27, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 27, 
	27, 27, 27, 27, 27, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 53, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	54, 27, 27, 27, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 56, 27, 
	27, 27, 27, 27, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 55, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 32, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 10, 10, 10, 
	10, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 57, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 27, 32, 27, 27, 27, 
	27, 32, 28, 34, 27, 27, 54, 27, 
	27, 27, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 59, 27, 27, 27, 
	27, 27, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 58, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 32, 41, 42, 42, 42, 42, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 41, 27, 43, 27, 27, 27, 27, 
	7, 28, 44, 27, 27, 60, 27, 27, 
	27, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 27, 27, 27, 27, 27, 
	27, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	61, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	7, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 27, 32, 27, 27, 27, 27, 32, 
	28, 34, 27, 27, 54, 27, 27, 27, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 27, 27, 27, 27, 27, 27, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 62, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 32, 
	41, 42, 42, 42, 42, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 41, 
	27, 43, 27, 27, 27, 27, 7, 28, 
	44, 27, 27, 60, 27, 27, 27, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 27, 27, 27, 27, 27, 27, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 63, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 7, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 33, 27, 
	32, 27, 27, 27, 27, 32, 28, 34, 
	27, 27, 54, 27, 27, 27, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	27, 27, 27, 27, 27, 27, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 64, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 32, 66, 65, 
	66, 66, 66, 66, 65, 65, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 65, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 67, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 69, 69, 69, 69, 69, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	69, 68, 70, 68, 72, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 73, 71, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 76, 74, 74, 77, 78, 78, 
	78, 78, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 77, 7, 79, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 7, 7, 
	7, 7, 7, 7, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	7, 7, 7, 80, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	77, 78, 78, 78, 78, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 77, 
	7, 79, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 7, 7, 7, 7, 7, 7, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 7, 7, 7, 81, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 78, 78, 78, 78, 78, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 78, 14, 79, 14, 83, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	84, 82, 86, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 87, 85, 85, 88, 
	1, 88, 88, 88, 88, 1, 1, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 1, 89, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 89, 90, 1, 
	90, 90, 90, 90, 1, 91, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 1, 92, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 94, 95, 
	95, 95, 95, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 94, 96, 97, 
	96, 96, 96, 96, 7, 7, 96, 96, 
	96, 96, 96, 96, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	96, 96, 96, 96, 96, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 7, 94, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 94, 7, 97, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	95, 95, 95, 95, 95, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 95, 
	14, 97, 14, 101, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 102, 100, 104, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 105, 103, 106, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 106, 14, 14, 14, 14, 14, 
	14, 14, 14, 107, 14, 14, 108, 14, 
	109, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 110, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 96, 97, 96, 
	96, 96, 96, 7, 7, 96, 96, 96, 
	96, 96, 96, 96, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 96, 96, 
	96, 96, 96, 96, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 111, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 7, 112, 1, 112, 112, 
	112, 112, 1, 113, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 1, 109, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 109, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 110, 1, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	112, 32, 112, 112, 112, 112, 32, 113, 
	116, 112, 112, 117, 112, 112, 112, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 112, 112, 112, 112, 112, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 118, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 32, 110, 
	95, 95, 95, 95, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 96, 
	97, 96, 96, 96, 96, 7, 113, 96, 
	96, 96, 96, 96, 96, 96, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	96, 96, 96, 96, 96, 96, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 111, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 7, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 124, 112, 112, 112, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 112, 
	112, 112, 112, 112, 112, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 125, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 7, 126, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 126, 7, 97, 7, 
	7, 7, 7, 7, 7, 127, 7, 7, 
	128, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	129, 32, 32, 130, 32, 32, 32, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 32, 32, 32, 32, 32, 32, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 32, 32, 32, 131, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 117, 112, 
	112, 112, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 112, 112, 112, 112, 
	112, 112, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 132, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 32, 103, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 133, 112, 
	112, 112, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 135, 112, 112, 112, 
	112, 112, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 134, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 32, 110, 95, 95, 95, 95, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 110, 96, 97, 96, 96, 96, 96, 
	7, 113, 96, 96, 96, 96, 96, 96, 
	96, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 96, 96, 96, 96, 96, 
	96, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	136, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	7, 115, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	115, 112, 32, 112, 112, 112, 112, 32, 
	113, 116, 112, 112, 133, 112, 112, 112, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 138, 112, 112, 112, 112, 112, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 137, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 32, 
	120, 121, 121, 121, 121, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 120, 
	112, 122, 112, 112, 112, 112, 7, 113, 
	123, 112, 112, 139, 112, 112, 112, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 112, 112, 112, 112, 112, 112, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 140, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 7, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 115, 112, 
	32, 112, 112, 112, 112, 32, 113, 116, 
	112, 112, 133, 112, 112, 112, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	112, 112, 112, 112, 112, 112, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 141, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 32, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 139, 112, 112, 112, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 112, 
	112, 112, 112, 112, 112, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 142, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 7, 115, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 115, 112, 32, 112, 
	112, 112, 112, 32, 113, 116, 112, 112, 
	133, 112, 112, 112, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 112, 112, 
	112, 112, 112, 112, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 143, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 32, 144, 1, 144, 144, 
	144, 144, 1, 1, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 1, 145, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 145, 146, 1, 146, 146, 146, 
	146, 1, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 1, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 149, 1, 150, 151, 151, 151, 151, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 150, 152, 153, 152, 152, 152, 
	152, 7, 7, 152, 152, 152, 152, 152, 
	152, 152, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 152, 152, 152, 152, 
	152, 152, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 154, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 7, 150, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 151, 151, 151, 
	151, 151, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 151, 14, 153, 14, 
	157, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 158, 156, 160, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 161, 159, 
	162, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 162, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	163, 14, 14, 164, 14, 165, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 165, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	166, 1, 166, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 166, 152, 153, 152, 152, 152, 152, 
	7, 7, 152, 152, 152, 152, 152, 152, 
	152, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 152, 152, 152, 152, 152, 
	152, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	167, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	7, 168, 1, 168, 168, 168, 168, 1, 
	169, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 1, 
	165, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 165, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	170, 1, 1, 166, 1, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 168, 32, 168, 
	168, 168, 168, 32, 169, 172, 168, 168, 
	173, 168, 168, 168, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 175, 168, 
	168, 168, 168, 168, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 174, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 32, 166, 151, 151, 151, 
	151, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 166, 152, 153, 152, 152, 
	152, 152, 7, 169, 152, 152, 152, 152, 
	152, 152, 152, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 152, 152, 152, 
	152, 152, 152, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 167, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 7, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 180, 168, 
	168, 168, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 168, 168, 168, 168, 
	168, 168, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 181, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 7, 182, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 182, 7, 153, 7, 7, 7, 7, 
	7, 7, 183, 7, 7, 184, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 185, 32, 32, 
	186, 32, 32, 32, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 32, 32, 
	32, 32, 32, 32, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	32, 32, 32, 187, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 173, 168, 168, 168, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 168, 168, 168, 168, 168, 168, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 188, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 32, 159, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 189, 168, 168, 168, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 191, 168, 168, 168, 168, 168, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 190, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 32, 166, 
	151, 151, 151, 151, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 166, 152, 
	153, 152, 152, 152, 152, 7, 169, 152, 
	152, 152, 152, 152, 152, 152, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	152, 152, 152, 152, 152, 152, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 192, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 7, 171, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 171, 168, 32, 
	168, 168, 168, 168, 32, 169, 172, 168, 
	168, 189, 168, 168, 168, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 194, 
	168, 168, 168, 168, 168, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 193, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 32, 176, 177, 177, 
	177, 177, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 176, 168, 178, 168, 
	168, 168, 168, 7, 169, 179, 168, 168, 
	195, 168, 168, 168, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 168, 168, 
	168, 168, 168, 168, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 196, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 7, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 171, 168, 32, 168, 168, 
	168, 168, 32, 169, 172, 168, 168, 189, 
	168, 168, 168, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 168, 168, 168, 
	168, 168, 168, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 197, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 32, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 195, 168, 
	168, 168, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 168, 168, 168, 168, 
	168, 168, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 198, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 7, 171, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 171, 168, 32, 168, 168, 168, 168, 
	32, 169, 172, 168, 168, 189, 168, 168, 
	168, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 168, 168, 168, 168, 168, 
	168, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	199, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	32, 200, 1, 201, 1, 1, 202, 29, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 204, 1, 1, 
	206, 205, 29, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 29, 27, 1, 27, 27, 27, 27, 
	1, 28, 27, 27, 27, 27, 27, 27, 
	207, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	1, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 205, 210, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 210, 205, 
	205, 205, 205, 205, 205, 205, 205, 211, 
	205, 205, 212, 205, 210, 206, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 210, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 212, 
	205, 212, 213, 214, 214, 214, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	212, 215, 216, 215, 215, 215, 215, 205, 
	205, 215, 215, 215, 215, 215, 215, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 215, 215, 215, 215, 215, 215, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 217, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 205, 
	9, 9, 9, 9, 9, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 9, 
	14, 11, 14, 214, 213, 214, 214, 214, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 214, 205, 216, 205, 219, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	221, 218, 223, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 224, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 225, 222, 19, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	20, 18, 226, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 226, 205, 205, 205, 205, 205, 205, 
	205, 205, 227, 205, 205, 228, 205, 211, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 211, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 229, 205, 206, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 230, 205, 206, 31, 
	223, 222, 231, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 231, 208, 205, 208, 208, 208, 208, 
	205, 209, 232, 208, 208, 233, 208, 208, 
	208, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 235, 208, 208, 208, 208, 
	208, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	234, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	205, 211, 206, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	211, 208, 205, 208, 208, 208, 208, 205, 
	209, 208, 208, 208, 208, 208, 208, 236, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 205, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 208, 
	205, 208, 208, 208, 208, 205, 209, 208, 
	208, 208, 208, 208, 208, 237, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 205, 206, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 39, 31, 39, 
	39, 39, 39, 31, 40, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 31, 212, 213, 214, 214, 
	214, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 212, 215, 216, 215, 215, 
	215, 215, 205, 209, 215, 215, 215, 215, 
	215, 215, 215, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 215, 215, 215, 
	215, 215, 215, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 217, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 205, 238, 239, 240, 240, 240, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 238, 208, 241, 208, 208, 208, 
	208, 205, 209, 242, 208, 208, 243, 208, 
	208, 208, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 208, 208, 208, 208, 
	208, 208, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 244, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 205, 245, 213, 214, 214, 214, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 245, 205, 216, 205, 205, 205, 205, 
	205, 205, 246, 205, 205, 247, 205, 205, 
	205, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 205, 205, 205, 205, 205, 
	205, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 205, 205, 205, 
	248, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 231, 206, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 231, 205, 205, 205, 
	205, 205, 205, 205, 205, 249, 205, 205, 
	250, 205, 205, 205, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 205, 205, 
	205, 205, 205, 205, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	205, 205, 205, 251, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	231, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 231, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	232, 208, 208, 233, 208, 208, 208, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 208, 208, 208, 208, 208, 208, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 252, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 205, 253, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 254, 65, 
	254, 254, 254, 254, 65, 65, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 65, 1, 256, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 255, 255, 
	255, 255, 255, 255, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 255, 255, 257, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 68, 258, 14, 1, 259, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 32, 32, 32, 
	32, 32, 32, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 32, 
	32, 32, 260, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 259, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 262, 
	32, 32, 32, 32, 32, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 32, 32, 32, 261, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 263, 264, 265, 265, 265, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	263, 7, 266, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 7, 7, 7, 7, 7, 7, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 7, 7, 7, 267, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 268, 269, 78, 78, 
	78, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 268, 7, 79, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 7, 7, 7, 
	7, 7, 7, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 7, 
	7, 7, 81, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 78, 
	78, 78, 78, 78, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 78, 14, 
	79, 14, 1, 112, 1, 112, 112, 112, 
	112, 1, 113, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 1, 270, 1, 1, 270, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 168, 1, 168, 168, 
	168, 168, 1, 169, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 1, 272, 271, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 25, 23, 0, 8, 
	9, 19, 8, 9, 19, 10, 101, 11, 
	10, 11, 16, 12, 13, 101, 15, 103, 
	0, 10, 104, 20, 16, 21, 18, 105, 
	106, 22, 6, 7, 104, 20, 24, 22, 
	101, 11, 101, 11, 23, 24, 26, 25, 
	30, 27, 27, 28, 26, 29, 29, 31, 
	31, 0, 128, 130, 0, 34, 35, 36, 
	132, 37, 36, 132, 37, 39, 40, 41, 
	136, 135, 42, 133, 43, 42, 133, 43, 
	45, 46, 45, 47, 46, 47, 48, 49, 
	55, 50, 64, 61, 51, 52, 63, 51, 
	52, 63, 53, 140, 54, 53, 54, 57, 
	55, 56, 140, 53, 141, 58, 57, 59, 
	60, 49, 50, 141, 58, 62, 60, 140, 
	54, 140, 54, 61, 62, 65, 64, 69, 
	66, 66, 67, 65, 68, 68, 70, 70, 
	72, 73, 72, 74, 73, 74, 75, 76, 
	82, 77, 91, 88, 78, 79, 90, 78, 
	79, 90, 80, 142, 81, 80, 81, 84, 
	82, 83, 142, 80, 144, 85, 84, 86, 
	87, 76, 77, 144, 85, 89, 87, 142, 
	81, 142, 81, 88, 89, 92, 91, 96, 
	93, 93, 94, 92, 95, 95, 97, 97, 
	99, 100, 145, 102, 14, 103, 102, 17, 
	105, 106, 107, 115, 108, 109, 110, 105, 
	111, 119, 112, 113, 114, 118, 112, 113, 
	114, 118, 107, 115, 108, 116, 117, 107, 
	120, 123, 119, 124, 121, 122, 125, 109, 
	110, 111, 120, 123, 127, 125, 115, 108, 
	126, 115, 108, 126, 127, 129, 128, 0, 
	131, 130, 134, 134, 135, 136, 137, 138, 
	139, 40, 41, 135, 138, 139, 143, 145, 
	146
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 0, 21, 
	23, 24, 24, 24, 0, 25, 0, 21, 
	26, 28, 29, 29, 28, 28, 30, 32, 
	32, 32, 24, 24, 0, 0, 24, 0, 
	25, 9, 0, 25, 28, 30, 0, 30, 
	0, 37, 8, 11, 39, 0, 0, 15, 
	41, 15, 0, 42, 0, 0, 0, 0, 
	11, 11, 15, 16, 15, 0, 17, 0, 
	46, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 51, 19, 0, 0, 9, 
	0, 20, 52, 24, 54, 24, 0, 25, 
	28, 29, 29, 56, 28, 30, 32, 58, 
	32, 54, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	2, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 19, 19, 0, 0, 9, 
	0, 20, 0, 24, 24, 24, 0, 25, 
	28, 29, 29, 28, 28, 30, 32, 32, 
	32, 24, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	0, 0, 21, 63, 0, 0, 64, 0, 
	0, 20, 0, 0, 0, 64, 0, 8, 
	0, 9, 15, 71, 16, 15, 0, 64, 
	17, 0, 19, 19, 19, 0, 0, 24, 
	24, 24, 0, 25, 0, 0, 28, 75, 
	29, 29, 28, 28, 30, 32, 32, 32, 
	11, 24, 24, 0, 0, 3, 0, 80, 
	25, 0, 82, 84, 0, 0, 25, 29, 
	87, 29, 29, 30, 0, 89, 91, 0, 
	93
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	22, 1, 1, 14, 6, 27, 31, 33, 
	22, 22, 34, 35, 36, 35, 27, 22, 
	37, 0, 38, 40, 40, 40, 43, 43, 
	44, 45, 45, 45, 1, 1, 0, 47, 
	48, 49, 50, 50, 13, 0, 47, 1, 
	0, 53, 47, 55, 57, 59, 53, 50, 
	53, 60, 61, 62, 61, 55, 53, 1, 
	1, 0, 6, 10, 12, 14, 14, 18, 
	0, 6, 1, 0, 22, 6, 27, 31, 
	33, 22, 14, 22, 34, 35, 36, 35, 
	27, 22, 0, 0, 0, 63, 0, 64, 
	65, 66, 64, 64, 67, 68, 69, 70, 
	70, 72, 73, 64, 64, 64, 70, 74, 
	66, 66, 66, 67, 74, 76, 76, 74, 
	77, 78, 79, 81, 0, 82, 0, 83, 
	85, 86, 88, 90, 0, 1, 91, 0, 
	92, 93, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 101;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 32;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 33;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 34;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 44;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 98;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 80 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 39 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 52 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 21 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 89 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 46 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 42 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 87 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 28 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 84 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 41 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 71 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 51 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 75 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 54 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 78 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 81 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 90 then
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 77 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 79 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 38 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 68 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 61 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 92 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 88 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 40 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 72 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 62 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 48 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 31 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 86 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 60 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 85 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 47 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 76 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 69 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 34 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 74 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 70 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 67 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	33, 126, 48, 122, 9, 34, 
	34, 92, 34, 92, 0, 
	0, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	0, 0, 33, 126, 9, 
	126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	9, 126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 47, 47, 
	47, 47, 10, 10, 9, 
	47, 0, 0, 10, 10, 
	9, 126, 10, 126, 9, 44, 
	9, 44, 9, 126, 9, 
	34, 9, 34, 10, 92, 
	10, 92, 34, 92, 9, 44, 
	9, 47, 10, 47, 10, 
	10, 10, 10, 9, 126, 
	9, 126, 10, 126, 10, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 126, 
	10, 126, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 34, 0, 0, 33, 
	126, 10, 10, 0, 0, 
	10, 126, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	94, 75, 26, 59, 59, 0, 114, 114, 
	26, 59, 59, 0, 94, 118, 32, 118, 
	114, 26, 59, 59, 36, 36, 118, 94, 
	36, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	118, 32, 118, 114, 26, 59, 59, 36, 
	36, 118, 94, 36, 118, 118, 118, 114, 
	114, 118, 0, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 39, 0, 1, 
	118, 117, 36, 36, 118, 26, 26, 83, 
	83, 59, 36, 39, 38, 1, 1, 118, 
	118, 117, 117, 118, 118, 114, 114, 118, 
	117, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 26, 0, 94, 1, 0, 
	117, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 955, 
	957, 1076, 1171, 1289, 1290, 1409, 1528, 1643, 
	1758, 1877, 1996, 2115, 2234, 2353, 2472, 2591, 
	2710, 2805, 2881, 2908, 2968, 3028, 3029, 3144, 
	3259, 3286, 3346, 3406, 3407, 3502, 3621, 3654, 
	3773, 3888, 3915, 3975, 4035, 4072, 4109, 4228, 
	4323, 4360, 4479, 4598, 4717, 4832, 4947, 5066, 
	5067, 5186, 5305, 5424, 5543, 5662, 5781, 5900, 
	5995, 6114, 6147, 6266, 6381, 6408, 6468, 6528, 
	6565, 6602, 6721, 6816, 6853, 6972, 7091, 7210, 
	7325, 7440, 7559, 7560, 7679, 7798, 7917, 8036, 
	8155, 8274, 8393, 8395, 8397, 8399, 8439, 8440, 
	8442, 8561, 8679, 8716, 8753, 8872, 8899, 8926, 
	9010, 9094, 9154, 9191, 9231, 9270, 9272, 9274, 
	9393, 9512, 9630, 9748, 9867, 9986, 10101, 10216, 
	10335, 10453, 10454, 10568, 10569, 10570, 10572, 10573, 
	10687, 10801, 10916, 11031, 11058, 11059, 11154, 11156, 
	11157, 11275, 11277
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 31, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	35, 27, 27, 27, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 37, 27, 
	27, 27, 27, 27, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 36, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 32, 27, 1, 27, 27, 
	27, 27, 1, 28, 27, 27, 27, 27, 
	27, 27, 38, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 1, 1, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 39, 31, 39, 39, 39, 39, 
	31, 40, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	31, 18, 25, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 25, 10, 11, 10, 10, 10, 10, 
	7, 28, 10, 10, 10, 10, 10, 10, 
	10, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 10, 10, 10, 10, 10, 
	10, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	26, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	7, 41, 42, 42, 42, 42, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	41, 27, 43, 27, 27, 27, 27, 7, 
	28, 44, 27, 27, 45, 27, 27, 27, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 27, 27, 27, 27, 27, 27, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 46, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 7, 
	47, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 47, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	48, 7, 7, 49, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 7, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 32, 32, 32, 32, 32, 
	32, 32, 32, 50, 32, 32, 51, 32, 
	32, 32, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 32, 32, 32, 
	32, 32, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 32, 32, 
	32, 52, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 33, 27, 32, 
	27, 27, 27, 27, 32, 28, 34, 27, 
	27, 35, 27, 27, 27, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 27, 
	27, 27, 27, 27, 27, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 53, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	54, 27, 27, 27, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 56, 27, 
	27, 27, 27, 27, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 55, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 32, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 10, 10, 10, 
	10, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 57, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 27, 32, 27, 27, 27, 
	27, 32, 28, 34, 27, 27, 54, 27, 
	27, 27, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 59, 27, 27, 27, 
	27, 27, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 58, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 32, 41, 42, 42, 42, 42, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 41, 27, 43, 27, 27, 27, 27, 
	7, 28, 44, 27, 27, 60, 27, 27, 
	27, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 27, 27, 27, 27, 27, 
	27, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	61, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	7, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 27, 32, 27, 27, 27, 27, 32, 
	28, 34, 27, 27, 54, 27, 27, 27, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 27, 27, 27, 27, 27, 27, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 62, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 32, 
	41, 42, 42, 42, 42, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 41, 
	27, 43, 27, 27, 27, 27, 7, 28, 
	44, 27, 27, 60, 27, 27, 27, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 27, 27, 27, 27, 27, 27, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 63, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 7, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 33, 27, 
	32, 27, 27, 27, 27, 32, 28, 34, 
	27, 27, 54, 27, 27, 27, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	27, 27, 27, 27, 27, 27, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 64, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 32, 66, 65, 
	66, 66, 66, 66, 65, 65, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 65, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 67, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 69, 69, 69, 69, 69, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	69, 68, 70, 68, 72, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 73, 71, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 76, 74, 74, 77, 78, 78, 
	78, 78, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 77, 7, 79, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 7, 7, 
	7, 7, 7, 7, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	7, 7, 7, 80, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	77, 78, 78, 78, 78, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 77, 
	7, 79, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 7, 7, 7, 7, 7, 7, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 7, 7, 7, 81, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 78, 78, 78, 78, 78, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 78, 14, 79, 14, 83, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	84, 82, 86, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 87, 85, 85, 88, 
	1, 88, 88, 88, 88, 1, 1, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 1, 89, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 89, 90, 1, 
	90, 90, 90, 90, 1, 91, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 1, 92, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 94, 95, 
	95, 95, 95, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 94, 96, 97, 
	96, 96, 96, 96, 7, 7, 96, 96, 
	96, 96, 96, 96, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	96, 96, 96, 96, 96, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 7, 94, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 94, 7, 97, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	95, 95, 95, 95, 95, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 95, 
	14, 97, 14, 101, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 102, 100, 104, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 105, 103, 106, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 106, 14, 14, 14, 14, 14, 
	14, 14, 14, 107, 14, 14, 108, 14, 
	109, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 110, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 96, 97, 96, 
	96, 96, 96, 7, 7, 96, 96, 96, 
	96, 96, 96, 96, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 96, 96, 
	96, 96, 96, 96, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 111, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 7, 112, 1, 112, 112, 
	112, 112, 1, 113, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 1, 109, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 109, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 110, 1, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	112, 32, 112, 112, 112, 112, 32, 113, 
	116, 112, 112, 117, 112, 112, 112, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 112, 112, 112, 112, 112, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 118, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 32, 110, 
	95, 95, 95, 95, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 96, 
	97, 96, 96, 96, 96, 7, 113, 96, 
	96, 96, 96, 96, 96, 96, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	96, 96, 96, 96, 96, 96, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 111, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 7, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 124, 112, 112, 112, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 112, 
	112, 112, 112, 112, 112, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 125, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 7, 126, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 126, 7, 97, 7, 
	7, 7, 7, 7, 7, 127, 7, 7, 
	128, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	129, 32, 32, 130, 32, 32, 32, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 32, 32, 32, 32, 32, 32, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 32, 32, 32, 131, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 117, 112, 
	112, 112, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 112, 112, 112, 112, 
	112, 112, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 132, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 32, 103, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 133, 112, 
	112, 112, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 135, 112, 112, 112, 
	112, 112, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 134, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 32, 110, 95, 95, 95, 95, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 110, 96, 97, 96, 96, 96, 96, 
	7, 113, 96, 96, 96, 96, 96, 96, 
	96, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 96, 96, 96, 96, 96, 
	96, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	136, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	7, 115, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	115, 112, 32, 112, 112, 112, 112, 32, 
	113, 116, 112, 112, 133, 112, 112, 112, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 138, 112, 112, 112, 112, 112, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 137, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 32, 
	120, 121, 121, 121, 121, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 120, 
	112, 122, 112, 112, 112, 112, 7, 113, 
	123, 112, 112, 139, 112, 112, 112, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 112, 112, 112, 112, 112, 112, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 140, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 7, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 115, 112, 
	32, 112, 112, 112, 112, 32, 113, 116, 
	112, 112, 133, 112, 112, 112, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	112, 112, 112, 112, 112, 112, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 141, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 32, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 139, 112, 112, 112, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 112, 
	112, 112, 112, 112, 112, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 142, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 7, 115, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 115, 112, 32, 112, 
	112, 112, 112, 32, 113, 116, 112, 112, 
	133, 112, 112, 112, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 112, 112, 
	112, 112, 112, 112, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 143, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 32, 144, 1, 144, 144, 
	144, 144, 1, 1, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 1, 145, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 145, 146, 1, 146, 146, 146, 
	146, 1, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 1, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 149, 1, 150, 151, 151, 151, 151, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 150, 152, 153, 152, 152, 152, 
	152, 7, 7, 152, 152, 152, 152, 152, 
	152, 152, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 152, 152, 152, 152, 
	152, 152, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 154, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 7, 150, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 151, 151, 151, 
	151, 151, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 151, 14, 153, 14, 
	157, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 158, 156, 160, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 161, 159, 
	162, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 162, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	163, 14, 14, 164, 14, 165, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 165, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	166, 1, 166, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 166, 152, 153, 152, 152, 152, 152, 
	7, 7, 152, 152, 152, 152, 152, 152, 
	152, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 152, 152, 152, 152, 152, 
	152, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	167, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	7, 168, 1, 168, 168, 168, 168, 1, 
	169, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 1, 
	165, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 165, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	170, 1, 1, 166, 1, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 168, 32, 168, 
	168, 168, 168, 32, 169, 172, 168, 168, 
	173, 168, 168, 168, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 175, 168, 
	168, 168, 168, 168, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 174, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 32, 166, 151, 151, 151, 
	151, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 166, 152, 153, 152, 152, 
	152, 152, 7, 169, 152, 152, 152, 152, 
	152, 152, 152, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 152, 152, 152, 
	152, 152, 152, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 167, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 7, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 180, 168, 
	168, 168, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 168, 168, 168, 168, 
	168, 168, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 181, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 7, 182, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 182, 7, 153, 7, 7, 7, 7, 
	7, 7, 183, 7, 7, 184, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 185, 32, 32, 
	186, 32, 32, 32, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 32, 32, 
	32, 32, 32, 32, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	32, 32, 32, 187, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 173, 168, 168, 168, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 168, 168, 168, 168, 168, 168, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 188, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 32, 159, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 189, 168, 168, 168, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 191, 168, 168, 168, 168, 168, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 190, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 32, 166, 
	151, 151, 151, 151, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 166, 152, 
	153, 152, 152, 152, 152, 7, 169, 152, 
	152, 152, 152, 152, 152, 152, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	152, 152, 152, 152, 152, 152, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 192, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 7, 171, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 171, 168, 32, 
	168, 168, 168, 168, 32, 169, 172, 168, 
	168, 189, 168, 168, 168, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 194, 
	168, 168, 168, 168, 168, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 193, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 32, 176, 177, 177, 
	177, 177, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 176, 168, 178, 168, 
	168, 168, 168, 7, 169, 179, 168, 168, 
	195, 168, 168, 168, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 168, 168, 
	168, 168, 168, 168, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 196, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 7, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 171, 168, 32, 168, 168, 
	168, 168, 32, 169, 172, 168, 168, 189, 
	168, 168, 168, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 168, 168, 168, 
	168, 168, 168, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 197, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 32, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 195, 168, 
	168, 168, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 168, 168, 168, 168, 
	168, 168, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 198, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 7, 171, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 171, 168, 32, 168, 168, 168, 168, 
	32, 169, 172, 168, 168, 189, 168, 168, 
	168, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 168, 168, 168, 168, 168, 
	168, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	199, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	32, 200, 1, 201, 1, 1, 202, 29, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 204, 1, 1, 
	206, 205, 29, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 29, 27, 1, 27, 27, 27, 27, 
	1, 28, 27, 27, 27, 27, 27, 27, 
	207, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	1, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 205, 210, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 210, 205, 
	205, 205, 205, 205, 205, 205, 205, 211, 
	205, 205, 212, 205, 210, 206, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 210, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 212, 
	205, 212, 213, 214, 214, 214, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	212, 215, 216, 215, 215, 215, 215, 205, 
	205, 215, 215, 215, 215, 215, 215, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 215, 215, 215, 215, 215, 215, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 217, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 205, 
	9, 9, 9, 9, 9, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 9, 
	14, 11, 14, 214, 213, 214, 214, 214, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 214, 205, 216, 205, 219, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	221, 218, 223, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 224, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 225, 222, 19, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	20, 18, 226, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 226, 205, 205, 205, 205, 205, 205, 
	205, 205, 227, 205, 205, 228, 205, 211, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 211, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 229, 205, 206, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 230, 205, 206, 31, 
	223, 222, 231, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 231, 208, 205, 208, 208, 208, 208, 
	205, 209, 232, 208, 208, 233, 208, 208, 
	208, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 235, 208, 208, 208, 208, 
	208, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	234, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	205, 211, 206, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	211, 208, 205, 208, 208, 208, 208, 205, 
	209, 208, 208, 208, 208, 208, 208, 236, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 205, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 208, 
	205, 208, 208, 208, 208, 205, 209, 208, 
	208, 208, 208, 208, 208, 237, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 205, 206, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 39, 31, 39, 
	39, 39, 39, 31, 40, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 31, 212, 213, 214, 214, 
	214, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 212, 215, 216, 215, 215, 
	215, 215, 205, 209, 215, 215, 215, 215, 
	215, 215, 215, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 215, 215, 215, 
	215, 215, 215, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 217, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 205, 238, 239, 240, 240, 240, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 238, 208, 241, 208, 208, 208, 
	208, 205, 209, 242, 208, 208, 243, 208, 
	208, 208, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 208, 208, 208, 208, 
	208, 208, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 244, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 205, 245, 213, 214, 214, 214, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 245, 205, 216, 205, 205, 205, 205, 
	205, 205, 246, 205, 205, 247, 205, 205, 
	205, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 205, 205, 205, 205, 205, 
	205, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 205, 205, 205, 
	248, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 231, 206, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 231, 205, 205, 205, 
	205, 205, 205, 205, 205, 249, 205, 205, 
	250, 205, 205, 205, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 205, 205, 
	205, 205, 205, 205, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	205, 205, 205, 251, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	231, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 231, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	232, 208, 208, 233, 208, 208, 208, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 208, 208, 208, 208, 208, 208, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 252, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 205, 253, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 254, 65, 
	254, 254, 254, 254, 65, 65, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 65, 1, 256, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 255, 255, 
	255, 255, 255, 255, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 255, 255, 257, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 68, 258, 14, 1, 259, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 32, 32, 32, 
	32, 32, 32, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 32, 
	32, 32, 260, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 259, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 262, 
	32, 32, 32, 32, 32, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 32, 32, 32, 261, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 263, 264, 265, 265, 265, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	263, 7, 266, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 7, 7, 7, 7, 7, 7, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 7, 7, 7, 267, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 268, 269, 78, 78, 
	78, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 268, 7, 79, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 7, 7, 7, 
	7, 7, 7, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 7, 
	7, 7, 81, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 78, 
	78, 78, 78, 78, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 78, 14, 
	79, 14, 1, 112, 1, 112, 112, 112, 
	112, 1, 113, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 1, 270, 1, 1, 270, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 168, 1, 168, 168, 
	168, 168, 1, 169, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 1, 272, 271, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 25, 23, 0, 8, 
	9, 19, 8, 9, 19, 10, 101, 11, 
	10, 11, 16, 12, 13, 101, 15, 103, 
	0, 10, 104, 20, 16, 21, 18, 105, 
	106, 22, 6, 7, 104, 20, 24, 22, 
	101, 11, 101, 11, 23, 24, 26, 25, 
	30, 27, 27, 28, 26, 29, 29, 31, 
	31, 0, 128, 130, 0, 34, 35, 36, 
	132, 37, 36, 132, 37, 39, 40, 41, 
	136, 135, 42, 133, 43, 42, 133, 43, 
	45, 46, 45, 47, 46, 47, 48, 49, 
	55, 50, 64, 61, 51, 52, 63, 51, 
	52, 63, 53, 140, 54, 53, 54, 57, 
	55, 56, 140, 53, 141, 58, 57, 59, 
	60, 49, 50, 141, 58, 62, 60, 140, 
	54, 140, 54, 61, 62, 65, 64, 69, 
	66, 66, 67, 65, 68, 68, 70, 70, 
	72, 73, 72, 74, 73, 74, 75, 76, 
	82, 77, 91, 88, 78, 79, 90, 78, 
	79, 90, 80, 142, 81, 80, 81, 84, 
	82, 83, 142, 80, 144, 85, 84, 86, 
	87, 76, 77, 144, 85, 89, 87, 142, 
	81, 142, 81, 88, 89, 92, 91, 96, 
	93, 93, 94, 92, 95, 95, 97, 97, 
	99, 100, 145, 102, 14, 103, 102, 17, 
	105, 106, 107, 115, 108, 109, 110, 105, 
	111, 119, 112, 113, 114, 118, 112, 113, 
	114, 118, 107, 115, 108, 116, 117, 107, 
	120, 123, 119, 124, 121, 122, 125, 109, 
	110, 111, 120, 123, 127, 125, 115, 108, 
	126, 115, 108, 126, 127, 129, 128, 0, 
	131, 130, 134, 134, 135, 136, 137, 138, 
	139, 40, 41, 135, 138, 139, 143, 145, 
	146
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 0, 21, 
	23, 24, 24, 24, 0, 25, 0, 21, 
	26, 28, 29, 29, 28, 28, 30, 32, 
	32, 32, 24, 24, 0, 0, 24, 0, 
	25, 9, 0, 25, 28, 30, 0, 30, 
	0, 37, 8, 11, 39, 0, 0, 15, 
	41, 15, 0, 42, 0, 0, 0, 0, 
	11, 11, 15, 16, 15, 0, 17, 0, 
	46, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 51, 19, 0, 0, 9, 
	0, 20, 52, 24, 54, 24, 0, 25, 
	28, 29, 29, 56, 28, 30, 32, 58, 
	32, 54, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	2, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 19, 19, 0, 0, 9, 
	0, 20, 0, 24, 24, 24, 0, 25, 
	28, 29, 29, 28, 28, 30, 32, 32, 
	32, 24, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	0, 0, 21, 63, 0, 0, 64, 0, 
	0, 20, 0, 0, 0, 64, 0, 8, 
	0, 9, 15, 71, 16, 15, 0, 64, 
	17, 0, 19, 19, 19, 0, 0, 24, 
	24, 24, 0, 25, 0, 0, 28, 75, 
	29, 29, 28, 28, 30, 32, 32, 32, 
	11, 24, 24, 0, 0, 3, 0, 80, 
	25, 0, 82, 84, 0, 0, 25, 29, 
	87, 29, 29, 30, 0, 89, 91, 0, 
	93
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	22, 1, 1, 14, 6, 27, 31, 33, 
	22, 22, 34, 35, 36, 35, 27, 22, 
	37, 0, 38, 40, 40, 40, 43, 43, 
	44, 45, 45, 45, 1, 1, 0, 47, 
	48, 49, 50, 50, 13, 0, 47, 1, 
	0, 53, 47, 55, 57, 59, 53, 50, 
	53, 60, 61, 62, 61, 55, 53, 1, 
	1, 0, 6, 10, 12, 14, 14, 18, 
	0, 6, 1, 0, 22, 6, 27, 31, 
	33, 22, 14, 22, 34, 35, 36, 35, 
	27, 22, 0, 0, 0, 63, 0, 64, 
	65, 66, 64, 64, 67, 68, 69, 70, 
	70, 72, 73, 64, 64, 64, 70, 74, 
	66, 66, 66, 67, 74, 76, 76, 74, 
	77, 78, 79, 81, 0, 82, 0, 83, 
	85, 86, 88, 90, 0, 1, 91, 0, 
	92, 93, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 101;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 32;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 33;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 34;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 44;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 98;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 80 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 39 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 52 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 21 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 89 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 46 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 42 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 87 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 28 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 84 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 41 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 71 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 51 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 75 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 54 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 78 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 81 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 90 then
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 77 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 79 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 38 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 68 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 61 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 92 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 88 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 40 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 72 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 62 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 48 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 31 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 86 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 60 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 85 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 47 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 76 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 69 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 34 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 74 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 70 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 67 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	33, 126, 48, 122, 9, 34, 
	34, 92, 34, 92, 0, 
	0, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	0, 0, 33, 126, 9, 
	126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	9, 126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 47, 47, 
	47, 47, 10, 10, 9, 
	47, 0, 0, 10, 10, 
	9, 126, 10, 126, 9, 44, 
	9, 44, 9, 126, 9, 
	34, 9, 34, 10, 92, 
	10, 92, 34, 92, 9, 44, 
	9, 47, 10, 47, 10, 
	10, 10, 10, 9, 126, 
	9, 126, 10, 126, 10, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 126, 
	10, 126, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 34, 0, 0, 33, 
	126, 10, 10, 0, 0, 
	10, 126, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	94, 75, 26, 59, 59, 0, 114, 114, 
	26, 59, 59, 0, 94, 118, 32, 118, 
	114, 26, 59, 59, 36, 36, 118, 94, 
	36, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	118, 32, 118, 114, 26, 59, 59, 36, 
	36, 118, 94, 36, 118, 118, 118, 114, 
	114, 118, 0, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 39, 0, 1, 
	118, 117, 36, 36, 118, 26, 26, 83, 
	83, 59, 36, 39, 38, 1, 1, 118, 
	118, 117, 117, 118, 118, 114, 114, 118, 
	117, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 26, 0, 94, 1, 0, 
	117, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 955, 
	957, 1076, 1171, 1289, 1290, 1409, 1528, 1643, 
	1758, 1877, 1996, 2115, 2234, 2353, 2472, 2591, 
	2710, 2805, 2881, 2908, 2968, 3028, 3029, 3144, 
	3259, 3286, 3346, 3406, 3407, 3502, 3621, 3654, 
	3773, 3888, 3915, 3975, 4035, 4072, 4109, 4228, 
	4323, 4360, 4479, 4598, 4717, 4832, 4947, 5066, 
	5067, 5186, 5305, 5424, 5543, 5662, 5781, 5900, 
	5995, 6114, 6147, 6266, 6381, 6408, 6468, 6528, 
	6565, 6602, 6721, 6816, 6853, 6972, 7091, 7210, 
	7325, 7440, 7559, 7560, 7679, 7798, 7917, 8036, 
	8155, 8274, 8393, 8395, 8397, 8399, 8439, 8440, 
	8442, 8561, 8679, 8716, 8753, 8872, 8899, 8926, 
	9010, 9094, 9154, 9191, 9231, 9270, 9272, 9274, 
	9393, 9512, 9630, 9748, 9867, 9986, 10101, 10216, 
	10335, 10453, 10454, 10568, 10569, 10570, 10572, 10573, 
	10687, 10801, 10916, 11031, 11058, 11059, 11154, 11156, 
	11157, 11275, 11277
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 31, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	35, 27, 27, 27, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 37, 27, 
	27, 27, 27, 27, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 36, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 32, 27, 1, 27, 27, 
	27, 27, 1, 28, 27, 27, 27, 27, 
	27, 27, 38, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 1, 1, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 39, 31, 39, 39, 39, 39, 
	31, 40, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	31, 18, 25, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 25, 10, 11, 10, 10, 10, 10, 
	7, 28, 10, 10, 10, 10, 10, 10, 
	10, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 10, 10, 10, 10, 10, 
	10, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	26, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	7, 41, 42, 42, 42, 42, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	41, 27, 43, 27, 27, 27, 27, 7, 
	28, 44, 27, 27, 45, 27, 27, 27, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 27, 27, 27, 27, 27, 27, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 46, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 7, 
	47, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 47, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	48, 7, 7, 49, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 7, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 32, 32, 32, 32, 32, 
	32, 32, 32, 50, 32, 32, 51, 32, 
	32, 32, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 32, 32, 32, 
	32, 32, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 32, 32, 
	32, 52, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 33, 27, 32, 
	27, 27, 27, 27, 32, 28, 34, 27, 
	27, 35, 27, 27, 27, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 27, 
	27, 27, 27, 27, 27, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 53, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	54, 27, 27, 27, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 56, 27, 
	27, 27, 27, 27, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 55, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 32, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 10, 10, 10, 
	10, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 57, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 27, 32, 27, 27, 27, 
	27, 32, 28, 34, 27, 27, 54, 27, 
	27, 27, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 59, 27, 27, 27, 
	27, 27, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 58, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 32, 41, 42, 42, 42, 42, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 41, 27, 43, 27, 27, 27, 27, 
	7, 28, 44, 27, 27, 60, 27, 27, 
	27, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 27, 27, 27, 27, 27, 
	27, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	61, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	7, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 27, 32, 27, 27, 27, 27, 32, 
	28, 34, 27, 27, 54, 27, 27, 27, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 27, 27, 27, 27, 27, 27, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 62, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 32, 
	41, 42, 42, 42, 42, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 41, 
	27, 43, 27, 27, 27, 27, 7, 28, 
	44, 27, 27, 60, 27, 27, 27, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 27, 27, 27, 27, 27, 27, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 63, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 7, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 33, 27, 
	32, 27, 27, 27, 27, 32, 28, 34, 
	27, 27, 54, 27, 27, 27, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	27, 27, 27, 27, 27, 27, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 64, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 32, 66, 65, 
	66, 66, 66, 66, 65, 65, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 65, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 67, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 69, 69, 69, 69, 69, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	69, 68, 70, 68, 72, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 73, 71, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 76, 74, 74, 77, 78, 78, 
	78, 78, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 77, 7, 79, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 7, 7, 
	7, 7, 7, 7, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	7, 7, 7, 80, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	77, 78, 78, 78, 78, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 77, 
	7, 79, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 7, 7, 7, 7, 7, 7, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 7, 7, 7, 81, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 78, 78, 78, 78, 78, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 78, 14, 79, 14, 83, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	84, 82, 86, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 87, 85, 85, 88, 
	1, 88, 88, 88, 88, 1, 1, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 1, 89, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 89, 90, 1, 
	90, 90, 90, 90, 1, 91, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 1, 92, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 94, 95, 
	95, 95, 95, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 94, 96, 97, 
	96, 96, 96, 96, 7, 7, 96, 96, 
	96, 96, 96, 96, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	96, 96, 96, 96, 96, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 7, 94, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 94, 7, 97, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	95, 95, 95, 95, 95, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 95, 
	14, 97, 14, 101, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 102, 100, 104, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 105, 103, 106, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 106, 14, 14, 14, 14, 14, 
	14, 14, 14, 107, 14, 14, 108, 14, 
	109, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 110, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 96, 97, 96, 
	96, 96, 96, 7, 7, 96, 96, 96, 
	96, 96, 96, 96, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 96, 96, 
	96, 96, 96, 96, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 111, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 7, 112, 1, 112, 112, 
	112, 112, 1, 113, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 1, 109, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 109, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 110, 1, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	112, 32, 112, 112, 112, 112, 32, 113, 
	116, 112, 112, 117, 112, 112, 112, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 112, 112, 112, 112, 112, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 118, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 32, 110, 
	95, 95, 95, 95, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 96, 
	97, 96, 96, 96, 96, 7, 113, 96, 
	96, 96, 96, 96, 96, 96, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	96, 96, 96, 96, 96, 96, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 111, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 7, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 124, 112, 112, 112, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 112, 
	112, 112, 112, 112, 112, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 125, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 7, 126, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 126, 7, 97, 7, 
	7, 7, 7, 7, 7, 127, 7, 7, 
	128, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	129, 32, 32, 130, 32, 32, 32, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 32, 32, 32, 32, 32, 32, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 32, 32, 32, 131, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 117, 112, 
	112, 112, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 112, 112, 112, 112, 
	112, 112, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 132, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 32, 103, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 133, 112, 
	112, 112, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 135, 112, 112, 112, 
	112, 112, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 134, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 32, 110, 95, 95, 95, 95, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 110, 96, 97, 96, 96, 96, 96, 
	7, 113, 96, 96, 96, 96, 96, 96, 
	96, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 96, 96, 96, 96, 96, 
	96, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	136, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	7, 115, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	115, 112, 32, 112, 112, 112, 112, 32, 
	113, 116, 112, 112, 133, 112, 112, 112, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 138, 112, 112, 112, 112, 112, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 137, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 32, 
	120, 121, 121, 121, 121, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 120, 
	112, 122, 112, 112, 112, 112, 7, 113, 
	123, 112, 112, 139, 112, 112, 112, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 112, 112, 112, 112, 112, 112, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 140, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 7, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 115, 112, 
	32, 112, 112, 112, 112, 32, 113, 116, 
	112, 112, 133, 112, 112, 112, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	112, 112, 112, 112, 112, 112, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 141, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 32, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 139, 112, 112, 112, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 112, 
	112, 112, 112, 112, 112, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 142, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 7, 115, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 115, 112, 32, 112, 
	112, 112, 112, 32, 113, 116, 112, 112, 
	133, 112, 112, 112, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 112, 112, 
	112, 112, 112, 112, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 143, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 32, 144, 1, 144, 144, 
	144, 144, 1, 1, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 1, 145, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 145, 146, 1, 146, 146, 146, 
	146, 1, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 1, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 149, 1, 150, 151, 151, 151, 151, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 150, 152, 153, 152, 152, 152, 
	152, 7, 7, 152, 152, 152, 152, 152, 
	152, 152, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 152, 152, 152, 152, 
	152, 152, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 154, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 7, 150, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 151, 151, 151, 
	151, 151, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 151, 14, 153, 14, 
	157, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 158, 156, 160, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 161, 159, 
	162, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 162, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	163, 14, 14, 164, 14, 165, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 165, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	166, 1, 166, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 166, 152, 153, 152, 152, 152, 152, 
	7, 7, 152, 152, 152, 152, 152, 152, 
	152, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 152, 152, 152, 152, 152, 
	152, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	167, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	7, 168, 1, 168, 168, 168, 168, 1, 
	169, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 1, 
	165, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 165, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	170, 1, 1, 166, 1, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 168, 32, 168, 
	168, 168, 168, 32, 169, 172, 168, 168, 
	173, 168, 168, 168, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 175, 168, 
	168, 168, 168, 168, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 174, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 32, 166, 151, 151, 151, 
	151, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 166, 152, 153, 152, 152, 
	152, 152, 7, 169, 152, 152, 152, 152, 
	152, 152, 152, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 152, 152, 152, 
	152, 152, 152, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 167, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 7, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 180, 168, 
	168, 168, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 168, 168, 168, 168, 
	168, 168, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 181, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 7, 182, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 182, 7, 153, 7, 7, 7, 7, 
	7, 7, 183, 7, 7, 184, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 185, 32, 32, 
	186, 32, 32, 32, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 32, 32, 
	32, 32, 32, 32, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	32, 32, 32, 187, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 173, 168, 168, 168, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 168, 168, 168, 168, 168, 168, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 188, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 32, 159, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 189, 168, 168, 168, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 191, 168, 168, 168, 168, 168, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 190, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 32, 166, 
	151, 151, 151, 151, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 166, 152, 
	153, 152, 152, 152, 152, 7, 169, 152, 
	152, 152, 152, 152, 152, 152, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	152, 152, 152, 152, 152, 152, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 192, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 7, 171, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 171, 168, 32, 
	168, 168, 168, 168, 32, 169, 172, 168, 
	168, 189, 168, 168, 168, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 194, 
	168, 168, 168, 168, 168, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 193, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 32, 176, 177, 177, 
	177, 177, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 176, 168, 178, 168, 
	168, 168, 168, 7, 169, 179, 168, 168, 
	195, 168, 168, 168, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 168, 168, 
	168, 168, 168, 168, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 196, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 7, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 171, 168, 32, 168, 168, 
	168, 168, 32, 169, 172, 168, 168, 189, 
	168, 168, 168, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 168, 168, 168, 
	168, 168, 168, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 197, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 32, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 195, 168, 
	168, 168, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 168, 168, 168, 168, 
	168, 168, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 198, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 7, 171, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 171, 168, 32, 168, 168, 168, 168, 
	32, 169, 172, 168, 168, 189, 168, 168, 
	168, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 168, 168, 168, 168, 168, 
	168, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	199, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	32, 200, 1, 201, 1, 1, 202, 29, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 204, 1, 1, 
	206, 205, 29, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 29, 27, 1, 27, 27, 27, 27, 
	1, 28, 27, 27, 27, 27, 27, 27, 
	207, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	1, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 205, 210, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 210, 205, 
	205, 205, 205, 205, 205, 205, 205, 211, 
	205, 205, 212, 205, 210, 206, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 210, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 212, 
	205, 212, 213, 214, 214, 214, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	212, 215, 216, 215, 215, 215, 215, 205, 
	205, 215, 215, 215, 215, 215, 215, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 215, 215, 215, 215, 215, 215, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 217, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 205, 
	9, 9, 9, 9, 9, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 9, 
	14, 11, 14, 214, 213, 214, 214, 214, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 214, 205, 216, 205, 219, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	221, 218, 223, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 224, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 225, 222, 19, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	20, 18, 226, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 226, 205, 205, 205, 205, 205, 205, 
	205, 205, 227, 205, 205, 228, 205, 211, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 211, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 229, 205, 206, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 230, 205, 206, 31, 
	223, 222, 231, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 231, 208, 205, 208, 208, 208, 208, 
	205, 209, 232, 208, 208, 233, 208, 208, 
	208, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 235, 208, 208, 208, 208, 
	208, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	234, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	205, 211, 206, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	211, 208, 205, 208, 208, 208, 208, 205, 
	209, 208, 208, 208, 208, 208, 208, 236, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 205, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 208, 
	205, 208, 208, 208, 208, 205, 209, 208, 
	208, 208, 208, 208, 208, 237, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 205, 206, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 39, 31, 39, 
	39, 39, 39, 31, 40, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 31, 212, 213, 214, 214, 
	214, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 212, 215, 216, 215, 215, 
	215, 215, 205, 209, 215, 215, 215, 215, 
	215, 215, 215, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 215, 215, 215, 
	215, 215, 215, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 217, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 205, 238, 239, 240, 240, 240, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 238, 208, 241, 208, 208, 208, 
	208, 205, 209, 242, 208, 208, 243, 208, 
	208, 208, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 208, 208, 208, 208, 
	208, 208, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 244, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 205, 245, 213, 214, 214, 214, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 245, 205, 216, 205, 205, 205, 205, 
	205, 205, 246, 205, 205, 247, 205, 205, 
	205, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 205, 205, 205, 205, 205, 
	205, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 205, 205, 205, 
	248, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 231, 206, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 231, 205, 205, 205, 
	205, 205, 205, 205, 205, 249, 205, 205, 
	250, 205, 205, 205, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 205, 205, 
	205, 205, 205, 205, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	205, 205, 205, 251, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	231, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 231, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	232, 208, 208, 233, 208, 208, 208, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 208, 208, 208, 208, 208, 208, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 252, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 205, 253, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 254, 65, 
	254, 254, 254, 254, 65, 65, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 65, 1, 256, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 255, 255, 
	255, 255, 255, 255, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 255, 255, 257, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 68, 258, 14, 1, 259, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 32, 32, 32, 
	32, 32, 32, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 32, 
	32, 32, 260, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 259, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 262, 
	32, 32, 32, 32, 32, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 32, 32, 32, 261, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 263, 264, 265, 265, 265, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	263, 7, 266, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 7, 7, 7, 7, 7, 7, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 7, 7, 7, 267, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 268, 269, 78, 78, 
	78, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 268, 7, 79, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 7, 7, 7, 
	7, 7, 7, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 7, 
	7, 7, 81, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 78, 
	78, 78, 78, 78, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 78, 14, 
	79, 14, 1, 112, 1, 112, 112, 112, 
	112, 1, 113, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 1, 270, 1, 1, 270, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 168, 1, 168, 168, 
	168, 168, 1, 169, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 1, 272, 271, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 25, 23, 0, 8, 
	9, 19, 8, 9, 19, 10, 101, 11, 
	10, 11, 16, 12, 13, 101, 15, 103, 
	0, 10, 104, 20, 16, 21, 18, 105, 
	106, 22, 6, 7, 104, 20, 24, 22, 
	101, 11, 101, 11, 23, 24, 26, 25, 
	30, 27, 27, 28, 26, 29, 29, 31, 
	31, 0, 128, 130, 0, 34, 35, 36, 
	132, 37, 36, 132, 37, 39, 40, 41, 
	136, 135, 42, 133, 43, 42, 133, 43, 
	45, 46, 45, 47, 46, 47, 48, 49, 
	55, 50, 64, 61, 51, 52, 63, 51, 
	52, 63, 53, 140, 54, 53, 54, 57, 
	55, 56, 140, 53, 141, 58, 57, 59, 
	60, 49, 50, 141, 58, 62, 60, 140, 
	54, 140, 54, 61, 62, 65, 64, 69, 
	66, 66, 67, 65, 68, 68, 70, 70, 
	72, 73, 72, 74, 73, 74, 75, 76, 
	82, 77, 91, 88, 78, 79, 90, 78, 
	79, 90, 80, 142, 81, 80, 81, 84, 
	82, 83, 142, 80, 144, 85, 84, 86, 
	87, 76, 77, 144, 85, 89, 87, 142, 
	81, 142, 81, 88, 89, 92, 91, 96, 
	93, 93, 94, 92, 95, 95, 97, 97, 
	99, 100, 145, 102, 14, 103, 102, 17, 
	105, 106, 107, 115, 108, 109, 110, 105, 
	111, 119, 112, 113, 114, 118, 112, 113, 
	114, 118, 107, 115, 108, 116, 117, 107, 
	120, 123, 119, 124, 121, 122, 125, 109, 
	110, 111, 120, 123, 127, 125, 115, 108, 
	126, 115, 108, 126, 127, 129, 128, 0, 
	131, 130, 134, 134, 135, 136, 137, 138, 
	139, 40, 41, 135, 138, 139, 143, 145, 
	146
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 0, 21, 
	23, 24, 24, 24, 0, 25, 0, 21, 
	26, 28, 29, 29, 28, 28, 30, 32, 
	32, 32, 24, 24, 0, 0, 24, 0, 
	25, 9, 0, 25, 28, 30, 0, 30, 
	0, 37, 8, 11, 39, 0, 0, 15, 
	41, 15, 0, 42, 0, 0, 0, 0, 
	11, 11, 15, 16, 15, 0, 17, 0, 
	46, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 51, 19, 0, 0, 9, 
	0, 20, 52, 24, 54, 24, 0, 25, 
	28, 29, 29, 56, 28, 30, 32, 58, 
	32, 54, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	2, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 19, 19, 0, 0, 9, 
	0, 20, 0, 24, 24, 24, 0, 25, 
	28, 29, 29, 28, 28, 30, 32, 32, 
	32, 24, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	0, 0, 21, 63, 0, 0, 64, 0, 
	0, 20, 0, 0, 0, 64, 0, 8, 
	0, 9, 15, 71, 16, 15, 0, 64, 
	17, 0, 19, 19, 19, 0, 0, 24, 
	24, 24, 0, 25, 0, 0, 28, 75, 
	29, 29, 28, 28, 30, 32, 32, 32, 
	11, 24, 24, 0, 0, 3, 0, 80, 
	25, 0, 82, 84, 0, 0, 25, 29, 
	87, 29, 29, 30, 0, 89, 91, 0, 
	93
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	22, 1, 1, 14, 6, 27, 31, 33, 
	22, 22, 34, 35, 36, 35, 27, 22, 
	37, 0, 38, 40, 40, 40, 43, 43, 
	44, 45, 45, 45, 1, 1, 0, 47, 
	48, 49, 50, 50, 13, 0, 47, 1, 
	0, 53, 47, 55, 57, 59, 53, 50, 
	53, 60, 61, 62, 61, 55, 53, 1, 
	1, 0, 6, 10, 12, 14, 14, 18, 
	0, 6, 1, 0, 22, 6, 27, 31, 
	33, 22, 14, 22, 34, 35, 36, 35, 
	27, 22, 0, 0, 0, 63, 0, 64, 
	65, 66, 64, 64, 67, 68, 69, 70, 
	70, 72, 73, 64, 64, 64, 70, 74, 
	66, 66, 66, 67, 74, 76, 76, 74, 
	77, 78, 79, 81, 0, 82, 0, 83, 
	85, 86, 88, 90, 0, 1, 91, 0, 
	92, 93, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 101;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 32;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 33;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 34;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 44;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 98;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 80 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 39 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 52 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 21 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 89 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 46 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 42 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 87 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 28 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 84 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 41 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 71 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 51 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 75 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 54 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 78 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 81 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 90 then
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 77 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 79 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 38 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 68 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 61 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 92 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 88 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 40 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 72 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 62 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 48 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 31 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 86 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 60 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 85 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 47 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 76 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 69 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 34 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 74 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 70 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 67 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	33, 126, 48, 122, 9, 34, 
	34, 92, 34, 92, 0, 
	0, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	0, 0, 33, 126, 9, 
	126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	9, 126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 47, 47, 
	47, 47, 10, 10, 9, 
	47, 0, 0, 10, 10, 
	9, 126, 10, 126, 9, 44, 
	9, 44, 9, 126, 9, 
	34, 9, 34, 10, 92, 
	10, 92, 34, 92, 9, 44, 
	9, 47, 10, 47, 10, 
	10, 10, 10, 9, 126, 
	9, 126, 10, 126, 10, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 126, 
	10, 126, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 34, 0, 0, 33, 
	126, 10, 10, 0, 0, 
	10, 126, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	94, 75, 26, 59, 59, 0, 114, 114, 
	26, 59, 59, 0, 94, 118, 32, 118, 
	114, 26, 59, 59, 36, 36, 118, 94, 
	36, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	118, 32, 118, 114, 26, 59, 59, 36, 
	36, 118, 94, 36, 118, 118, 118, 114, 
	114, 118, 0, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 39, 0, 1, 
	118, 117, 36, 36, 118, 26, 26, 83, 
	83, 59, 36, 39, 38, 1, 1, 118, 
	118, 117, 117, 118, 118, 114, 114, 118, 
	117, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 26, 0, 94, 1, 0, 
	117, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 955, 
	957, 1076, 1171, 1289, 1290, 1409, 1528, 1643, 
	1758, 1877, 1996, 2115, 2234, 2353, 2472, 2591, 
	2710, 2805, 2881, 2908, 2968, 3028, 3029, 3144, 
	3259, 3286, 3346, 3406, 3407, 3502, 3621, 3654, 
	3773, 3888, 3915, 3975, 4035, 4072, 4109, 4228, 
	4323, 4360, 4479, 4598, 4717, 4832, 4947, 5066, 
	5067, 5186, 5305, 5424, 5543, 5662, 5781, 5900, 
	5995, 6114, 6147, 6266, 6381, 6408, 6468, 6528, 
	6565, 6602, 6721, 6816, 6853, 6972, 7091, 7210, 
	7325, 7440, 7559, 7560, 7679, 7798, 7917, 8036, 
	8155, 8274, 8393, 8395, 8397, 8399, 8439, 8440, 
	8442, 8561, 8679, 8716, 8753, 8872, 8899, 8926, 
	9010, 9094, 9154, 9191, 9231, 9270, 9272, 9274, 
	9393, 9512, 9630, 9748, 9867, 9986, 10101, 10216, 
	10335, 10453, 10454, 10568, 10569, 10570, 10572, 10573, 
	10687, 10801, 10916, 11031, 11058, 11059, 11154, 11156, 
	11157, 11275, 11277
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 31, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	35, 27, 27, 27, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 37, 27, 
	27, 27, 27, 27, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 36, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 32, 27, 1, 27, 27, 
	27, 27, 1, 28, 27, 27, 27, 27, 
	27, 27, 38, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 1, 1, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 39, 31, 39, 39, 39, 39, 
	31, 40, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	31, 18, 25, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 25, 10, 11, 10, 10, 10, 10, 
	7, 28, 10, 10, 10, 10, 10, 10, 
	10, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 10, 10, 10, 10, 10, 
	10, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	26, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	7, 41, 42, 42, 42, 42, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	41, 27, 43, 27, 27, 27, 27, 7, 
	28, 44, 27, 27, 45, 27, 27, 27, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 27, 27, 27, 27, 27, 27, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 46, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 7, 
	47, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 47, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	48, 7, 7, 49, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 7, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 32, 32, 32, 32, 32, 
	32, 32, 32, 50, 32, 32, 51, 32, 
	32, 32, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 32, 32, 32, 
	32, 32, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 32, 32, 
	32, 52, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 33, 27, 32, 
	27, 27, 27, 27, 32, 28, 34, 27, 
	27, 35, 27, 27, 27, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 27, 
	27, 27, 27, 27, 27, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 53, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	54, 27, 27, 27, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 56, 27, 
	27, 27, 27, 27, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 55, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 32, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 10, 10, 10, 
	10, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 57, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 27, 32, 27, 27, 27, 
	27, 32, 28, 34, 27, 27, 54, 27, 
	27, 27, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 59, 27, 27, 27, 
	27, 27, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 58, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 32, 41, 42, 42, 42, 42, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 41, 27, 43, 27, 27, 27, 27, 
	7, 28, 44, 27, 27, 60, 27, 27, 
	27, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 27, 27, 27, 27, 27, 
	27, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	61, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	7, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 27, 32, 27, 27, 27, 27, 32, 
	28, 34, 27, 27, 54, 27, 27, 27, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 27, 27, 27, 27, 27, 27, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 62, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 32, 
	41, 42, 42, 42, 42, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 41, 
	27, 43, 27, 27, 27, 27, 7, 28, 
	44, 27, 27, 60, 27, 27, 27, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 27, 27, 27, 27, 27, 27, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 63, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 7, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 33, 27, 
	32, 27, 27, 27, 27, 32, 28, 34, 
	27, 27, 54, 27, 27, 27, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	27, 27, 27, 27, 27, 27, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 64, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 32, 66, 65, 
	66, 66, 66, 66, 65, 65, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 65, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 67, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 69, 69, 69, 69, 69, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	69, 68, 70, 68, 72, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 73, 71, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 76, 74, 74, 77, 78, 78, 
	78, 78, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 77, 7, 79, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 7, 7, 
	7, 7, 7, 7, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	7, 7, 7, 80, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	77, 78, 78, 78, 78, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 77, 
	7, 79, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 7, 7, 7, 7, 7, 7, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 7, 7, 7, 81, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 78, 78, 78, 78, 78, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 78, 14, 79, 14, 83, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	84, 82, 86, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 87, 85, 85, 88, 
	1, 88, 88, 88, 88, 1, 1, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 1, 89, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 89, 90, 1, 
	90, 90, 90, 90, 1, 91, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 1, 92, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 94, 95, 
	95, 95, 95, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 94, 96, 97, 
	96, 96, 96, 96, 7, 7, 96, 96, 
	96, 96, 96, 96, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	96, 96, 96, 96, 96, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 7, 94, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 94, 7, 97, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	95, 95, 95, 95, 95, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 95, 
	14, 97, 14, 101, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 102, 100, 104, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 105, 103, 106, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 106, 14, 14, 14, 14, 14, 
	14, 14, 14, 107, 14, 14, 108, 14, 
	109, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 110, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 96, 97, 96, 
	96, 96, 96, 7, 7, 96, 96, 96, 
	96, 96, 96, 96, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 96, 96, 
	96, 96, 96, 96, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 111, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 7, 112, 1, 112, 112, 
	112, 112, 1, 113, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 1, 109, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 109, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 110, 1, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	112, 32, 112, 112, 112, 112, 32, 113, 
	116, 112, 112, 117, 112, 112, 112, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 112, 112, 112, 112, 112, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 118, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 32, 110, 
	95, 95, 95, 95, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 96, 
	97, 96, 96, 96, 96, 7, 113, 96, 
	96, 96, 96, 96, 96, 96, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	96, 96, 96, 96, 96, 96, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 111, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 7, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 124, 112, 112, 112, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 112, 
	112, 112, 112, 112, 112, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 125, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 7, 126, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 126, 7, 97, 7, 
	7, 7, 7, 7, 7, 127, 7, 7, 
	128, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	129, 32, 32, 130, 32, 32, 32, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 32, 32, 32, 32, 32, 32, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 32, 32, 32, 131, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 117, 112, 
	112, 112, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 112, 112, 112, 112, 
	112, 112, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 132, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 32, 103, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 133, 112, 
	112, 112, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 135, 112, 112, 112, 
	112, 112, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 134, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 32, 110, 95, 95, 95, 95, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 110, 96, 97, 96, 96, 96, 96, 
	7, 113, 96, 96, 96, 96, 96, 96, 
	96, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 96, 96, 96, 96, 96, 
	96, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	136, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	7, 115, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	115, 112, 32, 112, 112, 112, 112, 32, 
	113, 116, 112, 112, 133, 112, 112, 112, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 138, 112, 112, 112, 112, 112, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 137, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 32, 
	120, 121, 121, 121, 121, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 120, 
	112, 122, 112, 112, 112, 112, 7, 113, 
	123, 112, 112, 139, 112, 112, 112, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 112, 112, 112, 112, 112, 112, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 140, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 7, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 115, 112, 
	32, 112, 112, 112, 112, 32, 113, 116, 
	112, 112, 133, 112, 112, 112, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	112, 112, 112, 112, 112, 112, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 141, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 32, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 139, 112, 112, 112, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 112, 
	112, 112, 112, 112, 112, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 142, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 7, 115, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 115, 112, 32, 112, 
	112, 112, 112, 32, 113, 116, 112, 112, 
	133, 112, 112, 112, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 112, 112, 
	112, 112, 112, 112, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 143, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 32, 144, 1, 144, 144, 
	144, 144, 1, 1, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 1, 145, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 145, 146, 1, 146, 146, 146, 
	146, 1, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 1, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 149, 1, 150, 151, 151, 151, 151, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 150, 152, 153, 152, 152, 152, 
	152, 7, 7, 152, 152, 152, 152, 152, 
	152, 152, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 152, 152, 152, 152, 
	152, 152, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 154, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 7, 150, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 151, 151, 151, 
	151, 151, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 151, 14, 153, 14, 
	157, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 158, 156, 160, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 161, 159, 
	162, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 162, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	163, 14, 14, 164, 14, 165, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 165, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	166, 1, 166, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 166, 152, 153, 152, 152, 152, 152, 
	7, 7, 152, 152, 152, 152, 152, 152, 
	152, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 152, 152, 152, 152, 152, 
	152, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	167, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	7, 168, 1, 168, 168, 168, 168, 1, 
	169, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 1, 
	165, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 165, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	170, 1, 1, 166, 1, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 168, 32, 168, 
	168, 168, 168, 32, 169, 172, 168, 168, 
	173, 168, 168, 168, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 175, 168, 
	168, 168, 168, 168, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 174, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 32, 166, 151, 151, 151, 
	151, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 166, 152, 153, 152, 152, 
	152, 152, 7, 169, 152, 152, 152, 152, 
	152, 152, 152, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 152, 152, 152, 
	152, 152, 152, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 167, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 7, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 180, 168, 
	168, 168, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 168, 168, 168, 168, 
	168, 168, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 181, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 7, 182, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 182, 7, 153, 7, 7, 7, 7, 
	7, 7, 183, 7, 7, 184, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 185, 32, 32, 
	186, 32, 32, 32, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 32, 32, 
	32, 32, 32, 32, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	32, 32, 32, 187, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 173, 168, 168, 168, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 168, 168, 168, 168, 168, 168, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 188, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 32, 159, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 189, 168, 168, 168, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 191, 168, 168, 168, 168, 168, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 190, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 32, 166, 
	151, 151, 151, 151, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 166, 152, 
	153, 152, 152, 152, 152, 7, 169, 152, 
	152, 152, 152, 152, 152, 152, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	152, 152, 152, 152, 152, 152, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 192, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 7, 171, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 171, 168, 32, 
	168, 168, 168, 168, 32, 169, 172, 168, 
	168, 189, 168, 168, 168, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 194, 
	168, 168, 168, 168, 168, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 193, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 32, 176, 177, 177, 
	177, 177, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 176, 168, 178, 168, 
	168, 168, 168, 7, 169, 179, 168, 168, 
	195, 168, 168, 168, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 168, 168, 
	168, 168, 168, 168, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 196, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 7, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 171, 168, 32, 168, 168, 
	168, 168, 32, 169, 172, 168, 168, 189, 
	168, 168, 168, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 168, 168, 168, 
	168, 168, 168, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 197, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 32, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 195, 168, 
	168, 168, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 168, 168, 168, 168, 
	168, 168, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 198, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 7, 171, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 171, 168, 32, 168, 168, 168, 168, 
	32, 169, 172, 168, 168, 189, 168, 168, 
	168, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 168, 168, 168, 168, 168, 
	168, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	199, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	32, 200, 1, 201, 1, 1, 202, 29, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 204, 1, 1, 
	206, 205, 29, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 29, 27, 1, 27, 27, 27, 27, 
	1, 28, 27, 27, 27, 27, 27, 27, 
	207, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	1, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 205, 210, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 210, 205, 
	205, 205, 205, 205, 205, 205, 205, 211, 
	205, 205, 212, 205, 210, 206, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 210, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 212, 
	205, 212, 213, 214, 214, 214, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	212, 215, 216, 215, 215, 215, 215, 205, 
	205, 215, 215, 215, 215, 215, 215, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 215, 215, 215, 215, 215, 215, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 217, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 205, 
	9, 9, 9, 9, 9, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 9, 
	14, 11, 14, 214, 213, 214, 214, 214, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 214, 205, 216, 205, 219, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	221, 218, 223, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 224, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 225, 222, 19, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	20, 18, 226, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 226, 205, 205, 205, 205, 205, 205, 
	205, 205, 227, 205, 205, 228, 205, 211, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 211, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 229, 205, 206, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 230, 205, 206, 31, 
	223, 222, 231, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 231, 208, 205, 208, 208, 208, 208, 
	205, 209, 232, 208, 208, 233, 208, 208, 
	208, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 235, 208, 208, 208, 208, 
	208, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	234, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	205, 211, 206, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	211, 208, 205, 208, 208, 208, 208, 205, 
	209, 208, 208, 208, 208, 208, 208, 236, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 205, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 208, 
	205, 208, 208, 208, 208, 205, 209, 208, 
	208, 208, 208, 208, 208, 237, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 205, 206, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 39, 31, 39, 
	39, 39, 39, 31, 40, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 31, 212, 213, 214, 214, 
	214, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 212, 215, 216, 215, 215, 
	215, 215, 205, 209, 215, 215, 215, 215, 
	215, 215, 215, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 215, 215, 215, 
	215, 215, 215, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 217, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 205, 238, 239, 240, 240, 240, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 238, 208, 241, 208, 208, 208, 
	208, 205, 209, 242, 208, 208, 243, 208, 
	208, 208, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 208, 208, 208, 208, 
	208, 208, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 244, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 205, 245, 213, 214, 214, 214, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 245, 205, 216, 205, 205, 205, 205, 
	205, 205, 246, 205, 205, 247, 205, 205, 
	205, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 205, 205, 205, 205, 205, 
	205, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 205, 205, 205, 
	248, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 231, 206, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 231, 205, 205, 205, 
	205, 205, 205, 205, 205, 249, 205, 205, 
	250, 205, 205, 205, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 205, 205, 
	205, 205, 205, 205, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	205, 205, 205, 251, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	231, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 231, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	232, 208, 208, 233, 208, 208, 208, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 208, 208, 208, 208, 208, 208, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 252, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 205, 253, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 254, 65, 
	254, 254, 254, 254, 65, 65, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 65, 1, 256, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 255, 255, 
	255, 255, 255, 255, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 255, 255, 257, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 68, 258, 14, 1, 259, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 32, 32, 32, 
	32, 32, 32, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 32, 
	32, 32, 260, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 259, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 262, 
	32, 32, 32, 32, 32, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 32, 32, 32, 261, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 263, 264, 265, 265, 265, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	263, 7, 266, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 7, 7, 7, 7, 7, 7, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 7, 7, 7, 267, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 268, 269, 78, 78, 
	78, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 268, 7, 79, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 7, 7, 7, 
	7, 7, 7, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 7, 
	7, 7, 81, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 78, 
	78, 78, 78, 78, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 78, 14, 
	79, 14, 1, 112, 1, 112, 112, 112, 
	112, 1, 113, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 1, 270, 1, 1, 270, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 168, 1, 168, 168, 
	168, 168, 1, 169, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 1, 272, 271, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 25, 23, 0, 8, 
	9, 19, 8, 9, 19, 10, 101, 11, 
	10, 11, 16, 12, 13, 101, 15, 103, 
	0, 10, 104, 20, 16, 21, 18, 105, 
	106, 22, 6, 7, 104, 20, 24, 22, 
	101, 11, 101, 11, 23, 24, 26, 25, 
	30, 27, 27, 28, 26, 29, 29, 31, 
	31, 0, 128, 130, 0, 34, 35, 36, 
	132, 37, 36, 132, 37, 39, 40, 41, 
	136, 135, 42, 133, 43, 42, 133, 43, 
	45, 46, 45, 47, 46, 47, 48, 49, 
	55, 50, 64, 61, 51, 52, 63, 51, 
	52, 63, 53, 140, 54, 53, 54, 57, 
	55, 56, 140, 53, 141, 58, 57, 59, 
	60, 49, 50, 141, 58, 62, 60, 140, 
	54, 140, 54, 61, 62, 65, 64, 69, 
	66, 66, 67, 65, 68, 68, 70, 70, 
	72, 73, 72, 74, 73, 74, 75, 76, 
	82, 77, 91, 88, 78, 79, 90, 78, 
	79, 90, 80, 142, 81, 80, 81, 84, 
	82, 83, 142, 80, 144, 85, 84, 86, 
	87, 76, 77, 144, 85, 89, 87, 142, 
	81, 142, 81, 88, 89, 92, 91, 96, 
	93, 93, 94, 92, 95, 95, 97, 97, 
	99, 100, 145, 102, 14, 103, 102, 17, 
	105, 106, 107, 115, 108, 109, 110, 105, 
	111, 119, 112, 113, 114, 118, 112, 113, 
	114, 118, 107, 115, 108, 116, 117, 107, 
	120, 123, 119, 124, 121, 122, 125, 109, 
	110, 111, 120, 123, 127, 125, 115, 108, 
	126, 115, 108, 126, 127, 129, 128, 0, 
	131, 130, 134, 134, 135, 136, 137, 138, 
	139, 40, 41, 135, 138, 139, 143, 145, 
	146
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 0, 21, 
	23, 24, 24, 24, 0, 25, 0, 21, 
	26, 28, 29, 29, 28, 28, 30, 32, 
	32, 32, 24, 24, 0, 0, 24, 0, 
	25, 9, 0, 25, 28, 30, 0, 30, 
	0, 37, 8, 11, 39, 0, 0, 15, 
	41, 15, 0, 42, 0, 0, 0, 0, 
	11, 11, 15, 16, 15, 0, 17, 0, 
	46, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 51, 19, 0, 0, 9, 
	0, 20, 52, 24, 54, 24, 0, 25, 
	28, 29, 29, 56, 28, 30, 32, 58, 
	32, 54, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	2, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 19, 19, 0, 0, 9, 
	0, 20, 0, 24, 24, 24, 0, 25, 
	28, 29, 29, 28, 28, 30, 32, 32, 
	32, 24, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	0, 0, 21, 63, 0, 0, 64, 0, 
	0, 20, 0, 0, 0, 64, 0, 8, 
	0, 9, 15, 71, 16, 15, 0, 64, 
	17, 0, 19, 19, 19, 0, 0, 24, 
	24, 24, 0, 25, 0, 0, 28, 75, 
	29, 29, 28, 28, 30, 32, 32, 32, 
	11, 24, 24, 0, 0, 3, 0, 80, 
	25, 0, 82, 84, 0, 0, 25, 29, 
	87, 29, 29, 30, 0, 89, 91, 0, 
	93
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	22, 1, 1, 14, 6, 27, 31, 33, 
	22, 22, 34, 35, 36, 35, 27, 22, 
	37, 0, 38, 40, 40, 40, 43, 43, 
	44, 45, 45, 45, 1, 1, 0, 47, 
	48, 49, 50, 50, 13, 0, 47, 1, 
	0, 53, 47, 55, 57, 59, 53, 50, 
	53, 60, 61, 62, 61, 55, 53, 1, 
	1, 0, 6, 10, 12, 14, 14, 18, 
	0, 6, 1, 0, 22, 6, 27, 31, 
	33, 22, 14, 22, 34, 35, 36, 35, 
	27, 22, 0, 0, 0, 63, 0, 64, 
	65, 66, 64, 64, 67, 68, 69, 70, 
	70, 72, 73, 64, 64, 64, 70, 74, 
	66, 66, 66, 67, 74, 76, 76, 74, 
	77, 78, 79, 81, 0, 82, 0, 83, 
	85, 86, 88, 90, 0, 1, 91, 0, 
	92, 93, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 101;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 32;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 33;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 34;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 44;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 98;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 80 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 39 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 52 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 21 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 89 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 46 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 42 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 87 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 28 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 84 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 41 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 71 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 51 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 75 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 54 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 78 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 81 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 90 then
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 77 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 79 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 38 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 68 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 61 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 92 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 88 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 40 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 72 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 62 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 48 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 31 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 86 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 60 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 85 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 47 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 76 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 69 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 34 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 74 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 70 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 67 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'
require_relative '../tracer'

module BELParser
  module Parsers
    module Expression
      module ObservedTerm

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp
          include BELParser::Parsers::Tracer

          def initialize(content)
            @content = content
      # begin: ragel
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	33, 126, 48, 122, 9, 34, 
	34, 92, 34, 92, 0, 
	0, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	0, 0, 33, 126, 9, 
	126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	9, 126, 9, 40, 9, 126, 
	9, 122, 9, 34, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 126, 33, 126, 
	9, 44, 9, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 47, 47, 
	47, 47, 10, 10, 9, 
	47, 0, 0, 10, 10, 
	9, 126, 10, 126, 9, 44, 
	9, 44, 9, 126, 9, 
	34, 9, 34, 10, 92, 
	10, 92, 34, 92, 9, 44, 
	9, 47, 10, 47, 10, 
	10, 10, 10, 9, 126, 
	9, 126, 10, 126, 10, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 126, 
	10, 126, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 34, 0, 0, 33, 
	126, 10, 10, 0, 0, 
	10, 126, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	94, 75, 26, 59, 59, 0, 114, 114, 
	26, 59, 59, 0, 94, 118, 32, 118, 
	114, 26, 59, 59, 36, 36, 118, 94, 
	36, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	118, 32, 118, 114, 26, 59, 59, 36, 
	36, 118, 94, 36, 118, 118, 118, 114, 
	114, 118, 0, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 39, 0, 1, 
	118, 117, 36, 36, 118, 26, 26, 83, 
	83, 59, 36, 39, 38, 1, 1, 118, 
	118, 117, 117, 118, 118, 114, 114, 118, 
	117, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 26, 0, 94, 1, 0, 
	117, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 955, 
	957, 1076, 1171, 1289, 1290, 1409, 1528, 1643, 
	1758, 1877, 1996, 2115, 2234, 2353, 2472, 2591, 
	2710, 2805, 2881, 2908, 2968, 3028, 3029, 3144, 
	3259, 3286, 3346, 3406, 3407, 3502, 3621, 3654, 
	3773, 3888, 3915, 3975, 4035, 4072, 4109, 4228, 
	4323, 4360, 4479, 4598, 4717, 4832, 4947, 5066, 
	5067, 5186, 5305, 5424, 5543, 5662, 5781, 5900, 
	5995, 6114, 6147, 6266, 6381, 6408, 6468, 6528, 
	6565, 6602, 6721, 6816, 6853, 6972, 7091, 7210, 
	7325, 7440, 7559, 7560, 7679, 7798, 7917, 8036, 
	8155, 8274, 8393, 8395, 8397, 8399, 8439, 8440, 
	8442, 8561, 8679, 8716, 8753, 8872, 8899, 8926, 
	9010, 9094, 9154, 9191, 9231, 9270, 9272, 9274, 
	9393, 9512, 9630, 9748, 9867, 9986, 10101, 10216, 
	10335, 10453, 10454, 10568, 10569, 10570, 10572, 10573, 
	10687, 10801, 10916, 11031, 11058, 11059, 11154, 11156, 
	11157, 11275, 11277
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 31, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	35, 27, 27, 27, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 37, 27, 
	27, 27, 27, 27, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 36, 27, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 27, 
	27, 27, 27, 32, 27, 1, 27, 27, 
	27, 27, 1, 28, 27, 27, 27, 27, 
	27, 27, 38, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 1, 1, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 39, 31, 39, 39, 39, 39, 
	31, 40, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	31, 18, 25, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 25, 10, 11, 10, 10, 10, 10, 
	7, 28, 10, 10, 10, 10, 10, 10, 
	10, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 10, 10, 10, 10, 10, 
	10, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	26, 10, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 10, 10, 10, 10, 
	7, 41, 42, 42, 42, 42, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	41, 27, 43, 27, 27, 27, 27, 7, 
	28, 44, 27, 27, 45, 27, 27, 27, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 27, 27, 27, 27, 27, 27, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 46, 
	27, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 27, 27, 27, 27, 7, 
	47, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 47, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	48, 7, 7, 49, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 7, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 32, 32, 32, 32, 32, 
	32, 32, 32, 50, 32, 32, 51, 32, 
	32, 32, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 32, 32, 32, 32, 
	32, 32, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 32, 32, 
	32, 52, 32, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 32, 33, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 33, 27, 32, 
	27, 27, 27, 27, 32, 28, 34, 27, 
	27, 35, 27, 27, 27, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 27, 
	27, 27, 27, 27, 27, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 53, 27, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	27, 27, 27, 27, 32, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 27, 32, 27, 
	27, 27, 27, 32, 28, 34, 27, 27, 
	54, 27, 27, 27, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 56, 27, 
	27, 27, 27, 27, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 55, 27, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 27, 
	27, 27, 27, 32, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 10, 10, 10, 
	10, 10, 10, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 57, 10, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 10, 10, 
	10, 10, 7, 33, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 33, 27, 32, 27, 27, 27, 
	27, 32, 28, 34, 27, 27, 54, 27, 
	27, 27, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 59, 27, 27, 27, 
	27, 27, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 58, 27, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 27, 27, 27, 
	27, 32, 41, 42, 42, 42, 42, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 41, 27, 43, 27, 27, 27, 27, 
	7, 28, 44, 27, 27, 60, 27, 27, 
	27, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 27, 27, 27, 27, 27, 
	27, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	61, 27, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 27, 27, 27, 27, 
	7, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 27, 32, 27, 27, 27, 27, 32, 
	28, 34, 27, 27, 54, 27, 27, 27, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 27, 27, 27, 27, 27, 27, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 62, 
	27, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 27, 27, 27, 27, 32, 
	41, 42, 42, 42, 42, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 41, 
	27, 43, 27, 27, 27, 27, 7, 28, 
	44, 27, 27, 60, 27, 27, 27, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 27, 27, 27, 27, 27, 27, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 63, 27, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 27, 27, 27, 27, 7, 33, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 33, 27, 
	32, 27, 27, 27, 27, 32, 28, 34, 
	27, 27, 54, 27, 27, 27, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	27, 27, 27, 27, 27, 27, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 64, 27, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 27, 27, 27, 27, 32, 66, 65, 
	66, 66, 66, 66, 65, 65, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 66, 66, 66, 66, 
	66, 66, 66, 66, 65, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 1, 
	1, 1, 1, 1, 1, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 1, 1, 1, 67, 1, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	1, 69, 69, 69, 69, 69, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	69, 68, 70, 68, 72, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 73, 71, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 76, 74, 74, 77, 78, 78, 
	78, 78, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 77, 7, 79, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 7, 7, 
	7, 7, 7, 7, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	7, 7, 7, 80, 7, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 7, 
	77, 78, 78, 78, 78, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 77, 
	7, 79, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 7, 7, 7, 7, 7, 7, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 7, 7, 7, 81, 7, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 7, 78, 78, 78, 78, 78, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 78, 14, 79, 14, 83, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	84, 82, 86, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 87, 85, 85, 88, 
	1, 88, 88, 88, 88, 1, 1, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 1, 89, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 89, 90, 1, 
	90, 90, 90, 90, 1, 91, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 1, 92, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 92, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 94, 95, 
	95, 95, 95, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 94, 96, 97, 
	96, 96, 96, 96, 7, 7, 96, 96, 
	96, 96, 96, 96, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	96, 96, 96, 96, 96, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 96, 96, 96, 7, 94, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 94, 7, 97, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	95, 95, 95, 95, 95, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 95, 
	14, 97, 14, 101, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 102, 100, 104, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 105, 103, 106, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 106, 14, 14, 14, 14, 14, 
	14, 14, 14, 107, 14, 14, 108, 14, 
	109, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 110, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 96, 97, 96, 
	96, 96, 96, 7, 7, 96, 96, 96, 
	96, 96, 96, 96, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 96, 96, 
	96, 96, 96, 96, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 111, 96, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 96, 
	96, 96, 96, 7, 112, 1, 112, 112, 
	112, 112, 1, 113, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 1, 109, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 109, 1, 1, 1, 1, 1, 
	1, 1, 1, 114, 1, 1, 110, 1, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	112, 32, 112, 112, 112, 112, 32, 113, 
	116, 112, 112, 117, 112, 112, 112, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 119, 112, 112, 112, 112, 112, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 118, 112, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 112, 112, 112, 112, 32, 110, 
	95, 95, 95, 95, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 110, 96, 
	97, 96, 96, 96, 96, 7, 113, 96, 
	96, 96, 96, 96, 96, 96, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	96, 96, 96, 96, 96, 96, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 111, 96, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 96, 96, 96, 96, 7, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 124, 112, 112, 112, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 112, 
	112, 112, 112, 112, 112, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 125, 112, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	112, 112, 112, 112, 7, 126, 95, 95, 
	95, 95, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 126, 7, 97, 7, 
	7, 7, 7, 7, 7, 127, 7, 7, 
	128, 7, 7, 7, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 7, 7, 
	7, 7, 7, 7, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	7, 7, 7, 99, 7, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 7, 
	115, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	129, 32, 32, 130, 32, 32, 32, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 32, 32, 32, 32, 32, 32, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 32, 32, 32, 131, 32, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 32, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 117, 112, 
	112, 112, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 112, 112, 112, 112, 
	112, 112, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 132, 112, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 112, 112, 112, 
	112, 32, 103, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 115, 112, 32, 112, 112, 112, 
	112, 32, 113, 116, 112, 112, 133, 112, 
	112, 112, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 135, 112, 112, 112, 
	112, 112, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 134, 112, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 112, 112, 112, 
	112, 32, 110, 95, 95, 95, 95, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 110, 96, 97, 96, 96, 96, 96, 
	7, 113, 96, 96, 96, 96, 96, 96, 
	96, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 96, 96, 96, 96, 96, 
	96, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	136, 96, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 96, 96, 96, 96, 
	7, 115, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	115, 112, 32, 112, 112, 112, 112, 32, 
	113, 116, 112, 112, 133, 112, 112, 112, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 138, 112, 112, 112, 112, 112, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 137, 
	112, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 112, 112, 112, 112, 32, 
	120, 121, 121, 121, 121, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 120, 
	112, 122, 112, 112, 112, 112, 7, 113, 
	123, 112, 112, 139, 112, 112, 112, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 112, 112, 112, 112, 112, 112, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 140, 112, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 112, 112, 112, 112, 7, 115, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 115, 112, 
	32, 112, 112, 112, 112, 32, 113, 116, 
	112, 112, 133, 112, 112, 112, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	112, 112, 112, 112, 112, 112, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 141, 112, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 112, 112, 112, 112, 32, 120, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 120, 112, 122, 
	112, 112, 112, 112, 7, 113, 123, 112, 
	112, 139, 112, 112, 112, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 112, 
	112, 112, 112, 112, 112, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 142, 112, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	112, 112, 112, 112, 7, 115, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 115, 112, 32, 112, 
	112, 112, 112, 32, 113, 116, 112, 112, 
	133, 112, 112, 112, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 112, 112, 
	112, 112, 112, 112, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 143, 112, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 112, 
	112, 112, 112, 32, 144, 1, 144, 144, 
	144, 144, 1, 1, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 1, 145, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 145, 146, 1, 146, 146, 146, 
	146, 1, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 1, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 149, 1, 150, 151, 151, 151, 151, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 150, 152, 153, 152, 152, 152, 
	152, 7, 7, 152, 152, 152, 152, 152, 
	152, 152, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 152, 152, 152, 152, 
	152, 152, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 154, 152, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 152, 152, 152, 
	152, 7, 150, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 153, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 151, 151, 151, 
	151, 151, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 151, 14, 153, 14, 
	157, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 158, 156, 160, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 161, 159, 
	162, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 162, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	163, 14, 14, 164, 14, 165, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 165, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	166, 1, 166, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 166, 152, 153, 152, 152, 152, 152, 
	7, 7, 152, 152, 152, 152, 152, 152, 
	152, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 152, 152, 152, 152, 152, 
	152, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	167, 152, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 152, 152, 152, 152, 
	7, 168, 1, 168, 168, 168, 168, 1, 
	169, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 1, 
	165, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 165, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	170, 1, 1, 166, 1, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 168, 32, 168, 
	168, 168, 168, 32, 169, 172, 168, 168, 
	173, 168, 168, 168, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 175, 168, 
	168, 168, 168, 168, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 174, 168, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 168, 
	168, 168, 168, 32, 166, 151, 151, 151, 
	151, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 166, 152, 153, 152, 152, 
	152, 152, 7, 169, 152, 152, 152, 152, 
	152, 152, 152, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 152, 152, 152, 
	152, 152, 152, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 167, 152, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 152, 152, 
	152, 152, 7, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 180, 168, 
	168, 168, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 168, 168, 168, 168, 
	168, 168, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 181, 168, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 168, 168, 168, 
	168, 7, 182, 151, 151, 151, 151, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 182, 7, 153, 7, 7, 7, 7, 
	7, 7, 183, 7, 7, 184, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 7, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 171, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 185, 32, 32, 
	186, 32, 32, 32, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 32, 32, 
	32, 32, 32, 32, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	32, 32, 32, 187, 32, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 32, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 173, 168, 168, 168, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 168, 168, 168, 168, 168, 168, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 188, 168, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 168, 168, 168, 168, 32, 159, 
	171, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 171, 
	168, 32, 168, 168, 168, 168, 32, 169, 
	172, 168, 168, 189, 168, 168, 168, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 191, 168, 168, 168, 168, 168, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 190, 168, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 168, 168, 168, 168, 32, 166, 
	151, 151, 151, 151, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 166, 152, 
	153, 152, 152, 152, 152, 7, 169, 152, 
	152, 152, 152, 152, 152, 152, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	152, 152, 152, 152, 152, 152, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 192, 152, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 152, 152, 152, 152, 7, 171, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 171, 168, 32, 
	168, 168, 168, 168, 32, 169, 172, 168, 
	168, 189, 168, 168, 168, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 194, 
	168, 168, 168, 168, 168, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 193, 168, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	168, 168, 168, 168, 32, 176, 177, 177, 
	177, 177, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 176, 168, 178, 168, 
	168, 168, 168, 7, 169, 179, 168, 168, 
	195, 168, 168, 168, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 168, 168, 
	168, 168, 168, 168, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 196, 168, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 168, 
	168, 168, 168, 7, 171, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 171, 168, 32, 168, 168, 
	168, 168, 32, 169, 172, 168, 168, 189, 
	168, 168, 168, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 168, 168, 168, 
	168, 168, 168, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 197, 168, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 168, 168, 
	168, 168, 32, 176, 177, 177, 177, 177, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 176, 168, 178, 168, 168, 168, 
	168, 7, 169, 179, 168, 168, 195, 168, 
	168, 168, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 168, 168, 168, 168, 
	168, 168, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 198, 168, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 168, 168, 168, 
	168, 7, 171, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 171, 168, 32, 168, 168, 168, 168, 
	32, 169, 172, 168, 168, 189, 168, 168, 
	168, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 168, 168, 168, 168, 168, 
	168, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	199, 168, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 168, 168, 168, 168, 
	32, 200, 1, 201, 1, 1, 202, 29, 
	203, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 29, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 204, 1, 1, 
	206, 205, 29, 203, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 29, 27, 1, 27, 27, 27, 27, 
	1, 28, 27, 27, 27, 27, 27, 27, 
	207, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	1, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 205, 210, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 210, 205, 
	205, 205, 205, 205, 205, 205, 205, 211, 
	205, 205, 212, 205, 210, 206, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 210, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 212, 
	205, 212, 213, 214, 214, 214, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	212, 215, 216, 215, 215, 215, 215, 205, 
	205, 215, 215, 215, 215, 215, 215, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 215, 215, 215, 215, 215, 215, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 217, 
	215, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 215, 215, 215, 215, 205, 
	9, 9, 9, 9, 9, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 9, 
	14, 11, 14, 214, 213, 214, 214, 214, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 214, 205, 216, 205, 219, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 220, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	221, 218, 223, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 224, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 225, 222, 19, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	20, 18, 226, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 226, 205, 205, 205, 205, 205, 205, 
	205, 205, 227, 205, 205, 228, 205, 211, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 211, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 229, 205, 206, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 230, 205, 206, 31, 
	223, 222, 231, 206, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 231, 208, 205, 208, 208, 208, 208, 
	205, 209, 232, 208, 208, 233, 208, 208, 
	208, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 235, 208, 208, 208, 208, 
	208, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	234, 208, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 208, 208, 208, 208, 
	205, 211, 206, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	211, 208, 205, 208, 208, 208, 208, 205, 
	209, 208, 208, 208, 208, 208, 208, 236, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 205, 
	206, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 208, 
	205, 208, 208, 208, 208, 205, 209, 208, 
	208, 208, 208, 208, 208, 237, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 205, 206, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 39, 31, 39, 
	39, 39, 39, 31, 40, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 31, 212, 213, 214, 214, 
	214, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 212, 215, 216, 215, 215, 
	215, 215, 205, 209, 215, 215, 215, 215, 
	215, 215, 215, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 215, 215, 215, 
	215, 215, 215, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 217, 215, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 215, 215, 
	215, 215, 205, 238, 239, 240, 240, 240, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 238, 208, 241, 208, 208, 208, 
	208, 205, 209, 242, 208, 208, 243, 208, 
	208, 208, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 208, 208, 208, 208, 
	208, 208, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 244, 208, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 208, 208, 208, 
	208, 205, 245, 213, 214, 214, 214, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 245, 205, 216, 205, 205, 205, 205, 
	205, 205, 246, 205, 205, 247, 205, 205, 
	205, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 205, 205, 205, 205, 205, 
	205, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 205, 205, 205, 
	248, 205, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 205, 231, 206, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 231, 205, 205, 205, 
	205, 205, 205, 205, 205, 249, 205, 205, 
	250, 205, 205, 205, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 205, 205, 
	205, 205, 205, 205, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	205, 205, 205, 251, 205, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 205, 
	231, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 231, 
	208, 205, 208, 208, 208, 208, 205, 209, 
	232, 208, 208, 233, 208, 208, 208, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 208, 208, 208, 208, 208, 208, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 252, 208, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 208, 208, 208, 208, 205, 253, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 254, 65, 
	254, 254, 254, 254, 65, 65, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 65, 1, 256, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 255, 255, 
	255, 255, 255, 255, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 255, 255, 257, 255, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 255, 
	255, 68, 258, 14, 1, 259, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 32, 32, 32, 
	32, 32, 32, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 32, 
	32, 32, 260, 32, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 32, 259, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 262, 
	32, 32, 32, 32, 32, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 32, 32, 32, 261, 32, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	32, 263, 264, 265, 265, 265, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	263, 7, 266, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 7, 7, 7, 7, 7, 7, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 7, 7, 7, 267, 
	7, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 7, 268, 269, 78, 78, 
	78, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 268, 7, 79, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 7, 7, 7, 
	7, 7, 7, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 7, 
	7, 7, 81, 7, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 7, 78, 
	78, 78, 78, 78, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 78, 14, 
	79, 14, 1, 112, 1, 112, 112, 112, 
	112, 1, 113, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 1, 270, 1, 1, 270, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 168, 1, 168, 168, 
	168, 168, 1, 169, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 1, 272, 271, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 25, 23, 0, 8, 
	9, 19, 8, 9, 19, 10, 101, 11, 
	10, 11, 16, 12, 13, 101, 15, 103, 
	0, 10, 104, 20, 16, 21, 18, 105, 
	106, 22, 6, 7, 104, 20, 24, 22, 
	101, 11, 101, 11, 23, 24, 26, 25, 
	30, 27, 27, 28, 26, 29, 29, 31, 
	31, 0, 128, 130, 0, 34, 35, 36, 
	132, 37, 36, 132, 37, 39, 40, 41, 
	136, 135, 42, 133, 43, 42, 133, 43, 
	45, 46, 45, 47, 46, 47, 48, 49, 
	55, 50, 64, 61, 51, 52, 63, 51, 
	52, 63, 53, 140, 54, 53, 54, 57, 
	55, 56, 140, 53, 141, 58, 57, 59, 
	60, 49, 50, 141, 58, 62, 60, 140, 
	54, 140, 54, 61, 62, 65, 64, 69, 
	66, 66, 67, 65, 68, 68, 70, 70, 
	72, 73, 72, 74, 73, 74, 75, 76, 
	82, 77, 91, 88, 78, 79, 90, 78, 
	79, 90, 80, 142, 81, 80, 81, 84, 
	82, 83, 142, 80, 144, 85, 84, 86, 
	87, 76, 77, 144, 85, 89, 87, 142, 
	81, 142, 81, 88, 89, 92, 91, 96, 
	93, 93, 94, 92, 95, 95, 97, 97, 
	99, 100, 145, 102, 14, 103, 102, 17, 
	105, 106, 107, 115, 108, 109, 110, 105, 
	111, 119, 112, 113, 114, 118, 112, 113, 
	114, 118, 107, 115, 108, 116, 117, 107, 
	120, 123, 119, 124, 121, 122, 125, 109, 
	110, 111, 120, 123, 127, 125, 115, 108, 
	126, 115, 108, 126, 127, 129, 128, 0, 
	131, 130, 134, 134, 135, 136, 137, 138, 
	139, 40, 41, 135, 138, 139, 143, 145, 
	146
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 0, 21, 
	23, 24, 24, 24, 0, 25, 0, 21, 
	26, 28, 29, 29, 28, 28, 30, 32, 
	32, 32, 24, 24, 0, 0, 24, 0, 
	25, 9, 0, 25, 28, 30, 0, 30, 
	0, 37, 8, 11, 39, 0, 0, 15, 
	41, 15, 0, 42, 0, 0, 0, 0, 
	11, 11, 15, 16, 15, 0, 17, 0, 
	46, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 51, 19, 0, 0, 9, 
	0, 20, 52, 24, 54, 24, 0, 25, 
	28, 29, 29, 56, 28, 30, 32, 58, 
	32, 54, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	2, 3, 0, 4, 0, 5, 0, 0, 
	8, 0, 9, 11, 15, 16, 15, 0, 
	17, 0, 19, 19, 19, 0, 0, 9, 
	0, 20, 0, 24, 24, 24, 0, 25, 
	28, 29, 29, 28, 28, 30, 32, 32, 
	32, 24, 24, 0, 0, 24, 0, 25, 
	9, 0, 25, 28, 30, 0, 30, 0, 
	0, 0, 21, 63, 0, 0, 64, 0, 
	0, 20, 0, 0, 0, 64, 0, 8, 
	0, 9, 15, 71, 16, 15, 0, 64, 
	17, 0, 19, 19, 19, 0, 0, 24, 
	24, 24, 0, 25, 0, 0, 28, 75, 
	29, 29, 28, 28, 30, 32, 32, 32, 
	11, 24, 24, 0, 0, 3, 0, 80, 
	25, 0, 82, 84, 0, 0, 25, 29, 
	87, 29, 29, 30, 0, 89, 91, 0, 
	93
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	22, 1, 1, 14, 6, 27, 31, 33, 
	22, 22, 34, 35, 36, 35, 27, 22, 
	37, 0, 38, 40, 40, 40, 43, 43, 
	44, 45, 45, 45, 1, 1, 0, 47, 
	48, 49, 50, 50, 13, 0, 47, 1, 
	0, 53, 47, 55, 57, 59, 53, 50, 
	53, 60, 61, 62, 61, 55, 53, 1, 
	1, 0, 6, 10, 12, 14, 14, 18, 
	0, 6, 1, 0, 22, 6, 27, 31, 
	33, 22, 14, 22, 34, 35, 36, 35, 
	27, 22, 0, 0, 0, 63, 0, 64, 
	65, 66, 64, 64, 67, 68, 69, 70, 
	70, 72, 73, 64, 64, 64, 70, 74, 
	66, 66, 66, 67, 74, 76, 76, 74, 
	77, 78, 79, 81, 0, 82, 0, 83, 
	85, 86, 88, 90, 0, 1, 91, 0, 
	92, 93, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 101;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 32;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 33;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 34;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 38;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 44;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 98;
class << self
	attr_accessor :bel_en_observed_term
end
self.bel_en_observed_term = 1;


      # end: ragel
          end

          def each
            @buffers    = {}
            @incomplete = {}
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 80 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 39 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 52 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 21 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 89 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 46 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 26 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 44
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 42 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 87 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 28 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 84 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 41 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 71 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 51 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 56 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 75 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 54 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 37 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: false, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 78 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 81 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 90 then
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 63 then
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 77 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
    fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 79 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 38 then
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 68 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 61 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
	when 92 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 88 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 40 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING string_node_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    yield ast_node
  		end
		begin

    trace('STRING string_node_eof')
    yield @buffers[:string]
  		end
	when 72 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 82 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete, character_range: string_node.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 64 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 62 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 48 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER parameter_node_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 31 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 86 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 60 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 85 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete, character_range: ident.character_range)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    if prefix_node
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
      param_start = prefix_node.range_start
    else
      prefix_node          = prefix(nil)
      prefix_node.complete = true

      trace('PN complete (no prefix)')
      param_node <<= prefix_node
      completed    = true
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
      param_start ||= value_node.range_start
      param_node.character_range = [param_start, value_node.range_end]
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 47 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 76 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 69 then
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 34 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false, character_range: [id_start, id_end])
    @buffers[:ident] = ast_node
  		end
		begin

    trace('STRING a_string_err')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
	when 74 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 70 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false, character_range: [p_start, p_end])
    @buffers[:string] = ast_node
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	when 67 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed, character_range: [id_start, id_end])
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace("PARAMETER a_parameter_eof")
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed, character_range: [p_start, p_end])
      fx_node = function(ident_node, complete: ident_node.complete, character_range: ident_node.character_range)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    comment = @buffers[:comment]
    term = @buffers[:term_stack][-1]
    subject_term = subject(term)
    rel = relationship(nil)
    obj = object(nil)
    stmt = observed_term(statement(subject_term, rel, obj, comment))
    stmt.complete = true
    yield stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::ObservedTerm.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
