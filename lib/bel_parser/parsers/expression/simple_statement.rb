
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 36, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 36, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	1, 38, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	38, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 1, 1, 1, 1, 1, 1, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 1, 1, 1, 39, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 40, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 40, 1, 1, 1, 1, 
	1, 1, 1, 41, 1, 1, 1, 1, 
	1, 1, 1, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 1, 1, 1, 
	1, 1, 1, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 1, 
	1, 1, 42, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 43, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 43, 1, 
	1, 1, 1, 1, 1, 1, 44, 1, 
	45, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 45, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 45, 46, 46, 46, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 47, 1, 1, 1, 
	1, 48, 1, 1, 1, 1, 1, 1, 
	1, 1, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 1, 1, 1, 1, 
	1, 1, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 1, 1, 
	1, 50, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 46, 46, 
	46, 46, 46, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 46, 1, 47, 
	1, 1, 1, 1, 48, 1, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	53, 51, 55, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 56, 54, 57, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 57, 1, 1, 
	1, 1, 1, 1, 1, 1, 58, 1, 
	1, 59, 1, 60, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 60, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 61, 1, 
	61, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 61, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 52, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	63, 62, 55, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 65, 
	64, 64, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 1, 1, 1, 1, 1, 
	1, 67, 68, 1, 1, 69, 1, 1, 
	1, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 1, 1, 1, 1, 
	1, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 1, 1, 1, 
	70, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 60, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 1, 
	1, 1, 1, 1, 1, 72, 1, 1, 
	61, 1, 73, 1, 1, 74, 75, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 77, 
	1, 1, 1, 1, 78, 1, 79, 1, 
	1, 80, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 46, 46, 46, 46, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 47, 1, 1, 1, 1, 48, 
	1, 83, 1, 1, 84, 1, 1, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 1, 1, 1, 1, 1, 1, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 1, 1, 1, 50, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 1, 1, 1, 
	1, 1, 1, 1, 68, 1, 1, 69, 
	1, 1, 1, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 1, 
	1, 1, 85, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 54, 
	86, 87, 87, 87, 87, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	1, 88, 1, 1, 1, 1, 89, 1, 
	90, 1, 1, 91, 1, 1, 1, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 1, 1, 1, 1, 1, 1, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 1, 1, 1, 92, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 93, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 93, 1, 9, 1, 1, 1, 
	1, 10, 1, 94, 1, 1, 95, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 30, 1, 
	1, 31, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 16, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 97, 97, 97, 97, 
	97, 97, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 97, 97, 
	97, 98, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 100, 100, 100, 100, 100, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 101, 1, 1, 1, 1, 
	102, 1, 104, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 105, 103, 107, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	108, 106, 106, 104, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	110, 109, 107, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 112, 
	111, 111, 113, 114, 114, 114, 114, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 113, 1, 115, 1, 1, 1, 1, 
	116, 1, 1, 1, 1, 1, 1, 1, 
	1, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 1, 1, 1, 1, 1, 
	1, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 1, 1, 1, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 113, 114, 114, 
	114, 114, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 115, 1, 
	1, 1, 1, 116, 1, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 1, 1, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	1, 1, 1, 118, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	114, 114, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 114, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	120, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 121, 119, 123, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 124, 122, 
	122, 120, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 126, 125, 
	123, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 128, 127, 127, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 1, 1, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 1, 1, 1, 129, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 130, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 131, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 1, 1, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 1, 
	1, 1, 132, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 133, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 134, 1, 
	135, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 135, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 135, 136, 136, 136, 136, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 135, 1, 137, 1, 1, 1, 
	1, 138, 1, 1, 1, 1, 1, 1, 
	1, 1, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 1, 1, 1, 1, 
	1, 1, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 1, 1, 
	1, 140, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 136, 136, 
	136, 136, 136, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 136, 1, 137, 
	1, 1, 1, 1, 138, 1, 142, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	143, 141, 145, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 146, 144, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 148, 1, 
	1, 149, 1, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 150, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 151, 1, 
	151, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 142, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	153, 152, 145, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 155, 
	154, 154, 156, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 156, 1, 1, 1, 1, 1, 1, 
	1, 157, 158, 1, 1, 159, 1, 1, 
	1, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 161, 1, 1, 1, 1, 
	1, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 1, 1, 1, 
	160, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 150, 1, 1, 1, 
	1, 1, 1, 1, 1, 162, 1, 1, 
	151, 1, 163, 164, 164, 164, 164, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 163, 1, 165, 1, 1, 1, 1, 
	166, 1, 167, 1, 1, 168, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 136, 136, 
	136, 136, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 137, 1, 
	1, 1, 1, 138, 1, 171, 1, 1, 
	172, 1, 1, 1, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 1, 1, 
	1, 1, 1, 1, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	1, 1, 1, 140, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	156, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 156, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	158, 1, 1, 159, 1, 1, 1, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 1, 1, 1, 173, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 144, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 1, 1, 
	1, 1, 1, 1, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	1, 1, 1, 174, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	175, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 176, 
	1, 1, 1, 1, 1, 1, 1, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 177, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 178, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 178, 1, 1, 1, 1, 1, 
	1, 1, 179, 1, 180, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 180, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 180, 
	181, 181, 181, 181, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 180, 1, 
	182, 1, 1, 1, 1, 183, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 181, 181, 181, 181, 181, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 181, 1, 182, 1, 1, 1, 1, 
	183, 1, 187, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 188, 186, 190, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	191, 189, 192, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 192, 1, 1, 1, 1, 1, 1, 
	1, 1, 193, 1, 1, 194, 1, 195, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 195, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 196, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 196, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 187, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 198, 197, 190, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 200, 199, 199, 201, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 201, 1, 1, 
	1, 1, 1, 1, 1, 202, 203, 1, 
	1, 204, 1, 1, 1, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 206, 
	1, 1, 1, 1, 1, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 1, 1, 1, 205, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 195, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	195, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 196, 1, 208, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 208, 1, 210, 
	1, 1, 1, 1, 211, 1, 212, 1, 
	1, 213, 1, 1, 1, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 1, 
	1, 1, 1, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 214, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 215, 181, 181, 181, 181, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	215, 1, 182, 1, 1, 1, 1, 183, 
	1, 216, 1, 1, 217, 1, 1, 1, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 1, 1, 1, 1, 1, 1, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 1, 1, 1, 185, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 201, 1, 1, 1, 1, 
	1, 1, 1, 1, 203, 1, 1, 204, 
	1, 1, 1, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 1, 1, 1, 
	1, 1, 1, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 1, 
	1, 1, 218, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 189, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 1, 220, 
	1, 221, 1, 223, 1, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 223, 222, 224, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 224, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 226, 1, 227, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 227, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 228, 1, 1, 230, 229, 231, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 97, 
	97, 97, 97, 97, 97, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 97, 97, 97, 232, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 1, 233, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 1, 1, 1, 1, 1, 1, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 1, 234, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 235, 1, 
	1, 236, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 1, 1, 1, 1, 1, 1, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 1, 1, 1, 237, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 239, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	238, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 240, 241, 242, 
	242, 242, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 240, 1, 243, 1, 
	1, 1, 1, 244, 1, 1, 1, 1, 
	1, 1, 1, 1, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 245, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	246, 247, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 246, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 1, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 114, 114, 114, 114, 114, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 114, 1, 115, 1, 1, 1, 
	1, 116, 1, 1, 248, 1, 1, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 1, 1, 250, 
	223, 1, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 223, 
	222, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 44, 8, 9, 45, 
	8, 9, 45, 10, 17, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 17, 11, 
	15, 42, 17, 18, 18, 19, 20, 21, 
	22, 23, 21, 22, 23, 24, 25, 26, 
	31, 34, 40, 27, 28, 41, 27, 28, 
	41, 29, 108, 30, 29, 30, 32, 33, 
	32, 33, 29, 35, 108, 30, 34, 38, 
	108, 37, 111, 39, 25, 26, 31, 108, 
	30, 40, 39, 108, 30, 40, 43, 6, 
	7, 12, 17, 11, 44, 43, 17, 11, 
	44, 0, 112, 114, 48, 49, 52, 50, 
	116, 51, 50, 116, 51, 53, 54, 53, 
	54, 56, 57, 58, 61, 120, 119, 59, 
	117, 60, 59, 117, 60, 62, 63, 62, 
	63, 65, 66, 67, 65, 66, 67, 68, 
	69, 70, 75, 78, 82, 71, 72, 83, 
	71, 72, 83, 73, 124, 74, 73, 74, 
	76, 77, 76, 77, 73, 79, 124, 74, 
	78, 80, 124, 81, 69, 70, 75, 124, 
	74, 82, 81, 124, 74, 82, 85, 86, 
	87, 85, 86, 87, 88, 89, 90, 95, 
	98, 102, 91, 92, 103, 91, 92, 103, 
	93, 125, 94, 93, 94, 96, 97, 96, 
	97, 93, 99, 125, 94, 98, 100, 125, 
	101, 89, 90, 95, 125, 94, 102, 101, 
	125, 94, 102, 127, 106, 107, 128, 129, 
	109, 110, 36, 109, 36, 111, 110, 113, 
	112, 115, 114, 118, 118, 119, 120, 121, 
	122, 123, 57, 58, 61, 119, 122, 123, 
	126, 127, 128
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 16, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 18, 18, 
	0, 20, 0, 21, 0, 0, 0, 2, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	0, 7, 9, 12, 13, 12, 0, 14, 
	0, 16, 16, 16, 0, 0, 12, 12, 
	0, 0, 18, 19, 18, 18, 0, 20, 
	0, 0, 22, 24, 25, 25, 25, 24, 
	24, 26, 27, 27, 27, 0, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 9, 0, 0, 0, 12, 
	32, 12, 0, 33, 0, 12, 12, 0, 
	0, 0, 0, 0, 0, 9, 9, 12, 
	13, 12, 0, 14, 0, 12, 12, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 44, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 47, 18, 
	0, 20, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	7, 9, 12, 13, 12, 0, 14, 0, 
	16, 16, 16, 0, 0, 12, 12, 0, 
	0, 18, 19, 18, 18, 0, 20, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 52, 0, 0, 22, 22, 
	54, 53, 54, 0, 0, 0, 55, 3, 
	0, 20, 0, 60, 62, 0, 0, 20, 
	25, 65, 25, 25, 25, 26, 0, 67, 
	68, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 8, 10, 11, 
	11, 15, 0, 6, 11, 11, 11, 17, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 0, 0, 23, 23, 
	23, 11, 23, 23, 23, 11, 28, 0, 
	30, 31, 31, 31, 31, 31, 31, 34, 
	34, 35, 36, 36, 36, 36, 36, 36, 
	1, 38, 39, 40, 41, 42, 43, 43, 
	0, 0, 45, 43, 43, 43, 46, 0, 
	49, 49, 49, 43, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 23, 23, 23, 11, 
	0, 0, 0, 0, 53, 53, 0, 55, 
	56, 57, 58, 59, 0, 60, 0, 61, 
	63, 64, 66, 35, 0, 68, 0, 69, 
	70, 70
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 54 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 19 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 16 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 57 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 15 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 10 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 69 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 70 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 36, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 36, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	1, 38, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	38, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 1, 1, 1, 1, 1, 1, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 1, 1, 1, 39, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 40, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 40, 1, 1, 1, 1, 
	1, 1, 1, 41, 1, 1, 1, 1, 
	1, 1, 1, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 1, 1, 1, 
	1, 1, 1, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 1, 
	1, 1, 42, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 43, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 43, 1, 
	1, 1, 1, 1, 1, 1, 44, 1, 
	45, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 45, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 45, 46, 46, 46, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 47, 1, 1, 1, 
	1, 48, 1, 1, 1, 1, 1, 1, 
	1, 1, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 1, 1, 1, 1, 
	1, 1, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 1, 1, 
	1, 50, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 46, 46, 
	46, 46, 46, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 46, 1, 47, 
	1, 1, 1, 1, 48, 1, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	53, 51, 55, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 56, 54, 57, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 57, 1, 1, 
	1, 1, 1, 1, 1, 1, 58, 1, 
	1, 59, 1, 60, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 60, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 61, 1, 
	61, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 61, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 52, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	63, 62, 55, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 65, 
	64, 64, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 1, 1, 1, 1, 1, 
	1, 67, 68, 1, 1, 69, 1, 1, 
	1, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 1, 1, 1, 1, 
	1, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 1, 1, 1, 
	70, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 60, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 1, 
	1, 1, 1, 1, 1, 72, 1, 1, 
	61, 1, 73, 1, 1, 74, 75, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 77, 
	1, 1, 1, 1, 78, 1, 79, 1, 
	1, 80, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 46, 46, 46, 46, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 47, 1, 1, 1, 1, 48, 
	1, 83, 1, 1, 84, 1, 1, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 1, 1, 1, 1, 1, 1, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 1, 1, 1, 50, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 1, 1, 1, 
	1, 1, 1, 1, 68, 1, 1, 69, 
	1, 1, 1, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 1, 
	1, 1, 85, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 54, 
	86, 87, 87, 87, 87, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	1, 88, 1, 1, 1, 1, 89, 1, 
	90, 1, 1, 91, 1, 1, 1, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 1, 1, 1, 1, 1, 1, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 1, 1, 1, 92, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 93, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 93, 1, 9, 1, 1, 1, 
	1, 10, 1, 94, 1, 1, 95, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 30, 1, 
	1, 31, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 16, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 97, 97, 97, 97, 
	97, 97, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 97, 97, 
	97, 98, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 100, 100, 100, 100, 100, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 101, 1, 1, 1, 1, 
	102, 1, 104, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 105, 103, 107, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	108, 106, 106, 104, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	110, 109, 107, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 112, 
	111, 111, 113, 114, 114, 114, 114, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 113, 1, 115, 1, 1, 1, 1, 
	116, 1, 1, 1, 1, 1, 1, 1, 
	1, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 1, 1, 1, 1, 1, 
	1, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 1, 1, 1, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 113, 114, 114, 
	114, 114, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 115, 1, 
	1, 1, 1, 116, 1, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 1, 1, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	1, 1, 1, 118, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	114, 114, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 114, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	120, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 121, 119, 123, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 124, 122, 
	122, 120, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 126, 125, 
	123, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 128, 127, 127, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 1, 1, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 1, 1, 1, 129, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 130, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 131, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 1, 1, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 1, 
	1, 1, 132, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 133, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 134, 1, 
	135, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 135, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 135, 136, 136, 136, 136, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 135, 1, 137, 1, 1, 1, 
	1, 138, 1, 1, 1, 1, 1, 1, 
	1, 1, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 1, 1, 1, 1, 
	1, 1, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 1, 1, 
	1, 140, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 136, 136, 
	136, 136, 136, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 136, 1, 137, 
	1, 1, 1, 1, 138, 1, 142, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	143, 141, 145, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 146, 144, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 148, 1, 
	1, 149, 1, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 150, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 151, 1, 
	151, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 142, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	153, 152, 145, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 155, 
	154, 154, 156, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 156, 1, 1, 1, 1, 1, 1, 
	1, 157, 158, 1, 1, 159, 1, 1, 
	1, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 161, 1, 1, 1, 1, 
	1, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 1, 1, 1, 
	160, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 150, 1, 1, 1, 
	1, 1, 1, 1, 1, 162, 1, 1, 
	151, 1, 163, 164, 164, 164, 164, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 163, 1, 165, 1, 1, 1, 1, 
	166, 1, 167, 1, 1, 168, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 136, 136, 
	136, 136, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 137, 1, 
	1, 1, 1, 138, 1, 171, 1, 1, 
	172, 1, 1, 1, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 1, 1, 
	1, 1, 1, 1, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	1, 1, 1, 140, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	156, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 156, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	158, 1, 1, 159, 1, 1, 1, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 1, 1, 1, 173, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 144, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 1, 1, 
	1, 1, 1, 1, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	1, 1, 1, 174, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	175, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 176, 
	1, 1, 1, 1, 1, 1, 1, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 177, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 178, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 178, 1, 1, 1, 1, 1, 
	1, 1, 179, 1, 180, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 180, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 180, 
	181, 181, 181, 181, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 180, 1, 
	182, 1, 1, 1, 1, 183, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 181, 181, 181, 181, 181, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 181, 1, 182, 1, 1, 1, 1, 
	183, 1, 187, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 188, 186, 190, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	191, 189, 192, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 192, 1, 1, 1, 1, 1, 1, 
	1, 1, 193, 1, 1, 194, 1, 195, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 195, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 196, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 196, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 187, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 198, 197, 190, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 200, 199, 199, 201, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 201, 1, 1, 
	1, 1, 1, 1, 1, 202, 203, 1, 
	1, 204, 1, 1, 1, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 206, 
	1, 1, 1, 1, 1, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 1, 1, 1, 205, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 195, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	195, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 196, 1, 208, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 208, 1, 210, 
	1, 1, 1, 1, 211, 1, 212, 1, 
	1, 213, 1, 1, 1, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 1, 
	1, 1, 1, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 214, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 215, 181, 181, 181, 181, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	215, 1, 182, 1, 1, 1, 1, 183, 
	1, 216, 1, 1, 217, 1, 1, 1, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 1, 1, 1, 1, 1, 1, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 1, 1, 1, 185, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 201, 1, 1, 1, 1, 
	1, 1, 1, 1, 203, 1, 1, 204, 
	1, 1, 1, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 1, 1, 1, 
	1, 1, 1, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 1, 
	1, 1, 218, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 189, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 1, 220, 
	1, 221, 1, 223, 1, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 223, 222, 224, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 224, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 226, 1, 227, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 227, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 228, 1, 1, 230, 229, 231, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 97, 
	97, 97, 97, 97, 97, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 97, 97, 97, 232, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 1, 233, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 1, 1, 1, 1, 1, 1, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 1, 234, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 235, 1, 
	1, 236, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 1, 1, 1, 1, 1, 1, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 1, 1, 1, 237, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 239, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	238, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 240, 241, 242, 
	242, 242, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 240, 1, 243, 1, 
	1, 1, 1, 244, 1, 1, 1, 1, 
	1, 1, 1, 1, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 245, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	246, 247, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 246, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 1, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 114, 114, 114, 114, 114, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 114, 1, 115, 1, 1, 1, 
	1, 116, 1, 1, 248, 1, 1, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 1, 1, 250, 
	223, 1, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 223, 
	222, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 44, 8, 9, 45, 
	8, 9, 45, 10, 17, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 17, 11, 
	15, 42, 17, 18, 18, 19, 20, 21, 
	22, 23, 21, 22, 23, 24, 25, 26, 
	31, 34, 40, 27, 28, 41, 27, 28, 
	41, 29, 108, 30, 29, 30, 32, 33, 
	32, 33, 29, 35, 108, 30, 34, 38, 
	108, 37, 111, 39, 25, 26, 31, 108, 
	30, 40, 39, 108, 30, 40, 43, 6, 
	7, 12, 17, 11, 44, 43, 17, 11, 
	44, 0, 112, 114, 48, 49, 52, 50, 
	116, 51, 50, 116, 51, 53, 54, 53, 
	54, 56, 57, 58, 61, 120, 119, 59, 
	117, 60, 59, 117, 60, 62, 63, 62, 
	63, 65, 66, 67, 65, 66, 67, 68, 
	69, 70, 75, 78, 82, 71, 72, 83, 
	71, 72, 83, 73, 124, 74, 73, 74, 
	76, 77, 76, 77, 73, 79, 124, 74, 
	78, 80, 124, 81, 69, 70, 75, 124, 
	74, 82, 81, 124, 74, 82, 85, 86, 
	87, 85, 86, 87, 88, 89, 90, 95, 
	98, 102, 91, 92, 103, 91, 92, 103, 
	93, 125, 94, 93, 94, 96, 97, 96, 
	97, 93, 99, 125, 94, 98, 100, 125, 
	101, 89, 90, 95, 125, 94, 102, 101, 
	125, 94, 102, 127, 106, 107, 128, 129, 
	109, 110, 36, 109, 36, 111, 110, 113, 
	112, 115, 114, 118, 118, 119, 120, 121, 
	122, 123, 57, 58, 61, 119, 122, 123, 
	126, 127, 128
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 16, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 18, 18, 
	0, 20, 0, 21, 0, 0, 0, 2, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	0, 7, 9, 12, 13, 12, 0, 14, 
	0, 16, 16, 16, 0, 0, 12, 12, 
	0, 0, 18, 19, 18, 18, 0, 20, 
	0, 0, 22, 24, 25, 25, 25, 24, 
	24, 26, 27, 27, 27, 0, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 9, 0, 0, 0, 12, 
	32, 12, 0, 33, 0, 12, 12, 0, 
	0, 0, 0, 0, 0, 9, 9, 12, 
	13, 12, 0, 14, 0, 12, 12, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 44, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 47, 18, 
	0, 20, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	7, 9, 12, 13, 12, 0, 14, 0, 
	16, 16, 16, 0, 0, 12, 12, 0, 
	0, 18, 19, 18, 18, 0, 20, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 52, 0, 0, 22, 22, 
	54, 53, 54, 0, 0, 0, 55, 3, 
	0, 20, 0, 60, 62, 0, 0, 20, 
	25, 65, 25, 25, 25, 26, 0, 67, 
	68, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 8, 10, 11, 
	11, 15, 0, 6, 11, 11, 11, 17, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 0, 0, 23, 23, 
	23, 11, 23, 23, 23, 11, 28, 0, 
	30, 31, 31, 31, 31, 31, 31, 34, 
	34, 35, 36, 36, 36, 36, 36, 36, 
	1, 38, 39, 40, 41, 42, 43, 43, 
	0, 0, 45, 43, 43, 43, 46, 0, 
	49, 49, 49, 43, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 23, 23, 23, 11, 
	0, 0, 0, 0, 53, 53, 0, 55, 
	56, 57, 58, 59, 0, 60, 0, 61, 
	63, 64, 66, 35, 0, 68, 0, 69, 
	70, 70
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 54 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 19 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 16 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 57 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 15 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 10 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 69 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 70 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 36, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 36, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	1, 38, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	38, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 1, 1, 1, 1, 1, 1, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 1, 1, 1, 39, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 40, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 40, 1, 1, 1, 1, 
	1, 1, 1, 41, 1, 1, 1, 1, 
	1, 1, 1, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 1, 1, 1, 
	1, 1, 1, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 1, 
	1, 1, 42, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 43, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 43, 1, 
	1, 1, 1, 1, 1, 1, 44, 1, 
	45, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 45, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 45, 46, 46, 46, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 47, 1, 1, 1, 
	1, 48, 1, 1, 1, 1, 1, 1, 
	1, 1, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 1, 1, 1, 1, 
	1, 1, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 1, 1, 
	1, 50, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 46, 46, 
	46, 46, 46, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 46, 1, 47, 
	1, 1, 1, 1, 48, 1, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	53, 51, 55, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 56, 54, 57, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 57, 1, 1, 
	1, 1, 1, 1, 1, 1, 58, 1, 
	1, 59, 1, 60, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 60, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 61, 1, 
	61, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 61, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 52, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	63, 62, 55, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 65, 
	64, 64, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 1, 1, 1, 1, 1, 
	1, 67, 68, 1, 1, 69, 1, 1, 
	1, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 1, 1, 1, 1, 
	1, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 1, 1, 1, 
	70, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 60, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 1, 
	1, 1, 1, 1, 1, 72, 1, 1, 
	61, 1, 73, 1, 1, 74, 75, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 77, 
	1, 1, 1, 1, 78, 1, 79, 1, 
	1, 80, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 46, 46, 46, 46, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 47, 1, 1, 1, 1, 48, 
	1, 83, 1, 1, 84, 1, 1, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 1, 1, 1, 1, 1, 1, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 1, 1, 1, 50, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 1, 1, 1, 
	1, 1, 1, 1, 68, 1, 1, 69, 
	1, 1, 1, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 1, 
	1, 1, 85, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 54, 
	86, 87, 87, 87, 87, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	1, 88, 1, 1, 1, 1, 89, 1, 
	90, 1, 1, 91, 1, 1, 1, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 1, 1, 1, 1, 1, 1, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 1, 1, 1, 92, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 93, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 93, 1, 9, 1, 1, 1, 
	1, 10, 1, 94, 1, 1, 95, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 30, 1, 
	1, 31, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 16, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 97, 97, 97, 97, 
	97, 97, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 97, 97, 
	97, 98, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 100, 100, 100, 100, 100, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 101, 1, 1, 1, 1, 
	102, 1, 104, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 105, 103, 107, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	108, 106, 106, 104, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	110, 109, 107, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 112, 
	111, 111, 113, 114, 114, 114, 114, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 113, 1, 115, 1, 1, 1, 1, 
	116, 1, 1, 1, 1, 1, 1, 1, 
	1, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 1, 1, 1, 1, 1, 
	1, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 1, 1, 1, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 113, 114, 114, 
	114, 114, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 115, 1, 
	1, 1, 1, 116, 1, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 1, 1, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	1, 1, 1, 118, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	114, 114, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 114, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	120, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 121, 119, 123, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 124, 122, 
	122, 120, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 126, 125, 
	123, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 128, 127, 127, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 1, 1, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 1, 1, 1, 129, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 130, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 131, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 1, 1, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 1, 
	1, 1, 132, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 133, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 134, 1, 
	135, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 135, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 135, 136, 136, 136, 136, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 135, 1, 137, 1, 1, 1, 
	1, 138, 1, 1, 1, 1, 1, 1, 
	1, 1, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 1, 1, 1, 1, 
	1, 1, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 1, 1, 
	1, 140, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 136, 136, 
	136, 136, 136, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 136, 1, 137, 
	1, 1, 1, 1, 138, 1, 142, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	143, 141, 145, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 146, 144, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 148, 1, 
	1, 149, 1, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 150, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 151, 1, 
	151, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 142, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	153, 152, 145, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 155, 
	154, 154, 156, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 156, 1, 1, 1, 1, 1, 1, 
	1, 157, 158, 1, 1, 159, 1, 1, 
	1, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 161, 1, 1, 1, 1, 
	1, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 1, 1, 1, 
	160, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 150, 1, 1, 1, 
	1, 1, 1, 1, 1, 162, 1, 1, 
	151, 1, 163, 164, 164, 164, 164, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 163, 1, 165, 1, 1, 1, 1, 
	166, 1, 167, 1, 1, 168, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 136, 136, 
	136, 136, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 137, 1, 
	1, 1, 1, 138, 1, 171, 1, 1, 
	172, 1, 1, 1, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 1, 1, 
	1, 1, 1, 1, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	1, 1, 1, 140, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	156, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 156, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	158, 1, 1, 159, 1, 1, 1, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 1, 1, 1, 173, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 144, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 1, 1, 
	1, 1, 1, 1, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	1, 1, 1, 174, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	175, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 176, 
	1, 1, 1, 1, 1, 1, 1, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 177, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 178, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 178, 1, 1, 1, 1, 1, 
	1, 1, 179, 1, 180, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 180, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 180, 
	181, 181, 181, 181, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 180, 1, 
	182, 1, 1, 1, 1, 183, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 181, 181, 181, 181, 181, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 181, 1, 182, 1, 1, 1, 1, 
	183, 1, 187, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 188, 186, 190, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	191, 189, 192, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 192, 1, 1, 1, 1, 1, 1, 
	1, 1, 193, 1, 1, 194, 1, 195, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 195, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 196, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 196, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 187, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 198, 197, 190, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 200, 199, 199, 201, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 201, 1, 1, 
	1, 1, 1, 1, 1, 202, 203, 1, 
	1, 204, 1, 1, 1, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 206, 
	1, 1, 1, 1, 1, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 1, 1, 1, 205, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 195, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	195, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 196, 1, 208, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 208, 1, 210, 
	1, 1, 1, 1, 211, 1, 212, 1, 
	1, 213, 1, 1, 1, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 1, 
	1, 1, 1, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 214, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 215, 181, 181, 181, 181, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	215, 1, 182, 1, 1, 1, 1, 183, 
	1, 216, 1, 1, 217, 1, 1, 1, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 1, 1, 1, 1, 1, 1, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 1, 1, 1, 185, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 201, 1, 1, 1, 1, 
	1, 1, 1, 1, 203, 1, 1, 204, 
	1, 1, 1, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 1, 1, 1, 
	1, 1, 1, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 1, 
	1, 1, 218, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 189, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 1, 220, 
	1, 221, 1, 223, 1, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 223, 222, 224, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 224, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 226, 1, 227, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 227, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 228, 1, 1, 230, 229, 231, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 97, 
	97, 97, 97, 97, 97, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 97, 97, 97, 232, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 1, 233, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 1, 1, 1, 1, 1, 1, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 1, 234, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 235, 1, 
	1, 236, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 1, 1, 1, 1, 1, 1, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 1, 1, 1, 237, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 239, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	238, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 240, 241, 242, 
	242, 242, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 240, 1, 243, 1, 
	1, 1, 1, 244, 1, 1, 1, 1, 
	1, 1, 1, 1, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 245, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	246, 247, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 246, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 1, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 114, 114, 114, 114, 114, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 114, 1, 115, 1, 1, 1, 
	1, 116, 1, 1, 248, 1, 1, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 1, 1, 250, 
	223, 1, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 223, 
	222, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 44, 8, 9, 45, 
	8, 9, 45, 10, 17, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 17, 11, 
	15, 42, 17, 18, 18, 19, 20, 21, 
	22, 23, 21, 22, 23, 24, 25, 26, 
	31, 34, 40, 27, 28, 41, 27, 28, 
	41, 29, 108, 30, 29, 30, 32, 33, 
	32, 33, 29, 35, 108, 30, 34, 38, 
	108, 37, 111, 39, 25, 26, 31, 108, 
	30, 40, 39, 108, 30, 40, 43, 6, 
	7, 12, 17, 11, 44, 43, 17, 11, 
	44, 0, 112, 114, 48, 49, 52, 50, 
	116, 51, 50, 116, 51, 53, 54, 53, 
	54, 56, 57, 58, 61, 120, 119, 59, 
	117, 60, 59, 117, 60, 62, 63, 62, 
	63, 65, 66, 67, 65, 66, 67, 68, 
	69, 70, 75, 78, 82, 71, 72, 83, 
	71, 72, 83, 73, 124, 74, 73, 74, 
	76, 77, 76, 77, 73, 79, 124, 74, 
	78, 80, 124, 81, 69, 70, 75, 124, 
	74, 82, 81, 124, 74, 82, 85, 86, 
	87, 85, 86, 87, 88, 89, 90, 95, 
	98, 102, 91, 92, 103, 91, 92, 103, 
	93, 125, 94, 93, 94, 96, 97, 96, 
	97, 93, 99, 125, 94, 98, 100, 125, 
	101, 89, 90, 95, 125, 94, 102, 101, 
	125, 94, 102, 127, 106, 107, 128, 129, 
	109, 110, 36, 109, 36, 111, 110, 113, 
	112, 115, 114, 118, 118, 119, 120, 121, 
	122, 123, 57, 58, 61, 119, 122, 123, 
	126, 127, 128
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 16, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 18, 18, 
	0, 20, 0, 21, 0, 0, 0, 2, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	0, 7, 9, 12, 13, 12, 0, 14, 
	0, 16, 16, 16, 0, 0, 12, 12, 
	0, 0, 18, 19, 18, 18, 0, 20, 
	0, 0, 22, 24, 25, 25, 25, 24, 
	24, 26, 27, 27, 27, 0, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 9, 0, 0, 0, 12, 
	32, 12, 0, 33, 0, 12, 12, 0, 
	0, 0, 0, 0, 0, 9, 9, 12, 
	13, 12, 0, 14, 0, 12, 12, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 44, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 47, 18, 
	0, 20, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	7, 9, 12, 13, 12, 0, 14, 0, 
	16, 16, 16, 0, 0, 12, 12, 0, 
	0, 18, 19, 18, 18, 0, 20, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 52, 0, 0, 22, 22, 
	54, 53, 54, 0, 0, 0, 55, 3, 
	0, 20, 0, 60, 62, 0, 0, 20, 
	25, 65, 25, 25, 25, 26, 0, 67, 
	68, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 8, 10, 11, 
	11, 15, 0, 6, 11, 11, 11, 17, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 0, 0, 23, 23, 
	23, 11, 23, 23, 23, 11, 28, 0, 
	30, 31, 31, 31, 31, 31, 31, 34, 
	34, 35, 36, 36, 36, 36, 36, 36, 
	1, 38, 39, 40, 41, 42, 43, 43, 
	0, 0, 45, 43, 43, 43, 46, 0, 
	49, 49, 49, 43, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 23, 23, 23, 11, 
	0, 0, 0, 0, 53, 53, 0, 55, 
	56, 57, 58, 59, 0, 60, 0, 61, 
	63, 64, 66, 35, 0, 68, 0, 69, 
	70, 70
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 54 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 19 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 16 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 57 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 15 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 10 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 69 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 70 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 36, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 36, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	1, 38, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	38, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 1, 1, 1, 1, 1, 1, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 1, 1, 1, 39, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 40, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 40, 1, 1, 1, 1, 
	1, 1, 1, 41, 1, 1, 1, 1, 
	1, 1, 1, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 1, 1, 1, 
	1, 1, 1, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 1, 
	1, 1, 42, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 43, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 43, 1, 
	1, 1, 1, 1, 1, 1, 44, 1, 
	45, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 45, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 45, 46, 46, 46, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 47, 1, 1, 1, 
	1, 48, 1, 1, 1, 1, 1, 1, 
	1, 1, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 1, 1, 1, 1, 
	1, 1, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 1, 1, 
	1, 50, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 46, 46, 
	46, 46, 46, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 46, 1, 47, 
	1, 1, 1, 1, 48, 1, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	53, 51, 55, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 56, 54, 57, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 57, 1, 1, 
	1, 1, 1, 1, 1, 1, 58, 1, 
	1, 59, 1, 60, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 60, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 61, 1, 
	61, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 61, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 52, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	63, 62, 55, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 65, 
	64, 64, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 1, 1, 1, 1, 1, 
	1, 67, 68, 1, 1, 69, 1, 1, 
	1, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 1, 1, 1, 1, 
	1, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 1, 1, 1, 
	70, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 60, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 1, 
	1, 1, 1, 1, 1, 72, 1, 1, 
	61, 1, 73, 1, 1, 74, 75, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 77, 
	1, 1, 1, 1, 78, 1, 79, 1, 
	1, 80, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 46, 46, 46, 46, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 47, 1, 1, 1, 1, 48, 
	1, 83, 1, 1, 84, 1, 1, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 1, 1, 1, 1, 1, 1, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 1, 1, 1, 50, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 1, 1, 1, 
	1, 1, 1, 1, 68, 1, 1, 69, 
	1, 1, 1, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 1, 
	1, 1, 85, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 54, 
	86, 87, 87, 87, 87, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	1, 88, 1, 1, 1, 1, 89, 1, 
	90, 1, 1, 91, 1, 1, 1, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 1, 1, 1, 1, 1, 1, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 1, 1, 1, 92, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 93, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 93, 1, 9, 1, 1, 1, 
	1, 10, 1, 94, 1, 1, 95, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 30, 1, 
	1, 31, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 16, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 97, 97, 97, 97, 
	97, 97, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 97, 97, 
	97, 98, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 100, 100, 100, 100, 100, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 101, 1, 1, 1, 1, 
	102, 1, 104, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 105, 103, 107, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	108, 106, 106, 104, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	110, 109, 107, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 112, 
	111, 111, 113, 114, 114, 114, 114, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 113, 1, 115, 1, 1, 1, 1, 
	116, 1, 1, 1, 1, 1, 1, 1, 
	1, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 1, 1, 1, 1, 1, 
	1, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 1, 1, 1, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 113, 114, 114, 
	114, 114, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 115, 1, 
	1, 1, 1, 116, 1, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 1, 1, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	1, 1, 1, 118, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	114, 114, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 114, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	120, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 121, 119, 123, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 124, 122, 
	122, 120, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 126, 125, 
	123, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 128, 127, 127, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 1, 1, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 1, 1, 1, 129, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 130, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 131, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 1, 1, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 1, 
	1, 1, 132, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 133, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 134, 1, 
	135, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 135, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 135, 136, 136, 136, 136, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 135, 1, 137, 1, 1, 1, 
	1, 138, 1, 1, 1, 1, 1, 1, 
	1, 1, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 1, 1, 1, 1, 
	1, 1, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 1, 1, 
	1, 140, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 136, 136, 
	136, 136, 136, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 136, 1, 137, 
	1, 1, 1, 1, 138, 1, 142, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	143, 141, 145, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 146, 144, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 148, 1, 
	1, 149, 1, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 150, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 151, 1, 
	151, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 142, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	153, 152, 145, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 155, 
	154, 154, 156, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 156, 1, 1, 1, 1, 1, 1, 
	1, 157, 158, 1, 1, 159, 1, 1, 
	1, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 161, 1, 1, 1, 1, 
	1, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 1, 1, 1, 
	160, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 150, 1, 1, 1, 
	1, 1, 1, 1, 1, 162, 1, 1, 
	151, 1, 163, 164, 164, 164, 164, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 163, 1, 165, 1, 1, 1, 1, 
	166, 1, 167, 1, 1, 168, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 136, 136, 
	136, 136, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 137, 1, 
	1, 1, 1, 138, 1, 171, 1, 1, 
	172, 1, 1, 1, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 1, 1, 
	1, 1, 1, 1, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	1, 1, 1, 140, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	156, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 156, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	158, 1, 1, 159, 1, 1, 1, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 1, 1, 1, 173, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 144, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 1, 1, 
	1, 1, 1, 1, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	1, 1, 1, 174, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	175, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 176, 
	1, 1, 1, 1, 1, 1, 1, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 177, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 178, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 178, 1, 1, 1, 1, 1, 
	1, 1, 179, 1, 180, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 180, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 180, 
	181, 181, 181, 181, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 180, 1, 
	182, 1, 1, 1, 1, 183, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 181, 181, 181, 181, 181, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 181, 1, 182, 1, 1, 1, 1, 
	183, 1, 187, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 188, 186, 190, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	191, 189, 192, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 192, 1, 1, 1, 1, 1, 1, 
	1, 1, 193, 1, 1, 194, 1, 195, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 195, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 196, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 196, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 187, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 198, 197, 190, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 200, 199, 199, 201, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 201, 1, 1, 
	1, 1, 1, 1, 1, 202, 203, 1, 
	1, 204, 1, 1, 1, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 206, 
	1, 1, 1, 1, 1, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 1, 1, 1, 205, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 195, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	195, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 196, 1, 208, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 208, 1, 210, 
	1, 1, 1, 1, 211, 1, 212, 1, 
	1, 213, 1, 1, 1, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 1, 
	1, 1, 1, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 214, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 215, 181, 181, 181, 181, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	215, 1, 182, 1, 1, 1, 1, 183, 
	1, 216, 1, 1, 217, 1, 1, 1, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 1, 1, 1, 1, 1, 1, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 1, 1, 1, 185, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 201, 1, 1, 1, 1, 
	1, 1, 1, 1, 203, 1, 1, 204, 
	1, 1, 1, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 1, 1, 1, 
	1, 1, 1, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 1, 
	1, 1, 218, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 189, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 1, 220, 
	1, 221, 1, 223, 1, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 223, 222, 224, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 224, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 226, 1, 227, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 227, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 228, 1, 1, 230, 229, 231, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 97, 
	97, 97, 97, 97, 97, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 97, 97, 97, 232, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 1, 233, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 1, 1, 1, 1, 1, 1, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 1, 234, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 235, 1, 
	1, 236, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 1, 1, 1, 1, 1, 1, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 1, 1, 1, 237, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 239, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	238, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 240, 241, 242, 
	242, 242, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 240, 1, 243, 1, 
	1, 1, 1, 244, 1, 1, 1, 1, 
	1, 1, 1, 1, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 245, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	246, 247, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 246, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 1, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 114, 114, 114, 114, 114, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 114, 1, 115, 1, 1, 1, 
	1, 116, 1, 1, 248, 1, 1, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 1, 1, 250, 
	223, 1, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 223, 
	222, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 44, 8, 9, 45, 
	8, 9, 45, 10, 17, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 17, 11, 
	15, 42, 17, 18, 18, 19, 20, 21, 
	22, 23, 21, 22, 23, 24, 25, 26, 
	31, 34, 40, 27, 28, 41, 27, 28, 
	41, 29, 108, 30, 29, 30, 32, 33, 
	32, 33, 29, 35, 108, 30, 34, 38, 
	108, 37, 111, 39, 25, 26, 31, 108, 
	30, 40, 39, 108, 30, 40, 43, 6, 
	7, 12, 17, 11, 44, 43, 17, 11, 
	44, 0, 112, 114, 48, 49, 52, 50, 
	116, 51, 50, 116, 51, 53, 54, 53, 
	54, 56, 57, 58, 61, 120, 119, 59, 
	117, 60, 59, 117, 60, 62, 63, 62, 
	63, 65, 66, 67, 65, 66, 67, 68, 
	69, 70, 75, 78, 82, 71, 72, 83, 
	71, 72, 83, 73, 124, 74, 73, 74, 
	76, 77, 76, 77, 73, 79, 124, 74, 
	78, 80, 124, 81, 69, 70, 75, 124, 
	74, 82, 81, 124, 74, 82, 85, 86, 
	87, 85, 86, 87, 88, 89, 90, 95, 
	98, 102, 91, 92, 103, 91, 92, 103, 
	93, 125, 94, 93, 94, 96, 97, 96, 
	97, 93, 99, 125, 94, 98, 100, 125, 
	101, 89, 90, 95, 125, 94, 102, 101, 
	125, 94, 102, 127, 106, 107, 128, 129, 
	109, 110, 36, 109, 36, 111, 110, 113, 
	112, 115, 114, 118, 118, 119, 120, 121, 
	122, 123, 57, 58, 61, 119, 122, 123, 
	126, 127, 128
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 16, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 18, 18, 
	0, 20, 0, 21, 0, 0, 0, 2, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	0, 7, 9, 12, 13, 12, 0, 14, 
	0, 16, 16, 16, 0, 0, 12, 12, 
	0, 0, 18, 19, 18, 18, 0, 20, 
	0, 0, 22, 24, 25, 25, 25, 24, 
	24, 26, 27, 27, 27, 0, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 9, 0, 0, 0, 12, 
	32, 12, 0, 33, 0, 12, 12, 0, 
	0, 0, 0, 0, 0, 9, 9, 12, 
	13, 12, 0, 14, 0, 12, 12, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 44, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 47, 18, 
	0, 20, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	7, 9, 12, 13, 12, 0, 14, 0, 
	16, 16, 16, 0, 0, 12, 12, 0, 
	0, 18, 19, 18, 18, 0, 20, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 52, 0, 0, 22, 22, 
	54, 53, 54, 0, 0, 0, 55, 3, 
	0, 20, 0, 60, 62, 0, 0, 20, 
	25, 65, 25, 25, 25, 26, 0, 67, 
	68, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 8, 10, 11, 
	11, 15, 0, 6, 11, 11, 11, 17, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 0, 0, 23, 23, 
	23, 11, 23, 23, 23, 11, 28, 0, 
	30, 31, 31, 31, 31, 31, 31, 34, 
	34, 35, 36, 36, 36, 36, 36, 36, 
	1, 38, 39, 40, 41, 42, 43, 43, 
	0, 0, 45, 43, 43, 43, 46, 0, 
	49, 49, 49, 43, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 23, 23, 23, 11, 
	0, 0, 0, 0, 53, 53, 0, 55, 
	56, 57, 58, 59, 0, 60, 0, 61, 
	63, 64, 66, 35, 0, 68, 0, 69, 
	70, 70
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 54 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 19 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 16 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 57 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 15 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 10 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 69 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 70 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 36, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 36, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	1, 38, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	38, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 1, 1, 1, 1, 1, 1, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 1, 1, 1, 39, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 40, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 40, 1, 1, 1, 1, 
	1, 1, 1, 41, 1, 1, 1, 1, 
	1, 1, 1, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 1, 1, 1, 
	1, 1, 1, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 1, 
	1, 1, 42, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 43, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 43, 1, 
	1, 1, 1, 1, 1, 1, 44, 1, 
	45, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 45, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 45, 46, 46, 46, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 47, 1, 1, 1, 
	1, 48, 1, 1, 1, 1, 1, 1, 
	1, 1, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 1, 1, 1, 1, 
	1, 1, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 1, 1, 
	1, 50, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 46, 46, 
	46, 46, 46, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 46, 1, 47, 
	1, 1, 1, 1, 48, 1, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	53, 51, 55, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 56, 54, 57, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 57, 1, 1, 
	1, 1, 1, 1, 1, 1, 58, 1, 
	1, 59, 1, 60, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 60, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 61, 1, 
	61, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 61, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 52, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	63, 62, 55, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 65, 
	64, 64, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 1, 1, 1, 1, 1, 
	1, 67, 68, 1, 1, 69, 1, 1, 
	1, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 1, 1, 1, 1, 
	1, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 1, 1, 1, 
	70, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 60, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 1, 
	1, 1, 1, 1, 1, 72, 1, 1, 
	61, 1, 73, 1, 1, 74, 75, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 77, 
	1, 1, 1, 1, 78, 1, 79, 1, 
	1, 80, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 46, 46, 46, 46, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 47, 1, 1, 1, 1, 48, 
	1, 83, 1, 1, 84, 1, 1, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 1, 1, 1, 1, 1, 1, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 1, 1, 1, 50, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 1, 1, 1, 
	1, 1, 1, 1, 68, 1, 1, 69, 
	1, 1, 1, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 1, 
	1, 1, 85, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 54, 
	86, 87, 87, 87, 87, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	1, 88, 1, 1, 1, 1, 89, 1, 
	90, 1, 1, 91, 1, 1, 1, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 1, 1, 1, 1, 1, 1, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 1, 1, 1, 92, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 93, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 93, 1, 9, 1, 1, 1, 
	1, 10, 1, 94, 1, 1, 95, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 30, 1, 
	1, 31, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 16, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 97, 97, 97, 97, 
	97, 97, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 97, 97, 
	97, 98, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 100, 100, 100, 100, 100, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 101, 1, 1, 1, 1, 
	102, 1, 104, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 105, 103, 107, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	108, 106, 106, 104, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	110, 109, 107, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 112, 
	111, 111, 113, 114, 114, 114, 114, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 113, 1, 115, 1, 1, 1, 1, 
	116, 1, 1, 1, 1, 1, 1, 1, 
	1, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 1, 1, 1, 1, 1, 
	1, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 1, 1, 1, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 113, 114, 114, 
	114, 114, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 115, 1, 
	1, 1, 1, 116, 1, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 1, 1, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	1, 1, 1, 118, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	114, 114, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 114, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	120, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 121, 119, 123, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 124, 122, 
	122, 120, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 126, 125, 
	123, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 128, 127, 127, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 1, 1, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 1, 1, 1, 129, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 130, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 131, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 1, 1, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 1, 
	1, 1, 132, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 133, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 134, 1, 
	135, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 135, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 135, 136, 136, 136, 136, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 135, 1, 137, 1, 1, 1, 
	1, 138, 1, 1, 1, 1, 1, 1, 
	1, 1, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 1, 1, 1, 1, 
	1, 1, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 1, 1, 
	1, 140, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 136, 136, 
	136, 136, 136, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 136, 1, 137, 
	1, 1, 1, 1, 138, 1, 142, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	143, 141, 145, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 146, 144, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 148, 1, 
	1, 149, 1, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 150, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 151, 1, 
	151, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 142, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	153, 152, 145, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 155, 
	154, 154, 156, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 156, 1, 1, 1, 1, 1, 1, 
	1, 157, 158, 1, 1, 159, 1, 1, 
	1, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 161, 1, 1, 1, 1, 
	1, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 1, 1, 1, 
	160, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 150, 1, 1, 1, 
	1, 1, 1, 1, 1, 162, 1, 1, 
	151, 1, 163, 164, 164, 164, 164, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 163, 1, 165, 1, 1, 1, 1, 
	166, 1, 167, 1, 1, 168, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 136, 136, 
	136, 136, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 137, 1, 
	1, 1, 1, 138, 1, 171, 1, 1, 
	172, 1, 1, 1, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 1, 1, 
	1, 1, 1, 1, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	1, 1, 1, 140, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	156, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 156, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	158, 1, 1, 159, 1, 1, 1, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 1, 1, 1, 173, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 144, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 1, 1, 
	1, 1, 1, 1, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	1, 1, 1, 174, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	175, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 176, 
	1, 1, 1, 1, 1, 1, 1, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 177, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 178, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 178, 1, 1, 1, 1, 1, 
	1, 1, 179, 1, 180, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 180, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 180, 
	181, 181, 181, 181, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 180, 1, 
	182, 1, 1, 1, 1, 183, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 181, 181, 181, 181, 181, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 181, 1, 182, 1, 1, 1, 1, 
	183, 1, 187, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 188, 186, 190, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	191, 189, 192, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 192, 1, 1, 1, 1, 1, 1, 
	1, 1, 193, 1, 1, 194, 1, 195, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 195, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 196, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 196, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 187, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 198, 197, 190, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 200, 199, 199, 201, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 201, 1, 1, 
	1, 1, 1, 1, 1, 202, 203, 1, 
	1, 204, 1, 1, 1, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 206, 
	1, 1, 1, 1, 1, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 1, 1, 1, 205, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 195, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	195, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 196, 1, 208, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 208, 1, 210, 
	1, 1, 1, 1, 211, 1, 212, 1, 
	1, 213, 1, 1, 1, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 1, 
	1, 1, 1, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 214, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 215, 181, 181, 181, 181, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	215, 1, 182, 1, 1, 1, 1, 183, 
	1, 216, 1, 1, 217, 1, 1, 1, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 1, 1, 1, 1, 1, 1, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 1, 1, 1, 185, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 201, 1, 1, 1, 1, 
	1, 1, 1, 1, 203, 1, 1, 204, 
	1, 1, 1, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 1, 1, 1, 
	1, 1, 1, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 1, 
	1, 1, 218, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 189, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 1, 220, 
	1, 221, 1, 223, 1, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 223, 222, 224, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 224, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 226, 1, 227, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 227, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 228, 1, 1, 230, 229, 231, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 97, 
	97, 97, 97, 97, 97, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 97, 97, 97, 232, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 1, 233, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 1, 1, 1, 1, 1, 1, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 1, 234, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 235, 1, 
	1, 236, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 1, 1, 1, 1, 1, 1, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 1, 1, 1, 237, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 239, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	238, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 240, 241, 242, 
	242, 242, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 240, 1, 243, 1, 
	1, 1, 1, 244, 1, 1, 1, 1, 
	1, 1, 1, 1, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 245, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	246, 247, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 246, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 1, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 114, 114, 114, 114, 114, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 114, 1, 115, 1, 1, 1, 
	1, 116, 1, 1, 248, 1, 1, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 1, 1, 250, 
	223, 1, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 223, 
	222, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 44, 8, 9, 45, 
	8, 9, 45, 10, 17, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 17, 11, 
	15, 42, 17, 18, 18, 19, 20, 21, 
	22, 23, 21, 22, 23, 24, 25, 26, 
	31, 34, 40, 27, 28, 41, 27, 28, 
	41, 29, 108, 30, 29, 30, 32, 33, 
	32, 33, 29, 35, 108, 30, 34, 38, 
	108, 37, 111, 39, 25, 26, 31, 108, 
	30, 40, 39, 108, 30, 40, 43, 6, 
	7, 12, 17, 11, 44, 43, 17, 11, 
	44, 0, 112, 114, 48, 49, 52, 50, 
	116, 51, 50, 116, 51, 53, 54, 53, 
	54, 56, 57, 58, 61, 120, 119, 59, 
	117, 60, 59, 117, 60, 62, 63, 62, 
	63, 65, 66, 67, 65, 66, 67, 68, 
	69, 70, 75, 78, 82, 71, 72, 83, 
	71, 72, 83, 73, 124, 74, 73, 74, 
	76, 77, 76, 77, 73, 79, 124, 74, 
	78, 80, 124, 81, 69, 70, 75, 124, 
	74, 82, 81, 124, 74, 82, 85, 86, 
	87, 85, 86, 87, 88, 89, 90, 95, 
	98, 102, 91, 92, 103, 91, 92, 103, 
	93, 125, 94, 93, 94, 96, 97, 96, 
	97, 93, 99, 125, 94, 98, 100, 125, 
	101, 89, 90, 95, 125, 94, 102, 101, 
	125, 94, 102, 127, 106, 107, 128, 129, 
	109, 110, 36, 109, 36, 111, 110, 113, 
	112, 115, 114, 118, 118, 119, 120, 121, 
	122, 123, 57, 58, 61, 119, 122, 123, 
	126, 127, 128
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 16, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 18, 18, 
	0, 20, 0, 21, 0, 0, 0, 2, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	0, 7, 9, 12, 13, 12, 0, 14, 
	0, 16, 16, 16, 0, 0, 12, 12, 
	0, 0, 18, 19, 18, 18, 0, 20, 
	0, 0, 22, 24, 25, 25, 25, 24, 
	24, 26, 27, 27, 27, 0, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 9, 0, 0, 0, 12, 
	32, 12, 0, 33, 0, 12, 12, 0, 
	0, 0, 0, 0, 0, 9, 9, 12, 
	13, 12, 0, 14, 0, 12, 12, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 44, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 47, 18, 
	0, 20, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	7, 9, 12, 13, 12, 0, 14, 0, 
	16, 16, 16, 0, 0, 12, 12, 0, 
	0, 18, 19, 18, 18, 0, 20, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 52, 0, 0, 22, 22, 
	54, 53, 54, 0, 0, 0, 55, 3, 
	0, 20, 0, 60, 62, 0, 0, 20, 
	25, 65, 25, 25, 25, 26, 0, 67, 
	68, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 8, 10, 11, 
	11, 15, 0, 6, 11, 11, 11, 17, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 0, 0, 23, 23, 
	23, 11, 23, 23, 23, 11, 28, 0, 
	30, 31, 31, 31, 31, 31, 31, 34, 
	34, 35, 36, 36, 36, 36, 36, 36, 
	1, 38, 39, 40, 41, 42, 43, 43, 
	0, 0, 45, 43, 43, 43, 46, 0, 
	49, 49, 49, 43, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 23, 23, 23, 11, 
	0, 0, 0, 0, 53, 53, 0, 55, 
	56, 57, 58, 59, 0, 60, 0, 61, 
	63, 64, 66, 35, 0, 68, 0, 69, 
	70, 70
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 54 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 19 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 16 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 57 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 15 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 10 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 69 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 70 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 36, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 36, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	1, 38, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	38, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 1, 1, 1, 1, 1, 1, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 1, 1, 1, 39, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 40, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 40, 1, 1, 1, 1, 
	1, 1, 1, 41, 1, 1, 1, 1, 
	1, 1, 1, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 1, 1, 1, 
	1, 1, 1, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 1, 
	1, 1, 42, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 43, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 43, 1, 
	1, 1, 1, 1, 1, 1, 44, 1, 
	45, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 45, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 45, 46, 46, 46, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 47, 1, 1, 1, 
	1, 48, 1, 1, 1, 1, 1, 1, 
	1, 1, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 1, 1, 1, 1, 
	1, 1, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 1, 1, 
	1, 50, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 46, 46, 
	46, 46, 46, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 46, 1, 47, 
	1, 1, 1, 1, 48, 1, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	53, 51, 55, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 56, 54, 57, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 57, 1, 1, 
	1, 1, 1, 1, 1, 1, 58, 1, 
	1, 59, 1, 60, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 60, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 61, 1, 
	61, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 61, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 52, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	63, 62, 55, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 65, 
	64, 64, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 1, 1, 1, 1, 1, 
	1, 67, 68, 1, 1, 69, 1, 1, 
	1, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 1, 1, 1, 1, 
	1, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 1, 1, 1, 
	70, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 60, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 1, 
	1, 1, 1, 1, 1, 72, 1, 1, 
	61, 1, 73, 1, 1, 74, 75, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 77, 
	1, 1, 1, 1, 78, 1, 79, 1, 
	1, 80, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 46, 46, 46, 46, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 47, 1, 1, 1, 1, 48, 
	1, 83, 1, 1, 84, 1, 1, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 1, 1, 1, 1, 1, 1, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 1, 1, 1, 50, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 1, 1, 1, 
	1, 1, 1, 1, 68, 1, 1, 69, 
	1, 1, 1, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 1, 
	1, 1, 85, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 54, 
	86, 87, 87, 87, 87, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	1, 88, 1, 1, 1, 1, 89, 1, 
	90, 1, 1, 91, 1, 1, 1, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 1, 1, 1, 1, 1, 1, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 1, 1, 1, 92, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 93, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 93, 1, 9, 1, 1, 1, 
	1, 10, 1, 94, 1, 1, 95, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 30, 1, 
	1, 31, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 16, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 97, 97, 97, 97, 
	97, 97, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 97, 97, 
	97, 98, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 100, 100, 100, 100, 100, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 101, 1, 1, 1, 1, 
	102, 1, 104, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 105, 103, 107, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	108, 106, 106, 104, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	110, 109, 107, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 112, 
	111, 111, 113, 114, 114, 114, 114, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 113, 1, 115, 1, 1, 1, 1, 
	116, 1, 1, 1, 1, 1, 1, 1, 
	1, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 1, 1, 1, 1, 1, 
	1, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 1, 1, 1, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 113, 114, 114, 
	114, 114, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 115, 1, 
	1, 1, 1, 116, 1, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 1, 1, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	1, 1, 1, 118, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	114, 114, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 114, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	120, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 121, 119, 123, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 124, 122, 
	122, 120, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 126, 125, 
	123, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 128, 127, 127, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 1, 1, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 1, 1, 1, 129, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 130, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 131, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 1, 1, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 1, 
	1, 1, 132, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 133, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 134, 1, 
	135, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 135, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 135, 136, 136, 136, 136, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 135, 1, 137, 1, 1, 1, 
	1, 138, 1, 1, 1, 1, 1, 1, 
	1, 1, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 1, 1, 1, 1, 
	1, 1, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 1, 1, 
	1, 140, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 136, 136, 
	136, 136, 136, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 136, 1, 137, 
	1, 1, 1, 1, 138, 1, 142, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	143, 141, 145, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 146, 144, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 148, 1, 
	1, 149, 1, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 150, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 151, 1, 
	151, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 142, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	153, 152, 145, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 155, 
	154, 154, 156, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 156, 1, 1, 1, 1, 1, 1, 
	1, 157, 158, 1, 1, 159, 1, 1, 
	1, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 161, 1, 1, 1, 1, 
	1, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 1, 1, 1, 
	160, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 150, 1, 1, 1, 
	1, 1, 1, 1, 1, 162, 1, 1, 
	151, 1, 163, 164, 164, 164, 164, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 163, 1, 165, 1, 1, 1, 1, 
	166, 1, 167, 1, 1, 168, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 136, 136, 
	136, 136, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 137, 1, 
	1, 1, 1, 138, 1, 171, 1, 1, 
	172, 1, 1, 1, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 1, 1, 
	1, 1, 1, 1, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	1, 1, 1, 140, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	156, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 156, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	158, 1, 1, 159, 1, 1, 1, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 1, 1, 1, 173, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 144, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 1, 1, 
	1, 1, 1, 1, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	1, 1, 1, 174, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	175, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 176, 
	1, 1, 1, 1, 1, 1, 1, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 177, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 178, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 178, 1, 1, 1, 1, 1, 
	1, 1, 179, 1, 180, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 180, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 180, 
	181, 181, 181, 181, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 180, 1, 
	182, 1, 1, 1, 1, 183, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 181, 181, 181, 181, 181, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 181, 1, 182, 1, 1, 1, 1, 
	183, 1, 187, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 188, 186, 190, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	191, 189, 192, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 192, 1, 1, 1, 1, 1, 1, 
	1, 1, 193, 1, 1, 194, 1, 195, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 195, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 196, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 196, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 187, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 198, 197, 190, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 200, 199, 199, 201, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 201, 1, 1, 
	1, 1, 1, 1, 1, 202, 203, 1, 
	1, 204, 1, 1, 1, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 206, 
	1, 1, 1, 1, 1, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 1, 1, 1, 205, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 195, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	195, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 196, 1, 208, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 208, 1, 210, 
	1, 1, 1, 1, 211, 1, 212, 1, 
	1, 213, 1, 1, 1, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 1, 
	1, 1, 1, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 214, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 215, 181, 181, 181, 181, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	215, 1, 182, 1, 1, 1, 1, 183, 
	1, 216, 1, 1, 217, 1, 1, 1, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 1, 1, 1, 1, 1, 1, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 1, 1, 1, 185, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 201, 1, 1, 1, 1, 
	1, 1, 1, 1, 203, 1, 1, 204, 
	1, 1, 1, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 1, 1, 1, 
	1, 1, 1, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 1, 
	1, 1, 218, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 189, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 1, 220, 
	1, 221, 1, 223, 1, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 223, 222, 224, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 224, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 226, 1, 227, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 227, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 228, 1, 1, 230, 229, 231, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 97, 
	97, 97, 97, 97, 97, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 97, 97, 97, 232, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 1, 233, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 1, 1, 1, 1, 1, 1, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 1, 234, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 235, 1, 
	1, 236, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 1, 1, 1, 1, 1, 1, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 1, 1, 1, 237, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 239, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	238, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 240, 241, 242, 
	242, 242, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 240, 1, 243, 1, 
	1, 1, 1, 244, 1, 1, 1, 1, 
	1, 1, 1, 1, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 245, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	246, 247, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 246, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 1, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 114, 114, 114, 114, 114, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 114, 1, 115, 1, 1, 1, 
	1, 116, 1, 1, 248, 1, 1, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 1, 1, 250, 
	223, 1, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 223, 
	222, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 44, 8, 9, 45, 
	8, 9, 45, 10, 17, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 17, 11, 
	15, 42, 17, 18, 18, 19, 20, 21, 
	22, 23, 21, 22, 23, 24, 25, 26, 
	31, 34, 40, 27, 28, 41, 27, 28, 
	41, 29, 108, 30, 29, 30, 32, 33, 
	32, 33, 29, 35, 108, 30, 34, 38, 
	108, 37, 111, 39, 25, 26, 31, 108, 
	30, 40, 39, 108, 30, 40, 43, 6, 
	7, 12, 17, 11, 44, 43, 17, 11, 
	44, 0, 112, 114, 48, 49, 52, 50, 
	116, 51, 50, 116, 51, 53, 54, 53, 
	54, 56, 57, 58, 61, 120, 119, 59, 
	117, 60, 59, 117, 60, 62, 63, 62, 
	63, 65, 66, 67, 65, 66, 67, 68, 
	69, 70, 75, 78, 82, 71, 72, 83, 
	71, 72, 83, 73, 124, 74, 73, 74, 
	76, 77, 76, 77, 73, 79, 124, 74, 
	78, 80, 124, 81, 69, 70, 75, 124, 
	74, 82, 81, 124, 74, 82, 85, 86, 
	87, 85, 86, 87, 88, 89, 90, 95, 
	98, 102, 91, 92, 103, 91, 92, 103, 
	93, 125, 94, 93, 94, 96, 97, 96, 
	97, 93, 99, 125, 94, 98, 100, 125, 
	101, 89, 90, 95, 125, 94, 102, 101, 
	125, 94, 102, 127, 106, 107, 128, 129, 
	109, 110, 36, 109, 36, 111, 110, 113, 
	112, 115, 114, 118, 118, 119, 120, 121, 
	122, 123, 57, 58, 61, 119, 122, 123, 
	126, 127, 128
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 16, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 18, 18, 
	0, 20, 0, 21, 0, 0, 0, 2, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	0, 7, 9, 12, 13, 12, 0, 14, 
	0, 16, 16, 16, 0, 0, 12, 12, 
	0, 0, 18, 19, 18, 18, 0, 20, 
	0, 0, 22, 24, 25, 25, 25, 24, 
	24, 26, 27, 27, 27, 0, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 9, 0, 0, 0, 12, 
	32, 12, 0, 33, 0, 12, 12, 0, 
	0, 0, 0, 0, 0, 9, 9, 12, 
	13, 12, 0, 14, 0, 12, 12, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 44, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 47, 18, 
	0, 20, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	7, 9, 12, 13, 12, 0, 14, 0, 
	16, 16, 16, 0, 0, 12, 12, 0, 
	0, 18, 19, 18, 18, 0, 20, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 52, 0, 0, 22, 22, 
	54, 53, 54, 0, 0, 0, 55, 3, 
	0, 20, 0, 60, 62, 0, 0, 20, 
	25, 65, 25, 25, 25, 26, 0, 67, 
	68, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 8, 10, 11, 
	11, 15, 0, 6, 11, 11, 11, 17, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 0, 0, 23, 23, 
	23, 11, 23, 23, 23, 11, 28, 0, 
	30, 31, 31, 31, 31, 31, 31, 34, 
	34, 35, 36, 36, 36, 36, 36, 36, 
	1, 38, 39, 40, 41, 42, 43, 43, 
	0, 0, 45, 43, 43, 43, 46, 0, 
	49, 49, 49, 43, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 23, 23, 23, 11, 
	0, 0, 0, 0, 53, 53, 0, 55, 
	56, 57, 58, 59, 0, 60, 0, 61, 
	63, 64, 66, 35, 0, 68, 0, 69, 
	70, 70
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 54 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 19 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 16 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 57 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 15 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 10 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 69 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 70 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 36, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 36, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	1, 38, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	38, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 1, 1, 1, 1, 1, 1, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 1, 1, 1, 39, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 40, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 40, 1, 1, 1, 1, 
	1, 1, 1, 41, 1, 1, 1, 1, 
	1, 1, 1, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 1, 1, 1, 
	1, 1, 1, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 1, 
	1, 1, 42, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 43, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 43, 1, 
	1, 1, 1, 1, 1, 1, 44, 1, 
	45, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 45, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 45, 46, 46, 46, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 47, 1, 1, 1, 
	1, 48, 1, 1, 1, 1, 1, 1, 
	1, 1, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 1, 1, 1, 1, 
	1, 1, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 1, 1, 
	1, 50, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 46, 46, 
	46, 46, 46, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 46, 1, 47, 
	1, 1, 1, 1, 48, 1, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	53, 51, 55, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 56, 54, 57, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 57, 1, 1, 
	1, 1, 1, 1, 1, 1, 58, 1, 
	1, 59, 1, 60, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 60, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 61, 1, 
	61, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 61, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 52, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	63, 62, 55, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 65, 
	64, 64, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 1, 1, 1, 1, 1, 
	1, 67, 68, 1, 1, 69, 1, 1, 
	1, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 1, 1, 1, 1, 
	1, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 1, 1, 1, 
	70, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 60, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 1, 
	1, 1, 1, 1, 1, 72, 1, 1, 
	61, 1, 73, 1, 1, 74, 75, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 77, 
	1, 1, 1, 1, 78, 1, 79, 1, 
	1, 80, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 46, 46, 46, 46, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 47, 1, 1, 1, 1, 48, 
	1, 83, 1, 1, 84, 1, 1, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 1, 1, 1, 1, 1, 1, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 1, 1, 1, 50, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 1, 1, 1, 
	1, 1, 1, 1, 68, 1, 1, 69, 
	1, 1, 1, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 1, 
	1, 1, 85, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 54, 
	86, 87, 87, 87, 87, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	1, 88, 1, 1, 1, 1, 89, 1, 
	90, 1, 1, 91, 1, 1, 1, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 1, 1, 1, 1, 1, 1, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 1, 1, 1, 92, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 93, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 93, 1, 9, 1, 1, 1, 
	1, 10, 1, 94, 1, 1, 95, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 30, 1, 
	1, 31, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 16, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 97, 97, 97, 97, 
	97, 97, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 97, 97, 
	97, 98, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 100, 100, 100, 100, 100, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 101, 1, 1, 1, 1, 
	102, 1, 104, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 105, 103, 107, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	108, 106, 106, 104, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	110, 109, 107, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 112, 
	111, 111, 113, 114, 114, 114, 114, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 113, 1, 115, 1, 1, 1, 1, 
	116, 1, 1, 1, 1, 1, 1, 1, 
	1, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 1, 1, 1, 1, 1, 
	1, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 1, 1, 1, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 113, 114, 114, 
	114, 114, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 115, 1, 
	1, 1, 1, 116, 1, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 1, 1, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	1, 1, 1, 118, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	114, 114, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 114, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	120, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 121, 119, 123, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 124, 122, 
	122, 120, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 126, 125, 
	123, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 128, 127, 127, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 1, 1, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 1, 1, 1, 129, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 130, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 131, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 1, 1, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 1, 
	1, 1, 132, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 133, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 134, 1, 
	135, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 135, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 135, 136, 136, 136, 136, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 135, 1, 137, 1, 1, 1, 
	1, 138, 1, 1, 1, 1, 1, 1, 
	1, 1, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 1, 1, 1, 1, 
	1, 1, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 1, 1, 
	1, 140, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 136, 136, 
	136, 136, 136, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 136, 1, 137, 
	1, 1, 1, 1, 138, 1, 142, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	143, 141, 145, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 146, 144, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 148, 1, 
	1, 149, 1, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 150, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 151, 1, 
	151, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 142, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	153, 152, 145, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 155, 
	154, 154, 156, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 156, 1, 1, 1, 1, 1, 1, 
	1, 157, 158, 1, 1, 159, 1, 1, 
	1, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 161, 1, 1, 1, 1, 
	1, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 1, 1, 1, 
	160, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 150, 1, 1, 1, 
	1, 1, 1, 1, 1, 162, 1, 1, 
	151, 1, 163, 164, 164, 164, 164, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 163, 1, 165, 1, 1, 1, 1, 
	166, 1, 167, 1, 1, 168, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 136, 136, 
	136, 136, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 137, 1, 
	1, 1, 1, 138, 1, 171, 1, 1, 
	172, 1, 1, 1, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 1, 1, 
	1, 1, 1, 1, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	1, 1, 1, 140, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	156, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 156, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	158, 1, 1, 159, 1, 1, 1, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 1, 1, 1, 173, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 144, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 1, 1, 
	1, 1, 1, 1, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	1, 1, 1, 174, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	175, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 176, 
	1, 1, 1, 1, 1, 1, 1, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 177, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 178, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 178, 1, 1, 1, 1, 1, 
	1, 1, 179, 1, 180, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 180, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 180, 
	181, 181, 181, 181, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 180, 1, 
	182, 1, 1, 1, 1, 183, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 181, 181, 181, 181, 181, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 181, 1, 182, 1, 1, 1, 1, 
	183, 1, 187, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 188, 186, 190, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	191, 189, 192, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 192, 1, 1, 1, 1, 1, 1, 
	1, 1, 193, 1, 1, 194, 1, 195, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 195, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 196, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 196, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 187, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 198, 197, 190, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 200, 199, 199, 201, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 201, 1, 1, 
	1, 1, 1, 1, 1, 202, 203, 1, 
	1, 204, 1, 1, 1, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 206, 
	1, 1, 1, 1, 1, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 1, 1, 1, 205, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 195, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	195, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 196, 1, 208, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 208, 1, 210, 
	1, 1, 1, 1, 211, 1, 212, 1, 
	1, 213, 1, 1, 1, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 1, 
	1, 1, 1, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 214, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 215, 181, 181, 181, 181, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	215, 1, 182, 1, 1, 1, 1, 183, 
	1, 216, 1, 1, 217, 1, 1, 1, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 1, 1, 1, 1, 1, 1, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 1, 1, 1, 185, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 201, 1, 1, 1, 1, 
	1, 1, 1, 1, 203, 1, 1, 204, 
	1, 1, 1, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 1, 1, 1, 
	1, 1, 1, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 1, 
	1, 1, 218, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 189, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 1, 220, 
	1, 221, 1, 223, 1, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 223, 222, 224, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 224, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 226, 1, 227, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 227, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 228, 1, 1, 230, 229, 231, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 97, 
	97, 97, 97, 97, 97, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 97, 97, 97, 232, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 1, 233, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 1, 1, 1, 1, 1, 1, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 1, 234, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 235, 1, 
	1, 236, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 1, 1, 1, 1, 1, 1, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 1, 1, 1, 237, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 239, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	238, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 240, 241, 242, 
	242, 242, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 240, 1, 243, 1, 
	1, 1, 1, 244, 1, 1, 1, 1, 
	1, 1, 1, 1, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 245, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	246, 247, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 246, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 1, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 114, 114, 114, 114, 114, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 114, 1, 115, 1, 1, 1, 
	1, 116, 1, 1, 248, 1, 1, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 1, 1, 250, 
	223, 1, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 223, 
	222, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 44, 8, 9, 45, 
	8, 9, 45, 10, 17, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 17, 11, 
	15, 42, 17, 18, 18, 19, 20, 21, 
	22, 23, 21, 22, 23, 24, 25, 26, 
	31, 34, 40, 27, 28, 41, 27, 28, 
	41, 29, 108, 30, 29, 30, 32, 33, 
	32, 33, 29, 35, 108, 30, 34, 38, 
	108, 37, 111, 39, 25, 26, 31, 108, 
	30, 40, 39, 108, 30, 40, 43, 6, 
	7, 12, 17, 11, 44, 43, 17, 11, 
	44, 0, 112, 114, 48, 49, 52, 50, 
	116, 51, 50, 116, 51, 53, 54, 53, 
	54, 56, 57, 58, 61, 120, 119, 59, 
	117, 60, 59, 117, 60, 62, 63, 62, 
	63, 65, 66, 67, 65, 66, 67, 68, 
	69, 70, 75, 78, 82, 71, 72, 83, 
	71, 72, 83, 73, 124, 74, 73, 74, 
	76, 77, 76, 77, 73, 79, 124, 74, 
	78, 80, 124, 81, 69, 70, 75, 124, 
	74, 82, 81, 124, 74, 82, 85, 86, 
	87, 85, 86, 87, 88, 89, 90, 95, 
	98, 102, 91, 92, 103, 91, 92, 103, 
	93, 125, 94, 93, 94, 96, 97, 96, 
	97, 93, 99, 125, 94, 98, 100, 125, 
	101, 89, 90, 95, 125, 94, 102, 101, 
	125, 94, 102, 127, 106, 107, 128, 129, 
	109, 110, 36, 109, 36, 111, 110, 113, 
	112, 115, 114, 118, 118, 119, 120, 121, 
	122, 123, 57, 58, 61, 119, 122, 123, 
	126, 127, 128
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 16, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 18, 18, 
	0, 20, 0, 21, 0, 0, 0, 2, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	0, 7, 9, 12, 13, 12, 0, 14, 
	0, 16, 16, 16, 0, 0, 12, 12, 
	0, 0, 18, 19, 18, 18, 0, 20, 
	0, 0, 22, 24, 25, 25, 25, 24, 
	24, 26, 27, 27, 27, 0, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 9, 0, 0, 0, 12, 
	32, 12, 0, 33, 0, 12, 12, 0, 
	0, 0, 0, 0, 0, 9, 9, 12, 
	13, 12, 0, 14, 0, 12, 12, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 44, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 47, 18, 
	0, 20, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	7, 9, 12, 13, 12, 0, 14, 0, 
	16, 16, 16, 0, 0, 12, 12, 0, 
	0, 18, 19, 18, 18, 0, 20, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 52, 0, 0, 22, 22, 
	54, 53, 54, 0, 0, 0, 55, 3, 
	0, 20, 0, 60, 62, 0, 0, 20, 
	25, 65, 25, 25, 25, 26, 0, 67, 
	68, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 8, 10, 11, 
	11, 15, 0, 6, 11, 11, 11, 17, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 0, 0, 23, 23, 
	23, 11, 23, 23, 23, 11, 28, 0, 
	30, 31, 31, 31, 31, 31, 31, 34, 
	34, 35, 36, 36, 36, 36, 36, 36, 
	1, 38, 39, 40, 41, 42, 43, 43, 
	0, 0, 45, 43, 43, 43, 46, 0, 
	49, 49, 49, 43, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 23, 23, 23, 11, 
	0, 0, 0, 0, 53, 53, 0, 55, 
	56, 57, 58, 59, 0, 60, 0, 61, 
	63, 64, 66, 35, 0, 68, 0, 69, 
	70, 70
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 54 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 19 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 16 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 57 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 15 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 10 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 69 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 70 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module SimpleStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 7, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 9, 1, 1, 1, 
	1, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 9, 
	1, 1, 1, 1, 10, 1, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	15, 13, 17, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 18, 16, 19, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 19, 1, 1, 
	1, 1, 1, 1, 1, 1, 20, 1, 
	1, 21, 1, 22, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 22, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 1, 
	23, 8, 8, 8, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 23, 
	1, 9, 1, 1, 1, 1, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 1, 1, 1, 1, 1, 1, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 1, 1, 1, 11, 1, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 1, 14, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	25, 24, 17, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	26, 26, 28, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 28, 1, 1, 1, 1, 1, 1, 
	1, 29, 30, 1, 1, 31, 1, 1, 
	1, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 33, 1, 1, 1, 1, 
	1, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 1, 1, 1, 
	32, 1, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 1, 22, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 22, 1, 1, 1, 
	1, 1, 1, 1, 1, 34, 1, 1, 
	23, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 36, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 36, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	1, 38, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	38, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 1, 1, 1, 1, 1, 1, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 1, 1, 1, 39, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 1, 40, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 40, 1, 1, 1, 1, 
	1, 1, 1, 41, 1, 1, 1, 1, 
	1, 1, 1, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 1, 1, 1, 
	1, 1, 1, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 1, 
	1, 1, 42, 1, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 1, 43, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 43, 1, 
	1, 1, 1, 1, 1, 1, 44, 1, 
	45, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 45, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 45, 46, 46, 46, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 45, 1, 47, 1, 1, 1, 
	1, 48, 1, 1, 1, 1, 1, 1, 
	1, 1, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 1, 1, 1, 1, 
	1, 1, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 1, 1, 
	1, 50, 1, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 1, 46, 46, 
	46, 46, 46, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 46, 1, 47, 
	1, 1, 1, 1, 48, 1, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	53, 51, 55, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 56, 54, 57, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 57, 1, 1, 
	1, 1, 1, 1, 1, 1, 58, 1, 
	1, 59, 1, 60, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 60, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 61, 1, 
	61, 46, 46, 46, 46, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 61, 
	1, 47, 1, 1, 1, 1, 48, 1, 
	1, 1, 1, 1, 1, 1, 1, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 1, 1, 1, 1, 1, 1, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 1, 1, 1, 49, 1, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 1, 52, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	63, 62, 55, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 65, 
	64, 64, 66, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 66, 1, 1, 1, 1, 1, 1, 
	1, 67, 68, 1, 1, 69, 1, 1, 
	1, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 1, 1, 1, 1, 
	1, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 1, 1, 1, 
	70, 1, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 1, 60, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 1, 
	1, 1, 1, 1, 1, 72, 1, 1, 
	61, 1, 73, 1, 1, 74, 75, 76, 
	76, 76, 76, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 77, 
	1, 1, 1, 1, 78, 1, 79, 1, 
	1, 80, 1, 1, 1, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 1, 
	1, 1, 1, 1, 1, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 1, 1, 1, 81, 1, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	1, 82, 46, 46, 46, 46, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	82, 1, 47, 1, 1, 1, 1, 48, 
	1, 83, 1, 1, 84, 1, 1, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 1, 1, 1, 1, 1, 1, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 1, 1, 1, 50, 
	1, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 1, 66, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 1, 1, 1, 
	1, 1, 1, 1, 68, 1, 1, 69, 
	1, 1, 1, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 1, 1, 1, 
	1, 1, 1, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 1, 
	1, 1, 85, 1, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 1, 54, 
	86, 87, 87, 87, 87, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 86, 
	1, 88, 1, 1, 1, 1, 89, 1, 
	90, 1, 1, 91, 1, 1, 1, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 1, 1, 1, 1, 1, 1, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 1, 1, 1, 92, 1, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 1, 93, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 93, 1, 9, 1, 1, 1, 
	1, 10, 1, 94, 1, 1, 95, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 1, 1, 1, 1, 
	1, 1, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 1, 1, 
	1, 12, 1, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 1, 28, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 28, 1, 1, 
	1, 1, 1, 1, 1, 1, 30, 1, 
	1, 31, 1, 1, 1, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 1, 
	1, 1, 1, 1, 1, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 1, 1, 1, 96, 1, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	1, 16, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 97, 97, 97, 97, 
	97, 97, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 97, 97, 
	97, 98, 97, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 100, 100, 100, 100, 100, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 100, 1, 101, 1, 1, 1, 1, 
	102, 1, 104, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 105, 103, 107, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	108, 106, 106, 104, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	110, 109, 107, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 112, 
	111, 111, 113, 114, 114, 114, 114, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 113, 1, 115, 1, 1, 1, 1, 
	116, 1, 1, 1, 1, 1, 1, 1, 
	1, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 1, 1, 1, 1, 1, 
	1, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 1, 1, 1, 
	117, 1, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 1, 113, 114, 114, 
	114, 114, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 113, 1, 115, 1, 
	1, 1, 1, 116, 1, 1, 1, 1, 
	1, 1, 1, 1, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 1, 1, 
	1, 1, 1, 1, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	1, 1, 1, 118, 1, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 1, 
	114, 114, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 114, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	120, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 121, 119, 123, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 124, 122, 
	122, 120, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 126, 125, 
	123, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 128, 127, 127, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 1, 1, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 1, 1, 1, 129, 
	1, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 1, 130, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 131, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 1, 1, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 1, 
	1, 1, 132, 1, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 1, 133, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 134, 1, 
	135, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 135, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 135, 136, 136, 136, 136, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 135, 1, 137, 1, 1, 1, 
	1, 138, 1, 1, 1, 1, 1, 1, 
	1, 1, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 1, 1, 1, 1, 
	1, 1, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 1, 1, 
	1, 140, 1, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 1, 136, 136, 
	136, 136, 136, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 136, 1, 137, 
	1, 1, 1, 1, 138, 1, 142, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	143, 141, 145, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 146, 144, 147, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 147, 1, 1, 
	1, 1, 1, 1, 1, 1, 148, 1, 
	1, 149, 1, 150, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 150, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 151, 1, 
	151, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 151, 
	1, 137, 1, 1, 1, 1, 138, 1, 
	1, 1, 1, 1, 1, 1, 1, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 1, 1, 1, 1, 1, 1, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 1, 1, 1, 139, 1, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 1, 142, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	153, 152, 145, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 155, 
	154, 154, 156, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 156, 1, 1, 1, 1, 1, 1, 
	1, 157, 158, 1, 1, 159, 1, 1, 
	1, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 161, 1, 1, 1, 1, 
	1, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 1, 1, 1, 
	160, 1, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 1, 150, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 150, 1, 1, 1, 
	1, 1, 1, 1, 1, 162, 1, 1, 
	151, 1, 163, 164, 164, 164, 164, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 163, 1, 165, 1, 1, 1, 1, 
	166, 1, 167, 1, 1, 168, 1, 1, 
	1, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 1, 1, 1, 1, 1, 
	1, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 1, 1, 1, 
	169, 1, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 1, 170, 136, 136, 
	136, 136, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 170, 1, 137, 1, 
	1, 1, 1, 138, 1, 171, 1, 1, 
	172, 1, 1, 1, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 1, 1, 
	1, 1, 1, 1, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	1, 1, 1, 140, 1, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 1, 
	156, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 156, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	158, 1, 1, 159, 1, 1, 1, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 1, 1, 1, 1, 1, 1, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 1, 1, 1, 173, 1, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 1, 144, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 1, 1, 
	1, 1, 1, 1, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	1, 1, 1, 174, 1, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 1, 
	175, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 175, 
	1, 1, 1, 1, 1, 1, 1, 176, 
	1, 1, 1, 1, 1, 1, 1, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 1, 1, 1, 1, 1, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 1, 1, 1, 177, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 1, 178, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 178, 1, 1, 1, 1, 1, 
	1, 1, 179, 1, 180, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 180, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 180, 
	181, 181, 181, 181, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 180, 1, 
	182, 1, 1, 1, 1, 183, 1, 1, 
	1, 1, 1, 1, 1, 1, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	1, 1, 1, 1, 1, 1, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 1, 1, 1, 185, 1, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 1, 181, 181, 181, 181, 181, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 181, 1, 182, 1, 1, 1, 1, 
	183, 1, 187, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 188, 186, 190, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	191, 189, 192, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 192, 1, 1, 1, 1, 1, 1, 
	1, 1, 193, 1, 1, 194, 1, 195, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 195, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 196, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 196, 1, 182, 1, 1, 
	1, 1, 183, 1, 1, 1, 1, 1, 
	1, 1, 1, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 1, 1, 1, 
	1, 1, 1, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 1, 
	1, 1, 184, 1, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 1, 187, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 198, 197, 190, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 200, 199, 199, 201, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 201, 1, 1, 
	1, 1, 1, 1, 1, 202, 203, 1, 
	1, 204, 1, 1, 1, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 206, 
	1, 1, 1, 1, 1, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 1, 1, 1, 205, 1, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	1, 195, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	195, 1, 1, 1, 1, 1, 1, 1, 
	1, 207, 1, 1, 196, 1, 208, 209, 
	209, 209, 209, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 208, 1, 210, 
	1, 1, 1, 1, 211, 1, 212, 1, 
	1, 213, 1, 1, 1, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 1, 
	1, 1, 1, 1, 1, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 1, 1, 1, 214, 1, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	1, 215, 181, 181, 181, 181, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	215, 1, 182, 1, 1, 1, 1, 183, 
	1, 216, 1, 1, 217, 1, 1, 1, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 1, 1, 1, 1, 1, 1, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 1, 1, 1, 185, 
	1, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 1, 201, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 201, 1, 1, 1, 1, 
	1, 1, 1, 1, 203, 1, 1, 204, 
	1, 1, 1, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 1, 1, 1, 
	1, 1, 1, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 1, 
	1, 1, 218, 1, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 1, 189, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 1, 220, 
	1, 221, 1, 223, 1, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 223, 222, 224, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 224, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 226, 1, 227, 225, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 227, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 228, 1, 1, 230, 229, 231, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 97, 
	97, 97, 97, 97, 97, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 97, 97, 97, 232, 97, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	97, 1, 233, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 1, 1, 1, 1, 1, 1, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 1, 234, 
	1, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 1, 1, 1, 235, 1, 
	1, 236, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 1, 1, 1, 1, 1, 1, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 1, 1, 1, 237, 1, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 239, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	238, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 240, 241, 242, 
	242, 242, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 240, 1, 243, 1, 
	1, 1, 1, 244, 1, 1, 1, 1, 
	1, 1, 1, 1, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 245, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	246, 247, 114, 114, 114, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 246, 
	1, 115, 1, 1, 1, 1, 116, 1, 
	1, 1, 1, 1, 1, 1, 1, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 1, 1, 1, 1, 1, 1, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 1, 1, 1, 118, 1, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 1, 114, 114, 114, 114, 114, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 114, 1, 115, 1, 1, 1, 
	1, 116, 1, 1, 248, 1, 1, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 1, 1, 250, 
	223, 1, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 223, 
	222, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 7, 12, 15, 44, 8, 9, 45, 
	8, 9, 45, 10, 17, 11, 10, 11, 
	13, 14, 13, 14, 10, 16, 17, 11, 
	15, 42, 17, 18, 18, 19, 20, 21, 
	22, 23, 21, 22, 23, 24, 25, 26, 
	31, 34, 40, 27, 28, 41, 27, 28, 
	41, 29, 108, 30, 29, 30, 32, 33, 
	32, 33, 29, 35, 108, 30, 34, 38, 
	108, 37, 111, 39, 25, 26, 31, 108, 
	30, 40, 39, 108, 30, 40, 43, 6, 
	7, 12, 17, 11, 44, 43, 17, 11, 
	44, 0, 112, 114, 48, 49, 52, 50, 
	116, 51, 50, 116, 51, 53, 54, 53, 
	54, 56, 57, 58, 61, 120, 119, 59, 
	117, 60, 59, 117, 60, 62, 63, 62, 
	63, 65, 66, 67, 65, 66, 67, 68, 
	69, 70, 75, 78, 82, 71, 72, 83, 
	71, 72, 83, 73, 124, 74, 73, 74, 
	76, 77, 76, 77, 73, 79, 124, 74, 
	78, 80, 124, 81, 69, 70, 75, 124, 
	74, 82, 81, 124, 74, 82, 85, 86, 
	87, 85, 86, 87, 88, 89, 90, 95, 
	98, 102, 91, 92, 103, 91, 92, 103, 
	93, 125, 94, 93, 94, 96, 97, 96, 
	97, 93, 99, 125, 94, 98, 100, 125, 
	101, 89, 90, 95, 125, 94, 102, 101, 
	125, 94, 102, 127, 106, 107, 128, 129, 
	109, 110, 36, 109, 36, 111, 110, 113, 
	112, 115, 114, 118, 118, 119, 120, 121, 
	122, 123, 57, 58, 61, 119, 122, 123, 
	126, 127, 128
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 16, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 18, 18, 
	0, 20, 0, 21, 0, 0, 0, 2, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	0, 7, 9, 12, 13, 12, 0, 14, 
	0, 16, 16, 16, 0, 0, 12, 12, 
	0, 0, 18, 19, 18, 18, 0, 20, 
	0, 0, 22, 24, 25, 25, 25, 24, 
	24, 26, 27, 27, 27, 0, 24, 25, 
	25, 25, 24, 24, 26, 27, 27, 27, 
	0, 28, 29, 9, 0, 0, 0, 12, 
	32, 12, 0, 33, 0, 12, 12, 0, 
	0, 0, 0, 0, 0, 9, 9, 12, 
	13, 12, 0, 14, 0, 12, 12, 0, 
	0, 37, 3, 4, 0, 0, 5, 0, 
	0, 0, 0, 7, 9, 12, 13, 12, 
	0, 14, 0, 16, 44, 16, 0, 0, 
	12, 12, 0, 0, 18, 19, 47, 18, 
	0, 20, 48, 24, 25, 25, 25, 50, 
	24, 26, 27, 51, 27, 0, 2, 3, 
	4, 0, 0, 5, 0, 0, 0, 0, 
	7, 9, 12, 13, 12, 0, 14, 0, 
	16, 16, 16, 0, 0, 12, 12, 0, 
	0, 18, 19, 18, 18, 0, 20, 0, 
	24, 25, 25, 25, 24, 24, 26, 27, 
	27, 27, 0, 52, 0, 0, 22, 22, 
	54, 53, 54, 0, 0, 0, 55, 3, 
	0, 20, 0, 60, 62, 0, 0, 20, 
	25, 65, 25, 25, 25, 26, 0, 67, 
	68, 0, 0
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 8, 10, 11, 
	11, 15, 0, 6, 11, 11, 11, 17, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 0, 0, 23, 23, 
	23, 11, 23, 23, 23, 11, 28, 0, 
	30, 31, 31, 31, 31, 31, 31, 34, 
	34, 35, 36, 36, 36, 36, 36, 36, 
	1, 38, 39, 40, 41, 42, 43, 43, 
	0, 0, 45, 43, 43, 43, 46, 0, 
	49, 49, 49, 43, 1, 1, 0, 6, 
	8, 10, 11, 11, 15, 0, 6, 11, 
	11, 11, 17, 0, 23, 23, 23, 11, 
	0, 0, 0, 0, 53, 53, 0, 55, 
	56, 57, 58, 59, 0, 60, 0, 61, 
	63, 64, 66, 35, 0, 68, 0, 69, 
	70, 70
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


      # end: ragel
          end

          def each
            @buffers    = {}
            @incomplete = {}
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 29 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 12 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 25 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 48 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 22 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 21 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 54 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 19 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 14 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 26 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    @id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 37 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 13 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 16 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 62 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 32 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 44 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 50 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 28 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 57 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 49 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
	when 30 then
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 42 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 35 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 15 then
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin
 $stderr.puts "EOF!" 		end
	when 56 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 38 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 58 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 34 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 31 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING eof_main; yielding'
    yield @buffers[:string]
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 10 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 53 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 45 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 17 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 11 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 60 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 69 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 70 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 55 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 40 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 63 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      @id_end = p
      chars = data[@id_start...@id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    @id_end = p
    chars = data[@id_start...@id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::SimpleStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
