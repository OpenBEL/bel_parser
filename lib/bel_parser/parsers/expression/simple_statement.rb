
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	47, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	10, 122, 10, 122, 10, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 114, 114, 114, 
	59, 36, 36, 114, 36, 39, 39, 1, 
	1, 1, 114, 1, 114, 114, 32, 114, 
	1, 114, 114, 113, 113, 25, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	36, 114, 1, 114, 114, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 1, 114, 
	1, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 1042, 1157, 
	1272, 1332, 1369, 1406, 1521, 1558, 1598, 1638, 
	1640, 1642, 1644, 1759, 1761, 1876, 1991, 2024, 
	2139, 2141, 2256, 2371, 2485, 2599, 2625, 2685, 
	2687, 2689, 2804, 2919, 2979, 2981, 2983, 3097, 
	3211, 3326, 3359, 3474, 3589, 3649, 3686, 3723, 
	3838, 3875, 3990, 3992, 4107, 4222, 4337, 4370, 
	4485, 4600, 4660, 4697, 4734, 4849, 4886, 4888, 
	5003, 5005, 5120, 5235, 5330, 5448, 5487, 5489, 
	5491, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 
	5500
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 0, 
	0, 0, 0, 0, 0, 0, 34, 0, 
	0, 0, 0, 0, 0, 0, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	0, 0, 0, 0, 0, 0, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 0, 0, 0, 35, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 36, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 36, 7, 37, 7, 7, 7, 7, 
	7, 38, 39, 7, 7, 40, 7, 7, 
	7, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 42, 7, 7, 7, 7, 
	7, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	41, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 36, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 36, 15, 37, 15, 
	15, 15, 15, 15, 15, 39, 15, 15, 
	40, 15, 15, 15, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 15, 15, 
	15, 15, 15, 15, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	15, 15, 15, 43, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	45, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 46, 44, 47, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 47, 20, 20, 20, 20, 
	20, 20, 20, 20, 48, 20, 20, 49, 
	20, 50, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	50, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 51, 5, 40, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 37, 
	7, 7, 7, 7, 7, 38, 39, 7, 
	7, 40, 7, 7, 7, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	7, 7, 7, 7, 7, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 7, 7, 7, 41, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 50, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	50, 26, 26, 26, 26, 26, 26, 26, 
	26, 52, 26, 26, 51, 26, 53, 54, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 53, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 55, 26, 56, 57, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 56, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 58, 5, 59, 5, 
	5, 60, 62, 61, 64, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 64, 63, 63, 63, 63, 
	63, 63, 63, 65, 66, 63, 63, 67, 
	63, 63, 63, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 69, 63, 63, 
	63, 63, 63, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 63, 
	63, 63, 68, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 46, 
	44, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 63, 63, 63, 63, 63, 63, 63, 
	63, 66, 63, 63, 67, 63, 63, 63, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 63, 63, 63, 63, 63, 63, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 63, 63, 63, 70, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 71, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 71, 0, 0, 0, 0, 
	0, 0, 0, 72, 0, 0, 0, 0, 
	0, 0, 0, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 0, 0, 0, 
	0, 0, 0, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 0, 
	0, 0, 73, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 74, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 74, 5, 
	5, 5, 5, 5, 5, 5, 75, 5, 
	76, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 76, 
	63, 63, 63, 63, 63, 63, 63, 77, 
	78, 63, 63, 79, 63, 63, 63, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 63, 63, 63, 63, 63, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 63, 63, 63, 80, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 19, 17, 76, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 76, 63, 63, 63, 
	63, 63, 63, 63, 63, 78, 63, 63, 
	79, 63, 63, 63, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 63, 63, 
	63, 63, 63, 63, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	63, 63, 63, 82, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	83, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 83, 
	0, 0, 0, 0, 0, 0, 0, 84, 
	0, 0, 0, 0, 0, 0, 0, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 0, 0, 0, 0, 0, 0, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 85, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 0, 0, 0, 0, 0, 
	0, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 0, 0, 0, 
	87, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 88, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 0, 0, 0, 
	0, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 0, 
	0, 0, 89, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 91, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 92, 
	90, 94, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 95, 93, 96, 90, 95, 
	93, 98, 99, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	98, 97, 100, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 97, 97, 97, 97, 97, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 97, 97, 97, 101, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 98, 99, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 98, 103, 100, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 103, 103, 103, 
	103, 103, 103, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 103, 
	103, 103, 104, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 106, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 105, 108, 90, 107, 105, 109, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 0, 
	0, 0, 0, 0, 0, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 0, 0, 0, 110, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 109, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 112, 0, 0, 0, 0, 0, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 0, 0, 0, 111, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 113, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 113, 0, 0, 0, 0, 0, 
	0, 0, 114, 0, 0, 0, 0, 0, 
	0, 0, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 0, 0, 0, 0, 
	0, 0, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 0, 0, 
	0, 115, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 116, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 116, 5, 5, 
	5, 5, 5, 5, 5, 117, 5, 118, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 7, 7, 7, 120, 121, 
	7, 7, 122, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	124, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 118, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 118, 15, 119, 15, 15, 15, 15, 
	15, 15, 121, 15, 15, 122, 15, 15, 
	15, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 15, 15, 15, 15, 15, 
	15, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 15, 15, 15, 
	125, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	126, 129, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	129, 20, 20, 20, 20, 20, 20, 20, 
	20, 130, 20, 20, 131, 20, 132, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 132, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 133, 5, 122, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 119, 7, 7, 7, 
	7, 7, 120, 121, 7, 7, 122, 7, 
	7, 7, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 124, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 123, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 132, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 132, 26, 26, 
	26, 26, 26, 26, 26, 26, 134, 26, 
	26, 133, 26, 135, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 135, 63, 63, 63, 63, 63, 
	63, 63, 136, 137, 63, 63, 138, 63, 
	63, 63, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 140, 63, 63, 63, 
	63, 63, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 63, 63, 
	63, 139, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 128, 126, 
	135, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 135, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	137, 63, 63, 138, 63, 63, 63, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 63, 63, 63, 63, 63, 63, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 63, 63, 63, 141, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 142, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 142, 0, 0, 0, 0, 0, 
	0, 0, 143, 0, 0, 0, 0, 0, 
	0, 0, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 0, 0, 0, 0, 
	0, 0, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 0, 0, 
	0, 144, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 145, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 145, 0, 0, 
	0, 0, 0, 0, 0, 146, 0, 0, 
	0, 0, 0, 0, 0, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 0, 
	0, 0, 0, 0, 0, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 0, 0, 0, 147, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 148, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	149, 5, 150, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 151, 7, 7, 7, 7, 
	7, 152, 153, 7, 7, 154, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 156, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 150, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 150, 15, 151, 15, 
	15, 15, 15, 15, 15, 153, 15, 15, 
	154, 15, 15, 15, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 15, 15, 
	15, 15, 15, 15, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	15, 15, 15, 157, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	159, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 160, 158, 161, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 161, 20, 20, 20, 20, 
	20, 20, 20, 20, 162, 20, 20, 163, 
	20, 164, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	164, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 165, 5, 154, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 154, 7, 151, 
	7, 7, 7, 7, 7, 152, 153, 7, 
	7, 154, 7, 7, 7, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 156, 
	7, 7, 7, 7, 7, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 7, 7, 7, 155, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 164, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	164, 26, 26, 26, 26, 26, 26, 26, 
	26, 166, 26, 26, 165, 26, 167, 26, 
	168, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 168, 
	63, 63, 63, 63, 63, 63, 63, 169, 
	170, 63, 63, 171, 63, 63, 63, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 173, 63, 63, 63, 63, 63, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 63, 63, 63, 172, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 160, 158, 168, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 168, 63, 63, 63, 
	63, 63, 63, 63, 63, 170, 63, 63, 
	171, 63, 63, 63, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 63, 63, 
	63, 63, 63, 63, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	63, 63, 63, 174, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	175, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 175, 
	0, 0, 0, 0, 0, 0, 0, 176, 
	0, 0, 0, 0, 0, 0, 0, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 0, 0, 0, 0, 0, 0, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 0, 0, 0, 177, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 5, 179, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 5, 
	181, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 182, 5, 183, 
	5, 5, 184, 186, 185, 5, 5, 5, 
	5, 26, 26, 5, 5, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 34, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 31, 4, 0, 
	33, 5, 6, 32, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 29, 15, 16, 20, 21, 
	19, 26, 15, 28, 16, 17, 27, 18, 
	21, 19, 18, 19, 21, 22, 81, 23, 
	22, 81, 23, 24, 25, 25, 81, 0, 
	18, 20, 21, 19, 26, 15, 28, 30, 
	14, 29, 30, 14, 7, 9, 10, 8, 
	31, 4, 33, 2, 3, 34, 82, 36, 
	82, 36, 0, 83, 38, 38, 39, 40, 
	83, 0, 42, 84, 43, 47, 42, 0, 
	46, 43, 44, 45, 84, 84, 46, 47, 
	42, 49, 50, 60, 49, 50, 51, 52, 
	56, 85, 55, 57, 51, 59, 52, 53, 
	58, 54, 85, 55, 54, 55, 85, 54, 
	56, 85, 55, 57, 51, 59, 49, 50, 
	60, 62, 63, 74, 62, 63, 64, 65, 
	69, 70, 68, 71, 64, 73, 65, 66, 
	72, 67, 70, 68, 67, 68, 70, 86, 
	67, 69, 70, 68, 71, 64, 73, 62, 
	63, 74, 76, 87, 76, 88, 78, 79, 
	80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 3, 4, 5, 9, 10, 11, 9, 
	9, 12, 13, 16, 18, 18, 18, 21, 
	21, 21, 0, 0, 0, 28, 29, 28, 
	0, 30, 0, 0, 31, 32, 33, 35, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 0, 6, 36, 37, 36, 36, 
	38, 39, 40, 41, 42, 38, 43, 16, 
	44, 40, 45, 46, 10, 18, 18, 18, 
	47, 49, 0, 50, 10, 16, 13, 52, 
	16, 18, 18, 18, 53, 54, 40, 40, 
	39, 55, 56, 57, 0, 6, 9, 10, 
	11, 58, 9, 12, 13, 16, 18, 18, 
	18, 21, 59, 21, 0, 0, 60, 36, 
	37, 61, 36, 38, 39, 40, 41, 42, 
	38, 3, 4, 5, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 62, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 25, 63, 27, 64, 0, 0, 
	31, 32, 65
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 1, 7, 14, 
	17, 19, 0, 7, 22, 22, 0, 0, 
	0, 0, 34, 17, 34, 1, 0, 34, 
	17, 34, 1, 1, 1, 17, 17, 17, 
	17, 48, 51, 17, 17, 17, 1, 1, 
	1, 0, 7, 14, 17, 19, 0, 7, 
	22, 34, 17, 34, 1, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 34, 
	17, 34, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 66, 66, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 40 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 45 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 60 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 32 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 30 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 38 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 49 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 47 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 31 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 33 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 46 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 53 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 59 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 5 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 57 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 3 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 4 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 50 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 58 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 66 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 51 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	47, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	10, 122, 10, 122, 10, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 114, 114, 114, 
	59, 36, 36, 114, 36, 39, 39, 1, 
	1, 1, 114, 1, 114, 114, 32, 114, 
	1, 114, 114, 113, 113, 25, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	36, 114, 1, 114, 114, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 1, 114, 
	1, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 1042, 1157, 
	1272, 1332, 1369, 1406, 1521, 1558, 1598, 1638, 
	1640, 1642, 1644, 1759, 1761, 1876, 1991, 2024, 
	2139, 2141, 2256, 2371, 2485, 2599, 2625, 2685, 
	2687, 2689, 2804, 2919, 2979, 2981, 2983, 3097, 
	3211, 3326, 3359, 3474, 3589, 3649, 3686, 3723, 
	3838, 3875, 3990, 3992, 4107, 4222, 4337, 4370, 
	4485, 4600, 4660, 4697, 4734, 4849, 4886, 4888, 
	5003, 5005, 5120, 5235, 5330, 5448, 5487, 5489, 
	5491, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 
	5500
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 0, 
	0, 0, 0, 0, 0, 0, 34, 0, 
	0, 0, 0, 0, 0, 0, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	0, 0, 0, 0, 0, 0, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 0, 0, 0, 35, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 36, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 36, 7, 37, 7, 7, 7, 7, 
	7, 38, 39, 7, 7, 40, 7, 7, 
	7, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 42, 7, 7, 7, 7, 
	7, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	41, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 36, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 36, 15, 37, 15, 
	15, 15, 15, 15, 15, 39, 15, 15, 
	40, 15, 15, 15, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 15, 15, 
	15, 15, 15, 15, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	15, 15, 15, 43, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	45, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 46, 44, 47, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 47, 20, 20, 20, 20, 
	20, 20, 20, 20, 48, 20, 20, 49, 
	20, 50, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	50, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 51, 5, 40, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 37, 
	7, 7, 7, 7, 7, 38, 39, 7, 
	7, 40, 7, 7, 7, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	7, 7, 7, 7, 7, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 7, 7, 7, 41, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 50, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	50, 26, 26, 26, 26, 26, 26, 26, 
	26, 52, 26, 26, 51, 26, 53, 54, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 53, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 55, 26, 56, 57, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 56, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 58, 5, 59, 5, 
	5, 60, 62, 61, 64, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 64, 63, 63, 63, 63, 
	63, 63, 63, 65, 66, 63, 63, 67, 
	63, 63, 63, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 69, 63, 63, 
	63, 63, 63, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 63, 
	63, 63, 68, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 46, 
	44, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 63, 63, 63, 63, 63, 63, 63, 
	63, 66, 63, 63, 67, 63, 63, 63, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 63, 63, 63, 63, 63, 63, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 63, 63, 63, 70, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 71, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 71, 0, 0, 0, 0, 
	0, 0, 0, 72, 0, 0, 0, 0, 
	0, 0, 0, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 0, 0, 0, 
	0, 0, 0, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 0, 
	0, 0, 73, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 74, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 74, 5, 
	5, 5, 5, 5, 5, 5, 75, 5, 
	76, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 76, 
	63, 63, 63, 63, 63, 63, 63, 77, 
	78, 63, 63, 79, 63, 63, 63, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 63, 63, 63, 63, 63, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 63, 63, 63, 80, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 19, 17, 76, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 76, 63, 63, 63, 
	63, 63, 63, 63, 63, 78, 63, 63, 
	79, 63, 63, 63, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 63, 63, 
	63, 63, 63, 63, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	63, 63, 63, 82, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	83, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 83, 
	0, 0, 0, 0, 0, 0, 0, 84, 
	0, 0, 0, 0, 0, 0, 0, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 0, 0, 0, 0, 0, 0, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 85, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 0, 0, 0, 0, 0, 
	0, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 0, 0, 0, 
	87, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 88, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 0, 0, 0, 
	0, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 0, 
	0, 0, 89, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 91, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 92, 
	90, 94, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 95, 93, 96, 90, 95, 
	93, 98, 99, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	98, 97, 100, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 97, 97, 97, 97, 97, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 97, 97, 97, 101, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 98, 99, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 98, 103, 100, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 103, 103, 103, 
	103, 103, 103, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 103, 
	103, 103, 104, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 106, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 105, 108, 90, 107, 105, 109, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 0, 
	0, 0, 0, 0, 0, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 0, 0, 0, 110, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 109, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 112, 0, 0, 0, 0, 0, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 0, 0, 0, 111, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 113, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 113, 0, 0, 0, 0, 0, 
	0, 0, 114, 0, 0, 0, 0, 0, 
	0, 0, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 0, 0, 0, 0, 
	0, 0, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 0, 0, 
	0, 115, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 116, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 116, 5, 5, 
	5, 5, 5, 5, 5, 117, 5, 118, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 7, 7, 7, 120, 121, 
	7, 7, 122, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	124, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 118, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 118, 15, 119, 15, 15, 15, 15, 
	15, 15, 121, 15, 15, 122, 15, 15, 
	15, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 15, 15, 15, 15, 15, 
	15, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 15, 15, 15, 
	125, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	126, 129, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	129, 20, 20, 20, 20, 20, 20, 20, 
	20, 130, 20, 20, 131, 20, 132, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 132, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 133, 5, 122, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 119, 7, 7, 7, 
	7, 7, 120, 121, 7, 7, 122, 7, 
	7, 7, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 124, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 123, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 132, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 132, 26, 26, 
	26, 26, 26, 26, 26, 26, 134, 26, 
	26, 133, 26, 135, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 135, 63, 63, 63, 63, 63, 
	63, 63, 136, 137, 63, 63, 138, 63, 
	63, 63, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 140, 63, 63, 63, 
	63, 63, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 63, 63, 
	63, 139, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 128, 126, 
	135, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 135, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	137, 63, 63, 138, 63, 63, 63, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 63, 63, 63, 63, 63, 63, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 63, 63, 63, 141, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 142, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 142, 0, 0, 0, 0, 0, 
	0, 0, 143, 0, 0, 0, 0, 0, 
	0, 0, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 0, 0, 0, 0, 
	0, 0, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 0, 0, 
	0, 144, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 145, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 145, 0, 0, 
	0, 0, 0, 0, 0, 146, 0, 0, 
	0, 0, 0, 0, 0, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 0, 
	0, 0, 0, 0, 0, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 0, 0, 0, 147, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 148, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	149, 5, 150, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 151, 7, 7, 7, 7, 
	7, 152, 153, 7, 7, 154, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 156, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 150, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 150, 15, 151, 15, 
	15, 15, 15, 15, 15, 153, 15, 15, 
	154, 15, 15, 15, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 15, 15, 
	15, 15, 15, 15, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	15, 15, 15, 157, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	159, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 160, 158, 161, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 161, 20, 20, 20, 20, 
	20, 20, 20, 20, 162, 20, 20, 163, 
	20, 164, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	164, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 165, 5, 154, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 154, 7, 151, 
	7, 7, 7, 7, 7, 152, 153, 7, 
	7, 154, 7, 7, 7, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 156, 
	7, 7, 7, 7, 7, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 7, 7, 7, 155, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 164, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	164, 26, 26, 26, 26, 26, 26, 26, 
	26, 166, 26, 26, 165, 26, 167, 26, 
	168, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 168, 
	63, 63, 63, 63, 63, 63, 63, 169, 
	170, 63, 63, 171, 63, 63, 63, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 173, 63, 63, 63, 63, 63, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 63, 63, 63, 172, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 160, 158, 168, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 168, 63, 63, 63, 
	63, 63, 63, 63, 63, 170, 63, 63, 
	171, 63, 63, 63, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 63, 63, 
	63, 63, 63, 63, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	63, 63, 63, 174, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	175, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 175, 
	0, 0, 0, 0, 0, 0, 0, 176, 
	0, 0, 0, 0, 0, 0, 0, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 0, 0, 0, 0, 0, 0, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 0, 0, 0, 177, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 5, 179, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 5, 
	181, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 182, 5, 183, 
	5, 5, 184, 186, 185, 5, 5, 5, 
	5, 26, 26, 5, 5, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 34, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 31, 4, 0, 
	33, 5, 6, 32, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 29, 15, 16, 20, 21, 
	19, 26, 15, 28, 16, 17, 27, 18, 
	21, 19, 18, 19, 21, 22, 81, 23, 
	22, 81, 23, 24, 25, 25, 81, 0, 
	18, 20, 21, 19, 26, 15, 28, 30, 
	14, 29, 30, 14, 7, 9, 10, 8, 
	31, 4, 33, 2, 3, 34, 82, 36, 
	82, 36, 0, 83, 38, 38, 39, 40, 
	83, 0, 42, 84, 43, 47, 42, 0, 
	46, 43, 44, 45, 84, 84, 46, 47, 
	42, 49, 50, 60, 49, 50, 51, 52, 
	56, 85, 55, 57, 51, 59, 52, 53, 
	58, 54, 85, 55, 54, 55, 85, 54, 
	56, 85, 55, 57, 51, 59, 49, 50, 
	60, 62, 63, 74, 62, 63, 64, 65, 
	69, 70, 68, 71, 64, 73, 65, 66, 
	72, 67, 70, 68, 67, 68, 70, 86, 
	67, 69, 70, 68, 71, 64, 73, 62, 
	63, 74, 76, 87, 76, 88, 78, 79, 
	80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 3, 4, 5, 9, 10, 11, 9, 
	9, 12, 13, 16, 18, 18, 18, 21, 
	21, 21, 0, 0, 0, 28, 29, 28, 
	0, 30, 0, 0, 31, 32, 33, 35, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 0, 6, 36, 37, 36, 36, 
	38, 39, 40, 41, 42, 38, 43, 16, 
	44, 40, 45, 46, 10, 18, 18, 18, 
	47, 49, 0, 50, 10, 16, 13, 52, 
	16, 18, 18, 18, 53, 54, 40, 40, 
	39, 55, 56, 57, 0, 6, 9, 10, 
	11, 58, 9, 12, 13, 16, 18, 18, 
	18, 21, 59, 21, 0, 0, 60, 36, 
	37, 61, 36, 38, 39, 40, 41, 42, 
	38, 3, 4, 5, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 62, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 25, 63, 27, 64, 0, 0, 
	31, 32, 65
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 1, 7, 14, 
	17, 19, 0, 7, 22, 22, 0, 0, 
	0, 0, 34, 17, 34, 1, 0, 34, 
	17, 34, 1, 1, 1, 17, 17, 17, 
	17, 48, 51, 17, 17, 17, 1, 1, 
	1, 0, 7, 14, 17, 19, 0, 7, 
	22, 34, 17, 34, 1, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 34, 
	17, 34, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 66, 66, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 40 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 45 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 60 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 32 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 30 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 38 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 49 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 47 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 31 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 33 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 46 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 53 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 59 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 5 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 57 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 3 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 4 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 50 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 58 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 66 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 51 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	47, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	10, 122, 10, 122, 10, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 114, 114, 114, 
	59, 36, 36, 114, 36, 39, 39, 1, 
	1, 1, 114, 1, 114, 114, 32, 114, 
	1, 114, 114, 113, 113, 25, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	36, 114, 1, 114, 114, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 1, 114, 
	1, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 1042, 1157, 
	1272, 1332, 1369, 1406, 1521, 1558, 1598, 1638, 
	1640, 1642, 1644, 1759, 1761, 1876, 1991, 2024, 
	2139, 2141, 2256, 2371, 2485, 2599, 2625, 2685, 
	2687, 2689, 2804, 2919, 2979, 2981, 2983, 3097, 
	3211, 3326, 3359, 3474, 3589, 3649, 3686, 3723, 
	3838, 3875, 3990, 3992, 4107, 4222, 4337, 4370, 
	4485, 4600, 4660, 4697, 4734, 4849, 4886, 4888, 
	5003, 5005, 5120, 5235, 5330, 5448, 5487, 5489, 
	5491, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 
	5500
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 0, 
	0, 0, 0, 0, 0, 0, 34, 0, 
	0, 0, 0, 0, 0, 0, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	0, 0, 0, 0, 0, 0, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 0, 0, 0, 35, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 36, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 36, 7, 37, 7, 7, 7, 7, 
	7, 38, 39, 7, 7, 40, 7, 7, 
	7, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 42, 7, 7, 7, 7, 
	7, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	41, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 36, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 36, 15, 37, 15, 
	15, 15, 15, 15, 15, 39, 15, 15, 
	40, 15, 15, 15, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 15, 15, 
	15, 15, 15, 15, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	15, 15, 15, 43, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	45, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 46, 44, 47, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 47, 20, 20, 20, 20, 
	20, 20, 20, 20, 48, 20, 20, 49, 
	20, 50, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	50, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 51, 5, 40, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 37, 
	7, 7, 7, 7, 7, 38, 39, 7, 
	7, 40, 7, 7, 7, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	7, 7, 7, 7, 7, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 7, 7, 7, 41, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 50, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	50, 26, 26, 26, 26, 26, 26, 26, 
	26, 52, 26, 26, 51, 26, 53, 54, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 53, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 55, 26, 56, 57, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 56, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 58, 5, 59, 5, 
	5, 60, 62, 61, 64, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 64, 63, 63, 63, 63, 
	63, 63, 63, 65, 66, 63, 63, 67, 
	63, 63, 63, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 69, 63, 63, 
	63, 63, 63, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 63, 
	63, 63, 68, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 46, 
	44, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 63, 63, 63, 63, 63, 63, 63, 
	63, 66, 63, 63, 67, 63, 63, 63, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 63, 63, 63, 63, 63, 63, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 63, 63, 63, 70, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 71, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 71, 0, 0, 0, 0, 
	0, 0, 0, 72, 0, 0, 0, 0, 
	0, 0, 0, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 0, 0, 0, 
	0, 0, 0, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 0, 
	0, 0, 73, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 74, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 74, 5, 
	5, 5, 5, 5, 5, 5, 75, 5, 
	76, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 76, 
	63, 63, 63, 63, 63, 63, 63, 77, 
	78, 63, 63, 79, 63, 63, 63, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 63, 63, 63, 63, 63, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 63, 63, 63, 80, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 19, 17, 76, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 76, 63, 63, 63, 
	63, 63, 63, 63, 63, 78, 63, 63, 
	79, 63, 63, 63, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 63, 63, 
	63, 63, 63, 63, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	63, 63, 63, 82, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	83, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 83, 
	0, 0, 0, 0, 0, 0, 0, 84, 
	0, 0, 0, 0, 0, 0, 0, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 0, 0, 0, 0, 0, 0, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 85, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 0, 0, 0, 0, 0, 
	0, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 0, 0, 0, 
	87, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 88, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 0, 0, 0, 
	0, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 0, 
	0, 0, 89, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 91, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 92, 
	90, 94, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 95, 93, 96, 90, 95, 
	93, 98, 99, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	98, 97, 100, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 97, 97, 97, 97, 97, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 97, 97, 97, 101, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 98, 99, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 98, 103, 100, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 103, 103, 103, 
	103, 103, 103, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 103, 
	103, 103, 104, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 106, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 105, 108, 90, 107, 105, 109, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 0, 
	0, 0, 0, 0, 0, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 0, 0, 0, 110, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 109, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 112, 0, 0, 0, 0, 0, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 0, 0, 0, 111, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 113, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 113, 0, 0, 0, 0, 0, 
	0, 0, 114, 0, 0, 0, 0, 0, 
	0, 0, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 0, 0, 0, 0, 
	0, 0, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 0, 0, 
	0, 115, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 116, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 116, 5, 5, 
	5, 5, 5, 5, 5, 117, 5, 118, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 7, 7, 7, 120, 121, 
	7, 7, 122, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	124, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 118, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 118, 15, 119, 15, 15, 15, 15, 
	15, 15, 121, 15, 15, 122, 15, 15, 
	15, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 15, 15, 15, 15, 15, 
	15, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 15, 15, 15, 
	125, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	126, 129, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	129, 20, 20, 20, 20, 20, 20, 20, 
	20, 130, 20, 20, 131, 20, 132, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 132, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 133, 5, 122, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 119, 7, 7, 7, 
	7, 7, 120, 121, 7, 7, 122, 7, 
	7, 7, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 124, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 123, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 132, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 132, 26, 26, 
	26, 26, 26, 26, 26, 26, 134, 26, 
	26, 133, 26, 135, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 135, 63, 63, 63, 63, 63, 
	63, 63, 136, 137, 63, 63, 138, 63, 
	63, 63, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 140, 63, 63, 63, 
	63, 63, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 63, 63, 
	63, 139, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 128, 126, 
	135, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 135, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	137, 63, 63, 138, 63, 63, 63, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 63, 63, 63, 63, 63, 63, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 63, 63, 63, 141, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 142, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 142, 0, 0, 0, 0, 0, 
	0, 0, 143, 0, 0, 0, 0, 0, 
	0, 0, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 0, 0, 0, 0, 
	0, 0, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 0, 0, 
	0, 144, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 145, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 145, 0, 0, 
	0, 0, 0, 0, 0, 146, 0, 0, 
	0, 0, 0, 0, 0, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 0, 
	0, 0, 0, 0, 0, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 0, 0, 0, 147, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 148, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	149, 5, 150, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 151, 7, 7, 7, 7, 
	7, 152, 153, 7, 7, 154, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 156, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 150, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 150, 15, 151, 15, 
	15, 15, 15, 15, 15, 153, 15, 15, 
	154, 15, 15, 15, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 15, 15, 
	15, 15, 15, 15, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	15, 15, 15, 157, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	159, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 160, 158, 161, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 161, 20, 20, 20, 20, 
	20, 20, 20, 20, 162, 20, 20, 163, 
	20, 164, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	164, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 165, 5, 154, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 154, 7, 151, 
	7, 7, 7, 7, 7, 152, 153, 7, 
	7, 154, 7, 7, 7, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 156, 
	7, 7, 7, 7, 7, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 7, 7, 7, 155, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 164, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	164, 26, 26, 26, 26, 26, 26, 26, 
	26, 166, 26, 26, 165, 26, 167, 26, 
	168, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 168, 
	63, 63, 63, 63, 63, 63, 63, 169, 
	170, 63, 63, 171, 63, 63, 63, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 173, 63, 63, 63, 63, 63, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 63, 63, 63, 172, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 160, 158, 168, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 168, 63, 63, 63, 
	63, 63, 63, 63, 63, 170, 63, 63, 
	171, 63, 63, 63, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 63, 63, 
	63, 63, 63, 63, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	63, 63, 63, 174, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	175, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 175, 
	0, 0, 0, 0, 0, 0, 0, 176, 
	0, 0, 0, 0, 0, 0, 0, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 0, 0, 0, 0, 0, 0, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 0, 0, 0, 177, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 5, 179, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 5, 
	181, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 182, 5, 183, 
	5, 5, 184, 186, 185, 5, 5, 5, 
	5, 26, 26, 5, 5, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 34, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 31, 4, 0, 
	33, 5, 6, 32, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 29, 15, 16, 20, 21, 
	19, 26, 15, 28, 16, 17, 27, 18, 
	21, 19, 18, 19, 21, 22, 81, 23, 
	22, 81, 23, 24, 25, 25, 81, 0, 
	18, 20, 21, 19, 26, 15, 28, 30, 
	14, 29, 30, 14, 7, 9, 10, 8, 
	31, 4, 33, 2, 3, 34, 82, 36, 
	82, 36, 0, 83, 38, 38, 39, 40, 
	83, 0, 42, 84, 43, 47, 42, 0, 
	46, 43, 44, 45, 84, 84, 46, 47, 
	42, 49, 50, 60, 49, 50, 51, 52, 
	56, 85, 55, 57, 51, 59, 52, 53, 
	58, 54, 85, 55, 54, 55, 85, 54, 
	56, 85, 55, 57, 51, 59, 49, 50, 
	60, 62, 63, 74, 62, 63, 64, 65, 
	69, 70, 68, 71, 64, 73, 65, 66, 
	72, 67, 70, 68, 67, 68, 70, 86, 
	67, 69, 70, 68, 71, 64, 73, 62, 
	63, 74, 76, 87, 76, 88, 78, 79, 
	80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 3, 4, 5, 9, 10, 11, 9, 
	9, 12, 13, 16, 18, 18, 18, 21, 
	21, 21, 0, 0, 0, 28, 29, 28, 
	0, 30, 0, 0, 31, 32, 33, 35, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 0, 6, 36, 37, 36, 36, 
	38, 39, 40, 41, 42, 38, 43, 16, 
	44, 40, 45, 46, 10, 18, 18, 18, 
	47, 49, 0, 50, 10, 16, 13, 52, 
	16, 18, 18, 18, 53, 54, 40, 40, 
	39, 55, 56, 57, 0, 6, 9, 10, 
	11, 58, 9, 12, 13, 16, 18, 18, 
	18, 21, 59, 21, 0, 0, 60, 36, 
	37, 61, 36, 38, 39, 40, 41, 42, 
	38, 3, 4, 5, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 62, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 25, 63, 27, 64, 0, 0, 
	31, 32, 65
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 1, 7, 14, 
	17, 19, 0, 7, 22, 22, 0, 0, 
	0, 0, 34, 17, 34, 1, 0, 34, 
	17, 34, 1, 1, 1, 17, 17, 17, 
	17, 48, 51, 17, 17, 17, 1, 1, 
	1, 0, 7, 14, 17, 19, 0, 7, 
	22, 34, 17, 34, 1, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 34, 
	17, 34, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 66, 66, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 40 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 45 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 60 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 32 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 30 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 38 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 49 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 47 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 31 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 33 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 46 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 53 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 59 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 5 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 57 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 3 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 4 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 50 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 58 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 66 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 51 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	47, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	10, 122, 10, 122, 10, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 114, 114, 114, 
	59, 36, 36, 114, 36, 39, 39, 1, 
	1, 1, 114, 1, 114, 114, 32, 114, 
	1, 114, 114, 113, 113, 25, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	36, 114, 1, 114, 114, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 1, 114, 
	1, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 1042, 1157, 
	1272, 1332, 1369, 1406, 1521, 1558, 1598, 1638, 
	1640, 1642, 1644, 1759, 1761, 1876, 1991, 2024, 
	2139, 2141, 2256, 2371, 2485, 2599, 2625, 2685, 
	2687, 2689, 2804, 2919, 2979, 2981, 2983, 3097, 
	3211, 3326, 3359, 3474, 3589, 3649, 3686, 3723, 
	3838, 3875, 3990, 3992, 4107, 4222, 4337, 4370, 
	4485, 4600, 4660, 4697, 4734, 4849, 4886, 4888, 
	5003, 5005, 5120, 5235, 5330, 5448, 5487, 5489, 
	5491, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 
	5500
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 0, 
	0, 0, 0, 0, 0, 0, 34, 0, 
	0, 0, 0, 0, 0, 0, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	0, 0, 0, 0, 0, 0, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 0, 0, 0, 35, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 36, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 36, 7, 37, 7, 7, 7, 7, 
	7, 38, 39, 7, 7, 40, 7, 7, 
	7, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 42, 7, 7, 7, 7, 
	7, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	41, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 36, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 36, 15, 37, 15, 
	15, 15, 15, 15, 15, 39, 15, 15, 
	40, 15, 15, 15, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 15, 15, 
	15, 15, 15, 15, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	15, 15, 15, 43, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	45, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 46, 44, 47, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 47, 20, 20, 20, 20, 
	20, 20, 20, 20, 48, 20, 20, 49, 
	20, 50, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	50, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 51, 5, 40, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 37, 
	7, 7, 7, 7, 7, 38, 39, 7, 
	7, 40, 7, 7, 7, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	7, 7, 7, 7, 7, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 7, 7, 7, 41, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 50, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	50, 26, 26, 26, 26, 26, 26, 26, 
	26, 52, 26, 26, 51, 26, 53, 54, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 53, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 55, 26, 56, 57, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 56, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 58, 5, 59, 5, 
	5, 60, 62, 61, 64, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 64, 63, 63, 63, 63, 
	63, 63, 63, 65, 66, 63, 63, 67, 
	63, 63, 63, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 69, 63, 63, 
	63, 63, 63, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 63, 
	63, 63, 68, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 46, 
	44, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 63, 63, 63, 63, 63, 63, 63, 
	63, 66, 63, 63, 67, 63, 63, 63, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 63, 63, 63, 63, 63, 63, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 63, 63, 63, 70, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 71, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 71, 0, 0, 0, 0, 
	0, 0, 0, 72, 0, 0, 0, 0, 
	0, 0, 0, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 0, 0, 0, 
	0, 0, 0, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 0, 
	0, 0, 73, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 74, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 74, 5, 
	5, 5, 5, 5, 5, 5, 75, 5, 
	76, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 76, 
	63, 63, 63, 63, 63, 63, 63, 77, 
	78, 63, 63, 79, 63, 63, 63, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 63, 63, 63, 63, 63, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 63, 63, 63, 80, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 19, 17, 76, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 76, 63, 63, 63, 
	63, 63, 63, 63, 63, 78, 63, 63, 
	79, 63, 63, 63, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 63, 63, 
	63, 63, 63, 63, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	63, 63, 63, 82, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	83, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 83, 
	0, 0, 0, 0, 0, 0, 0, 84, 
	0, 0, 0, 0, 0, 0, 0, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 0, 0, 0, 0, 0, 0, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 85, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 0, 0, 0, 0, 0, 
	0, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 0, 0, 0, 
	87, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 88, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 0, 0, 0, 
	0, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 0, 
	0, 0, 89, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 91, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 92, 
	90, 94, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 95, 93, 96, 90, 95, 
	93, 98, 99, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	98, 97, 100, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 97, 97, 97, 97, 97, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 97, 97, 97, 101, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 98, 99, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 98, 103, 100, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 103, 103, 103, 
	103, 103, 103, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 103, 
	103, 103, 104, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 106, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 105, 108, 90, 107, 105, 109, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 0, 
	0, 0, 0, 0, 0, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 0, 0, 0, 110, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 109, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 112, 0, 0, 0, 0, 0, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 0, 0, 0, 111, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 113, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 113, 0, 0, 0, 0, 0, 
	0, 0, 114, 0, 0, 0, 0, 0, 
	0, 0, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 0, 0, 0, 0, 
	0, 0, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 0, 0, 
	0, 115, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 116, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 116, 5, 5, 
	5, 5, 5, 5, 5, 117, 5, 118, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 7, 7, 7, 120, 121, 
	7, 7, 122, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	124, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 118, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 118, 15, 119, 15, 15, 15, 15, 
	15, 15, 121, 15, 15, 122, 15, 15, 
	15, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 15, 15, 15, 15, 15, 
	15, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 15, 15, 15, 
	125, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	126, 129, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	129, 20, 20, 20, 20, 20, 20, 20, 
	20, 130, 20, 20, 131, 20, 132, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 132, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 133, 5, 122, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 119, 7, 7, 7, 
	7, 7, 120, 121, 7, 7, 122, 7, 
	7, 7, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 124, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 123, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 132, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 132, 26, 26, 
	26, 26, 26, 26, 26, 26, 134, 26, 
	26, 133, 26, 135, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 135, 63, 63, 63, 63, 63, 
	63, 63, 136, 137, 63, 63, 138, 63, 
	63, 63, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 140, 63, 63, 63, 
	63, 63, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 63, 63, 
	63, 139, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 128, 126, 
	135, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 135, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	137, 63, 63, 138, 63, 63, 63, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 63, 63, 63, 63, 63, 63, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 63, 63, 63, 141, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 142, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 142, 0, 0, 0, 0, 0, 
	0, 0, 143, 0, 0, 0, 0, 0, 
	0, 0, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 0, 0, 0, 0, 
	0, 0, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 0, 0, 
	0, 144, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 145, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 145, 0, 0, 
	0, 0, 0, 0, 0, 146, 0, 0, 
	0, 0, 0, 0, 0, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 0, 
	0, 0, 0, 0, 0, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 0, 0, 0, 147, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 148, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	149, 5, 150, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 151, 7, 7, 7, 7, 
	7, 152, 153, 7, 7, 154, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 156, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 150, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 150, 15, 151, 15, 
	15, 15, 15, 15, 15, 153, 15, 15, 
	154, 15, 15, 15, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 15, 15, 
	15, 15, 15, 15, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	15, 15, 15, 157, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	159, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 160, 158, 161, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 161, 20, 20, 20, 20, 
	20, 20, 20, 20, 162, 20, 20, 163, 
	20, 164, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	164, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 165, 5, 154, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 154, 7, 151, 
	7, 7, 7, 7, 7, 152, 153, 7, 
	7, 154, 7, 7, 7, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 156, 
	7, 7, 7, 7, 7, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 7, 7, 7, 155, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 164, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	164, 26, 26, 26, 26, 26, 26, 26, 
	26, 166, 26, 26, 165, 26, 167, 26, 
	168, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 168, 
	63, 63, 63, 63, 63, 63, 63, 169, 
	170, 63, 63, 171, 63, 63, 63, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 173, 63, 63, 63, 63, 63, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 63, 63, 63, 172, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 160, 158, 168, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 168, 63, 63, 63, 
	63, 63, 63, 63, 63, 170, 63, 63, 
	171, 63, 63, 63, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 63, 63, 
	63, 63, 63, 63, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	63, 63, 63, 174, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	175, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 175, 
	0, 0, 0, 0, 0, 0, 0, 176, 
	0, 0, 0, 0, 0, 0, 0, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 0, 0, 0, 0, 0, 0, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 0, 0, 0, 177, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 5, 179, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 5, 
	181, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 182, 5, 183, 
	5, 5, 184, 186, 185, 5, 5, 5, 
	5, 26, 26, 5, 5, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 34, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 31, 4, 0, 
	33, 5, 6, 32, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 29, 15, 16, 20, 21, 
	19, 26, 15, 28, 16, 17, 27, 18, 
	21, 19, 18, 19, 21, 22, 81, 23, 
	22, 81, 23, 24, 25, 25, 81, 0, 
	18, 20, 21, 19, 26, 15, 28, 30, 
	14, 29, 30, 14, 7, 9, 10, 8, 
	31, 4, 33, 2, 3, 34, 82, 36, 
	82, 36, 0, 83, 38, 38, 39, 40, 
	83, 0, 42, 84, 43, 47, 42, 0, 
	46, 43, 44, 45, 84, 84, 46, 47, 
	42, 49, 50, 60, 49, 50, 51, 52, 
	56, 85, 55, 57, 51, 59, 52, 53, 
	58, 54, 85, 55, 54, 55, 85, 54, 
	56, 85, 55, 57, 51, 59, 49, 50, 
	60, 62, 63, 74, 62, 63, 64, 65, 
	69, 70, 68, 71, 64, 73, 65, 66, 
	72, 67, 70, 68, 67, 68, 70, 86, 
	67, 69, 70, 68, 71, 64, 73, 62, 
	63, 74, 76, 87, 76, 88, 78, 79, 
	80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 3, 4, 5, 9, 10, 11, 9, 
	9, 12, 13, 16, 18, 18, 18, 21, 
	21, 21, 0, 0, 0, 28, 29, 28, 
	0, 30, 0, 0, 31, 32, 33, 35, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 0, 6, 36, 37, 36, 36, 
	38, 39, 40, 41, 42, 38, 43, 16, 
	44, 40, 45, 46, 10, 18, 18, 18, 
	47, 49, 0, 50, 10, 16, 13, 52, 
	16, 18, 18, 18, 53, 54, 40, 40, 
	39, 55, 56, 57, 0, 6, 9, 10, 
	11, 58, 9, 12, 13, 16, 18, 18, 
	18, 21, 59, 21, 0, 0, 60, 36, 
	37, 61, 36, 38, 39, 40, 41, 42, 
	38, 3, 4, 5, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 62, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 25, 63, 27, 64, 0, 0, 
	31, 32, 65
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 1, 7, 14, 
	17, 19, 0, 7, 22, 22, 0, 0, 
	0, 0, 34, 17, 34, 1, 0, 34, 
	17, 34, 1, 1, 1, 17, 17, 17, 
	17, 48, 51, 17, 17, 17, 1, 1, 
	1, 0, 7, 14, 17, 19, 0, 7, 
	22, 34, 17, 34, 1, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 34, 
	17, 34, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 66, 66, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 40 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 45 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 60 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 32 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 30 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 38 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 49 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 47 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 31 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 33 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 46 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 53 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 59 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 5 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 57 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 3 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 4 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 50 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 58 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 66 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 51 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	47, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	10, 122, 10, 122, 10, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 114, 114, 114, 
	59, 36, 36, 114, 36, 39, 39, 1, 
	1, 1, 114, 1, 114, 114, 32, 114, 
	1, 114, 114, 113, 113, 25, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	36, 114, 1, 114, 114, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 1, 114, 
	1, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 1042, 1157, 
	1272, 1332, 1369, 1406, 1521, 1558, 1598, 1638, 
	1640, 1642, 1644, 1759, 1761, 1876, 1991, 2024, 
	2139, 2141, 2256, 2371, 2485, 2599, 2625, 2685, 
	2687, 2689, 2804, 2919, 2979, 2981, 2983, 3097, 
	3211, 3326, 3359, 3474, 3589, 3649, 3686, 3723, 
	3838, 3875, 3990, 3992, 4107, 4222, 4337, 4370, 
	4485, 4600, 4660, 4697, 4734, 4849, 4886, 4888, 
	5003, 5005, 5120, 5235, 5330, 5448, 5487, 5489, 
	5491, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 
	5500
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 0, 
	0, 0, 0, 0, 0, 0, 34, 0, 
	0, 0, 0, 0, 0, 0, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	0, 0, 0, 0, 0, 0, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 0, 0, 0, 35, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 36, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 36, 7, 37, 7, 7, 7, 7, 
	7, 38, 39, 7, 7, 40, 7, 7, 
	7, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 42, 7, 7, 7, 7, 
	7, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	41, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 36, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 36, 15, 37, 15, 
	15, 15, 15, 15, 15, 39, 15, 15, 
	40, 15, 15, 15, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 15, 15, 
	15, 15, 15, 15, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	15, 15, 15, 43, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	45, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 46, 44, 47, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 47, 20, 20, 20, 20, 
	20, 20, 20, 20, 48, 20, 20, 49, 
	20, 50, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	50, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 51, 5, 40, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 37, 
	7, 7, 7, 7, 7, 38, 39, 7, 
	7, 40, 7, 7, 7, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	7, 7, 7, 7, 7, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 7, 7, 7, 41, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 50, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	50, 26, 26, 26, 26, 26, 26, 26, 
	26, 52, 26, 26, 51, 26, 53, 54, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 53, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 55, 26, 56, 57, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 56, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 58, 5, 59, 5, 
	5, 60, 62, 61, 64, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 64, 63, 63, 63, 63, 
	63, 63, 63, 65, 66, 63, 63, 67, 
	63, 63, 63, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 69, 63, 63, 
	63, 63, 63, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 63, 
	63, 63, 68, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 46, 
	44, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 63, 63, 63, 63, 63, 63, 63, 
	63, 66, 63, 63, 67, 63, 63, 63, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 63, 63, 63, 63, 63, 63, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 63, 63, 63, 70, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 71, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 71, 0, 0, 0, 0, 
	0, 0, 0, 72, 0, 0, 0, 0, 
	0, 0, 0, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 0, 0, 0, 
	0, 0, 0, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 0, 
	0, 0, 73, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 74, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 74, 5, 
	5, 5, 5, 5, 5, 5, 75, 5, 
	76, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 76, 
	63, 63, 63, 63, 63, 63, 63, 77, 
	78, 63, 63, 79, 63, 63, 63, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 63, 63, 63, 63, 63, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 63, 63, 63, 80, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 19, 17, 76, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 76, 63, 63, 63, 
	63, 63, 63, 63, 63, 78, 63, 63, 
	79, 63, 63, 63, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 63, 63, 
	63, 63, 63, 63, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	63, 63, 63, 82, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	83, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 83, 
	0, 0, 0, 0, 0, 0, 0, 84, 
	0, 0, 0, 0, 0, 0, 0, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 0, 0, 0, 0, 0, 0, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 85, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 0, 0, 0, 0, 0, 
	0, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 0, 0, 0, 
	87, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 88, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 0, 0, 0, 
	0, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 0, 
	0, 0, 89, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 91, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 92, 
	90, 94, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 95, 93, 96, 90, 95, 
	93, 98, 99, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	98, 97, 100, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 97, 97, 97, 97, 97, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 97, 97, 97, 101, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 98, 99, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 98, 103, 100, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 103, 103, 103, 
	103, 103, 103, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 103, 
	103, 103, 104, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 106, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 105, 108, 90, 107, 105, 109, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 0, 
	0, 0, 0, 0, 0, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 0, 0, 0, 110, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 109, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 112, 0, 0, 0, 0, 0, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 0, 0, 0, 111, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 113, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 113, 0, 0, 0, 0, 0, 
	0, 0, 114, 0, 0, 0, 0, 0, 
	0, 0, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 0, 0, 0, 0, 
	0, 0, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 0, 0, 
	0, 115, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 116, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 116, 5, 5, 
	5, 5, 5, 5, 5, 117, 5, 118, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 7, 7, 7, 120, 121, 
	7, 7, 122, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	124, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 118, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 118, 15, 119, 15, 15, 15, 15, 
	15, 15, 121, 15, 15, 122, 15, 15, 
	15, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 15, 15, 15, 15, 15, 
	15, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 15, 15, 15, 
	125, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	126, 129, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	129, 20, 20, 20, 20, 20, 20, 20, 
	20, 130, 20, 20, 131, 20, 132, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 132, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 133, 5, 122, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 119, 7, 7, 7, 
	7, 7, 120, 121, 7, 7, 122, 7, 
	7, 7, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 124, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 123, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 132, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 132, 26, 26, 
	26, 26, 26, 26, 26, 26, 134, 26, 
	26, 133, 26, 135, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 135, 63, 63, 63, 63, 63, 
	63, 63, 136, 137, 63, 63, 138, 63, 
	63, 63, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 140, 63, 63, 63, 
	63, 63, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 63, 63, 
	63, 139, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 128, 126, 
	135, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 135, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	137, 63, 63, 138, 63, 63, 63, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 63, 63, 63, 63, 63, 63, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 63, 63, 63, 141, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 142, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 142, 0, 0, 0, 0, 0, 
	0, 0, 143, 0, 0, 0, 0, 0, 
	0, 0, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 0, 0, 0, 0, 
	0, 0, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 0, 0, 
	0, 144, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 145, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 145, 0, 0, 
	0, 0, 0, 0, 0, 146, 0, 0, 
	0, 0, 0, 0, 0, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 0, 
	0, 0, 0, 0, 0, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 0, 0, 0, 147, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 148, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	149, 5, 150, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 151, 7, 7, 7, 7, 
	7, 152, 153, 7, 7, 154, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 156, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 150, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 150, 15, 151, 15, 
	15, 15, 15, 15, 15, 153, 15, 15, 
	154, 15, 15, 15, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 15, 15, 
	15, 15, 15, 15, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	15, 15, 15, 157, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	159, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 160, 158, 161, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 161, 20, 20, 20, 20, 
	20, 20, 20, 20, 162, 20, 20, 163, 
	20, 164, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	164, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 165, 5, 154, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 154, 7, 151, 
	7, 7, 7, 7, 7, 152, 153, 7, 
	7, 154, 7, 7, 7, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 156, 
	7, 7, 7, 7, 7, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 7, 7, 7, 155, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 164, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	164, 26, 26, 26, 26, 26, 26, 26, 
	26, 166, 26, 26, 165, 26, 167, 26, 
	168, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 168, 
	63, 63, 63, 63, 63, 63, 63, 169, 
	170, 63, 63, 171, 63, 63, 63, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 173, 63, 63, 63, 63, 63, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 63, 63, 63, 172, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 160, 158, 168, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 168, 63, 63, 63, 
	63, 63, 63, 63, 63, 170, 63, 63, 
	171, 63, 63, 63, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 63, 63, 
	63, 63, 63, 63, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	63, 63, 63, 174, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	175, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 175, 
	0, 0, 0, 0, 0, 0, 0, 176, 
	0, 0, 0, 0, 0, 0, 0, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 0, 0, 0, 0, 0, 0, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 0, 0, 0, 177, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 5, 179, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 5, 
	181, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 182, 5, 183, 
	5, 5, 184, 186, 185, 5, 5, 5, 
	5, 26, 26, 5, 5, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 34, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 31, 4, 0, 
	33, 5, 6, 32, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 29, 15, 16, 20, 21, 
	19, 26, 15, 28, 16, 17, 27, 18, 
	21, 19, 18, 19, 21, 22, 81, 23, 
	22, 81, 23, 24, 25, 25, 81, 0, 
	18, 20, 21, 19, 26, 15, 28, 30, 
	14, 29, 30, 14, 7, 9, 10, 8, 
	31, 4, 33, 2, 3, 34, 82, 36, 
	82, 36, 0, 83, 38, 38, 39, 40, 
	83, 0, 42, 84, 43, 47, 42, 0, 
	46, 43, 44, 45, 84, 84, 46, 47, 
	42, 49, 50, 60, 49, 50, 51, 52, 
	56, 85, 55, 57, 51, 59, 52, 53, 
	58, 54, 85, 55, 54, 55, 85, 54, 
	56, 85, 55, 57, 51, 59, 49, 50, 
	60, 62, 63, 74, 62, 63, 64, 65, 
	69, 70, 68, 71, 64, 73, 65, 66, 
	72, 67, 70, 68, 67, 68, 70, 86, 
	67, 69, 70, 68, 71, 64, 73, 62, 
	63, 74, 76, 87, 76, 88, 78, 79, 
	80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 3, 4, 5, 9, 10, 11, 9, 
	9, 12, 13, 16, 18, 18, 18, 21, 
	21, 21, 0, 0, 0, 28, 29, 28, 
	0, 30, 0, 0, 31, 32, 33, 35, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 0, 6, 36, 37, 36, 36, 
	38, 39, 40, 41, 42, 38, 43, 16, 
	44, 40, 45, 46, 10, 18, 18, 18, 
	47, 49, 0, 50, 10, 16, 13, 52, 
	16, 18, 18, 18, 53, 54, 40, 40, 
	39, 55, 56, 57, 0, 6, 9, 10, 
	11, 58, 9, 12, 13, 16, 18, 18, 
	18, 21, 59, 21, 0, 0, 60, 36, 
	37, 61, 36, 38, 39, 40, 41, 42, 
	38, 3, 4, 5, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 62, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 25, 63, 27, 64, 0, 0, 
	31, 32, 65
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 1, 7, 14, 
	17, 19, 0, 7, 22, 22, 0, 0, 
	0, 0, 34, 17, 34, 1, 0, 34, 
	17, 34, 1, 1, 1, 17, 17, 17, 
	17, 48, 51, 17, 17, 17, 1, 1, 
	1, 0, 7, 14, 17, 19, 0, 7, 
	22, 34, 17, 34, 1, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 34, 
	17, 34, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 66, 66, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 40 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 45 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 60 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 32 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 30 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 38 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 49 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 47 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 31 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 33 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 46 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 53 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 59 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 5 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 57 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 3 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 4 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 50 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 58 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 66 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 51 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	47, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	10, 122, 10, 122, 10, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 114, 114, 114, 
	59, 36, 36, 114, 36, 39, 39, 1, 
	1, 1, 114, 1, 114, 114, 32, 114, 
	1, 114, 114, 113, 113, 25, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	36, 114, 1, 114, 114, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 1, 114, 
	1, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 1042, 1157, 
	1272, 1332, 1369, 1406, 1521, 1558, 1598, 1638, 
	1640, 1642, 1644, 1759, 1761, 1876, 1991, 2024, 
	2139, 2141, 2256, 2371, 2485, 2599, 2625, 2685, 
	2687, 2689, 2804, 2919, 2979, 2981, 2983, 3097, 
	3211, 3326, 3359, 3474, 3589, 3649, 3686, 3723, 
	3838, 3875, 3990, 3992, 4107, 4222, 4337, 4370, 
	4485, 4600, 4660, 4697, 4734, 4849, 4886, 4888, 
	5003, 5005, 5120, 5235, 5330, 5448, 5487, 5489, 
	5491, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 
	5500
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 0, 
	0, 0, 0, 0, 0, 0, 34, 0, 
	0, 0, 0, 0, 0, 0, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	0, 0, 0, 0, 0, 0, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 0, 0, 0, 35, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 36, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 36, 7, 37, 7, 7, 7, 7, 
	7, 38, 39, 7, 7, 40, 7, 7, 
	7, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 42, 7, 7, 7, 7, 
	7, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	41, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 36, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 36, 15, 37, 15, 
	15, 15, 15, 15, 15, 39, 15, 15, 
	40, 15, 15, 15, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 15, 15, 
	15, 15, 15, 15, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	15, 15, 15, 43, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	45, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 46, 44, 47, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 47, 20, 20, 20, 20, 
	20, 20, 20, 20, 48, 20, 20, 49, 
	20, 50, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	50, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 51, 5, 40, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 37, 
	7, 7, 7, 7, 7, 38, 39, 7, 
	7, 40, 7, 7, 7, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	7, 7, 7, 7, 7, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 7, 7, 7, 41, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 50, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	50, 26, 26, 26, 26, 26, 26, 26, 
	26, 52, 26, 26, 51, 26, 53, 54, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 53, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 55, 26, 56, 57, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 56, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 58, 5, 59, 5, 
	5, 60, 62, 61, 64, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 64, 63, 63, 63, 63, 
	63, 63, 63, 65, 66, 63, 63, 67, 
	63, 63, 63, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 69, 63, 63, 
	63, 63, 63, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 63, 
	63, 63, 68, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 46, 
	44, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 63, 63, 63, 63, 63, 63, 63, 
	63, 66, 63, 63, 67, 63, 63, 63, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 63, 63, 63, 63, 63, 63, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 63, 63, 63, 70, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 71, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 71, 0, 0, 0, 0, 
	0, 0, 0, 72, 0, 0, 0, 0, 
	0, 0, 0, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 0, 0, 0, 
	0, 0, 0, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 0, 
	0, 0, 73, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 74, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 74, 5, 
	5, 5, 5, 5, 5, 5, 75, 5, 
	76, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 76, 
	63, 63, 63, 63, 63, 63, 63, 77, 
	78, 63, 63, 79, 63, 63, 63, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 63, 63, 63, 63, 63, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 63, 63, 63, 80, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 19, 17, 76, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 76, 63, 63, 63, 
	63, 63, 63, 63, 63, 78, 63, 63, 
	79, 63, 63, 63, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 63, 63, 
	63, 63, 63, 63, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	63, 63, 63, 82, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	83, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 83, 
	0, 0, 0, 0, 0, 0, 0, 84, 
	0, 0, 0, 0, 0, 0, 0, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 0, 0, 0, 0, 0, 0, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 85, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 0, 0, 0, 0, 0, 
	0, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 0, 0, 0, 
	87, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 88, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 0, 0, 0, 
	0, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 0, 
	0, 0, 89, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 91, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 92, 
	90, 94, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 95, 93, 96, 90, 95, 
	93, 98, 99, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	98, 97, 100, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 97, 97, 97, 97, 97, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 97, 97, 97, 101, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 98, 99, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 98, 103, 100, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 103, 103, 103, 
	103, 103, 103, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 103, 
	103, 103, 104, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 106, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 105, 108, 90, 107, 105, 109, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 0, 
	0, 0, 0, 0, 0, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 0, 0, 0, 110, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 109, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 112, 0, 0, 0, 0, 0, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 0, 0, 0, 111, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 113, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 113, 0, 0, 0, 0, 0, 
	0, 0, 114, 0, 0, 0, 0, 0, 
	0, 0, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 0, 0, 0, 0, 
	0, 0, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 0, 0, 
	0, 115, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 116, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 116, 5, 5, 
	5, 5, 5, 5, 5, 117, 5, 118, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 7, 7, 7, 120, 121, 
	7, 7, 122, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	124, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 118, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 118, 15, 119, 15, 15, 15, 15, 
	15, 15, 121, 15, 15, 122, 15, 15, 
	15, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 15, 15, 15, 15, 15, 
	15, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 15, 15, 15, 
	125, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	126, 129, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	129, 20, 20, 20, 20, 20, 20, 20, 
	20, 130, 20, 20, 131, 20, 132, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 132, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 133, 5, 122, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 119, 7, 7, 7, 
	7, 7, 120, 121, 7, 7, 122, 7, 
	7, 7, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 124, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 123, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 132, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 132, 26, 26, 
	26, 26, 26, 26, 26, 26, 134, 26, 
	26, 133, 26, 135, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 135, 63, 63, 63, 63, 63, 
	63, 63, 136, 137, 63, 63, 138, 63, 
	63, 63, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 140, 63, 63, 63, 
	63, 63, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 63, 63, 
	63, 139, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 128, 126, 
	135, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 135, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	137, 63, 63, 138, 63, 63, 63, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 63, 63, 63, 63, 63, 63, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 63, 63, 63, 141, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 142, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 142, 0, 0, 0, 0, 0, 
	0, 0, 143, 0, 0, 0, 0, 0, 
	0, 0, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 0, 0, 0, 0, 
	0, 0, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 0, 0, 
	0, 144, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 145, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 145, 0, 0, 
	0, 0, 0, 0, 0, 146, 0, 0, 
	0, 0, 0, 0, 0, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 0, 
	0, 0, 0, 0, 0, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 0, 0, 0, 147, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 148, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	149, 5, 150, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 151, 7, 7, 7, 7, 
	7, 152, 153, 7, 7, 154, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 156, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 150, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 150, 15, 151, 15, 
	15, 15, 15, 15, 15, 153, 15, 15, 
	154, 15, 15, 15, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 15, 15, 
	15, 15, 15, 15, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	15, 15, 15, 157, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	159, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 160, 158, 161, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 161, 20, 20, 20, 20, 
	20, 20, 20, 20, 162, 20, 20, 163, 
	20, 164, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	164, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 165, 5, 154, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 154, 7, 151, 
	7, 7, 7, 7, 7, 152, 153, 7, 
	7, 154, 7, 7, 7, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 156, 
	7, 7, 7, 7, 7, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 7, 7, 7, 155, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 164, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	164, 26, 26, 26, 26, 26, 26, 26, 
	26, 166, 26, 26, 165, 26, 167, 26, 
	168, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 168, 
	63, 63, 63, 63, 63, 63, 63, 169, 
	170, 63, 63, 171, 63, 63, 63, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 173, 63, 63, 63, 63, 63, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 63, 63, 63, 172, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 160, 158, 168, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 168, 63, 63, 63, 
	63, 63, 63, 63, 63, 170, 63, 63, 
	171, 63, 63, 63, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 63, 63, 
	63, 63, 63, 63, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	63, 63, 63, 174, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	175, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 175, 
	0, 0, 0, 0, 0, 0, 0, 176, 
	0, 0, 0, 0, 0, 0, 0, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 0, 0, 0, 0, 0, 0, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 0, 0, 0, 177, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 5, 179, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 5, 
	181, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 182, 5, 183, 
	5, 5, 184, 186, 185, 5, 5, 5, 
	5, 26, 26, 5, 5, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 34, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 31, 4, 0, 
	33, 5, 6, 32, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 29, 15, 16, 20, 21, 
	19, 26, 15, 28, 16, 17, 27, 18, 
	21, 19, 18, 19, 21, 22, 81, 23, 
	22, 81, 23, 24, 25, 25, 81, 0, 
	18, 20, 21, 19, 26, 15, 28, 30, 
	14, 29, 30, 14, 7, 9, 10, 8, 
	31, 4, 33, 2, 3, 34, 82, 36, 
	82, 36, 0, 83, 38, 38, 39, 40, 
	83, 0, 42, 84, 43, 47, 42, 0, 
	46, 43, 44, 45, 84, 84, 46, 47, 
	42, 49, 50, 60, 49, 50, 51, 52, 
	56, 85, 55, 57, 51, 59, 52, 53, 
	58, 54, 85, 55, 54, 55, 85, 54, 
	56, 85, 55, 57, 51, 59, 49, 50, 
	60, 62, 63, 74, 62, 63, 64, 65, 
	69, 70, 68, 71, 64, 73, 65, 66, 
	72, 67, 70, 68, 67, 68, 70, 86, 
	67, 69, 70, 68, 71, 64, 73, 62, 
	63, 74, 76, 87, 76, 88, 78, 79, 
	80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 3, 4, 5, 9, 10, 11, 9, 
	9, 12, 13, 16, 18, 18, 18, 21, 
	21, 21, 0, 0, 0, 28, 29, 28, 
	0, 30, 0, 0, 31, 32, 33, 35, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 0, 6, 36, 37, 36, 36, 
	38, 39, 40, 41, 42, 38, 43, 16, 
	44, 40, 45, 46, 10, 18, 18, 18, 
	47, 49, 0, 50, 10, 16, 13, 52, 
	16, 18, 18, 18, 53, 54, 40, 40, 
	39, 55, 56, 57, 0, 6, 9, 10, 
	11, 58, 9, 12, 13, 16, 18, 18, 
	18, 21, 59, 21, 0, 0, 60, 36, 
	37, 61, 36, 38, 39, 40, 41, 42, 
	38, 3, 4, 5, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 62, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 25, 63, 27, 64, 0, 0, 
	31, 32, 65
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 1, 7, 14, 
	17, 19, 0, 7, 22, 22, 0, 0, 
	0, 0, 34, 17, 34, 1, 0, 34, 
	17, 34, 1, 1, 1, 17, 17, 17, 
	17, 48, 51, 17, 17, 17, 1, 1, 
	1, 0, 7, 14, 17, 19, 0, 7, 
	22, 34, 17, 34, 1, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 34, 
	17, 34, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 66, 66, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 40 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 45 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 60 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 32 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 30 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 38 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 49 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 47 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 31 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 33 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 46 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 53 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 59 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 5 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 57 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 3 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 4 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 50 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 58 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 66 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 51 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module SimpleStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	122, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	47, 9, 47, 47, 47, 
	10, 10, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	10, 122, 10, 122, 10, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 10, 10, 9, 122, 
	92, 92, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 114, 114, 114, 
	59, 36, 36, 114, 36, 39, 39, 1, 
	1, 1, 114, 1, 114, 114, 32, 114, 
	1, 114, 114, 113, 113, 25, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	36, 114, 1, 114, 114, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 1, 114, 
	1, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 1042, 1157, 
	1272, 1332, 1369, 1406, 1521, 1558, 1598, 1638, 
	1640, 1642, 1644, 1759, 1761, 1876, 1991, 2024, 
	2139, 2141, 2256, 2371, 2485, 2599, 2625, 2685, 
	2687, 2689, 2804, 2919, 2979, 2981, 2983, 3097, 
	3211, 3326, 3359, 3474, 3589, 3649, 3686, 3723, 
	3838, 3875, 3990, 3992, 4107, 4222, 4337, 4370, 
	4485, 4600, 4660, 4697, 4734, 4849, 4886, 4888, 
	5003, 5005, 5120, 5235, 5330, 5448, 5487, 5489, 
	5491, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 
	5500
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 0, 
	0, 0, 0, 0, 0, 0, 34, 0, 
	0, 0, 0, 0, 0, 0, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	0, 0, 0, 0, 0, 0, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 0, 0, 0, 35, 0, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 0, 36, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 36, 7, 37, 7, 7, 7, 7, 
	7, 38, 39, 7, 7, 40, 7, 7, 
	7, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 42, 7, 7, 7, 7, 
	7, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	41, 7, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 7, 36, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 36, 15, 37, 15, 
	15, 15, 15, 15, 15, 39, 15, 15, 
	40, 15, 15, 15, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 15, 15, 
	15, 15, 15, 15, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	15, 15, 15, 43, 15, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 15, 
	45, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 46, 44, 47, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 47, 20, 20, 20, 20, 
	20, 20, 20, 20, 48, 20, 20, 49, 
	20, 50, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	50, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 51, 5, 40, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 37, 
	7, 7, 7, 7, 7, 38, 39, 7, 
	7, 40, 7, 7, 7, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	7, 7, 7, 7, 7, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 7, 7, 7, 41, 7, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	7, 50, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	50, 26, 26, 26, 26, 26, 26, 26, 
	26, 52, 26, 26, 51, 26, 53, 54, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 53, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 55, 26, 56, 57, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 56, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 58, 5, 59, 5, 
	5, 60, 62, 61, 64, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 64, 63, 63, 63, 63, 
	63, 63, 63, 65, 66, 63, 63, 67, 
	63, 63, 63, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 69, 63, 63, 
	63, 63, 63, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 63, 
	63, 63, 68, 63, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 63, 46, 
	44, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 63, 63, 63, 63, 63, 63, 63, 
	63, 66, 63, 63, 67, 63, 63, 63, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 63, 63, 63, 63, 63, 63, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 63, 63, 63, 70, 
	63, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 63, 71, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 71, 0, 0, 0, 0, 
	0, 0, 0, 72, 0, 0, 0, 0, 
	0, 0, 0, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 0, 0, 0, 
	0, 0, 0, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 0, 
	0, 0, 73, 0, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 0, 74, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 74, 5, 
	5, 5, 5, 5, 5, 5, 75, 5, 
	76, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 76, 
	63, 63, 63, 63, 63, 63, 63, 77, 
	78, 63, 63, 79, 63, 63, 63, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 81, 63, 63, 63, 63, 63, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 63, 63, 63, 80, 63, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 63, 19, 17, 76, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 76, 63, 63, 63, 
	63, 63, 63, 63, 63, 78, 63, 63, 
	79, 63, 63, 63, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 63, 63, 
	63, 63, 63, 63, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	63, 63, 63, 82, 63, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 63, 
	83, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 83, 
	0, 0, 0, 0, 0, 0, 0, 84, 
	0, 0, 0, 0, 0, 0, 0, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 0, 0, 0, 0, 0, 0, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 0, 0, 0, 85, 0, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 0, 86, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 0, 0, 0, 0, 0, 
	0, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 0, 0, 0, 
	87, 0, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 0, 88, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 0, 0, 0, 
	0, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 0, 
	0, 0, 89, 0, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 0, 91, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 92, 
	90, 94, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 95, 93, 96, 90, 95, 
	93, 98, 99, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	98, 97, 100, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 102, 97, 97, 97, 97, 97, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 97, 97, 97, 101, 
	97, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 97, 98, 99, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 98, 103, 100, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 103, 103, 103, 
	103, 103, 103, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 103, 
	103, 103, 104, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 103, 106, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 105, 108, 90, 107, 105, 109, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 0, 
	0, 0, 0, 0, 0, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 0, 0, 0, 110, 0, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	0, 109, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 112, 0, 0, 0, 0, 0, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 0, 0, 0, 111, 0, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 0, 113, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 113, 0, 0, 0, 0, 0, 
	0, 0, 114, 0, 0, 0, 0, 0, 
	0, 0, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 0, 0, 0, 0, 
	0, 0, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 0, 0, 
	0, 115, 0, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 0, 116, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 116, 5, 5, 
	5, 5, 5, 5, 5, 117, 5, 118, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 118, 7, 
	119, 7, 7, 7, 7, 7, 120, 121, 
	7, 7, 122, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	124, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 118, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 118, 15, 119, 15, 15, 15, 15, 
	15, 15, 121, 15, 15, 122, 15, 15, 
	15, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 15, 15, 15, 15, 15, 
	15, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 15, 15, 15, 
	125, 15, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 15, 127, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 128, 
	126, 129, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	129, 20, 20, 20, 20, 20, 20, 20, 
	20, 130, 20, 20, 131, 20, 132, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 132, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 133, 5, 122, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 122, 7, 119, 7, 7, 7, 
	7, 7, 120, 121, 7, 7, 122, 7, 
	7, 7, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 124, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 123, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 132, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 132, 26, 26, 
	26, 26, 26, 26, 26, 26, 134, 26, 
	26, 133, 26, 135, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 135, 63, 63, 63, 63, 63, 
	63, 63, 136, 137, 63, 63, 138, 63, 
	63, 63, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 140, 63, 63, 63, 
	63, 63, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 63, 63, 
	63, 139, 63, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 63, 128, 126, 
	135, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 135, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	137, 63, 63, 138, 63, 63, 63, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 63, 63, 63, 63, 63, 63, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 63, 63, 63, 141, 63, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 63, 142, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 142, 0, 0, 0, 0, 0, 
	0, 0, 143, 0, 0, 0, 0, 0, 
	0, 0, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 0, 0, 0, 0, 
	0, 0, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 0, 0, 
	0, 144, 0, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 0, 145, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 145, 0, 0, 
	0, 0, 0, 0, 0, 146, 0, 0, 
	0, 0, 0, 0, 0, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 0, 
	0, 0, 0, 0, 0, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 0, 0, 0, 147, 0, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	0, 148, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	149, 5, 150, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 150, 7, 151, 7, 7, 7, 7, 
	7, 152, 153, 7, 7, 154, 7, 7, 
	7, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 156, 7, 7, 7, 7, 
	7, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 7, 7, 7, 
	155, 7, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 7, 150, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 150, 15, 151, 15, 
	15, 15, 15, 15, 15, 153, 15, 15, 
	154, 15, 15, 15, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 15, 15, 
	15, 15, 15, 15, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	15, 15, 15, 157, 15, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 15, 
	159, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 160, 158, 161, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 161, 20, 20, 20, 20, 
	20, 20, 20, 20, 162, 20, 20, 163, 
	20, 164, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	164, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 165, 5, 154, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 154, 7, 151, 
	7, 7, 7, 7, 7, 152, 153, 7, 
	7, 154, 7, 7, 7, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 156, 
	7, 7, 7, 7, 7, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 7, 7, 7, 155, 7, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	155, 155, 155, 155, 155, 155, 155, 155, 
	7, 164, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	164, 26, 26, 26, 26, 26, 26, 26, 
	26, 166, 26, 26, 165, 26, 167, 26, 
	168, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 168, 
	63, 63, 63, 63, 63, 63, 63, 169, 
	170, 63, 63, 171, 63, 63, 63, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 173, 63, 63, 63, 63, 63, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 63, 63, 63, 172, 63, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 63, 160, 158, 168, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 168, 63, 63, 63, 
	63, 63, 63, 63, 63, 170, 63, 63, 
	171, 63, 63, 63, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 63, 63, 
	63, 63, 63, 63, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	63, 63, 63, 174, 63, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 63, 
	175, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 175, 
	0, 0, 0, 0, 0, 0, 0, 176, 
	0, 0, 0, 0, 0, 0, 0, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 0, 0, 0, 0, 0, 0, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 0, 0, 0, 177, 0, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 0, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 5, 179, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 5, 
	181, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 182, 5, 183, 
	5, 5, 184, 186, 185, 5, 5, 5, 
	5, 26, 26, 5, 5, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 34, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 31, 4, 0, 
	33, 5, 6, 32, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 29, 15, 16, 20, 21, 
	19, 26, 15, 28, 16, 17, 27, 18, 
	21, 19, 18, 19, 21, 22, 81, 23, 
	22, 81, 23, 24, 25, 25, 81, 0, 
	18, 20, 21, 19, 26, 15, 28, 30, 
	14, 29, 30, 14, 7, 9, 10, 8, 
	31, 4, 33, 2, 3, 34, 82, 36, 
	82, 36, 0, 83, 38, 38, 39, 40, 
	83, 0, 42, 84, 43, 47, 42, 0, 
	46, 43, 44, 45, 84, 84, 46, 47, 
	42, 49, 50, 60, 49, 50, 51, 52, 
	56, 85, 55, 57, 51, 59, 52, 53, 
	58, 54, 85, 55, 54, 55, 85, 54, 
	56, 85, 55, 57, 51, 59, 49, 50, 
	60, 62, 63, 74, 62, 63, 64, 65, 
	69, 70, 68, 71, 64, 73, 65, 66, 
	72, 67, 70, 68, 67, 68, 70, 86, 
	67, 69, 70, 68, 71, 64, 73, 62, 
	63, 74, 76, 87, 76, 88, 78, 79, 
	80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 3, 4, 5, 9, 10, 11, 9, 
	9, 12, 13, 16, 18, 18, 18, 21, 
	21, 21, 0, 0, 0, 28, 29, 28, 
	0, 30, 0, 0, 31, 32, 33, 35, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 0, 6, 36, 37, 36, 36, 
	38, 39, 40, 41, 42, 38, 43, 16, 
	44, 40, 45, 46, 10, 18, 18, 18, 
	47, 49, 0, 50, 10, 16, 13, 52, 
	16, 18, 18, 18, 53, 54, 40, 40, 
	39, 55, 56, 57, 0, 6, 9, 10, 
	11, 58, 9, 12, 13, 16, 18, 18, 
	18, 21, 59, 21, 0, 0, 60, 36, 
	37, 61, 36, 38, 39, 40, 41, 42, 
	38, 3, 4, 5, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 62, 
	36, 37, 36, 36, 38, 39, 40, 41, 
	42, 38, 25, 63, 27, 64, 0, 0, 
	31, 32, 65
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 1, 7, 14, 
	17, 19, 0, 7, 22, 22, 0, 0, 
	0, 0, 34, 17, 34, 1, 0, 34, 
	17, 34, 1, 1, 1, 17, 17, 17, 
	17, 48, 51, 17, 17, 17, 1, 1, 
	1, 0, 7, 14, 17, 19, 0, 7, 
	22, 34, 17, 34, 1, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 34, 
	17, 34, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 66, 66, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


      # end: ragel        
          end

          def each
            @buffers    = {}
            @incomplete = {}
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 40 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 45 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 60 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 32 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 64 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 30 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 38 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 49 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 47 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 31 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 33 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 43 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 39 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 46 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 53 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 59 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 5 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 57 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 3 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 4 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 50 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 58 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 66 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 51 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::SimpleStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
