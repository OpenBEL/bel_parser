
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 47, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 126, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 10, 47, 10, 
	10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 122, 
	9, 47, 9, 47, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 9, 122, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 10, 10, 9, 
	122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 44, 
	10, 122, 0, 0, 0, 
	0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 114, 114, 32, 114, 
	36, 36, 114, 114, 39, 39, 1, 1, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 114, 114, 36, 114, 114, 
	114, 36, 36, 114, 114, 39, 118, 118, 
	114, 114, 36, 114, 39, 118, 118, 114, 
	114, 36, 114, 114, 118, 114, 118, 114, 
	118, 118, 114, 114, 32, 114, 36, 36, 
	114, 114, 39, 39, 38, 1, 39, 39, 
	114, 36, 114, 114, 114, 114, 114, 118, 
	118, 118, 118, 118, 114, 114, 114, 118, 
	118, 39, 118, 114, 114, 114, 114, 114, 
	118, 114, 118, 118, 118, 114, 118, 118, 
	118, 118, 118, 114, 114, 114, 118, 118, 
	114, 36, 114, 39, 39, 114, 114, 36, 
	118, 114, 114, 114, 36, 118, 114, 39, 
	118, 24, 118, 114, 36, 114, 114, 114, 
	114, 114, 39, 39, 114, 114, 118, 114, 
	118, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 75, 31, 59, 59, 0, 
	54, 54, 0, 114, 1, 114, 113, 113, 
	113, 113, 114, 75, 114, 32, 114, 36, 
	36, 114, 114, 114, 36, 114, 114, 114, 
	114, 114, 75, 114, 32, 114, 36, 36, 
	114, 114, 36, 1, 114, 36, 114, 114, 
	114, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 36, 113, 0, 0, 0, 1, 
	36, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 1033, 1148, 1181, 
	1296, 1333, 1370, 1485, 1600, 1640, 1680, 1682, 
	1684, 1686, 1726, 1766, 1881, 1918, 2033, 2148, 
	2263, 2378, 2493, 2612, 2727, 2842, 2879, 2994, 
	3109, 3224, 3261, 3298, 3413, 3528, 3568, 3687, 
	3806, 3921, 4036, 4073, 4188, 4228, 4347, 4466, 
	4581, 4696, 4733, 4848, 4963, 5082, 5197, 5316, 
	5431, 5550, 5669, 5784, 5899, 5932, 6047, 6084, 
	6121, 6236, 6351, 6391, 6431, 6470, 6472, 6512, 
	6552, 6667, 6704, 6819, 6934, 7049, 7164, 7279, 
	7398, 7517, 7636, 7755, 7874, 7989, 8104, 8219, 
	8338, 8457, 8497, 8616, 8731, 8846, 8961, 9076, 
	9191, 9310, 9425, 9544, 9663, 9782, 9897, 10016, 
	10135, 10254, 10373, 10492, 10607, 10722, 10837, 10956, 
	11075, 11190, 11227, 11342, 11382, 11422, 11537, 11652, 
	11689, 11808, 11923, 12038, 12153, 12190, 12309, 12424, 
	12464, 12583, 12608, 12727, 12842, 12879, 12994, 13109, 
	13224, 13339, 13454, 13494, 13534, 13649, 13764, 13883, 
	13998, 14117, 14236, 14355, 14474, 14593, 14712, 14827, 
	14942, 15057, 15176, 15295, 15371, 15403, 15463, 15523, 
	15524, 15579, 15634, 15635, 15750, 15752, 15867, 15981, 
	16095, 16209, 16323, 16438, 16514, 16629, 16662, 16777, 
	16814, 16851, 16966, 17081, 17196, 17233, 17348, 17463, 
	17578, 17693, 17808, 17884, 17999, 18032, 18147, 18184, 
	18221, 18336, 18451, 18488, 18490, 18605, 18642, 18757, 
	18872, 18987, 19102, 19217, 19312, 19430, 19469, 19471, 
	19473, 19475, 19476, 19513, 19627, 19628, 19629, 19630, 
	19632, 19669, 19670, 19671, 19672
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 27, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	28, 1, 1, 1, 1, 1, 1, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 1, 1, 1, 1, 1, 1, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 1, 1, 1, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	35, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 35, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 38, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 1, 40, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 40, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 32, 
	32, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 32, 32, 32, 
	34, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 41, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 41, 32, 32, 32, 
	32, 32, 32, 32, 32, 42, 32, 32, 
	41, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	43, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 43, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 10, 45, 10, 
	46, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 1, 48, 1, 
	49, 1, 1, 50, 52, 51, 53, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 45, 10, 54, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 54, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 48, 1, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 55, 10, 10, 
	10, 10, 10, 10, 10, 56, 57, 10, 
	10, 58, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 38, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	38, 10, 10, 10, 10, 10, 10, 10, 
	10, 61, 10, 10, 39, 10, 62, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 62, 10, 10, 
	10, 10, 10, 10, 10, 56, 63, 10, 
	10, 64, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 32, 32, 32, 32, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 65, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 66, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 66, 32, 32, 32, 32, 
	32, 32, 32, 32, 42, 32, 32, 41, 
	32, 32, 32, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 32, 32, 32, 
	32, 32, 32, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 32, 
	32, 32, 65, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 55, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 57, 
	10, 10, 58, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 10, 10, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 10, 10, 10, 67, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 62, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 63, 10, 10, 64, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 10, 
	10, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 10, 10, 10, 
	67, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 69, 69, 
	69, 69, 69, 69, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 70, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 7, 71, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 71, 7, 7, 7, 7, 
	7, 7, 7, 7, 18, 7, 7, 17, 
	7, 7, 7, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 7, 7, 7, 
	7, 7, 7, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 7, 
	7, 7, 72, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 73, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 73, 10, 
	10, 10, 10, 10, 10, 10, 74, 75, 
	10, 10, 76, 10, 10, 10, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	78, 10, 10, 10, 10, 10, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 10, 10, 10, 77, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 79, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 79, 1, 1, 1, 1, 1, 1, 
	1, 31, 1, 1, 1, 15, 1, 80, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 80, 32, 
	32, 32, 32, 32, 32, 32, 32, 81, 
	32, 32, 82, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 32, 32, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 32, 32, 32, 34, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 83, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 83, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 84, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 32, 
	32, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 32, 32, 32, 
	65, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 87, 85, 85, 
	88, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	90, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 90, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	94, 1, 95, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 95, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 85, 85, 85, 85, 85, 
	85, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 85, 85, 85, 
	89, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 96, 85, 85, 
	86, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	97, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 97, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 10, 45, 10, 
	98, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 99, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 101, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 101, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	102, 102, 102, 102, 102, 102, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 103, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 85, 104, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 104, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 85, 
	85, 85, 85, 85, 85, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 85, 85, 85, 105, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 106, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	106, 10, 10, 10, 10, 10, 10, 10, 
	107, 108, 10, 10, 109, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 111, 10, 10, 10, 10, 10, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 10, 10, 10, 110, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 112, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 1, 1, 94, 
	1, 80, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	80, 32, 32, 32, 32, 32, 32, 32, 
	32, 113, 32, 32, 114, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 115, 44, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 115, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 10, 45, 10, 116, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 117, 
	21, 21, 100, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 1, 118, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 118, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 119, 119, 119, 119, 
	119, 119, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 120, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 32, 121, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 121, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 32, 32, 32, 32, 32, 
	32, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 32, 32, 32, 
	122, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 124, 57, 10, 10, 
	58, 10, 10, 10, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 60, 10, 
	10, 10, 10, 10, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	10, 10, 10, 125, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	126, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 126, 
	1, 1, 1, 1, 1, 1, 1, 31, 
	1, 1, 1, 39, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 127, 32, 32, 
	40, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 124, 
	63, 10, 10, 64, 10, 10, 10, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 60, 10, 10, 10, 10, 10, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 10, 10, 10, 125, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 24, 24, 24, 24, 24, 
	24, 24, 24, 130, 24, 24, 131, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 132, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 1, 
	1, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 1, 1, 1, 1, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	26, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 133, 44, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 133, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 134, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 135, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 48, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 1, 1, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 1, 
	1, 1, 26, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 136, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 137, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 137, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 50, 139, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 139, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 51, 51, 
	51, 51, 51, 51, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	51, 51, 51, 140, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	141, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 141, 
	51, 51, 51, 51, 51, 51, 51, 142, 
	51, 51, 51, 51, 51, 51, 51, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 51, 51, 51, 51, 51, 51, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 51, 51, 51, 143, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 144, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 144, 51, 51, 51, 51, 51, 
	51, 51, 145, 51, 147, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 150, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 150, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 153, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 153, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 154, 
	51, 155, 148, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	155, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 146, 146, 146, 146, 146, 146, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 146, 146, 146, 149, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 156, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 156, 146, 146, 146, 146, 
	146, 146, 146, 146, 157, 146, 146, 156, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 158, 
	159, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 158, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 51, 160, 51, 161, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 161, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 154, 51, 51, 162, 51, 52, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 163, 51, 52, 50, 
	164, 159, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 164, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 160, 51, 
	165, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 165, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 162, 51, 
	166, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 166, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	168, 51, 51, 169, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 153, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 153, 51, 51, 51, 51, 51, 
	51, 51, 51, 172, 51, 51, 154, 51, 
	173, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 173, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	174, 51, 51, 175, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 147, 148, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 146, 146, 146, 146, 
	146, 146, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 146, 146, 
	146, 176, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 177, 148, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 177, 146, 146, 
	146, 146, 146, 146, 146, 146, 157, 146, 
	146, 156, 146, 146, 146, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 146, 
	146, 146, 146, 146, 146, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 146, 146, 146, 176, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 166, 52, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	166, 51, 51, 51, 51, 51, 51, 51, 
	51, 168, 51, 51, 169, 51, 51, 51, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 51, 51, 51, 51, 51, 51, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 51, 51, 51, 178, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 173, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 173, 51, 51, 51, 51, 
	51, 51, 51, 51, 174, 51, 51, 175, 
	51, 51, 51, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 51, 51, 51, 
	51, 51, 51, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 51, 
	51, 51, 178, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 179, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 179, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 51, 181, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 181, 24, 24, 
	24, 24, 24, 24, 24, 182, 183, 24, 
	24, 184, 24, 24, 24, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	24, 24, 24, 24, 24, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 185, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 10, 187, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 187, 24, 24, 24, 
	24, 24, 24, 24, 24, 188, 24, 24, 
	189, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 190, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 190, 24, 24, 24, 24, 
	24, 24, 24, 182, 191, 24, 24, 192, 
	24, 24, 24, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 186, 24, 24, 
	24, 24, 24, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 185, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 10, 193, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 193, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 119, 119, 119, 119, 
	119, 119, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 194, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 32, 195, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 195, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 32, 32, 32, 32, 32, 
	32, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 32, 32, 32, 
	196, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 28, 57, 10, 10, 
	58, 10, 10, 10, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 10, 10, 
	10, 10, 10, 10, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	10, 10, 10, 197, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 28, 
	63, 10, 10, 64, 10, 10, 10, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 10, 10, 10, 10, 10, 10, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 10, 10, 10, 197, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 181, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 181, 24, 24, 24, 24, 24, 
	24, 24, 24, 183, 24, 24, 184, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	24, 24, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 198, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 10, 190, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 190, 24, 24, 24, 24, 24, 24, 
	24, 24, 191, 24, 24, 192, 24, 24, 
	24, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 24, 24, 24, 24, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	198, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	10, 199, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 45, 
	10, 200, 47, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	200, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 100, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	201, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 201, 
	10, 10, 10, 10, 10, 10, 10, 107, 
	202, 10, 10, 203, 10, 10, 10, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 111, 10, 10, 10, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 10, 10, 10, 110, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 204, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 204, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 85, 85, 85, 85, 
	85, 85, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 85, 85, 
	85, 205, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 206, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 206, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 85, 
	85, 85, 85, 85, 85, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 85, 85, 85, 205, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 207, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 108, 10, 10, 109, 10, 10, 10, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 10, 10, 10, 10, 10, 10, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 10, 10, 10, 208, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 209, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 202, 10, 10, 203, 
	10, 10, 10, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 10, 10, 10, 
	10, 10, 10, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 10, 
	10, 10, 208, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 210, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 210, 24, 
	24, 24, 24, 24, 24, 24, 24, 211, 
	24, 24, 212, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 213, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 214, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	214, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 134, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 10, 
	215, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 215, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 100, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 21, 21, 21, 21, 21, 21, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 216, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 1, 217, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 217, 24, 
	24, 24, 24, 24, 24, 24, 218, 24, 
	24, 24, 24, 24, 24, 24, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	24, 24, 24, 24, 24, 24, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 219, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 1, 220, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 220, 1, 1, 
	1, 1, 1, 1, 1, 31, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 193, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	193, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 119, 119, 119, 119, 119, 119, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 120, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 32, 
	221, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 221, 
	24, 24, 24, 24, 24, 24, 24, 222, 
	223, 24, 24, 224, 24, 24, 24, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 226, 24, 24, 24, 24, 24, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 225, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 10, 227, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 227, 24, 
	24, 24, 24, 24, 24, 24, 24, 228, 
	24, 24, 229, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 230, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 230, 24, 24, 
	24, 24, 24, 24, 24, 222, 231, 24, 
	24, 232, 24, 24, 24, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 226, 
	24, 24, 24, 24, 24, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 225, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 10, 233, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 233, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 102, 102, 
	102, 102, 102, 102, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 234, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 85, 235, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 235, 85, 85, 85, 85, 
	85, 85, 85, 85, 96, 85, 85, 86, 
	85, 85, 85, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 85, 85, 85, 
	85, 85, 85, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 85, 
	85, 85, 236, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 106, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 106, 10, 
	10, 10, 10, 10, 10, 10, 28, 108, 
	10, 10, 109, 10, 10, 10, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	10, 10, 10, 10, 10, 10, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 10, 10, 10, 237, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 201, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 201, 10, 10, 10, 10, 10, 10, 
	10, 28, 202, 10, 10, 203, 10, 10, 
	10, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 10, 10, 10, 10, 10, 
	10, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 10, 10, 10, 
	237, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 221, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 221, 24, 24, 24, 
	24, 24, 24, 24, 24, 223, 24, 24, 
	224, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 24, 24, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 238, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 10, 230, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 230, 24, 24, 24, 24, 
	24, 24, 24, 24, 231, 24, 24, 232, 
	24, 24, 24, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 24, 24, 24, 
	24, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 238, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 10, 207, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 207, 10, 10, 10, 10, 10, 
	10, 10, 239, 108, 10, 10, 109, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 93, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 93, 10, 10, 
	10, 10, 10, 10, 10, 10, 241, 10, 
	10, 94, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 209, 10, 10, 10, 10, 10, 
	10, 10, 239, 202, 10, 10, 203, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 242, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 242, 10, 10, 
	10, 10, 10, 10, 10, 10, 91, 10, 
	10, 92, 10, 10, 45, 10, 243, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 245, 32, 
	32, 84, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 244, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	244, 32, 32, 32, 32, 32, 32, 32, 
	32, 42, 32, 32, 84, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 246, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 246, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 247, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	247, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 117, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	248, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 248, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	249, 7, 7, 250, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 248, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 248, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 251, 7, 
	7, 7, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 7, 7, 
	7, 9, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 86, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 252, 85, 
	85, 253, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 85, 85, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 85, 85, 85, 89, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 254, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	254, 10, 10, 10, 10, 10, 10, 10, 
	10, 91, 10, 10, 92, 10, 255, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 255, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 99, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 248, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 7, 7, 
	7, 7, 7, 7, 7, 256, 7, 7, 
	251, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	257, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 257, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	12, 10, 10, 13, 10, 10, 45, 10, 
	258, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 258, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 259, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 259, 10, 
	260, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 260, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 261, 10, 
	10, 10, 10, 10, 10, 10, 262, 75, 
	10, 10, 76, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 14, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 14, 10, 10, 10, 10, 10, 10, 
	10, 10, 264, 10, 10, 15, 10, 265, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 265, 10, 
	10, 10, 10, 10, 10, 10, 262, 266, 
	10, 10, 267, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 8, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 8, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 7, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 269, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 269, 7, 7, 7, 
	7, 7, 7, 7, 7, 18, 7, 7, 
	17, 7, 7, 7, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 7, 7, 
	7, 7, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	7, 7, 7, 268, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	75, 10, 10, 76, 10, 10, 10, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 10, 10, 10, 10, 10, 10, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 10, 10, 10, 270, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 265, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 265, 10, 10, 10, 10, 10, 
	10, 10, 10, 266, 10, 10, 267, 10, 
	10, 10, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 10, 10, 10, 10, 
	10, 10, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 10, 10, 
	10, 270, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 271, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 271, 10, 10, 
	10, 10, 10, 10, 10, 10, 12, 10, 
	10, 13, 10, 10, 45, 10, 272, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 273, 32, 
	32, 274, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 275, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	275, 10, 10, 10, 10, 10, 10, 10, 
	74, 266, 10, 10, 267, 10, 10, 10, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 78, 10, 10, 10, 10, 10, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 10, 10, 10, 77, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 276, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 276, 24, 24, 24, 24, 
	24, 24, 24, 24, 277, 24, 24, 278, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 279, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 279, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 15, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	1, 1, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 26, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 280, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 280, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 10, 281, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 281, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 21, 21, 
	21, 21, 21, 21, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 216, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 1, 282, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 282, 24, 24, 24, 24, 
	24, 24, 24, 283, 284, 24, 24, 285, 
	24, 24, 24, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 287, 24, 24, 
	24, 24, 24, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 286, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 10, 288, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 288, 24, 24, 24, 24, 24, 
	24, 24, 24, 289, 24, 24, 290, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 291, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 291, 24, 24, 24, 24, 24, 24, 
	24, 283, 292, 24, 24, 293, 24, 24, 
	24, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 287, 24, 24, 24, 24, 
	24, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	286, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	10, 294, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	294, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 69, 69, 69, 69, 69, 69, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 295, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 7, 
	296, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 296, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 7, 7, 7, 7, 7, 7, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 7, 7, 7, 297, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 73, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 73, 10, 10, 10, 10, 10, 
	10, 10, 28, 75, 10, 10, 76, 10, 
	10, 10, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 10, 10, 10, 10, 
	10, 10, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 10, 10, 
	10, 298, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 275, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 275, 10, 10, 
	10, 10, 10, 10, 10, 28, 266, 10, 
	10, 267, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 282, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	282, 24, 24, 24, 24, 24, 24, 24, 
	24, 284, 24, 24, 285, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 24, 24, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 299, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 10, 
	291, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 291, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	292, 24, 24, 293, 24, 24, 24, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 24, 24, 24, 24, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 299, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 10, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 300, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 301, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 301, 1, 302, 1, 1, 1, 
	1, 303, 1, 305, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 306, 304, 308, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 309, 307, 307, 305, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 311, 310, 308, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	313, 312, 312, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 314, 314, 314, 314, 
	314, 314, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 314, 314, 
	314, 316, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 317, 1, 
	315, 318, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 315, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 314, 314, 314, 314, 314, 314, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 314, 314, 314, 319, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 320, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 1, 1, 1, 1, 1, 
	1, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 1, 1, 1, 
	321, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 322, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 1, 1, 1, 
	1, 1, 1, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 1, 
	1, 1, 321, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 324, 
	1, 1, 1, 1, 1, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 1, 1, 1, 323, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 322, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 324, 1, 1, 1, 1, 1, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 1, 1, 1, 323, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 314, 314, 314, 314, 
	314, 314, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 314, 314, 
	314, 319, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	1, 1, 1, 1, 1, 1, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 1, 1, 1, 325, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 326, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 326, 1, 1, 1, 1, 1, 1, 
	1, 327, 1, 1, 1, 1, 1, 1, 
	1, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 1, 1, 1, 1, 1, 
	1, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 1, 1, 1, 
	328, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 1, 1, 
	1, 1, 1, 1, 330, 1, 332, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 332, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 334, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 335, 10, 10, 336, 10, 337, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 337, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 338, 1, 339, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 339, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 331, 331, 331, 331, 
	331, 331, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 331, 331, 
	331, 333, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 340, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 340, 331, 331, 
	331, 331, 331, 331, 331, 331, 341, 331, 
	331, 340, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	342, 10, 10, 10, 10, 10, 10, 10, 
	343, 344, 10, 10, 345, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 337, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 337, 10, 10, 10, 10, 
	10, 10, 10, 10, 348, 10, 10, 338, 
	10, 349, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	349, 10, 10, 10, 10, 10, 10, 10, 
	343, 350, 10, 10, 351, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 332, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 332, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 331, 331, 331, 
	331, 331, 331, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 331, 
	331, 331, 352, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 353, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 353, 331, 
	331, 331, 331, 331, 331, 331, 331, 341, 
	331, 331, 340, 331, 331, 331, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	331, 331, 331, 331, 331, 331, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 331, 331, 331, 352, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 342, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 344, 10, 10, 345, 10, 10, 
	10, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 10, 10, 10, 10, 10, 
	10, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 10, 10, 10, 
	354, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 349, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 349, 10, 10, 10, 
	10, 10, 10, 10, 10, 350, 10, 10, 
	351, 10, 10, 10, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 10, 10, 
	10, 10, 10, 10, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	10, 10, 10, 354, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 1, 1, 1, 1, 1, 1, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 1, 1, 1, 355, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 356, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 356, 1, 1, 1, 1, 
	1, 1, 1, 357, 1, 1, 1, 1, 
	1, 1, 1, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 1, 1, 1, 
	1, 1, 1, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 1, 
	1, 1, 358, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 359, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 359, 1, 
	1, 1, 1, 1, 1, 1, 360, 1, 
	362, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 362, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	367, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 367, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 368, 1, 369, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 369, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 361, 361, 
	361, 361, 361, 361, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	361, 361, 361, 363, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	370, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 370, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 372, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	372, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 373, 10, 10, 10, 10, 10, 10, 
	10, 374, 375, 10, 10, 376, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 367, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 367, 10, 10, 10, 
	10, 10, 10, 10, 10, 379, 10, 10, 
	368, 10, 380, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 380, 10, 10, 10, 10, 10, 10, 
	10, 374, 381, 10, 10, 382, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 362, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 362, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 361, 361, 
	361, 361, 361, 361, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	361, 361, 361, 383, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	384, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 384, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 361, 361, 361, 361, 361, 361, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 361, 361, 361, 383, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 373, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 375, 10, 10, 376, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	10, 10, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 10, 10, 
	10, 385, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 380, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 380, 10, 10, 
	10, 10, 10, 10, 10, 10, 381, 10, 
	10, 382, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 10, 10, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 10, 10, 10, 385, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 1, 
	387, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 1, 389, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 390, 1, 391, 1, 1, 
	392, 394, 393, 1, 35, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 35, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 395, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 1, 1, 1, 1, 1, 1, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 396, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 317, 1, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 334, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	335, 10, 10, 336, 10, 10, 10, 1, 
	1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	143, 139, 0, 6, 137, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 34, 12, 
	11, 12, 13, 14, 15, 13, 14, 15, 
	16, 31, 27, 17, 25, 18, 17, 18, 
	19, 19, 20, 21, 217, 22, 21, 217, 
	22, 23, 24, 24, 217, 26, 26, 17, 
	28, 25, 18, 29, 30, 25, 17, 25, 
	18, 32, 31, 33, 35, 150, 154, 35, 
	36, 37, 38, 137, 7, 149, 142, 37, 
	39, 127, 129, 39, 40, 41, 44, 123, 
	125, 120, 42, 97, 43, 42, 43, 44, 
	45, 46, 46, 47, 64, 48, 104, 111, 
	48, 49, 50, 51, 97, 43, 99, 100, 
	50, 52, 40, 53, 53, 54, 55, 60, 
	88, 55, 56, 57, 58, 59, 57, 20, 
	57, 61, 62, 54, 61, 63, 64, 63, 
	65, 66, 87, 66, 67, 68, 69, 67, 
	68, 69, 70, 84, 218, 80, 71, 78, 
	72, 71, 72, 73, 73, 74, 75, 217, 
	76, 75, 76, 77, 79, 79, 71, 81, 
	78, 72, 82, 83, 78, 71, 78, 72, 
	85, 84, 86, 66, 87, 61, 89, 62, 
	54, 90, 91, 61, 62, 54, 61, 62, 
	54, 92, 95, 92, 93, 94, 96, 98, 
	98, 50, 97, 43, 101, 102, 101, 42, 
	103, 42, 105, 106, 47, 105, 107, 107, 
	108, 109, 110, 108, 109, 105, 112, 106, 
	47, 113, 114, 105, 106, 47, 105, 106, 
	47, 115, 118, 115, 116, 117, 119, 121, 
	122, 97, 124, 124, 126, 52, 128, 128, 
	130, 146, 148, 131, 132, 134, 133, 133, 
	135, 136, 136, 138, 138, 6, 140, 141, 
	137, 6, 137, 7, 144, 143, 145, 147, 
	147, 127, 129, 37, 151, 152, 34, 151, 
	153, 153, 151, 155, 152, 34, 156, 157, 
	151, 152, 34, 151, 152, 34, 158, 161, 
	158, 159, 160, 162, 219, 164, 165, 168, 
	166, 221, 167, 166, 221, 167, 169, 170, 
	169, 170, 172, 173, 176, 222, 223, 174, 
	222, 175, 222, 177, 178, 180, 181, 182, 
	180, 181, 182, 183, 191, 187, 184, 225, 
	185, 184, 185, 186, 186, 224, 184, 188, 
	225, 185, 189, 190, 225, 184, 225, 185, 
	192, 191, 193, 195, 196, 197, 195, 196, 
	197, 198, 208, 204, 199, 203, 200, 199, 
	200, 201, 201, 202, 226, 199, 205, 203, 
	200, 206, 207, 203, 199, 203, 200, 209, 
	208, 210, 212, 227, 212, 228, 214, 215, 
	216, 216, 228, 220, 219
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 1, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 9, 9, 0, 0, 
	0, 9, 9, 14, 15, 16, 0, 17, 
	0, 0, 18, 19, 20, 16, 0, 21, 
	22, 21, 21, 4, 23, 0, 24, 24, 
	24, 25, 9, 26, 12, 13, 27, 9, 
	28, 29, 30, 21, 21, 4, 23, 0, 
	0, 0, 0, 9, 9, 0, 9, 9, 
	9, 6, 9, 9, 9, 0, 0, 0, 
	9, 31, 0, 11, 11, 12, 13, 27, 
	9, 28, 29, 30, 21, 21, 4, 23, 
	0, 0, 0, 32, 0, 11, 12, 13, 
	33, 9, 1, 34, 35, 4, 0, 0, 
	36, 37, 38, 38, 0, 39, 40, 0, 
	13, 41, 42, 19, 43, 44, 45, 46, 
	19, 47, 19, 19, 20, 48, 49, 49, 
	49, 19, 19, 19, 49, 49, 50, 51, 
	52, 19, 19, 19, 52, 19, 53, 54, 
	53, 53, 46, 55, 19, 56, 56, 56, 
	57, 49, 58, 59, 60, 61, 62, 63, 
	63, 64, 65, 12, 13, 13, 66, 67, 
	67, 12, 68, 9, 1, 4, 69, 70, 
	0, 71, 24, 24, 0, 25, 9, 21, 
	26, 24, 72, 73, 73, 0, 74, 0, 
	75, 76, 77, 64, 0, 78, 79, 80, 
	80, 81, 82, 12, 13, 13, 83, 84, 
	84, 12, 85, 9, 86, 4, 87, 22, 
	4, 0, 14, 0, 9, 9, 88, 0, 
	9, 9, 9, 9, 9, 9, 10, 0, 
	9, 31, 0, 89, 0, 21, 22, 4, 
	0, 24, 24, 24, 25, 9, 26, 14, 
	0, 9, 9, 71, 72, 73, 73, 0, 
	90, 0, 78, 79, 80, 80, 81, 82, 
	12, 13, 13, 83, 84, 84, 12, 85, 
	9, 86, 4, 87, 25, 0, 0, 0, 
	91, 92, 91, 0, 93, 0, 91, 91, 
	0, 0, 0, 0, 25, 94, 94, 25, 
	95, 26, 96, 26, 23, 97, 2, 3, 
	4, 0, 5, 0, 0, 6, 9, 98, 
	9, 0, 0, 0, 9, 98, 21, 22, 
	99, 21, 4, 23, 100, 24, 101, 24, 
	25, 9, 26, 1, 2, 3, 4, 0, 
	5, 0, 0, 6, 9, 9, 9, 0, 
	0, 0, 9, 9, 102, 21, 22, 21, 
	21, 4, 23, 0, 24, 24, 24, 25, 
	9, 26, 11, 103, 13, 104, 0, 0, 
	18, 19, 105, 108, 26
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 0, 7, 7, 
	7, 7, 0, 0, 7, 7, 0, 0, 
	7, 7, 0, 7, 7, 0, 0, 7, 
	7, 0, 7, 7, 7, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 0, 0, 0, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 106, 107, 109, 0, 0, 0, 
	106, 106, 106, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 217;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 163;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 164;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 171;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 179;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 194;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 211;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 213;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 26 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 108 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 91 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 100 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 102 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 19 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 104 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 89 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 16 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 17 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 58 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 23 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 22 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 94 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 47 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 103 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 59 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 18 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 20 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 90 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 70 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 15 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 85 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 57 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 81 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 46 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 82 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 96 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 93 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 98 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 73 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 68 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 62 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 88 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 74 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 51 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 71 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 101 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 56 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 45 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 92 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 95 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 77 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 66 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 27 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 48 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 86 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 29 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 99 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 80 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 78 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 1 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 97 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 43 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 75 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 109 then
		begin

    yield @buffers[:ident]
  		end
	when 106 then
		begin

  		end
	when 107 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 47, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 126, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 10, 47, 10, 
	10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 122, 
	9, 47, 9, 47, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 9, 122, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 10, 10, 9, 
	122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 44, 
	10, 122, 0, 0, 0, 
	0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 114, 114, 32, 114, 
	36, 36, 114, 114, 39, 39, 1, 1, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 114, 114, 36, 114, 114, 
	114, 36, 36, 114, 114, 39, 118, 118, 
	114, 114, 36, 114, 39, 118, 118, 114, 
	114, 36, 114, 114, 118, 114, 118, 114, 
	118, 118, 114, 114, 32, 114, 36, 36, 
	114, 114, 39, 39, 38, 1, 39, 39, 
	114, 36, 114, 114, 114, 114, 114, 118, 
	118, 118, 118, 118, 114, 114, 114, 118, 
	118, 39, 118, 114, 114, 114, 114, 114, 
	118, 114, 118, 118, 118, 114, 118, 118, 
	118, 118, 118, 114, 114, 114, 118, 118, 
	114, 36, 114, 39, 39, 114, 114, 36, 
	118, 114, 114, 114, 36, 118, 114, 39, 
	118, 24, 118, 114, 36, 114, 114, 114, 
	114, 114, 39, 39, 114, 114, 118, 114, 
	118, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 75, 31, 59, 59, 0, 
	54, 54, 0, 114, 1, 114, 113, 113, 
	113, 113, 114, 75, 114, 32, 114, 36, 
	36, 114, 114, 114, 36, 114, 114, 114, 
	114, 114, 75, 114, 32, 114, 36, 36, 
	114, 114, 36, 1, 114, 36, 114, 114, 
	114, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 36, 113, 0, 0, 0, 1, 
	36, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 1033, 1148, 1181, 
	1296, 1333, 1370, 1485, 1600, 1640, 1680, 1682, 
	1684, 1686, 1726, 1766, 1881, 1918, 2033, 2148, 
	2263, 2378, 2493, 2612, 2727, 2842, 2879, 2994, 
	3109, 3224, 3261, 3298, 3413, 3528, 3568, 3687, 
	3806, 3921, 4036, 4073, 4188, 4228, 4347, 4466, 
	4581, 4696, 4733, 4848, 4963, 5082, 5197, 5316, 
	5431, 5550, 5669, 5784, 5899, 5932, 6047, 6084, 
	6121, 6236, 6351, 6391, 6431, 6470, 6472, 6512, 
	6552, 6667, 6704, 6819, 6934, 7049, 7164, 7279, 
	7398, 7517, 7636, 7755, 7874, 7989, 8104, 8219, 
	8338, 8457, 8497, 8616, 8731, 8846, 8961, 9076, 
	9191, 9310, 9425, 9544, 9663, 9782, 9897, 10016, 
	10135, 10254, 10373, 10492, 10607, 10722, 10837, 10956, 
	11075, 11190, 11227, 11342, 11382, 11422, 11537, 11652, 
	11689, 11808, 11923, 12038, 12153, 12190, 12309, 12424, 
	12464, 12583, 12608, 12727, 12842, 12879, 12994, 13109, 
	13224, 13339, 13454, 13494, 13534, 13649, 13764, 13883, 
	13998, 14117, 14236, 14355, 14474, 14593, 14712, 14827, 
	14942, 15057, 15176, 15295, 15371, 15403, 15463, 15523, 
	15524, 15579, 15634, 15635, 15750, 15752, 15867, 15981, 
	16095, 16209, 16323, 16438, 16514, 16629, 16662, 16777, 
	16814, 16851, 16966, 17081, 17196, 17233, 17348, 17463, 
	17578, 17693, 17808, 17884, 17999, 18032, 18147, 18184, 
	18221, 18336, 18451, 18488, 18490, 18605, 18642, 18757, 
	18872, 18987, 19102, 19217, 19312, 19430, 19469, 19471, 
	19473, 19475, 19476, 19513, 19627, 19628, 19629, 19630, 
	19632, 19669, 19670, 19671, 19672
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 27, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	28, 1, 1, 1, 1, 1, 1, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 1, 1, 1, 1, 1, 1, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 1, 1, 1, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	35, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 35, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 38, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 1, 40, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 40, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 32, 
	32, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 32, 32, 32, 
	34, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 41, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 41, 32, 32, 32, 
	32, 32, 32, 32, 32, 42, 32, 32, 
	41, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	43, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 43, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 10, 45, 10, 
	46, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 1, 48, 1, 
	49, 1, 1, 50, 52, 51, 53, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 45, 10, 54, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 54, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 48, 1, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 55, 10, 10, 
	10, 10, 10, 10, 10, 56, 57, 10, 
	10, 58, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 38, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	38, 10, 10, 10, 10, 10, 10, 10, 
	10, 61, 10, 10, 39, 10, 62, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 62, 10, 10, 
	10, 10, 10, 10, 10, 56, 63, 10, 
	10, 64, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 32, 32, 32, 32, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 65, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 66, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 66, 32, 32, 32, 32, 
	32, 32, 32, 32, 42, 32, 32, 41, 
	32, 32, 32, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 32, 32, 32, 
	32, 32, 32, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 32, 
	32, 32, 65, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 55, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 57, 
	10, 10, 58, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 10, 10, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 10, 10, 10, 67, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 62, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 63, 10, 10, 64, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 10, 
	10, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 10, 10, 10, 
	67, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 69, 69, 
	69, 69, 69, 69, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 70, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 7, 71, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 71, 7, 7, 7, 7, 
	7, 7, 7, 7, 18, 7, 7, 17, 
	7, 7, 7, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 7, 7, 7, 
	7, 7, 7, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 7, 
	7, 7, 72, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 73, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 73, 10, 
	10, 10, 10, 10, 10, 10, 74, 75, 
	10, 10, 76, 10, 10, 10, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	78, 10, 10, 10, 10, 10, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 10, 10, 10, 77, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 79, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 79, 1, 1, 1, 1, 1, 1, 
	1, 31, 1, 1, 1, 15, 1, 80, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 80, 32, 
	32, 32, 32, 32, 32, 32, 32, 81, 
	32, 32, 82, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 32, 32, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 32, 32, 32, 34, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 83, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 83, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 84, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 32, 
	32, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 32, 32, 32, 
	65, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 87, 85, 85, 
	88, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	90, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 90, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	94, 1, 95, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 95, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 85, 85, 85, 85, 85, 
	85, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 85, 85, 85, 
	89, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 96, 85, 85, 
	86, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	97, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 97, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 10, 45, 10, 
	98, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 99, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 101, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 101, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	102, 102, 102, 102, 102, 102, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 103, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 85, 104, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 104, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 85, 
	85, 85, 85, 85, 85, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 85, 85, 85, 105, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 106, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	106, 10, 10, 10, 10, 10, 10, 10, 
	107, 108, 10, 10, 109, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 111, 10, 10, 10, 10, 10, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 10, 10, 10, 110, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 112, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 1, 1, 94, 
	1, 80, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	80, 32, 32, 32, 32, 32, 32, 32, 
	32, 113, 32, 32, 114, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 115, 44, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 115, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 10, 45, 10, 116, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 117, 
	21, 21, 100, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 1, 118, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 118, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 119, 119, 119, 119, 
	119, 119, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 120, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 32, 121, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 121, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 32, 32, 32, 32, 32, 
	32, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 32, 32, 32, 
	122, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 124, 57, 10, 10, 
	58, 10, 10, 10, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 60, 10, 
	10, 10, 10, 10, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	10, 10, 10, 125, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	126, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 126, 
	1, 1, 1, 1, 1, 1, 1, 31, 
	1, 1, 1, 39, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 127, 32, 32, 
	40, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 124, 
	63, 10, 10, 64, 10, 10, 10, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 60, 10, 10, 10, 10, 10, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 10, 10, 10, 125, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 24, 24, 24, 24, 24, 
	24, 24, 24, 130, 24, 24, 131, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 132, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 1, 
	1, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 1, 1, 1, 1, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	26, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 133, 44, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 133, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 134, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 135, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 48, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 1, 1, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 1, 
	1, 1, 26, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 136, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 137, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 137, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 50, 139, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 139, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 51, 51, 
	51, 51, 51, 51, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	51, 51, 51, 140, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	141, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 141, 
	51, 51, 51, 51, 51, 51, 51, 142, 
	51, 51, 51, 51, 51, 51, 51, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 51, 51, 51, 51, 51, 51, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 51, 51, 51, 143, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 144, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 144, 51, 51, 51, 51, 51, 
	51, 51, 145, 51, 147, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 150, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 150, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 153, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 153, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 154, 
	51, 155, 148, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	155, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 146, 146, 146, 146, 146, 146, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 146, 146, 146, 149, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 156, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 156, 146, 146, 146, 146, 
	146, 146, 146, 146, 157, 146, 146, 156, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 158, 
	159, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 158, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 51, 160, 51, 161, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 161, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 154, 51, 51, 162, 51, 52, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 163, 51, 52, 50, 
	164, 159, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 164, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 160, 51, 
	165, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 165, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 162, 51, 
	166, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 166, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	168, 51, 51, 169, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 153, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 153, 51, 51, 51, 51, 51, 
	51, 51, 51, 172, 51, 51, 154, 51, 
	173, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 173, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	174, 51, 51, 175, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 147, 148, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 146, 146, 146, 146, 
	146, 146, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 146, 146, 
	146, 176, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 177, 148, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 177, 146, 146, 
	146, 146, 146, 146, 146, 146, 157, 146, 
	146, 156, 146, 146, 146, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 146, 
	146, 146, 146, 146, 146, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 146, 146, 146, 176, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 166, 52, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	166, 51, 51, 51, 51, 51, 51, 51, 
	51, 168, 51, 51, 169, 51, 51, 51, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 51, 51, 51, 51, 51, 51, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 51, 51, 51, 178, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 173, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 173, 51, 51, 51, 51, 
	51, 51, 51, 51, 174, 51, 51, 175, 
	51, 51, 51, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 51, 51, 51, 
	51, 51, 51, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 51, 
	51, 51, 178, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 179, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 179, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 51, 181, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 181, 24, 24, 
	24, 24, 24, 24, 24, 182, 183, 24, 
	24, 184, 24, 24, 24, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	24, 24, 24, 24, 24, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 185, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 10, 187, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 187, 24, 24, 24, 
	24, 24, 24, 24, 24, 188, 24, 24, 
	189, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 190, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 190, 24, 24, 24, 24, 
	24, 24, 24, 182, 191, 24, 24, 192, 
	24, 24, 24, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 186, 24, 24, 
	24, 24, 24, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 185, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 10, 193, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 193, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 119, 119, 119, 119, 
	119, 119, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 194, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 32, 195, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 195, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 32, 32, 32, 32, 32, 
	32, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 32, 32, 32, 
	196, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 28, 57, 10, 10, 
	58, 10, 10, 10, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 10, 10, 
	10, 10, 10, 10, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	10, 10, 10, 197, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 28, 
	63, 10, 10, 64, 10, 10, 10, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 10, 10, 10, 10, 10, 10, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 10, 10, 10, 197, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 181, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 181, 24, 24, 24, 24, 24, 
	24, 24, 24, 183, 24, 24, 184, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	24, 24, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 198, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 10, 190, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 190, 24, 24, 24, 24, 24, 24, 
	24, 24, 191, 24, 24, 192, 24, 24, 
	24, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 24, 24, 24, 24, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	198, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	10, 199, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 45, 
	10, 200, 47, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	200, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 100, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	201, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 201, 
	10, 10, 10, 10, 10, 10, 10, 107, 
	202, 10, 10, 203, 10, 10, 10, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 111, 10, 10, 10, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 10, 10, 10, 110, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 204, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 204, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 85, 85, 85, 85, 
	85, 85, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 85, 85, 
	85, 205, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 206, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 206, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 85, 
	85, 85, 85, 85, 85, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 85, 85, 85, 205, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 207, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 108, 10, 10, 109, 10, 10, 10, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 10, 10, 10, 10, 10, 10, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 10, 10, 10, 208, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 209, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 202, 10, 10, 203, 
	10, 10, 10, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 10, 10, 10, 
	10, 10, 10, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 10, 
	10, 10, 208, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 210, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 210, 24, 
	24, 24, 24, 24, 24, 24, 24, 211, 
	24, 24, 212, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 213, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 214, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	214, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 134, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 10, 
	215, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 215, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 100, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 21, 21, 21, 21, 21, 21, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 216, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 1, 217, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 217, 24, 
	24, 24, 24, 24, 24, 24, 218, 24, 
	24, 24, 24, 24, 24, 24, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	24, 24, 24, 24, 24, 24, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 219, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 1, 220, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 220, 1, 1, 
	1, 1, 1, 1, 1, 31, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 193, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	193, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 119, 119, 119, 119, 119, 119, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 120, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 32, 
	221, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 221, 
	24, 24, 24, 24, 24, 24, 24, 222, 
	223, 24, 24, 224, 24, 24, 24, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 226, 24, 24, 24, 24, 24, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 225, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 10, 227, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 227, 24, 
	24, 24, 24, 24, 24, 24, 24, 228, 
	24, 24, 229, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 230, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 230, 24, 24, 
	24, 24, 24, 24, 24, 222, 231, 24, 
	24, 232, 24, 24, 24, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 226, 
	24, 24, 24, 24, 24, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 225, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 10, 233, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 233, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 102, 102, 
	102, 102, 102, 102, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 234, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 85, 235, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 235, 85, 85, 85, 85, 
	85, 85, 85, 85, 96, 85, 85, 86, 
	85, 85, 85, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 85, 85, 85, 
	85, 85, 85, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 85, 
	85, 85, 236, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 106, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 106, 10, 
	10, 10, 10, 10, 10, 10, 28, 108, 
	10, 10, 109, 10, 10, 10, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	10, 10, 10, 10, 10, 10, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 10, 10, 10, 237, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 201, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 201, 10, 10, 10, 10, 10, 10, 
	10, 28, 202, 10, 10, 203, 10, 10, 
	10, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 10, 10, 10, 10, 10, 
	10, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 10, 10, 10, 
	237, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 221, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 221, 24, 24, 24, 
	24, 24, 24, 24, 24, 223, 24, 24, 
	224, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 24, 24, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 238, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 10, 230, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 230, 24, 24, 24, 24, 
	24, 24, 24, 24, 231, 24, 24, 232, 
	24, 24, 24, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 24, 24, 24, 
	24, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 238, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 10, 207, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 207, 10, 10, 10, 10, 10, 
	10, 10, 239, 108, 10, 10, 109, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 93, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 93, 10, 10, 
	10, 10, 10, 10, 10, 10, 241, 10, 
	10, 94, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 209, 10, 10, 10, 10, 10, 
	10, 10, 239, 202, 10, 10, 203, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 242, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 242, 10, 10, 
	10, 10, 10, 10, 10, 10, 91, 10, 
	10, 92, 10, 10, 45, 10, 243, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 245, 32, 
	32, 84, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 244, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	244, 32, 32, 32, 32, 32, 32, 32, 
	32, 42, 32, 32, 84, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 246, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 246, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 247, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	247, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 117, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	248, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 248, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	249, 7, 7, 250, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 248, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 248, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 251, 7, 
	7, 7, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 7, 7, 
	7, 9, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 86, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 252, 85, 
	85, 253, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 85, 85, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 85, 85, 85, 89, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 254, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	254, 10, 10, 10, 10, 10, 10, 10, 
	10, 91, 10, 10, 92, 10, 255, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 255, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 99, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 248, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 7, 7, 
	7, 7, 7, 7, 7, 256, 7, 7, 
	251, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	257, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 257, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	12, 10, 10, 13, 10, 10, 45, 10, 
	258, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 258, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 259, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 259, 10, 
	260, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 260, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 261, 10, 
	10, 10, 10, 10, 10, 10, 262, 75, 
	10, 10, 76, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 14, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 14, 10, 10, 10, 10, 10, 10, 
	10, 10, 264, 10, 10, 15, 10, 265, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 265, 10, 
	10, 10, 10, 10, 10, 10, 262, 266, 
	10, 10, 267, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 8, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 8, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 7, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 269, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 269, 7, 7, 7, 
	7, 7, 7, 7, 7, 18, 7, 7, 
	17, 7, 7, 7, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 7, 7, 
	7, 7, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	7, 7, 7, 268, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	75, 10, 10, 76, 10, 10, 10, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 10, 10, 10, 10, 10, 10, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 10, 10, 10, 270, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 265, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 265, 10, 10, 10, 10, 10, 
	10, 10, 10, 266, 10, 10, 267, 10, 
	10, 10, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 10, 10, 10, 10, 
	10, 10, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 10, 10, 
	10, 270, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 271, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 271, 10, 10, 
	10, 10, 10, 10, 10, 10, 12, 10, 
	10, 13, 10, 10, 45, 10, 272, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 273, 32, 
	32, 274, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 275, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	275, 10, 10, 10, 10, 10, 10, 10, 
	74, 266, 10, 10, 267, 10, 10, 10, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 78, 10, 10, 10, 10, 10, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 10, 10, 10, 77, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 276, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 276, 24, 24, 24, 24, 
	24, 24, 24, 24, 277, 24, 24, 278, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 279, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 279, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 15, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	1, 1, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 26, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 280, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 280, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 10, 281, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 281, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 21, 21, 
	21, 21, 21, 21, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 216, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 1, 282, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 282, 24, 24, 24, 24, 
	24, 24, 24, 283, 284, 24, 24, 285, 
	24, 24, 24, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 287, 24, 24, 
	24, 24, 24, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 286, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 10, 288, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 288, 24, 24, 24, 24, 24, 
	24, 24, 24, 289, 24, 24, 290, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 291, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 291, 24, 24, 24, 24, 24, 24, 
	24, 283, 292, 24, 24, 293, 24, 24, 
	24, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 287, 24, 24, 24, 24, 
	24, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	286, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	10, 294, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	294, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 69, 69, 69, 69, 69, 69, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 295, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 7, 
	296, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 296, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 7, 7, 7, 7, 7, 7, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 7, 7, 7, 297, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 73, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 73, 10, 10, 10, 10, 10, 
	10, 10, 28, 75, 10, 10, 76, 10, 
	10, 10, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 10, 10, 10, 10, 
	10, 10, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 10, 10, 
	10, 298, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 275, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 275, 10, 10, 
	10, 10, 10, 10, 10, 28, 266, 10, 
	10, 267, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 282, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	282, 24, 24, 24, 24, 24, 24, 24, 
	24, 284, 24, 24, 285, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 24, 24, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 299, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 10, 
	291, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 291, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	292, 24, 24, 293, 24, 24, 24, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 24, 24, 24, 24, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 299, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 10, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 300, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 301, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 301, 1, 302, 1, 1, 1, 
	1, 303, 1, 305, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 306, 304, 308, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 309, 307, 307, 305, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 311, 310, 308, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	313, 312, 312, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 314, 314, 314, 314, 
	314, 314, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 314, 314, 
	314, 316, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 317, 1, 
	315, 318, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 315, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 314, 314, 314, 314, 314, 314, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 314, 314, 314, 319, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 320, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 1, 1, 1, 1, 1, 
	1, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 1, 1, 1, 
	321, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 322, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 1, 1, 1, 
	1, 1, 1, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 1, 
	1, 1, 321, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 324, 
	1, 1, 1, 1, 1, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 1, 1, 1, 323, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 322, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 324, 1, 1, 1, 1, 1, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 1, 1, 1, 323, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 314, 314, 314, 314, 
	314, 314, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 314, 314, 
	314, 319, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	1, 1, 1, 1, 1, 1, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 1, 1, 1, 325, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 326, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 326, 1, 1, 1, 1, 1, 1, 
	1, 327, 1, 1, 1, 1, 1, 1, 
	1, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 1, 1, 1, 1, 1, 
	1, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 1, 1, 1, 
	328, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 1, 1, 
	1, 1, 1, 1, 330, 1, 332, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 332, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 334, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 335, 10, 10, 336, 10, 337, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 337, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 338, 1, 339, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 339, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 331, 331, 331, 331, 
	331, 331, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 331, 331, 
	331, 333, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 340, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 340, 331, 331, 
	331, 331, 331, 331, 331, 331, 341, 331, 
	331, 340, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	342, 10, 10, 10, 10, 10, 10, 10, 
	343, 344, 10, 10, 345, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 337, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 337, 10, 10, 10, 10, 
	10, 10, 10, 10, 348, 10, 10, 338, 
	10, 349, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	349, 10, 10, 10, 10, 10, 10, 10, 
	343, 350, 10, 10, 351, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 332, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 332, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 331, 331, 331, 
	331, 331, 331, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 331, 
	331, 331, 352, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 353, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 353, 331, 
	331, 331, 331, 331, 331, 331, 331, 341, 
	331, 331, 340, 331, 331, 331, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	331, 331, 331, 331, 331, 331, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 331, 331, 331, 352, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 342, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 344, 10, 10, 345, 10, 10, 
	10, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 10, 10, 10, 10, 10, 
	10, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 10, 10, 10, 
	354, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 349, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 349, 10, 10, 10, 
	10, 10, 10, 10, 10, 350, 10, 10, 
	351, 10, 10, 10, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 10, 10, 
	10, 10, 10, 10, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	10, 10, 10, 354, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 1, 1, 1, 1, 1, 1, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 1, 1, 1, 355, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 356, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 356, 1, 1, 1, 1, 
	1, 1, 1, 357, 1, 1, 1, 1, 
	1, 1, 1, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 1, 1, 1, 
	1, 1, 1, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 1, 
	1, 1, 358, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 359, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 359, 1, 
	1, 1, 1, 1, 1, 1, 360, 1, 
	362, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 362, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	367, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 367, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 368, 1, 369, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 369, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 361, 361, 
	361, 361, 361, 361, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	361, 361, 361, 363, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	370, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 370, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 372, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	372, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 373, 10, 10, 10, 10, 10, 10, 
	10, 374, 375, 10, 10, 376, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 367, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 367, 10, 10, 10, 
	10, 10, 10, 10, 10, 379, 10, 10, 
	368, 10, 380, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 380, 10, 10, 10, 10, 10, 10, 
	10, 374, 381, 10, 10, 382, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 362, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 362, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 361, 361, 
	361, 361, 361, 361, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	361, 361, 361, 383, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	384, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 384, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 361, 361, 361, 361, 361, 361, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 361, 361, 361, 383, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 373, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 375, 10, 10, 376, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	10, 10, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 10, 10, 
	10, 385, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 380, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 380, 10, 10, 
	10, 10, 10, 10, 10, 10, 381, 10, 
	10, 382, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 10, 10, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 10, 10, 10, 385, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 1, 
	387, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 1, 389, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 390, 1, 391, 1, 1, 
	392, 394, 393, 1, 35, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 35, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 395, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 1, 1, 1, 1, 1, 1, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 396, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 317, 1, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 334, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	335, 10, 10, 336, 10, 10, 10, 1, 
	1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	143, 139, 0, 6, 137, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 34, 12, 
	11, 12, 13, 14, 15, 13, 14, 15, 
	16, 31, 27, 17, 25, 18, 17, 18, 
	19, 19, 20, 21, 217, 22, 21, 217, 
	22, 23, 24, 24, 217, 26, 26, 17, 
	28, 25, 18, 29, 30, 25, 17, 25, 
	18, 32, 31, 33, 35, 150, 154, 35, 
	36, 37, 38, 137, 7, 149, 142, 37, 
	39, 127, 129, 39, 40, 41, 44, 123, 
	125, 120, 42, 97, 43, 42, 43, 44, 
	45, 46, 46, 47, 64, 48, 104, 111, 
	48, 49, 50, 51, 97, 43, 99, 100, 
	50, 52, 40, 53, 53, 54, 55, 60, 
	88, 55, 56, 57, 58, 59, 57, 20, 
	57, 61, 62, 54, 61, 63, 64, 63, 
	65, 66, 87, 66, 67, 68, 69, 67, 
	68, 69, 70, 84, 218, 80, 71, 78, 
	72, 71, 72, 73, 73, 74, 75, 217, 
	76, 75, 76, 77, 79, 79, 71, 81, 
	78, 72, 82, 83, 78, 71, 78, 72, 
	85, 84, 86, 66, 87, 61, 89, 62, 
	54, 90, 91, 61, 62, 54, 61, 62, 
	54, 92, 95, 92, 93, 94, 96, 98, 
	98, 50, 97, 43, 101, 102, 101, 42, 
	103, 42, 105, 106, 47, 105, 107, 107, 
	108, 109, 110, 108, 109, 105, 112, 106, 
	47, 113, 114, 105, 106, 47, 105, 106, 
	47, 115, 118, 115, 116, 117, 119, 121, 
	122, 97, 124, 124, 126, 52, 128, 128, 
	130, 146, 148, 131, 132, 134, 133, 133, 
	135, 136, 136, 138, 138, 6, 140, 141, 
	137, 6, 137, 7, 144, 143, 145, 147, 
	147, 127, 129, 37, 151, 152, 34, 151, 
	153, 153, 151, 155, 152, 34, 156, 157, 
	151, 152, 34, 151, 152, 34, 158, 161, 
	158, 159, 160, 162, 219, 164, 165, 168, 
	166, 221, 167, 166, 221, 167, 169, 170, 
	169, 170, 172, 173, 176, 222, 223, 174, 
	222, 175, 222, 177, 178, 180, 181, 182, 
	180, 181, 182, 183, 191, 187, 184, 225, 
	185, 184, 185, 186, 186, 224, 184, 188, 
	225, 185, 189, 190, 225, 184, 225, 185, 
	192, 191, 193, 195, 196, 197, 195, 196, 
	197, 198, 208, 204, 199, 203, 200, 199, 
	200, 201, 201, 202, 226, 199, 205, 203, 
	200, 206, 207, 203, 199, 203, 200, 209, 
	208, 210, 212, 227, 212, 228, 214, 215, 
	216, 216, 228, 220, 219
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 1, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 9, 9, 0, 0, 
	0, 9, 9, 14, 15, 16, 0, 17, 
	0, 0, 18, 19, 20, 16, 0, 21, 
	22, 21, 21, 4, 23, 0, 24, 24, 
	24, 25, 9, 26, 12, 13, 27, 9, 
	28, 29, 30, 21, 21, 4, 23, 0, 
	0, 0, 0, 9, 9, 0, 9, 9, 
	9, 6, 9, 9, 9, 0, 0, 0, 
	9, 31, 0, 11, 11, 12, 13, 27, 
	9, 28, 29, 30, 21, 21, 4, 23, 
	0, 0, 0, 32, 0, 11, 12, 13, 
	33, 9, 1, 34, 35, 4, 0, 0, 
	36, 37, 38, 38, 0, 39, 40, 0, 
	13, 41, 42, 19, 43, 44, 45, 46, 
	19, 47, 19, 19, 20, 48, 49, 49, 
	49, 19, 19, 19, 49, 49, 50, 51, 
	52, 19, 19, 19, 52, 19, 53, 54, 
	53, 53, 46, 55, 19, 56, 56, 56, 
	57, 49, 58, 59, 60, 61, 62, 63, 
	63, 64, 65, 12, 13, 13, 66, 67, 
	67, 12, 68, 9, 1, 4, 69, 70, 
	0, 71, 24, 24, 0, 25, 9, 21, 
	26, 24, 72, 73, 73, 0, 74, 0, 
	75, 76, 77, 64, 0, 78, 79, 80, 
	80, 81, 82, 12, 13, 13, 83, 84, 
	84, 12, 85, 9, 86, 4, 87, 22, 
	4, 0, 14, 0, 9, 9, 88, 0, 
	9, 9, 9, 9, 9, 9, 10, 0, 
	9, 31, 0, 89, 0, 21, 22, 4, 
	0, 24, 24, 24, 25, 9, 26, 14, 
	0, 9, 9, 71, 72, 73, 73, 0, 
	90, 0, 78, 79, 80, 80, 81, 82, 
	12, 13, 13, 83, 84, 84, 12, 85, 
	9, 86, 4, 87, 25, 0, 0, 0, 
	91, 92, 91, 0, 93, 0, 91, 91, 
	0, 0, 0, 0, 25, 94, 94, 25, 
	95, 26, 96, 26, 23, 97, 2, 3, 
	4, 0, 5, 0, 0, 6, 9, 98, 
	9, 0, 0, 0, 9, 98, 21, 22, 
	99, 21, 4, 23, 100, 24, 101, 24, 
	25, 9, 26, 1, 2, 3, 4, 0, 
	5, 0, 0, 6, 9, 9, 9, 0, 
	0, 0, 9, 9, 102, 21, 22, 21, 
	21, 4, 23, 0, 24, 24, 24, 25, 
	9, 26, 11, 103, 13, 104, 0, 0, 
	18, 19, 105, 108, 26
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 0, 7, 7, 
	7, 7, 0, 0, 7, 7, 0, 0, 
	7, 7, 0, 7, 7, 0, 0, 7, 
	7, 0, 7, 7, 7, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 0, 0, 0, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 106, 107, 109, 0, 0, 0, 
	106, 106, 106, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 217;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 163;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 164;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 171;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 179;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 194;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 211;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 213;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 26 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 108 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 91 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 100 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 102 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 19 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 104 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 89 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 16 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 17 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 58 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 23 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 22 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 94 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 47 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 103 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 59 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 18 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 20 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 90 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 70 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 15 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 85 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 57 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 81 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 46 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 82 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 96 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 93 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 98 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 73 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 68 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 62 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 88 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 74 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 51 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 71 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 101 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 56 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 45 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 92 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 95 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 77 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 66 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 27 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 48 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 86 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 29 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 99 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 80 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 78 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 1 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 97 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 43 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 75 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 109 then
		begin

    yield @buffers[:ident]
  		end
	when 106 then
		begin

  		end
	when 107 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 47, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 126, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 10, 47, 10, 
	10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 122, 
	9, 47, 9, 47, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 9, 122, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 10, 10, 9, 
	122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 44, 
	10, 122, 0, 0, 0, 
	0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 114, 114, 32, 114, 
	36, 36, 114, 114, 39, 39, 1, 1, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 114, 114, 36, 114, 114, 
	114, 36, 36, 114, 114, 39, 118, 118, 
	114, 114, 36, 114, 39, 118, 118, 114, 
	114, 36, 114, 114, 118, 114, 118, 114, 
	118, 118, 114, 114, 32, 114, 36, 36, 
	114, 114, 39, 39, 38, 1, 39, 39, 
	114, 36, 114, 114, 114, 114, 114, 118, 
	118, 118, 118, 118, 114, 114, 114, 118, 
	118, 39, 118, 114, 114, 114, 114, 114, 
	118, 114, 118, 118, 118, 114, 118, 118, 
	118, 118, 118, 114, 114, 114, 118, 118, 
	114, 36, 114, 39, 39, 114, 114, 36, 
	118, 114, 114, 114, 36, 118, 114, 39, 
	118, 24, 118, 114, 36, 114, 114, 114, 
	114, 114, 39, 39, 114, 114, 118, 114, 
	118, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 75, 31, 59, 59, 0, 
	54, 54, 0, 114, 1, 114, 113, 113, 
	113, 113, 114, 75, 114, 32, 114, 36, 
	36, 114, 114, 114, 36, 114, 114, 114, 
	114, 114, 75, 114, 32, 114, 36, 36, 
	114, 114, 36, 1, 114, 36, 114, 114, 
	114, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 36, 113, 0, 0, 0, 1, 
	36, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 1033, 1148, 1181, 
	1296, 1333, 1370, 1485, 1600, 1640, 1680, 1682, 
	1684, 1686, 1726, 1766, 1881, 1918, 2033, 2148, 
	2263, 2378, 2493, 2612, 2727, 2842, 2879, 2994, 
	3109, 3224, 3261, 3298, 3413, 3528, 3568, 3687, 
	3806, 3921, 4036, 4073, 4188, 4228, 4347, 4466, 
	4581, 4696, 4733, 4848, 4963, 5082, 5197, 5316, 
	5431, 5550, 5669, 5784, 5899, 5932, 6047, 6084, 
	6121, 6236, 6351, 6391, 6431, 6470, 6472, 6512, 
	6552, 6667, 6704, 6819, 6934, 7049, 7164, 7279, 
	7398, 7517, 7636, 7755, 7874, 7989, 8104, 8219, 
	8338, 8457, 8497, 8616, 8731, 8846, 8961, 9076, 
	9191, 9310, 9425, 9544, 9663, 9782, 9897, 10016, 
	10135, 10254, 10373, 10492, 10607, 10722, 10837, 10956, 
	11075, 11190, 11227, 11342, 11382, 11422, 11537, 11652, 
	11689, 11808, 11923, 12038, 12153, 12190, 12309, 12424, 
	12464, 12583, 12608, 12727, 12842, 12879, 12994, 13109, 
	13224, 13339, 13454, 13494, 13534, 13649, 13764, 13883, 
	13998, 14117, 14236, 14355, 14474, 14593, 14712, 14827, 
	14942, 15057, 15176, 15295, 15371, 15403, 15463, 15523, 
	15524, 15579, 15634, 15635, 15750, 15752, 15867, 15981, 
	16095, 16209, 16323, 16438, 16514, 16629, 16662, 16777, 
	16814, 16851, 16966, 17081, 17196, 17233, 17348, 17463, 
	17578, 17693, 17808, 17884, 17999, 18032, 18147, 18184, 
	18221, 18336, 18451, 18488, 18490, 18605, 18642, 18757, 
	18872, 18987, 19102, 19217, 19312, 19430, 19469, 19471, 
	19473, 19475, 19476, 19513, 19627, 19628, 19629, 19630, 
	19632, 19669, 19670, 19671, 19672
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 27, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	28, 1, 1, 1, 1, 1, 1, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 1, 1, 1, 1, 1, 1, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 1, 1, 1, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	35, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 35, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 38, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 1, 40, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 40, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 32, 
	32, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 32, 32, 32, 
	34, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 41, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 41, 32, 32, 32, 
	32, 32, 32, 32, 32, 42, 32, 32, 
	41, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	43, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 43, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 10, 45, 10, 
	46, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 1, 48, 1, 
	49, 1, 1, 50, 52, 51, 53, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 45, 10, 54, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 54, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 48, 1, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 55, 10, 10, 
	10, 10, 10, 10, 10, 56, 57, 10, 
	10, 58, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 38, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	38, 10, 10, 10, 10, 10, 10, 10, 
	10, 61, 10, 10, 39, 10, 62, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 62, 10, 10, 
	10, 10, 10, 10, 10, 56, 63, 10, 
	10, 64, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 32, 32, 32, 32, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 65, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 66, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 66, 32, 32, 32, 32, 
	32, 32, 32, 32, 42, 32, 32, 41, 
	32, 32, 32, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 32, 32, 32, 
	32, 32, 32, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 32, 
	32, 32, 65, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 55, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 57, 
	10, 10, 58, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 10, 10, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 10, 10, 10, 67, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 62, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 63, 10, 10, 64, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 10, 
	10, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 10, 10, 10, 
	67, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 69, 69, 
	69, 69, 69, 69, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 70, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 7, 71, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 71, 7, 7, 7, 7, 
	7, 7, 7, 7, 18, 7, 7, 17, 
	7, 7, 7, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 7, 7, 7, 
	7, 7, 7, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 7, 
	7, 7, 72, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 73, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 73, 10, 
	10, 10, 10, 10, 10, 10, 74, 75, 
	10, 10, 76, 10, 10, 10, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	78, 10, 10, 10, 10, 10, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 10, 10, 10, 77, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 79, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 79, 1, 1, 1, 1, 1, 1, 
	1, 31, 1, 1, 1, 15, 1, 80, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 80, 32, 
	32, 32, 32, 32, 32, 32, 32, 81, 
	32, 32, 82, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 32, 32, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 32, 32, 32, 34, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 83, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 83, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 84, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 32, 
	32, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 32, 32, 32, 
	65, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 87, 85, 85, 
	88, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	90, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 90, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	94, 1, 95, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 95, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 85, 85, 85, 85, 85, 
	85, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 85, 85, 85, 
	89, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 96, 85, 85, 
	86, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	97, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 97, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 10, 45, 10, 
	98, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 99, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 101, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 101, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	102, 102, 102, 102, 102, 102, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 103, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 85, 104, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 104, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 85, 
	85, 85, 85, 85, 85, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 85, 85, 85, 105, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 106, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	106, 10, 10, 10, 10, 10, 10, 10, 
	107, 108, 10, 10, 109, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 111, 10, 10, 10, 10, 10, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 10, 10, 10, 110, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 112, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 1, 1, 94, 
	1, 80, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	80, 32, 32, 32, 32, 32, 32, 32, 
	32, 113, 32, 32, 114, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 115, 44, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 115, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 10, 45, 10, 116, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 117, 
	21, 21, 100, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 1, 118, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 118, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 119, 119, 119, 119, 
	119, 119, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 120, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 32, 121, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 121, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 32, 32, 32, 32, 32, 
	32, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 32, 32, 32, 
	122, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 124, 57, 10, 10, 
	58, 10, 10, 10, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 60, 10, 
	10, 10, 10, 10, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	10, 10, 10, 125, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	126, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 126, 
	1, 1, 1, 1, 1, 1, 1, 31, 
	1, 1, 1, 39, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 127, 32, 32, 
	40, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 124, 
	63, 10, 10, 64, 10, 10, 10, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 60, 10, 10, 10, 10, 10, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 10, 10, 10, 125, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 24, 24, 24, 24, 24, 
	24, 24, 24, 130, 24, 24, 131, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 132, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 1, 
	1, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 1, 1, 1, 1, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	26, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 133, 44, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 133, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 134, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 135, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 48, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 1, 1, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 1, 
	1, 1, 26, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 136, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 137, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 137, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 50, 139, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 139, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 51, 51, 
	51, 51, 51, 51, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	51, 51, 51, 140, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	141, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 141, 
	51, 51, 51, 51, 51, 51, 51, 142, 
	51, 51, 51, 51, 51, 51, 51, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 51, 51, 51, 51, 51, 51, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 51, 51, 51, 143, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 144, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 144, 51, 51, 51, 51, 51, 
	51, 51, 145, 51, 147, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 150, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 150, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 153, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 153, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 154, 
	51, 155, 148, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	155, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 146, 146, 146, 146, 146, 146, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 146, 146, 146, 149, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 156, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 156, 146, 146, 146, 146, 
	146, 146, 146, 146, 157, 146, 146, 156, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 158, 
	159, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 158, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 51, 160, 51, 161, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 161, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 154, 51, 51, 162, 51, 52, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 163, 51, 52, 50, 
	164, 159, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 164, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 160, 51, 
	165, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 165, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 162, 51, 
	166, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 166, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	168, 51, 51, 169, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 153, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 153, 51, 51, 51, 51, 51, 
	51, 51, 51, 172, 51, 51, 154, 51, 
	173, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 173, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	174, 51, 51, 175, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 147, 148, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 146, 146, 146, 146, 
	146, 146, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 146, 146, 
	146, 176, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 177, 148, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 177, 146, 146, 
	146, 146, 146, 146, 146, 146, 157, 146, 
	146, 156, 146, 146, 146, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 146, 
	146, 146, 146, 146, 146, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 146, 146, 146, 176, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 166, 52, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	166, 51, 51, 51, 51, 51, 51, 51, 
	51, 168, 51, 51, 169, 51, 51, 51, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 51, 51, 51, 51, 51, 51, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 51, 51, 51, 178, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 173, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 173, 51, 51, 51, 51, 
	51, 51, 51, 51, 174, 51, 51, 175, 
	51, 51, 51, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 51, 51, 51, 
	51, 51, 51, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 51, 
	51, 51, 178, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 179, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 179, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 51, 181, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 181, 24, 24, 
	24, 24, 24, 24, 24, 182, 183, 24, 
	24, 184, 24, 24, 24, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	24, 24, 24, 24, 24, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 185, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 10, 187, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 187, 24, 24, 24, 
	24, 24, 24, 24, 24, 188, 24, 24, 
	189, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 190, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 190, 24, 24, 24, 24, 
	24, 24, 24, 182, 191, 24, 24, 192, 
	24, 24, 24, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 186, 24, 24, 
	24, 24, 24, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 185, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 10, 193, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 193, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 119, 119, 119, 119, 
	119, 119, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 194, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 32, 195, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 195, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 32, 32, 32, 32, 32, 
	32, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 32, 32, 32, 
	196, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 28, 57, 10, 10, 
	58, 10, 10, 10, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 10, 10, 
	10, 10, 10, 10, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	10, 10, 10, 197, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 28, 
	63, 10, 10, 64, 10, 10, 10, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 10, 10, 10, 10, 10, 10, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 10, 10, 10, 197, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 181, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 181, 24, 24, 24, 24, 24, 
	24, 24, 24, 183, 24, 24, 184, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	24, 24, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 198, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 10, 190, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 190, 24, 24, 24, 24, 24, 24, 
	24, 24, 191, 24, 24, 192, 24, 24, 
	24, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 24, 24, 24, 24, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	198, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	10, 199, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 45, 
	10, 200, 47, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	200, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 100, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	201, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 201, 
	10, 10, 10, 10, 10, 10, 10, 107, 
	202, 10, 10, 203, 10, 10, 10, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 111, 10, 10, 10, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 10, 10, 10, 110, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 204, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 204, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 85, 85, 85, 85, 
	85, 85, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 85, 85, 
	85, 205, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 206, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 206, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 85, 
	85, 85, 85, 85, 85, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 85, 85, 85, 205, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 207, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 108, 10, 10, 109, 10, 10, 10, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 10, 10, 10, 10, 10, 10, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 10, 10, 10, 208, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 209, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 202, 10, 10, 203, 
	10, 10, 10, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 10, 10, 10, 
	10, 10, 10, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 10, 
	10, 10, 208, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 210, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 210, 24, 
	24, 24, 24, 24, 24, 24, 24, 211, 
	24, 24, 212, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 213, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 214, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	214, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 134, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 10, 
	215, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 215, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 100, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 21, 21, 21, 21, 21, 21, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 216, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 1, 217, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 217, 24, 
	24, 24, 24, 24, 24, 24, 218, 24, 
	24, 24, 24, 24, 24, 24, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	24, 24, 24, 24, 24, 24, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 219, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 1, 220, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 220, 1, 1, 
	1, 1, 1, 1, 1, 31, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 193, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	193, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 119, 119, 119, 119, 119, 119, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 120, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 32, 
	221, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 221, 
	24, 24, 24, 24, 24, 24, 24, 222, 
	223, 24, 24, 224, 24, 24, 24, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 226, 24, 24, 24, 24, 24, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 225, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 10, 227, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 227, 24, 
	24, 24, 24, 24, 24, 24, 24, 228, 
	24, 24, 229, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 230, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 230, 24, 24, 
	24, 24, 24, 24, 24, 222, 231, 24, 
	24, 232, 24, 24, 24, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 226, 
	24, 24, 24, 24, 24, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 225, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 10, 233, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 233, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 102, 102, 
	102, 102, 102, 102, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 234, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 85, 235, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 235, 85, 85, 85, 85, 
	85, 85, 85, 85, 96, 85, 85, 86, 
	85, 85, 85, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 85, 85, 85, 
	85, 85, 85, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 85, 
	85, 85, 236, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 106, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 106, 10, 
	10, 10, 10, 10, 10, 10, 28, 108, 
	10, 10, 109, 10, 10, 10, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	10, 10, 10, 10, 10, 10, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 10, 10, 10, 237, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 201, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 201, 10, 10, 10, 10, 10, 10, 
	10, 28, 202, 10, 10, 203, 10, 10, 
	10, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 10, 10, 10, 10, 10, 
	10, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 10, 10, 10, 
	237, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 221, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 221, 24, 24, 24, 
	24, 24, 24, 24, 24, 223, 24, 24, 
	224, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 24, 24, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 238, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 10, 230, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 230, 24, 24, 24, 24, 
	24, 24, 24, 24, 231, 24, 24, 232, 
	24, 24, 24, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 24, 24, 24, 
	24, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 238, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 10, 207, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 207, 10, 10, 10, 10, 10, 
	10, 10, 239, 108, 10, 10, 109, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 93, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 93, 10, 10, 
	10, 10, 10, 10, 10, 10, 241, 10, 
	10, 94, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 209, 10, 10, 10, 10, 10, 
	10, 10, 239, 202, 10, 10, 203, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 242, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 242, 10, 10, 
	10, 10, 10, 10, 10, 10, 91, 10, 
	10, 92, 10, 10, 45, 10, 243, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 245, 32, 
	32, 84, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 244, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	244, 32, 32, 32, 32, 32, 32, 32, 
	32, 42, 32, 32, 84, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 246, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 246, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 247, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	247, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 117, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	248, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 248, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	249, 7, 7, 250, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 248, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 248, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 251, 7, 
	7, 7, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 7, 7, 
	7, 9, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 86, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 252, 85, 
	85, 253, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 85, 85, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 85, 85, 85, 89, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 254, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	254, 10, 10, 10, 10, 10, 10, 10, 
	10, 91, 10, 10, 92, 10, 255, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 255, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 99, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 248, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 7, 7, 
	7, 7, 7, 7, 7, 256, 7, 7, 
	251, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	257, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 257, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	12, 10, 10, 13, 10, 10, 45, 10, 
	258, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 258, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 259, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 259, 10, 
	260, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 260, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 261, 10, 
	10, 10, 10, 10, 10, 10, 262, 75, 
	10, 10, 76, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 14, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 14, 10, 10, 10, 10, 10, 10, 
	10, 10, 264, 10, 10, 15, 10, 265, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 265, 10, 
	10, 10, 10, 10, 10, 10, 262, 266, 
	10, 10, 267, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 8, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 8, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 7, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 269, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 269, 7, 7, 7, 
	7, 7, 7, 7, 7, 18, 7, 7, 
	17, 7, 7, 7, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 7, 7, 
	7, 7, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	7, 7, 7, 268, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	75, 10, 10, 76, 10, 10, 10, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 10, 10, 10, 10, 10, 10, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 10, 10, 10, 270, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 265, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 265, 10, 10, 10, 10, 10, 
	10, 10, 10, 266, 10, 10, 267, 10, 
	10, 10, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 10, 10, 10, 10, 
	10, 10, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 10, 10, 
	10, 270, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 271, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 271, 10, 10, 
	10, 10, 10, 10, 10, 10, 12, 10, 
	10, 13, 10, 10, 45, 10, 272, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 273, 32, 
	32, 274, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 275, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	275, 10, 10, 10, 10, 10, 10, 10, 
	74, 266, 10, 10, 267, 10, 10, 10, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 78, 10, 10, 10, 10, 10, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 10, 10, 10, 77, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 276, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 276, 24, 24, 24, 24, 
	24, 24, 24, 24, 277, 24, 24, 278, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 279, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 279, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 15, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	1, 1, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 26, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 280, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 280, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 10, 281, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 281, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 21, 21, 
	21, 21, 21, 21, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 216, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 1, 282, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 282, 24, 24, 24, 24, 
	24, 24, 24, 283, 284, 24, 24, 285, 
	24, 24, 24, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 287, 24, 24, 
	24, 24, 24, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 286, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 10, 288, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 288, 24, 24, 24, 24, 24, 
	24, 24, 24, 289, 24, 24, 290, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 291, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 291, 24, 24, 24, 24, 24, 24, 
	24, 283, 292, 24, 24, 293, 24, 24, 
	24, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 287, 24, 24, 24, 24, 
	24, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	286, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	10, 294, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	294, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 69, 69, 69, 69, 69, 69, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 295, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 7, 
	296, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 296, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 7, 7, 7, 7, 7, 7, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 7, 7, 7, 297, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 73, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 73, 10, 10, 10, 10, 10, 
	10, 10, 28, 75, 10, 10, 76, 10, 
	10, 10, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 10, 10, 10, 10, 
	10, 10, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 10, 10, 
	10, 298, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 275, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 275, 10, 10, 
	10, 10, 10, 10, 10, 28, 266, 10, 
	10, 267, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 282, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	282, 24, 24, 24, 24, 24, 24, 24, 
	24, 284, 24, 24, 285, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 24, 24, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 299, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 10, 
	291, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 291, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	292, 24, 24, 293, 24, 24, 24, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 24, 24, 24, 24, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 299, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 10, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 300, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 301, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 301, 1, 302, 1, 1, 1, 
	1, 303, 1, 305, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 306, 304, 308, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 309, 307, 307, 305, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 311, 310, 308, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	313, 312, 312, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 314, 314, 314, 314, 
	314, 314, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 314, 314, 
	314, 316, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 317, 1, 
	315, 318, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 315, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 314, 314, 314, 314, 314, 314, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 314, 314, 314, 319, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 320, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 1, 1, 1, 1, 1, 
	1, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 1, 1, 1, 
	321, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 322, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 1, 1, 1, 
	1, 1, 1, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 1, 
	1, 1, 321, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 324, 
	1, 1, 1, 1, 1, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 1, 1, 1, 323, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 322, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 324, 1, 1, 1, 1, 1, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 1, 1, 1, 323, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 314, 314, 314, 314, 
	314, 314, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 314, 314, 
	314, 319, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	1, 1, 1, 1, 1, 1, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 1, 1, 1, 325, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 326, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 326, 1, 1, 1, 1, 1, 1, 
	1, 327, 1, 1, 1, 1, 1, 1, 
	1, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 1, 1, 1, 1, 1, 
	1, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 1, 1, 1, 
	328, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 1, 1, 
	1, 1, 1, 1, 330, 1, 332, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 332, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 334, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 335, 10, 10, 336, 10, 337, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 337, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 338, 1, 339, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 339, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 331, 331, 331, 331, 
	331, 331, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 331, 331, 
	331, 333, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 340, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 340, 331, 331, 
	331, 331, 331, 331, 331, 331, 341, 331, 
	331, 340, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	342, 10, 10, 10, 10, 10, 10, 10, 
	343, 344, 10, 10, 345, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 337, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 337, 10, 10, 10, 10, 
	10, 10, 10, 10, 348, 10, 10, 338, 
	10, 349, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	349, 10, 10, 10, 10, 10, 10, 10, 
	343, 350, 10, 10, 351, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 332, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 332, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 331, 331, 331, 
	331, 331, 331, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 331, 
	331, 331, 352, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 353, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 353, 331, 
	331, 331, 331, 331, 331, 331, 331, 341, 
	331, 331, 340, 331, 331, 331, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	331, 331, 331, 331, 331, 331, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 331, 331, 331, 352, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 342, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 344, 10, 10, 345, 10, 10, 
	10, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 10, 10, 10, 10, 10, 
	10, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 10, 10, 10, 
	354, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 349, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 349, 10, 10, 10, 
	10, 10, 10, 10, 10, 350, 10, 10, 
	351, 10, 10, 10, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 10, 10, 
	10, 10, 10, 10, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	10, 10, 10, 354, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 1, 1, 1, 1, 1, 1, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 1, 1, 1, 355, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 356, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 356, 1, 1, 1, 1, 
	1, 1, 1, 357, 1, 1, 1, 1, 
	1, 1, 1, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 1, 1, 1, 
	1, 1, 1, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 1, 
	1, 1, 358, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 359, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 359, 1, 
	1, 1, 1, 1, 1, 1, 360, 1, 
	362, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 362, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	367, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 367, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 368, 1, 369, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 369, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 361, 361, 
	361, 361, 361, 361, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	361, 361, 361, 363, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	370, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 370, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 372, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	372, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 373, 10, 10, 10, 10, 10, 10, 
	10, 374, 375, 10, 10, 376, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 367, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 367, 10, 10, 10, 
	10, 10, 10, 10, 10, 379, 10, 10, 
	368, 10, 380, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 380, 10, 10, 10, 10, 10, 10, 
	10, 374, 381, 10, 10, 382, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 362, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 362, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 361, 361, 
	361, 361, 361, 361, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	361, 361, 361, 383, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	384, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 384, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 361, 361, 361, 361, 361, 361, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 361, 361, 361, 383, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 373, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 375, 10, 10, 376, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	10, 10, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 10, 10, 
	10, 385, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 380, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 380, 10, 10, 
	10, 10, 10, 10, 10, 10, 381, 10, 
	10, 382, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 10, 10, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 10, 10, 10, 385, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 1, 
	387, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 1, 389, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 390, 1, 391, 1, 1, 
	392, 394, 393, 1, 35, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 35, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 395, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 1, 1, 1, 1, 1, 1, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 396, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 317, 1, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 334, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	335, 10, 10, 336, 10, 10, 10, 1, 
	1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	143, 139, 0, 6, 137, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 34, 12, 
	11, 12, 13, 14, 15, 13, 14, 15, 
	16, 31, 27, 17, 25, 18, 17, 18, 
	19, 19, 20, 21, 217, 22, 21, 217, 
	22, 23, 24, 24, 217, 26, 26, 17, 
	28, 25, 18, 29, 30, 25, 17, 25, 
	18, 32, 31, 33, 35, 150, 154, 35, 
	36, 37, 38, 137, 7, 149, 142, 37, 
	39, 127, 129, 39, 40, 41, 44, 123, 
	125, 120, 42, 97, 43, 42, 43, 44, 
	45, 46, 46, 47, 64, 48, 104, 111, 
	48, 49, 50, 51, 97, 43, 99, 100, 
	50, 52, 40, 53, 53, 54, 55, 60, 
	88, 55, 56, 57, 58, 59, 57, 20, 
	57, 61, 62, 54, 61, 63, 64, 63, 
	65, 66, 87, 66, 67, 68, 69, 67, 
	68, 69, 70, 84, 218, 80, 71, 78, 
	72, 71, 72, 73, 73, 74, 75, 217, 
	76, 75, 76, 77, 79, 79, 71, 81, 
	78, 72, 82, 83, 78, 71, 78, 72, 
	85, 84, 86, 66, 87, 61, 89, 62, 
	54, 90, 91, 61, 62, 54, 61, 62, 
	54, 92, 95, 92, 93, 94, 96, 98, 
	98, 50, 97, 43, 101, 102, 101, 42, 
	103, 42, 105, 106, 47, 105, 107, 107, 
	108, 109, 110, 108, 109, 105, 112, 106, 
	47, 113, 114, 105, 106, 47, 105, 106, 
	47, 115, 118, 115, 116, 117, 119, 121, 
	122, 97, 124, 124, 126, 52, 128, 128, 
	130, 146, 148, 131, 132, 134, 133, 133, 
	135, 136, 136, 138, 138, 6, 140, 141, 
	137, 6, 137, 7, 144, 143, 145, 147, 
	147, 127, 129, 37, 151, 152, 34, 151, 
	153, 153, 151, 155, 152, 34, 156, 157, 
	151, 152, 34, 151, 152, 34, 158, 161, 
	158, 159, 160, 162, 219, 164, 165, 168, 
	166, 221, 167, 166, 221, 167, 169, 170, 
	169, 170, 172, 173, 176, 222, 223, 174, 
	222, 175, 222, 177, 178, 180, 181, 182, 
	180, 181, 182, 183, 191, 187, 184, 225, 
	185, 184, 185, 186, 186, 224, 184, 188, 
	225, 185, 189, 190, 225, 184, 225, 185, 
	192, 191, 193, 195, 196, 197, 195, 196, 
	197, 198, 208, 204, 199, 203, 200, 199, 
	200, 201, 201, 202, 226, 199, 205, 203, 
	200, 206, 207, 203, 199, 203, 200, 209, 
	208, 210, 212, 227, 212, 228, 214, 215, 
	216, 216, 228, 220, 219
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 1, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 9, 9, 0, 0, 
	0, 9, 9, 14, 15, 16, 0, 17, 
	0, 0, 18, 19, 20, 16, 0, 21, 
	22, 21, 21, 4, 23, 0, 24, 24, 
	24, 25, 9, 26, 12, 13, 27, 9, 
	28, 29, 30, 21, 21, 4, 23, 0, 
	0, 0, 0, 9, 9, 0, 9, 9, 
	9, 6, 9, 9, 9, 0, 0, 0, 
	9, 31, 0, 11, 11, 12, 13, 27, 
	9, 28, 29, 30, 21, 21, 4, 23, 
	0, 0, 0, 32, 0, 11, 12, 13, 
	33, 9, 1, 34, 35, 4, 0, 0, 
	36, 37, 38, 38, 0, 39, 40, 0, 
	13, 41, 42, 19, 43, 44, 45, 46, 
	19, 47, 19, 19, 20, 48, 49, 49, 
	49, 19, 19, 19, 49, 49, 50, 51, 
	52, 19, 19, 19, 52, 19, 53, 54, 
	53, 53, 46, 55, 19, 56, 56, 56, 
	57, 49, 58, 59, 60, 61, 62, 63, 
	63, 64, 65, 12, 13, 13, 66, 67, 
	67, 12, 68, 9, 1, 4, 69, 70, 
	0, 71, 24, 24, 0, 25, 9, 21, 
	26, 24, 72, 73, 73, 0, 74, 0, 
	75, 76, 77, 64, 0, 78, 79, 80, 
	80, 81, 82, 12, 13, 13, 83, 84, 
	84, 12, 85, 9, 86, 4, 87, 22, 
	4, 0, 14, 0, 9, 9, 88, 0, 
	9, 9, 9, 9, 9, 9, 10, 0, 
	9, 31, 0, 89, 0, 21, 22, 4, 
	0, 24, 24, 24, 25, 9, 26, 14, 
	0, 9, 9, 71, 72, 73, 73, 0, 
	90, 0, 78, 79, 80, 80, 81, 82, 
	12, 13, 13, 83, 84, 84, 12, 85, 
	9, 86, 4, 87, 25, 0, 0, 0, 
	91, 92, 91, 0, 93, 0, 91, 91, 
	0, 0, 0, 0, 25, 94, 94, 25, 
	95, 26, 96, 26, 23, 97, 2, 3, 
	4, 0, 5, 0, 0, 6, 9, 98, 
	9, 0, 0, 0, 9, 98, 21, 22, 
	99, 21, 4, 23, 100, 24, 101, 24, 
	25, 9, 26, 1, 2, 3, 4, 0, 
	5, 0, 0, 6, 9, 9, 9, 0, 
	0, 0, 9, 9, 102, 21, 22, 21, 
	21, 4, 23, 0, 24, 24, 24, 25, 
	9, 26, 11, 103, 13, 104, 0, 0, 
	18, 19, 105, 108, 26
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 0, 7, 7, 
	7, 7, 0, 0, 7, 7, 0, 0, 
	7, 7, 0, 7, 7, 0, 0, 7, 
	7, 0, 7, 7, 7, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 0, 0, 0, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 106, 107, 109, 0, 0, 0, 
	106, 106, 106, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 217;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 163;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 164;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 171;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 179;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 194;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 211;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 213;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 26 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 108 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 91 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 100 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 102 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 19 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 104 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 89 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 16 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 17 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 58 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 23 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 22 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 94 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 47 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 103 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 59 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 18 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 20 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 90 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 70 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 15 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 85 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 57 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 81 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 46 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 82 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 96 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 93 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 98 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 73 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 68 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 62 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 88 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 74 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 51 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 71 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 101 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 56 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 45 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 92 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 95 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 77 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 66 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 27 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 48 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 86 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 29 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 99 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 80 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 78 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 1 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 97 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 43 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 75 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 109 then
		begin

    yield @buffers[:ident]
  		end
	when 106 then
		begin

  		end
	when 107 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 47, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 126, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 10, 47, 10, 
	10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 122, 
	9, 47, 9, 47, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 9, 122, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 10, 10, 9, 
	122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 44, 
	10, 122, 0, 0, 0, 
	0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 114, 114, 32, 114, 
	36, 36, 114, 114, 39, 39, 1, 1, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 114, 114, 36, 114, 114, 
	114, 36, 36, 114, 114, 39, 118, 118, 
	114, 114, 36, 114, 39, 118, 118, 114, 
	114, 36, 114, 114, 118, 114, 118, 114, 
	118, 118, 114, 114, 32, 114, 36, 36, 
	114, 114, 39, 39, 38, 1, 39, 39, 
	114, 36, 114, 114, 114, 114, 114, 118, 
	118, 118, 118, 118, 114, 114, 114, 118, 
	118, 39, 118, 114, 114, 114, 114, 114, 
	118, 114, 118, 118, 118, 114, 118, 118, 
	118, 118, 118, 114, 114, 114, 118, 118, 
	114, 36, 114, 39, 39, 114, 114, 36, 
	118, 114, 114, 114, 36, 118, 114, 39, 
	118, 24, 118, 114, 36, 114, 114, 114, 
	114, 114, 39, 39, 114, 114, 118, 114, 
	118, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 75, 31, 59, 59, 0, 
	54, 54, 0, 114, 1, 114, 113, 113, 
	113, 113, 114, 75, 114, 32, 114, 36, 
	36, 114, 114, 114, 36, 114, 114, 114, 
	114, 114, 75, 114, 32, 114, 36, 36, 
	114, 114, 36, 1, 114, 36, 114, 114, 
	114, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 36, 113, 0, 0, 0, 1, 
	36, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 1033, 1148, 1181, 
	1296, 1333, 1370, 1485, 1600, 1640, 1680, 1682, 
	1684, 1686, 1726, 1766, 1881, 1918, 2033, 2148, 
	2263, 2378, 2493, 2612, 2727, 2842, 2879, 2994, 
	3109, 3224, 3261, 3298, 3413, 3528, 3568, 3687, 
	3806, 3921, 4036, 4073, 4188, 4228, 4347, 4466, 
	4581, 4696, 4733, 4848, 4963, 5082, 5197, 5316, 
	5431, 5550, 5669, 5784, 5899, 5932, 6047, 6084, 
	6121, 6236, 6351, 6391, 6431, 6470, 6472, 6512, 
	6552, 6667, 6704, 6819, 6934, 7049, 7164, 7279, 
	7398, 7517, 7636, 7755, 7874, 7989, 8104, 8219, 
	8338, 8457, 8497, 8616, 8731, 8846, 8961, 9076, 
	9191, 9310, 9425, 9544, 9663, 9782, 9897, 10016, 
	10135, 10254, 10373, 10492, 10607, 10722, 10837, 10956, 
	11075, 11190, 11227, 11342, 11382, 11422, 11537, 11652, 
	11689, 11808, 11923, 12038, 12153, 12190, 12309, 12424, 
	12464, 12583, 12608, 12727, 12842, 12879, 12994, 13109, 
	13224, 13339, 13454, 13494, 13534, 13649, 13764, 13883, 
	13998, 14117, 14236, 14355, 14474, 14593, 14712, 14827, 
	14942, 15057, 15176, 15295, 15371, 15403, 15463, 15523, 
	15524, 15579, 15634, 15635, 15750, 15752, 15867, 15981, 
	16095, 16209, 16323, 16438, 16514, 16629, 16662, 16777, 
	16814, 16851, 16966, 17081, 17196, 17233, 17348, 17463, 
	17578, 17693, 17808, 17884, 17999, 18032, 18147, 18184, 
	18221, 18336, 18451, 18488, 18490, 18605, 18642, 18757, 
	18872, 18987, 19102, 19217, 19312, 19430, 19469, 19471, 
	19473, 19475, 19476, 19513, 19627, 19628, 19629, 19630, 
	19632, 19669, 19670, 19671, 19672
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 27, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	28, 1, 1, 1, 1, 1, 1, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 1, 1, 1, 1, 1, 1, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 1, 1, 1, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	35, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 35, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 38, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 1, 40, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 40, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 32, 
	32, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 32, 32, 32, 
	34, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 41, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 41, 32, 32, 32, 
	32, 32, 32, 32, 32, 42, 32, 32, 
	41, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	43, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 43, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 10, 45, 10, 
	46, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 1, 48, 1, 
	49, 1, 1, 50, 52, 51, 53, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 45, 10, 54, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 54, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 48, 1, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 55, 10, 10, 
	10, 10, 10, 10, 10, 56, 57, 10, 
	10, 58, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 38, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	38, 10, 10, 10, 10, 10, 10, 10, 
	10, 61, 10, 10, 39, 10, 62, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 62, 10, 10, 
	10, 10, 10, 10, 10, 56, 63, 10, 
	10, 64, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 32, 32, 32, 32, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 65, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 66, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 66, 32, 32, 32, 32, 
	32, 32, 32, 32, 42, 32, 32, 41, 
	32, 32, 32, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 32, 32, 32, 
	32, 32, 32, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 32, 
	32, 32, 65, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 55, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 57, 
	10, 10, 58, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 10, 10, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 10, 10, 10, 67, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 62, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 63, 10, 10, 64, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 10, 
	10, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 10, 10, 10, 
	67, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 69, 69, 
	69, 69, 69, 69, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 70, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 7, 71, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 71, 7, 7, 7, 7, 
	7, 7, 7, 7, 18, 7, 7, 17, 
	7, 7, 7, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 7, 7, 7, 
	7, 7, 7, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 7, 
	7, 7, 72, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 73, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 73, 10, 
	10, 10, 10, 10, 10, 10, 74, 75, 
	10, 10, 76, 10, 10, 10, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	78, 10, 10, 10, 10, 10, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 10, 10, 10, 77, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 79, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 79, 1, 1, 1, 1, 1, 1, 
	1, 31, 1, 1, 1, 15, 1, 80, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 80, 32, 
	32, 32, 32, 32, 32, 32, 32, 81, 
	32, 32, 82, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 32, 32, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 32, 32, 32, 34, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 83, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 83, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 84, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 32, 
	32, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 32, 32, 32, 
	65, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 87, 85, 85, 
	88, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	90, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 90, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	94, 1, 95, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 95, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 85, 85, 85, 85, 85, 
	85, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 85, 85, 85, 
	89, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 96, 85, 85, 
	86, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	97, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 97, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 10, 45, 10, 
	98, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 99, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 101, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 101, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	102, 102, 102, 102, 102, 102, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 103, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 85, 104, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 104, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 85, 
	85, 85, 85, 85, 85, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 85, 85, 85, 105, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 106, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	106, 10, 10, 10, 10, 10, 10, 10, 
	107, 108, 10, 10, 109, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 111, 10, 10, 10, 10, 10, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 10, 10, 10, 110, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 112, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 1, 1, 94, 
	1, 80, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	80, 32, 32, 32, 32, 32, 32, 32, 
	32, 113, 32, 32, 114, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 115, 44, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 115, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 10, 45, 10, 116, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 117, 
	21, 21, 100, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 1, 118, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 118, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 119, 119, 119, 119, 
	119, 119, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 120, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 32, 121, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 121, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 32, 32, 32, 32, 32, 
	32, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 32, 32, 32, 
	122, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 124, 57, 10, 10, 
	58, 10, 10, 10, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 60, 10, 
	10, 10, 10, 10, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	10, 10, 10, 125, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	126, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 126, 
	1, 1, 1, 1, 1, 1, 1, 31, 
	1, 1, 1, 39, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 127, 32, 32, 
	40, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 124, 
	63, 10, 10, 64, 10, 10, 10, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 60, 10, 10, 10, 10, 10, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 10, 10, 10, 125, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 24, 24, 24, 24, 24, 
	24, 24, 24, 130, 24, 24, 131, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 132, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 1, 
	1, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 1, 1, 1, 1, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	26, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 133, 44, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 133, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 134, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 135, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 48, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 1, 1, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 1, 
	1, 1, 26, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 136, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 137, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 137, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 50, 139, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 139, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 51, 51, 
	51, 51, 51, 51, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	51, 51, 51, 140, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	141, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 141, 
	51, 51, 51, 51, 51, 51, 51, 142, 
	51, 51, 51, 51, 51, 51, 51, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 51, 51, 51, 51, 51, 51, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 51, 51, 51, 143, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 144, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 144, 51, 51, 51, 51, 51, 
	51, 51, 145, 51, 147, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 150, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 150, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 153, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 153, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 154, 
	51, 155, 148, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	155, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 146, 146, 146, 146, 146, 146, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 146, 146, 146, 149, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 156, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 156, 146, 146, 146, 146, 
	146, 146, 146, 146, 157, 146, 146, 156, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 158, 
	159, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 158, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 51, 160, 51, 161, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 161, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 154, 51, 51, 162, 51, 52, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 163, 51, 52, 50, 
	164, 159, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 164, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 160, 51, 
	165, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 165, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 162, 51, 
	166, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 166, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	168, 51, 51, 169, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 153, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 153, 51, 51, 51, 51, 51, 
	51, 51, 51, 172, 51, 51, 154, 51, 
	173, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 173, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	174, 51, 51, 175, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 147, 148, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 146, 146, 146, 146, 
	146, 146, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 146, 146, 
	146, 176, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 177, 148, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 177, 146, 146, 
	146, 146, 146, 146, 146, 146, 157, 146, 
	146, 156, 146, 146, 146, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 146, 
	146, 146, 146, 146, 146, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 146, 146, 146, 176, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 166, 52, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	166, 51, 51, 51, 51, 51, 51, 51, 
	51, 168, 51, 51, 169, 51, 51, 51, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 51, 51, 51, 51, 51, 51, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 51, 51, 51, 178, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 173, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 173, 51, 51, 51, 51, 
	51, 51, 51, 51, 174, 51, 51, 175, 
	51, 51, 51, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 51, 51, 51, 
	51, 51, 51, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 51, 
	51, 51, 178, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 179, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 179, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 51, 181, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 181, 24, 24, 
	24, 24, 24, 24, 24, 182, 183, 24, 
	24, 184, 24, 24, 24, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	24, 24, 24, 24, 24, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 185, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 10, 187, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 187, 24, 24, 24, 
	24, 24, 24, 24, 24, 188, 24, 24, 
	189, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 190, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 190, 24, 24, 24, 24, 
	24, 24, 24, 182, 191, 24, 24, 192, 
	24, 24, 24, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 186, 24, 24, 
	24, 24, 24, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 185, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 10, 193, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 193, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 119, 119, 119, 119, 
	119, 119, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 194, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 32, 195, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 195, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 32, 32, 32, 32, 32, 
	32, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 32, 32, 32, 
	196, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 28, 57, 10, 10, 
	58, 10, 10, 10, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 10, 10, 
	10, 10, 10, 10, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	10, 10, 10, 197, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 28, 
	63, 10, 10, 64, 10, 10, 10, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 10, 10, 10, 10, 10, 10, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 10, 10, 10, 197, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 181, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 181, 24, 24, 24, 24, 24, 
	24, 24, 24, 183, 24, 24, 184, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	24, 24, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 198, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 10, 190, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 190, 24, 24, 24, 24, 24, 24, 
	24, 24, 191, 24, 24, 192, 24, 24, 
	24, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 24, 24, 24, 24, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	198, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	10, 199, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 45, 
	10, 200, 47, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	200, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 100, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	201, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 201, 
	10, 10, 10, 10, 10, 10, 10, 107, 
	202, 10, 10, 203, 10, 10, 10, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 111, 10, 10, 10, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 10, 10, 10, 110, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 204, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 204, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 85, 85, 85, 85, 
	85, 85, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 85, 85, 
	85, 205, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 206, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 206, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 85, 
	85, 85, 85, 85, 85, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 85, 85, 85, 205, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 207, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 108, 10, 10, 109, 10, 10, 10, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 10, 10, 10, 10, 10, 10, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 10, 10, 10, 208, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 209, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 202, 10, 10, 203, 
	10, 10, 10, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 10, 10, 10, 
	10, 10, 10, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 10, 
	10, 10, 208, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 210, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 210, 24, 
	24, 24, 24, 24, 24, 24, 24, 211, 
	24, 24, 212, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 213, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 214, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	214, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 134, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 10, 
	215, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 215, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 100, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 21, 21, 21, 21, 21, 21, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 216, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 1, 217, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 217, 24, 
	24, 24, 24, 24, 24, 24, 218, 24, 
	24, 24, 24, 24, 24, 24, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	24, 24, 24, 24, 24, 24, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 219, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 1, 220, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 220, 1, 1, 
	1, 1, 1, 1, 1, 31, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 193, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	193, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 119, 119, 119, 119, 119, 119, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 120, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 32, 
	221, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 221, 
	24, 24, 24, 24, 24, 24, 24, 222, 
	223, 24, 24, 224, 24, 24, 24, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 226, 24, 24, 24, 24, 24, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 225, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 10, 227, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 227, 24, 
	24, 24, 24, 24, 24, 24, 24, 228, 
	24, 24, 229, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 230, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 230, 24, 24, 
	24, 24, 24, 24, 24, 222, 231, 24, 
	24, 232, 24, 24, 24, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 226, 
	24, 24, 24, 24, 24, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 225, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 10, 233, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 233, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 102, 102, 
	102, 102, 102, 102, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 234, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 85, 235, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 235, 85, 85, 85, 85, 
	85, 85, 85, 85, 96, 85, 85, 86, 
	85, 85, 85, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 85, 85, 85, 
	85, 85, 85, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 85, 
	85, 85, 236, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 106, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 106, 10, 
	10, 10, 10, 10, 10, 10, 28, 108, 
	10, 10, 109, 10, 10, 10, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	10, 10, 10, 10, 10, 10, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 10, 10, 10, 237, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 201, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 201, 10, 10, 10, 10, 10, 10, 
	10, 28, 202, 10, 10, 203, 10, 10, 
	10, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 10, 10, 10, 10, 10, 
	10, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 10, 10, 10, 
	237, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 221, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 221, 24, 24, 24, 
	24, 24, 24, 24, 24, 223, 24, 24, 
	224, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 24, 24, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 238, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 10, 230, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 230, 24, 24, 24, 24, 
	24, 24, 24, 24, 231, 24, 24, 232, 
	24, 24, 24, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 24, 24, 24, 
	24, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 238, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 10, 207, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 207, 10, 10, 10, 10, 10, 
	10, 10, 239, 108, 10, 10, 109, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 93, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 93, 10, 10, 
	10, 10, 10, 10, 10, 10, 241, 10, 
	10, 94, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 209, 10, 10, 10, 10, 10, 
	10, 10, 239, 202, 10, 10, 203, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 242, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 242, 10, 10, 
	10, 10, 10, 10, 10, 10, 91, 10, 
	10, 92, 10, 10, 45, 10, 243, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 245, 32, 
	32, 84, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 244, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	244, 32, 32, 32, 32, 32, 32, 32, 
	32, 42, 32, 32, 84, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 246, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 246, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 247, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	247, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 117, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	248, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 248, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	249, 7, 7, 250, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 248, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 248, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 251, 7, 
	7, 7, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 7, 7, 
	7, 9, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 86, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 252, 85, 
	85, 253, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 85, 85, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 85, 85, 85, 89, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 254, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	254, 10, 10, 10, 10, 10, 10, 10, 
	10, 91, 10, 10, 92, 10, 255, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 255, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 99, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 248, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 7, 7, 
	7, 7, 7, 7, 7, 256, 7, 7, 
	251, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	257, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 257, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	12, 10, 10, 13, 10, 10, 45, 10, 
	258, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 258, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 259, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 259, 10, 
	260, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 260, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 261, 10, 
	10, 10, 10, 10, 10, 10, 262, 75, 
	10, 10, 76, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 14, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 14, 10, 10, 10, 10, 10, 10, 
	10, 10, 264, 10, 10, 15, 10, 265, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 265, 10, 
	10, 10, 10, 10, 10, 10, 262, 266, 
	10, 10, 267, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 8, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 8, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 7, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 269, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 269, 7, 7, 7, 
	7, 7, 7, 7, 7, 18, 7, 7, 
	17, 7, 7, 7, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 7, 7, 
	7, 7, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	7, 7, 7, 268, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	75, 10, 10, 76, 10, 10, 10, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 10, 10, 10, 10, 10, 10, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 10, 10, 10, 270, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 265, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 265, 10, 10, 10, 10, 10, 
	10, 10, 10, 266, 10, 10, 267, 10, 
	10, 10, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 10, 10, 10, 10, 
	10, 10, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 10, 10, 
	10, 270, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 271, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 271, 10, 10, 
	10, 10, 10, 10, 10, 10, 12, 10, 
	10, 13, 10, 10, 45, 10, 272, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 273, 32, 
	32, 274, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 275, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	275, 10, 10, 10, 10, 10, 10, 10, 
	74, 266, 10, 10, 267, 10, 10, 10, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 78, 10, 10, 10, 10, 10, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 10, 10, 10, 77, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 276, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 276, 24, 24, 24, 24, 
	24, 24, 24, 24, 277, 24, 24, 278, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 279, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 279, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 15, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	1, 1, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 26, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 280, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 280, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 10, 281, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 281, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 21, 21, 
	21, 21, 21, 21, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 216, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 1, 282, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 282, 24, 24, 24, 24, 
	24, 24, 24, 283, 284, 24, 24, 285, 
	24, 24, 24, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 287, 24, 24, 
	24, 24, 24, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 286, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 10, 288, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 288, 24, 24, 24, 24, 24, 
	24, 24, 24, 289, 24, 24, 290, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 291, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 291, 24, 24, 24, 24, 24, 24, 
	24, 283, 292, 24, 24, 293, 24, 24, 
	24, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 287, 24, 24, 24, 24, 
	24, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	286, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	10, 294, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	294, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 69, 69, 69, 69, 69, 69, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 295, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 7, 
	296, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 296, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 7, 7, 7, 7, 7, 7, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 7, 7, 7, 297, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 73, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 73, 10, 10, 10, 10, 10, 
	10, 10, 28, 75, 10, 10, 76, 10, 
	10, 10, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 10, 10, 10, 10, 
	10, 10, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 10, 10, 
	10, 298, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 275, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 275, 10, 10, 
	10, 10, 10, 10, 10, 28, 266, 10, 
	10, 267, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 282, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	282, 24, 24, 24, 24, 24, 24, 24, 
	24, 284, 24, 24, 285, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 24, 24, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 299, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 10, 
	291, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 291, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	292, 24, 24, 293, 24, 24, 24, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 24, 24, 24, 24, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 299, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 10, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 300, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 301, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 301, 1, 302, 1, 1, 1, 
	1, 303, 1, 305, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 306, 304, 308, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 309, 307, 307, 305, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 311, 310, 308, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	313, 312, 312, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 314, 314, 314, 314, 
	314, 314, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 314, 314, 
	314, 316, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 317, 1, 
	315, 318, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 315, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 314, 314, 314, 314, 314, 314, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 314, 314, 314, 319, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 320, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 1, 1, 1, 1, 1, 
	1, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 1, 1, 1, 
	321, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 322, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 1, 1, 1, 
	1, 1, 1, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 1, 
	1, 1, 321, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 324, 
	1, 1, 1, 1, 1, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 1, 1, 1, 323, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 322, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 324, 1, 1, 1, 1, 1, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 1, 1, 1, 323, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 314, 314, 314, 314, 
	314, 314, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 314, 314, 
	314, 319, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	1, 1, 1, 1, 1, 1, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 1, 1, 1, 325, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 326, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 326, 1, 1, 1, 1, 1, 1, 
	1, 327, 1, 1, 1, 1, 1, 1, 
	1, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 1, 1, 1, 1, 1, 
	1, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 1, 1, 1, 
	328, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 1, 1, 
	1, 1, 1, 1, 330, 1, 332, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 332, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 334, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 335, 10, 10, 336, 10, 337, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 337, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 338, 1, 339, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 339, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 331, 331, 331, 331, 
	331, 331, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 331, 331, 
	331, 333, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 340, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 340, 331, 331, 
	331, 331, 331, 331, 331, 331, 341, 331, 
	331, 340, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	342, 10, 10, 10, 10, 10, 10, 10, 
	343, 344, 10, 10, 345, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 337, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 337, 10, 10, 10, 10, 
	10, 10, 10, 10, 348, 10, 10, 338, 
	10, 349, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	349, 10, 10, 10, 10, 10, 10, 10, 
	343, 350, 10, 10, 351, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 332, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 332, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 331, 331, 331, 
	331, 331, 331, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 331, 
	331, 331, 352, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 353, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 353, 331, 
	331, 331, 331, 331, 331, 331, 331, 341, 
	331, 331, 340, 331, 331, 331, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	331, 331, 331, 331, 331, 331, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 331, 331, 331, 352, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 342, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 344, 10, 10, 345, 10, 10, 
	10, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 10, 10, 10, 10, 10, 
	10, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 10, 10, 10, 
	354, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 349, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 349, 10, 10, 10, 
	10, 10, 10, 10, 10, 350, 10, 10, 
	351, 10, 10, 10, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 10, 10, 
	10, 10, 10, 10, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	10, 10, 10, 354, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 1, 1, 1, 1, 1, 1, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 1, 1, 1, 355, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 356, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 356, 1, 1, 1, 1, 
	1, 1, 1, 357, 1, 1, 1, 1, 
	1, 1, 1, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 1, 1, 1, 
	1, 1, 1, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 1, 
	1, 1, 358, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 359, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 359, 1, 
	1, 1, 1, 1, 1, 1, 360, 1, 
	362, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 362, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	367, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 367, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 368, 1, 369, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 369, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 361, 361, 
	361, 361, 361, 361, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	361, 361, 361, 363, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	370, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 370, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 372, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	372, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 373, 10, 10, 10, 10, 10, 10, 
	10, 374, 375, 10, 10, 376, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 367, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 367, 10, 10, 10, 
	10, 10, 10, 10, 10, 379, 10, 10, 
	368, 10, 380, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 380, 10, 10, 10, 10, 10, 10, 
	10, 374, 381, 10, 10, 382, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 362, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 362, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 361, 361, 
	361, 361, 361, 361, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	361, 361, 361, 383, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	384, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 384, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 361, 361, 361, 361, 361, 361, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 361, 361, 361, 383, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 373, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 375, 10, 10, 376, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	10, 10, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 10, 10, 
	10, 385, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 380, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 380, 10, 10, 
	10, 10, 10, 10, 10, 10, 381, 10, 
	10, 382, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 10, 10, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 10, 10, 10, 385, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 1, 
	387, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 1, 389, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 390, 1, 391, 1, 1, 
	392, 394, 393, 1, 35, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 35, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 395, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 1, 1, 1, 1, 1, 1, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 396, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 317, 1, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 334, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	335, 10, 10, 336, 10, 10, 10, 1, 
	1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	143, 139, 0, 6, 137, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 34, 12, 
	11, 12, 13, 14, 15, 13, 14, 15, 
	16, 31, 27, 17, 25, 18, 17, 18, 
	19, 19, 20, 21, 217, 22, 21, 217, 
	22, 23, 24, 24, 217, 26, 26, 17, 
	28, 25, 18, 29, 30, 25, 17, 25, 
	18, 32, 31, 33, 35, 150, 154, 35, 
	36, 37, 38, 137, 7, 149, 142, 37, 
	39, 127, 129, 39, 40, 41, 44, 123, 
	125, 120, 42, 97, 43, 42, 43, 44, 
	45, 46, 46, 47, 64, 48, 104, 111, 
	48, 49, 50, 51, 97, 43, 99, 100, 
	50, 52, 40, 53, 53, 54, 55, 60, 
	88, 55, 56, 57, 58, 59, 57, 20, 
	57, 61, 62, 54, 61, 63, 64, 63, 
	65, 66, 87, 66, 67, 68, 69, 67, 
	68, 69, 70, 84, 218, 80, 71, 78, 
	72, 71, 72, 73, 73, 74, 75, 217, 
	76, 75, 76, 77, 79, 79, 71, 81, 
	78, 72, 82, 83, 78, 71, 78, 72, 
	85, 84, 86, 66, 87, 61, 89, 62, 
	54, 90, 91, 61, 62, 54, 61, 62, 
	54, 92, 95, 92, 93, 94, 96, 98, 
	98, 50, 97, 43, 101, 102, 101, 42, 
	103, 42, 105, 106, 47, 105, 107, 107, 
	108, 109, 110, 108, 109, 105, 112, 106, 
	47, 113, 114, 105, 106, 47, 105, 106, 
	47, 115, 118, 115, 116, 117, 119, 121, 
	122, 97, 124, 124, 126, 52, 128, 128, 
	130, 146, 148, 131, 132, 134, 133, 133, 
	135, 136, 136, 138, 138, 6, 140, 141, 
	137, 6, 137, 7, 144, 143, 145, 147, 
	147, 127, 129, 37, 151, 152, 34, 151, 
	153, 153, 151, 155, 152, 34, 156, 157, 
	151, 152, 34, 151, 152, 34, 158, 161, 
	158, 159, 160, 162, 219, 164, 165, 168, 
	166, 221, 167, 166, 221, 167, 169, 170, 
	169, 170, 172, 173, 176, 222, 223, 174, 
	222, 175, 222, 177, 178, 180, 181, 182, 
	180, 181, 182, 183, 191, 187, 184, 225, 
	185, 184, 185, 186, 186, 224, 184, 188, 
	225, 185, 189, 190, 225, 184, 225, 185, 
	192, 191, 193, 195, 196, 197, 195, 196, 
	197, 198, 208, 204, 199, 203, 200, 199, 
	200, 201, 201, 202, 226, 199, 205, 203, 
	200, 206, 207, 203, 199, 203, 200, 209, 
	208, 210, 212, 227, 212, 228, 214, 215, 
	216, 216, 228, 220, 219
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 1, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 9, 9, 0, 0, 
	0, 9, 9, 14, 15, 16, 0, 17, 
	0, 0, 18, 19, 20, 16, 0, 21, 
	22, 21, 21, 4, 23, 0, 24, 24, 
	24, 25, 9, 26, 12, 13, 27, 9, 
	28, 29, 30, 21, 21, 4, 23, 0, 
	0, 0, 0, 9, 9, 0, 9, 9, 
	9, 6, 9, 9, 9, 0, 0, 0, 
	9, 31, 0, 11, 11, 12, 13, 27, 
	9, 28, 29, 30, 21, 21, 4, 23, 
	0, 0, 0, 32, 0, 11, 12, 13, 
	33, 9, 1, 34, 35, 4, 0, 0, 
	36, 37, 38, 38, 0, 39, 40, 0, 
	13, 41, 42, 19, 43, 44, 45, 46, 
	19, 47, 19, 19, 20, 48, 49, 49, 
	49, 19, 19, 19, 49, 49, 50, 51, 
	52, 19, 19, 19, 52, 19, 53, 54, 
	53, 53, 46, 55, 19, 56, 56, 56, 
	57, 49, 58, 59, 60, 61, 62, 63, 
	63, 64, 65, 12, 13, 13, 66, 67, 
	67, 12, 68, 9, 1, 4, 69, 70, 
	0, 71, 24, 24, 0, 25, 9, 21, 
	26, 24, 72, 73, 73, 0, 74, 0, 
	75, 76, 77, 64, 0, 78, 79, 80, 
	80, 81, 82, 12, 13, 13, 83, 84, 
	84, 12, 85, 9, 86, 4, 87, 22, 
	4, 0, 14, 0, 9, 9, 88, 0, 
	9, 9, 9, 9, 9, 9, 10, 0, 
	9, 31, 0, 89, 0, 21, 22, 4, 
	0, 24, 24, 24, 25, 9, 26, 14, 
	0, 9, 9, 71, 72, 73, 73, 0, 
	90, 0, 78, 79, 80, 80, 81, 82, 
	12, 13, 13, 83, 84, 84, 12, 85, 
	9, 86, 4, 87, 25, 0, 0, 0, 
	91, 92, 91, 0, 93, 0, 91, 91, 
	0, 0, 0, 0, 25, 94, 94, 25, 
	95, 26, 96, 26, 23, 97, 2, 3, 
	4, 0, 5, 0, 0, 6, 9, 98, 
	9, 0, 0, 0, 9, 98, 21, 22, 
	99, 21, 4, 23, 100, 24, 101, 24, 
	25, 9, 26, 1, 2, 3, 4, 0, 
	5, 0, 0, 6, 9, 9, 9, 0, 
	0, 0, 9, 9, 102, 21, 22, 21, 
	21, 4, 23, 0, 24, 24, 24, 25, 
	9, 26, 11, 103, 13, 104, 0, 0, 
	18, 19, 105, 108, 26
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 0, 7, 7, 
	7, 7, 0, 0, 7, 7, 0, 0, 
	7, 7, 0, 7, 7, 0, 0, 7, 
	7, 0, 7, 7, 7, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 0, 0, 0, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 106, 107, 109, 0, 0, 0, 
	106, 106, 106, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 217;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 163;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 164;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 171;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 179;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 194;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 211;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 213;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 26 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 108 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 91 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 100 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 102 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 19 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 104 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 89 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 16 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 17 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 58 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 23 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 22 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 94 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 47 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 103 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 59 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 18 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 20 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 90 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 70 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 15 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 85 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 57 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 81 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 46 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 82 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 96 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 93 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 98 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 73 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 68 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 62 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 88 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 74 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 51 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 71 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 101 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 56 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 45 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 92 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 95 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 77 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 66 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 27 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 48 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 86 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 29 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 99 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 80 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 78 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 1 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 97 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 43 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 75 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 109 then
		begin

    yield @buffers[:ident]
  		end
	when 106 then
		begin

  		end
	when 107 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 47, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 126, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 10, 47, 10, 
	10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 122, 
	9, 47, 9, 47, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 9, 122, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 10, 10, 9, 
	122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 44, 
	10, 122, 0, 0, 0, 
	0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 114, 114, 32, 114, 
	36, 36, 114, 114, 39, 39, 1, 1, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 114, 114, 36, 114, 114, 
	114, 36, 36, 114, 114, 39, 118, 118, 
	114, 114, 36, 114, 39, 118, 118, 114, 
	114, 36, 114, 114, 118, 114, 118, 114, 
	118, 118, 114, 114, 32, 114, 36, 36, 
	114, 114, 39, 39, 38, 1, 39, 39, 
	114, 36, 114, 114, 114, 114, 114, 118, 
	118, 118, 118, 118, 114, 114, 114, 118, 
	118, 39, 118, 114, 114, 114, 114, 114, 
	118, 114, 118, 118, 118, 114, 118, 118, 
	118, 118, 118, 114, 114, 114, 118, 118, 
	114, 36, 114, 39, 39, 114, 114, 36, 
	118, 114, 114, 114, 36, 118, 114, 39, 
	118, 24, 118, 114, 36, 114, 114, 114, 
	114, 114, 39, 39, 114, 114, 118, 114, 
	118, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 75, 31, 59, 59, 0, 
	54, 54, 0, 114, 1, 114, 113, 113, 
	113, 113, 114, 75, 114, 32, 114, 36, 
	36, 114, 114, 114, 36, 114, 114, 114, 
	114, 114, 75, 114, 32, 114, 36, 36, 
	114, 114, 36, 1, 114, 36, 114, 114, 
	114, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 36, 113, 0, 0, 0, 1, 
	36, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 1033, 1148, 1181, 
	1296, 1333, 1370, 1485, 1600, 1640, 1680, 1682, 
	1684, 1686, 1726, 1766, 1881, 1918, 2033, 2148, 
	2263, 2378, 2493, 2612, 2727, 2842, 2879, 2994, 
	3109, 3224, 3261, 3298, 3413, 3528, 3568, 3687, 
	3806, 3921, 4036, 4073, 4188, 4228, 4347, 4466, 
	4581, 4696, 4733, 4848, 4963, 5082, 5197, 5316, 
	5431, 5550, 5669, 5784, 5899, 5932, 6047, 6084, 
	6121, 6236, 6351, 6391, 6431, 6470, 6472, 6512, 
	6552, 6667, 6704, 6819, 6934, 7049, 7164, 7279, 
	7398, 7517, 7636, 7755, 7874, 7989, 8104, 8219, 
	8338, 8457, 8497, 8616, 8731, 8846, 8961, 9076, 
	9191, 9310, 9425, 9544, 9663, 9782, 9897, 10016, 
	10135, 10254, 10373, 10492, 10607, 10722, 10837, 10956, 
	11075, 11190, 11227, 11342, 11382, 11422, 11537, 11652, 
	11689, 11808, 11923, 12038, 12153, 12190, 12309, 12424, 
	12464, 12583, 12608, 12727, 12842, 12879, 12994, 13109, 
	13224, 13339, 13454, 13494, 13534, 13649, 13764, 13883, 
	13998, 14117, 14236, 14355, 14474, 14593, 14712, 14827, 
	14942, 15057, 15176, 15295, 15371, 15403, 15463, 15523, 
	15524, 15579, 15634, 15635, 15750, 15752, 15867, 15981, 
	16095, 16209, 16323, 16438, 16514, 16629, 16662, 16777, 
	16814, 16851, 16966, 17081, 17196, 17233, 17348, 17463, 
	17578, 17693, 17808, 17884, 17999, 18032, 18147, 18184, 
	18221, 18336, 18451, 18488, 18490, 18605, 18642, 18757, 
	18872, 18987, 19102, 19217, 19312, 19430, 19469, 19471, 
	19473, 19475, 19476, 19513, 19627, 19628, 19629, 19630, 
	19632, 19669, 19670, 19671, 19672
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 27, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	28, 1, 1, 1, 1, 1, 1, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 1, 1, 1, 1, 1, 1, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 1, 1, 1, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	35, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 35, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 38, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 1, 40, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 40, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 32, 
	32, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 32, 32, 32, 
	34, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 41, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 41, 32, 32, 32, 
	32, 32, 32, 32, 32, 42, 32, 32, 
	41, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	43, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 43, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 10, 45, 10, 
	46, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 1, 48, 1, 
	49, 1, 1, 50, 52, 51, 53, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 45, 10, 54, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 54, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 48, 1, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 55, 10, 10, 
	10, 10, 10, 10, 10, 56, 57, 10, 
	10, 58, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 38, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	38, 10, 10, 10, 10, 10, 10, 10, 
	10, 61, 10, 10, 39, 10, 62, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 62, 10, 10, 
	10, 10, 10, 10, 10, 56, 63, 10, 
	10, 64, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 32, 32, 32, 32, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 65, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 66, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 66, 32, 32, 32, 32, 
	32, 32, 32, 32, 42, 32, 32, 41, 
	32, 32, 32, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 32, 32, 32, 
	32, 32, 32, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 32, 
	32, 32, 65, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 55, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 57, 
	10, 10, 58, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 10, 10, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 10, 10, 10, 67, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 62, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 63, 10, 10, 64, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 10, 
	10, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 10, 10, 10, 
	67, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 69, 69, 
	69, 69, 69, 69, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 70, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 7, 71, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 71, 7, 7, 7, 7, 
	7, 7, 7, 7, 18, 7, 7, 17, 
	7, 7, 7, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 7, 7, 7, 
	7, 7, 7, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 7, 
	7, 7, 72, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 73, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 73, 10, 
	10, 10, 10, 10, 10, 10, 74, 75, 
	10, 10, 76, 10, 10, 10, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	78, 10, 10, 10, 10, 10, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 10, 10, 10, 77, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 79, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 79, 1, 1, 1, 1, 1, 1, 
	1, 31, 1, 1, 1, 15, 1, 80, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 80, 32, 
	32, 32, 32, 32, 32, 32, 32, 81, 
	32, 32, 82, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 32, 32, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 32, 32, 32, 34, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 83, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 83, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 84, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 32, 
	32, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 32, 32, 32, 
	65, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 87, 85, 85, 
	88, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	90, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 90, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	94, 1, 95, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 95, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 85, 85, 85, 85, 85, 
	85, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 85, 85, 85, 
	89, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 96, 85, 85, 
	86, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	97, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 97, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 10, 45, 10, 
	98, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 99, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 101, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 101, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	102, 102, 102, 102, 102, 102, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 103, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 85, 104, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 104, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 85, 
	85, 85, 85, 85, 85, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 85, 85, 85, 105, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 106, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	106, 10, 10, 10, 10, 10, 10, 10, 
	107, 108, 10, 10, 109, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 111, 10, 10, 10, 10, 10, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 10, 10, 10, 110, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 112, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 1, 1, 94, 
	1, 80, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	80, 32, 32, 32, 32, 32, 32, 32, 
	32, 113, 32, 32, 114, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 115, 44, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 115, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 10, 45, 10, 116, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 117, 
	21, 21, 100, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 1, 118, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 118, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 119, 119, 119, 119, 
	119, 119, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 120, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 32, 121, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 121, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 32, 32, 32, 32, 32, 
	32, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 32, 32, 32, 
	122, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 124, 57, 10, 10, 
	58, 10, 10, 10, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 60, 10, 
	10, 10, 10, 10, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	10, 10, 10, 125, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	126, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 126, 
	1, 1, 1, 1, 1, 1, 1, 31, 
	1, 1, 1, 39, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 127, 32, 32, 
	40, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 124, 
	63, 10, 10, 64, 10, 10, 10, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 60, 10, 10, 10, 10, 10, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 10, 10, 10, 125, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 24, 24, 24, 24, 24, 
	24, 24, 24, 130, 24, 24, 131, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 132, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 1, 
	1, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 1, 1, 1, 1, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	26, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 133, 44, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 133, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 134, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 135, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 48, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 1, 1, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 1, 
	1, 1, 26, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 136, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 137, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 137, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 50, 139, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 139, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 51, 51, 
	51, 51, 51, 51, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	51, 51, 51, 140, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	141, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 141, 
	51, 51, 51, 51, 51, 51, 51, 142, 
	51, 51, 51, 51, 51, 51, 51, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 51, 51, 51, 51, 51, 51, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 51, 51, 51, 143, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 144, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 144, 51, 51, 51, 51, 51, 
	51, 51, 145, 51, 147, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 150, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 150, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 153, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 153, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 154, 
	51, 155, 148, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	155, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 146, 146, 146, 146, 146, 146, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 146, 146, 146, 149, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 156, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 156, 146, 146, 146, 146, 
	146, 146, 146, 146, 157, 146, 146, 156, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 158, 
	159, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 158, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 51, 160, 51, 161, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 161, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 154, 51, 51, 162, 51, 52, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 163, 51, 52, 50, 
	164, 159, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 164, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 160, 51, 
	165, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 165, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 162, 51, 
	166, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 166, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	168, 51, 51, 169, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 153, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 153, 51, 51, 51, 51, 51, 
	51, 51, 51, 172, 51, 51, 154, 51, 
	173, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 173, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	174, 51, 51, 175, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 147, 148, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 146, 146, 146, 146, 
	146, 146, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 146, 146, 
	146, 176, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 177, 148, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 177, 146, 146, 
	146, 146, 146, 146, 146, 146, 157, 146, 
	146, 156, 146, 146, 146, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 146, 
	146, 146, 146, 146, 146, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 146, 146, 146, 176, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 166, 52, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	166, 51, 51, 51, 51, 51, 51, 51, 
	51, 168, 51, 51, 169, 51, 51, 51, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 51, 51, 51, 51, 51, 51, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 51, 51, 51, 178, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 173, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 173, 51, 51, 51, 51, 
	51, 51, 51, 51, 174, 51, 51, 175, 
	51, 51, 51, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 51, 51, 51, 
	51, 51, 51, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 51, 
	51, 51, 178, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 179, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 179, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 51, 181, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 181, 24, 24, 
	24, 24, 24, 24, 24, 182, 183, 24, 
	24, 184, 24, 24, 24, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	24, 24, 24, 24, 24, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 185, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 10, 187, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 187, 24, 24, 24, 
	24, 24, 24, 24, 24, 188, 24, 24, 
	189, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 190, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 190, 24, 24, 24, 24, 
	24, 24, 24, 182, 191, 24, 24, 192, 
	24, 24, 24, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 186, 24, 24, 
	24, 24, 24, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 185, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 10, 193, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 193, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 119, 119, 119, 119, 
	119, 119, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 194, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 32, 195, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 195, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 32, 32, 32, 32, 32, 
	32, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 32, 32, 32, 
	196, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 28, 57, 10, 10, 
	58, 10, 10, 10, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 10, 10, 
	10, 10, 10, 10, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	10, 10, 10, 197, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 28, 
	63, 10, 10, 64, 10, 10, 10, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 10, 10, 10, 10, 10, 10, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 10, 10, 10, 197, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 181, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 181, 24, 24, 24, 24, 24, 
	24, 24, 24, 183, 24, 24, 184, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	24, 24, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 198, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 10, 190, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 190, 24, 24, 24, 24, 24, 24, 
	24, 24, 191, 24, 24, 192, 24, 24, 
	24, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 24, 24, 24, 24, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	198, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	10, 199, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 45, 
	10, 200, 47, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	200, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 100, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	201, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 201, 
	10, 10, 10, 10, 10, 10, 10, 107, 
	202, 10, 10, 203, 10, 10, 10, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 111, 10, 10, 10, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 10, 10, 10, 110, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 204, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 204, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 85, 85, 85, 85, 
	85, 85, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 85, 85, 
	85, 205, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 206, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 206, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 85, 
	85, 85, 85, 85, 85, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 85, 85, 85, 205, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 207, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 108, 10, 10, 109, 10, 10, 10, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 10, 10, 10, 10, 10, 10, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 10, 10, 10, 208, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 209, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 202, 10, 10, 203, 
	10, 10, 10, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 10, 10, 10, 
	10, 10, 10, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 10, 
	10, 10, 208, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 210, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 210, 24, 
	24, 24, 24, 24, 24, 24, 24, 211, 
	24, 24, 212, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 213, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 214, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	214, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 134, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 10, 
	215, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 215, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 100, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 21, 21, 21, 21, 21, 21, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 216, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 1, 217, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 217, 24, 
	24, 24, 24, 24, 24, 24, 218, 24, 
	24, 24, 24, 24, 24, 24, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	24, 24, 24, 24, 24, 24, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 219, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 1, 220, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 220, 1, 1, 
	1, 1, 1, 1, 1, 31, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 193, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	193, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 119, 119, 119, 119, 119, 119, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 120, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 32, 
	221, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 221, 
	24, 24, 24, 24, 24, 24, 24, 222, 
	223, 24, 24, 224, 24, 24, 24, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 226, 24, 24, 24, 24, 24, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 225, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 10, 227, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 227, 24, 
	24, 24, 24, 24, 24, 24, 24, 228, 
	24, 24, 229, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 230, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 230, 24, 24, 
	24, 24, 24, 24, 24, 222, 231, 24, 
	24, 232, 24, 24, 24, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 226, 
	24, 24, 24, 24, 24, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 225, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 10, 233, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 233, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 102, 102, 
	102, 102, 102, 102, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 234, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 85, 235, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 235, 85, 85, 85, 85, 
	85, 85, 85, 85, 96, 85, 85, 86, 
	85, 85, 85, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 85, 85, 85, 
	85, 85, 85, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 85, 
	85, 85, 236, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 106, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 106, 10, 
	10, 10, 10, 10, 10, 10, 28, 108, 
	10, 10, 109, 10, 10, 10, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	10, 10, 10, 10, 10, 10, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 10, 10, 10, 237, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 201, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 201, 10, 10, 10, 10, 10, 10, 
	10, 28, 202, 10, 10, 203, 10, 10, 
	10, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 10, 10, 10, 10, 10, 
	10, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 10, 10, 10, 
	237, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 221, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 221, 24, 24, 24, 
	24, 24, 24, 24, 24, 223, 24, 24, 
	224, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 24, 24, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 238, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 10, 230, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 230, 24, 24, 24, 24, 
	24, 24, 24, 24, 231, 24, 24, 232, 
	24, 24, 24, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 24, 24, 24, 
	24, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 238, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 10, 207, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 207, 10, 10, 10, 10, 10, 
	10, 10, 239, 108, 10, 10, 109, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 93, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 93, 10, 10, 
	10, 10, 10, 10, 10, 10, 241, 10, 
	10, 94, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 209, 10, 10, 10, 10, 10, 
	10, 10, 239, 202, 10, 10, 203, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 242, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 242, 10, 10, 
	10, 10, 10, 10, 10, 10, 91, 10, 
	10, 92, 10, 10, 45, 10, 243, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 245, 32, 
	32, 84, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 244, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	244, 32, 32, 32, 32, 32, 32, 32, 
	32, 42, 32, 32, 84, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 246, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 246, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 247, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	247, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 117, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	248, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 248, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	249, 7, 7, 250, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 248, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 248, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 251, 7, 
	7, 7, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 7, 7, 
	7, 9, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 86, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 252, 85, 
	85, 253, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 85, 85, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 85, 85, 85, 89, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 254, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	254, 10, 10, 10, 10, 10, 10, 10, 
	10, 91, 10, 10, 92, 10, 255, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 255, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 99, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 248, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 7, 7, 
	7, 7, 7, 7, 7, 256, 7, 7, 
	251, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	257, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 257, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	12, 10, 10, 13, 10, 10, 45, 10, 
	258, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 258, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 259, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 259, 10, 
	260, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 260, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 261, 10, 
	10, 10, 10, 10, 10, 10, 262, 75, 
	10, 10, 76, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 14, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 14, 10, 10, 10, 10, 10, 10, 
	10, 10, 264, 10, 10, 15, 10, 265, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 265, 10, 
	10, 10, 10, 10, 10, 10, 262, 266, 
	10, 10, 267, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 8, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 8, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 7, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 269, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 269, 7, 7, 7, 
	7, 7, 7, 7, 7, 18, 7, 7, 
	17, 7, 7, 7, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 7, 7, 
	7, 7, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	7, 7, 7, 268, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	75, 10, 10, 76, 10, 10, 10, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 10, 10, 10, 10, 10, 10, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 10, 10, 10, 270, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 265, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 265, 10, 10, 10, 10, 10, 
	10, 10, 10, 266, 10, 10, 267, 10, 
	10, 10, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 10, 10, 10, 10, 
	10, 10, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 10, 10, 
	10, 270, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 271, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 271, 10, 10, 
	10, 10, 10, 10, 10, 10, 12, 10, 
	10, 13, 10, 10, 45, 10, 272, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 273, 32, 
	32, 274, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 275, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	275, 10, 10, 10, 10, 10, 10, 10, 
	74, 266, 10, 10, 267, 10, 10, 10, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 78, 10, 10, 10, 10, 10, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 10, 10, 10, 77, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 276, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 276, 24, 24, 24, 24, 
	24, 24, 24, 24, 277, 24, 24, 278, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 279, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 279, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 15, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	1, 1, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 26, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 280, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 280, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 10, 281, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 281, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 21, 21, 
	21, 21, 21, 21, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 216, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 1, 282, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 282, 24, 24, 24, 24, 
	24, 24, 24, 283, 284, 24, 24, 285, 
	24, 24, 24, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 287, 24, 24, 
	24, 24, 24, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 286, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 10, 288, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 288, 24, 24, 24, 24, 24, 
	24, 24, 24, 289, 24, 24, 290, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 291, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 291, 24, 24, 24, 24, 24, 24, 
	24, 283, 292, 24, 24, 293, 24, 24, 
	24, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 287, 24, 24, 24, 24, 
	24, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	286, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	10, 294, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	294, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 69, 69, 69, 69, 69, 69, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 295, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 7, 
	296, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 296, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 7, 7, 7, 7, 7, 7, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 7, 7, 7, 297, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 73, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 73, 10, 10, 10, 10, 10, 
	10, 10, 28, 75, 10, 10, 76, 10, 
	10, 10, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 10, 10, 10, 10, 
	10, 10, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 10, 10, 
	10, 298, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 275, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 275, 10, 10, 
	10, 10, 10, 10, 10, 28, 266, 10, 
	10, 267, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 282, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	282, 24, 24, 24, 24, 24, 24, 24, 
	24, 284, 24, 24, 285, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 24, 24, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 299, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 10, 
	291, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 291, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	292, 24, 24, 293, 24, 24, 24, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 24, 24, 24, 24, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 299, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 10, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 300, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 301, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 301, 1, 302, 1, 1, 1, 
	1, 303, 1, 305, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 306, 304, 308, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 309, 307, 307, 305, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 311, 310, 308, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	313, 312, 312, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 314, 314, 314, 314, 
	314, 314, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 314, 314, 
	314, 316, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 317, 1, 
	315, 318, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 315, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 314, 314, 314, 314, 314, 314, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 314, 314, 314, 319, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 320, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 1, 1, 1, 1, 1, 
	1, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 1, 1, 1, 
	321, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 322, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 1, 1, 1, 
	1, 1, 1, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 1, 
	1, 1, 321, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 324, 
	1, 1, 1, 1, 1, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 1, 1, 1, 323, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 322, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 324, 1, 1, 1, 1, 1, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 1, 1, 1, 323, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 314, 314, 314, 314, 
	314, 314, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 314, 314, 
	314, 319, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	1, 1, 1, 1, 1, 1, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 1, 1, 1, 325, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 326, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 326, 1, 1, 1, 1, 1, 1, 
	1, 327, 1, 1, 1, 1, 1, 1, 
	1, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 1, 1, 1, 1, 1, 
	1, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 1, 1, 1, 
	328, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 1, 1, 
	1, 1, 1, 1, 330, 1, 332, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 332, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 334, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 335, 10, 10, 336, 10, 337, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 337, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 338, 1, 339, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 339, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 331, 331, 331, 331, 
	331, 331, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 331, 331, 
	331, 333, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 340, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 340, 331, 331, 
	331, 331, 331, 331, 331, 331, 341, 331, 
	331, 340, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	342, 10, 10, 10, 10, 10, 10, 10, 
	343, 344, 10, 10, 345, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 337, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 337, 10, 10, 10, 10, 
	10, 10, 10, 10, 348, 10, 10, 338, 
	10, 349, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	349, 10, 10, 10, 10, 10, 10, 10, 
	343, 350, 10, 10, 351, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 332, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 332, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 331, 331, 331, 
	331, 331, 331, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 331, 
	331, 331, 352, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 353, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 353, 331, 
	331, 331, 331, 331, 331, 331, 331, 341, 
	331, 331, 340, 331, 331, 331, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	331, 331, 331, 331, 331, 331, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 331, 331, 331, 352, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 342, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 344, 10, 10, 345, 10, 10, 
	10, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 10, 10, 10, 10, 10, 
	10, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 10, 10, 10, 
	354, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 349, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 349, 10, 10, 10, 
	10, 10, 10, 10, 10, 350, 10, 10, 
	351, 10, 10, 10, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 10, 10, 
	10, 10, 10, 10, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	10, 10, 10, 354, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 1, 1, 1, 1, 1, 1, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 1, 1, 1, 355, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 356, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 356, 1, 1, 1, 1, 
	1, 1, 1, 357, 1, 1, 1, 1, 
	1, 1, 1, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 1, 1, 1, 
	1, 1, 1, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 1, 
	1, 1, 358, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 359, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 359, 1, 
	1, 1, 1, 1, 1, 1, 360, 1, 
	362, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 362, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	367, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 367, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 368, 1, 369, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 369, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 361, 361, 
	361, 361, 361, 361, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	361, 361, 361, 363, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	370, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 370, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 372, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	372, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 373, 10, 10, 10, 10, 10, 10, 
	10, 374, 375, 10, 10, 376, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 367, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 367, 10, 10, 10, 
	10, 10, 10, 10, 10, 379, 10, 10, 
	368, 10, 380, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 380, 10, 10, 10, 10, 10, 10, 
	10, 374, 381, 10, 10, 382, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 362, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 362, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 361, 361, 
	361, 361, 361, 361, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	361, 361, 361, 383, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	384, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 384, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 361, 361, 361, 361, 361, 361, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 361, 361, 361, 383, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 373, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 375, 10, 10, 376, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	10, 10, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 10, 10, 
	10, 385, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 380, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 380, 10, 10, 
	10, 10, 10, 10, 10, 10, 381, 10, 
	10, 382, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 10, 10, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 10, 10, 10, 385, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 1, 
	387, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 1, 389, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 390, 1, 391, 1, 1, 
	392, 394, 393, 1, 35, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 35, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 395, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 1, 1, 1, 1, 1, 1, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 396, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 317, 1, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 334, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	335, 10, 10, 336, 10, 10, 10, 1, 
	1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	143, 139, 0, 6, 137, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 34, 12, 
	11, 12, 13, 14, 15, 13, 14, 15, 
	16, 31, 27, 17, 25, 18, 17, 18, 
	19, 19, 20, 21, 217, 22, 21, 217, 
	22, 23, 24, 24, 217, 26, 26, 17, 
	28, 25, 18, 29, 30, 25, 17, 25, 
	18, 32, 31, 33, 35, 150, 154, 35, 
	36, 37, 38, 137, 7, 149, 142, 37, 
	39, 127, 129, 39, 40, 41, 44, 123, 
	125, 120, 42, 97, 43, 42, 43, 44, 
	45, 46, 46, 47, 64, 48, 104, 111, 
	48, 49, 50, 51, 97, 43, 99, 100, 
	50, 52, 40, 53, 53, 54, 55, 60, 
	88, 55, 56, 57, 58, 59, 57, 20, 
	57, 61, 62, 54, 61, 63, 64, 63, 
	65, 66, 87, 66, 67, 68, 69, 67, 
	68, 69, 70, 84, 218, 80, 71, 78, 
	72, 71, 72, 73, 73, 74, 75, 217, 
	76, 75, 76, 77, 79, 79, 71, 81, 
	78, 72, 82, 83, 78, 71, 78, 72, 
	85, 84, 86, 66, 87, 61, 89, 62, 
	54, 90, 91, 61, 62, 54, 61, 62, 
	54, 92, 95, 92, 93, 94, 96, 98, 
	98, 50, 97, 43, 101, 102, 101, 42, 
	103, 42, 105, 106, 47, 105, 107, 107, 
	108, 109, 110, 108, 109, 105, 112, 106, 
	47, 113, 114, 105, 106, 47, 105, 106, 
	47, 115, 118, 115, 116, 117, 119, 121, 
	122, 97, 124, 124, 126, 52, 128, 128, 
	130, 146, 148, 131, 132, 134, 133, 133, 
	135, 136, 136, 138, 138, 6, 140, 141, 
	137, 6, 137, 7, 144, 143, 145, 147, 
	147, 127, 129, 37, 151, 152, 34, 151, 
	153, 153, 151, 155, 152, 34, 156, 157, 
	151, 152, 34, 151, 152, 34, 158, 161, 
	158, 159, 160, 162, 219, 164, 165, 168, 
	166, 221, 167, 166, 221, 167, 169, 170, 
	169, 170, 172, 173, 176, 222, 223, 174, 
	222, 175, 222, 177, 178, 180, 181, 182, 
	180, 181, 182, 183, 191, 187, 184, 225, 
	185, 184, 185, 186, 186, 224, 184, 188, 
	225, 185, 189, 190, 225, 184, 225, 185, 
	192, 191, 193, 195, 196, 197, 195, 196, 
	197, 198, 208, 204, 199, 203, 200, 199, 
	200, 201, 201, 202, 226, 199, 205, 203, 
	200, 206, 207, 203, 199, 203, 200, 209, 
	208, 210, 212, 227, 212, 228, 214, 215, 
	216, 216, 228, 220, 219
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 1, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 9, 9, 0, 0, 
	0, 9, 9, 14, 15, 16, 0, 17, 
	0, 0, 18, 19, 20, 16, 0, 21, 
	22, 21, 21, 4, 23, 0, 24, 24, 
	24, 25, 9, 26, 12, 13, 27, 9, 
	28, 29, 30, 21, 21, 4, 23, 0, 
	0, 0, 0, 9, 9, 0, 9, 9, 
	9, 6, 9, 9, 9, 0, 0, 0, 
	9, 31, 0, 11, 11, 12, 13, 27, 
	9, 28, 29, 30, 21, 21, 4, 23, 
	0, 0, 0, 32, 0, 11, 12, 13, 
	33, 9, 1, 34, 35, 4, 0, 0, 
	36, 37, 38, 38, 0, 39, 40, 0, 
	13, 41, 42, 19, 43, 44, 45, 46, 
	19, 47, 19, 19, 20, 48, 49, 49, 
	49, 19, 19, 19, 49, 49, 50, 51, 
	52, 19, 19, 19, 52, 19, 53, 54, 
	53, 53, 46, 55, 19, 56, 56, 56, 
	57, 49, 58, 59, 60, 61, 62, 63, 
	63, 64, 65, 12, 13, 13, 66, 67, 
	67, 12, 68, 9, 1, 4, 69, 70, 
	0, 71, 24, 24, 0, 25, 9, 21, 
	26, 24, 72, 73, 73, 0, 74, 0, 
	75, 76, 77, 64, 0, 78, 79, 80, 
	80, 81, 82, 12, 13, 13, 83, 84, 
	84, 12, 85, 9, 86, 4, 87, 22, 
	4, 0, 14, 0, 9, 9, 88, 0, 
	9, 9, 9, 9, 9, 9, 10, 0, 
	9, 31, 0, 89, 0, 21, 22, 4, 
	0, 24, 24, 24, 25, 9, 26, 14, 
	0, 9, 9, 71, 72, 73, 73, 0, 
	90, 0, 78, 79, 80, 80, 81, 82, 
	12, 13, 13, 83, 84, 84, 12, 85, 
	9, 86, 4, 87, 25, 0, 0, 0, 
	91, 92, 91, 0, 93, 0, 91, 91, 
	0, 0, 0, 0, 25, 94, 94, 25, 
	95, 26, 96, 26, 23, 97, 2, 3, 
	4, 0, 5, 0, 0, 6, 9, 98, 
	9, 0, 0, 0, 9, 98, 21, 22, 
	99, 21, 4, 23, 100, 24, 101, 24, 
	25, 9, 26, 1, 2, 3, 4, 0, 
	5, 0, 0, 6, 9, 9, 9, 0, 
	0, 0, 9, 9, 102, 21, 22, 21, 
	21, 4, 23, 0, 24, 24, 24, 25, 
	9, 26, 11, 103, 13, 104, 0, 0, 
	18, 19, 105, 108, 26
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 0, 7, 7, 
	7, 7, 0, 0, 7, 7, 0, 0, 
	7, 7, 0, 7, 7, 0, 0, 7, 
	7, 0, 7, 7, 7, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 0, 0, 0, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 106, 107, 109, 0, 0, 0, 
	106, 106, 106, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 217;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 163;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 164;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 171;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 179;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 194;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 211;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 213;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 26 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 108 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 91 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 100 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 102 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 19 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 104 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 89 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 16 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 17 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 58 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 23 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 22 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 94 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 47 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 103 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 59 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 18 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 20 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 90 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 70 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 15 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 85 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 57 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 81 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 46 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 82 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 96 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 93 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 98 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 73 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 68 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 62 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 88 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 74 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 51 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 71 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 101 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 56 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 45 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 92 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 95 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 77 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 66 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 27 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 48 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 86 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 29 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 99 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 80 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 78 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 1 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 97 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 43 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 75 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 109 then
		begin

    yield @buffers[:ident]
  		end
	when 106 then
		begin

  		end
	when 107 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 47, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 126, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 10, 47, 10, 
	10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 122, 
	9, 47, 9, 47, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 9, 122, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 10, 10, 9, 
	122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 44, 
	10, 122, 0, 0, 0, 
	0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 114, 114, 32, 114, 
	36, 36, 114, 114, 39, 39, 1, 1, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 114, 114, 36, 114, 114, 
	114, 36, 36, 114, 114, 39, 118, 118, 
	114, 114, 36, 114, 39, 118, 118, 114, 
	114, 36, 114, 114, 118, 114, 118, 114, 
	118, 118, 114, 114, 32, 114, 36, 36, 
	114, 114, 39, 39, 38, 1, 39, 39, 
	114, 36, 114, 114, 114, 114, 114, 118, 
	118, 118, 118, 118, 114, 114, 114, 118, 
	118, 39, 118, 114, 114, 114, 114, 114, 
	118, 114, 118, 118, 118, 114, 118, 118, 
	118, 118, 118, 114, 114, 114, 118, 118, 
	114, 36, 114, 39, 39, 114, 114, 36, 
	118, 114, 114, 114, 36, 118, 114, 39, 
	118, 24, 118, 114, 36, 114, 114, 114, 
	114, 114, 39, 39, 114, 114, 118, 114, 
	118, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 75, 31, 59, 59, 0, 
	54, 54, 0, 114, 1, 114, 113, 113, 
	113, 113, 114, 75, 114, 32, 114, 36, 
	36, 114, 114, 114, 36, 114, 114, 114, 
	114, 114, 75, 114, 32, 114, 36, 36, 
	114, 114, 36, 1, 114, 36, 114, 114, 
	114, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 36, 113, 0, 0, 0, 1, 
	36, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 1033, 1148, 1181, 
	1296, 1333, 1370, 1485, 1600, 1640, 1680, 1682, 
	1684, 1686, 1726, 1766, 1881, 1918, 2033, 2148, 
	2263, 2378, 2493, 2612, 2727, 2842, 2879, 2994, 
	3109, 3224, 3261, 3298, 3413, 3528, 3568, 3687, 
	3806, 3921, 4036, 4073, 4188, 4228, 4347, 4466, 
	4581, 4696, 4733, 4848, 4963, 5082, 5197, 5316, 
	5431, 5550, 5669, 5784, 5899, 5932, 6047, 6084, 
	6121, 6236, 6351, 6391, 6431, 6470, 6472, 6512, 
	6552, 6667, 6704, 6819, 6934, 7049, 7164, 7279, 
	7398, 7517, 7636, 7755, 7874, 7989, 8104, 8219, 
	8338, 8457, 8497, 8616, 8731, 8846, 8961, 9076, 
	9191, 9310, 9425, 9544, 9663, 9782, 9897, 10016, 
	10135, 10254, 10373, 10492, 10607, 10722, 10837, 10956, 
	11075, 11190, 11227, 11342, 11382, 11422, 11537, 11652, 
	11689, 11808, 11923, 12038, 12153, 12190, 12309, 12424, 
	12464, 12583, 12608, 12727, 12842, 12879, 12994, 13109, 
	13224, 13339, 13454, 13494, 13534, 13649, 13764, 13883, 
	13998, 14117, 14236, 14355, 14474, 14593, 14712, 14827, 
	14942, 15057, 15176, 15295, 15371, 15403, 15463, 15523, 
	15524, 15579, 15634, 15635, 15750, 15752, 15867, 15981, 
	16095, 16209, 16323, 16438, 16514, 16629, 16662, 16777, 
	16814, 16851, 16966, 17081, 17196, 17233, 17348, 17463, 
	17578, 17693, 17808, 17884, 17999, 18032, 18147, 18184, 
	18221, 18336, 18451, 18488, 18490, 18605, 18642, 18757, 
	18872, 18987, 19102, 19217, 19312, 19430, 19469, 19471, 
	19473, 19475, 19476, 19513, 19627, 19628, 19629, 19630, 
	19632, 19669, 19670, 19671, 19672
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 27, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	28, 1, 1, 1, 1, 1, 1, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 1, 1, 1, 1, 1, 1, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 1, 1, 1, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	35, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 35, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 38, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 1, 40, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 40, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 32, 
	32, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 32, 32, 32, 
	34, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 41, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 41, 32, 32, 32, 
	32, 32, 32, 32, 32, 42, 32, 32, 
	41, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	43, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 43, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 10, 45, 10, 
	46, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 1, 48, 1, 
	49, 1, 1, 50, 52, 51, 53, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 45, 10, 54, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 54, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 48, 1, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 55, 10, 10, 
	10, 10, 10, 10, 10, 56, 57, 10, 
	10, 58, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 38, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	38, 10, 10, 10, 10, 10, 10, 10, 
	10, 61, 10, 10, 39, 10, 62, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 62, 10, 10, 
	10, 10, 10, 10, 10, 56, 63, 10, 
	10, 64, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 32, 32, 32, 32, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 65, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 66, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 66, 32, 32, 32, 32, 
	32, 32, 32, 32, 42, 32, 32, 41, 
	32, 32, 32, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 32, 32, 32, 
	32, 32, 32, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 32, 
	32, 32, 65, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 55, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 57, 
	10, 10, 58, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 10, 10, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 10, 10, 10, 67, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 62, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 63, 10, 10, 64, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 10, 
	10, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 10, 10, 10, 
	67, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 69, 69, 
	69, 69, 69, 69, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 70, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 7, 71, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 71, 7, 7, 7, 7, 
	7, 7, 7, 7, 18, 7, 7, 17, 
	7, 7, 7, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 7, 7, 7, 
	7, 7, 7, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 7, 
	7, 7, 72, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 73, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 73, 10, 
	10, 10, 10, 10, 10, 10, 74, 75, 
	10, 10, 76, 10, 10, 10, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	78, 10, 10, 10, 10, 10, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 10, 10, 10, 77, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 79, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 79, 1, 1, 1, 1, 1, 1, 
	1, 31, 1, 1, 1, 15, 1, 80, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 80, 32, 
	32, 32, 32, 32, 32, 32, 32, 81, 
	32, 32, 82, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 32, 32, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 32, 32, 32, 34, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 83, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 83, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 84, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 32, 
	32, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 32, 32, 32, 
	65, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 87, 85, 85, 
	88, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	90, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 90, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	94, 1, 95, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 95, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 85, 85, 85, 85, 85, 
	85, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 85, 85, 85, 
	89, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 96, 85, 85, 
	86, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	97, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 97, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 10, 45, 10, 
	98, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 99, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 101, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 101, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	102, 102, 102, 102, 102, 102, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 103, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 85, 104, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 104, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 85, 
	85, 85, 85, 85, 85, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 85, 85, 85, 105, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 106, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	106, 10, 10, 10, 10, 10, 10, 10, 
	107, 108, 10, 10, 109, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 111, 10, 10, 10, 10, 10, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 10, 10, 10, 110, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 112, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 1, 1, 94, 
	1, 80, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	80, 32, 32, 32, 32, 32, 32, 32, 
	32, 113, 32, 32, 114, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 115, 44, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 115, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 10, 45, 10, 116, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 117, 
	21, 21, 100, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 1, 118, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 118, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 119, 119, 119, 119, 
	119, 119, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 120, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 32, 121, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 121, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 32, 32, 32, 32, 32, 
	32, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 32, 32, 32, 
	122, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 124, 57, 10, 10, 
	58, 10, 10, 10, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 60, 10, 
	10, 10, 10, 10, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	10, 10, 10, 125, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	126, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 126, 
	1, 1, 1, 1, 1, 1, 1, 31, 
	1, 1, 1, 39, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 127, 32, 32, 
	40, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 124, 
	63, 10, 10, 64, 10, 10, 10, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 60, 10, 10, 10, 10, 10, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 10, 10, 10, 125, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 24, 24, 24, 24, 24, 
	24, 24, 24, 130, 24, 24, 131, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 132, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 1, 
	1, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 1, 1, 1, 1, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	26, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 133, 44, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 133, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 134, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 135, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 48, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 1, 1, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 1, 
	1, 1, 26, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 136, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 137, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 137, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 50, 139, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 139, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 51, 51, 
	51, 51, 51, 51, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	51, 51, 51, 140, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	141, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 141, 
	51, 51, 51, 51, 51, 51, 51, 142, 
	51, 51, 51, 51, 51, 51, 51, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 51, 51, 51, 51, 51, 51, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 51, 51, 51, 143, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 144, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 144, 51, 51, 51, 51, 51, 
	51, 51, 145, 51, 147, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 150, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 150, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 153, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 153, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 154, 
	51, 155, 148, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	155, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 146, 146, 146, 146, 146, 146, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 146, 146, 146, 149, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 156, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 156, 146, 146, 146, 146, 
	146, 146, 146, 146, 157, 146, 146, 156, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 158, 
	159, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 158, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 51, 160, 51, 161, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 161, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 154, 51, 51, 162, 51, 52, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 163, 51, 52, 50, 
	164, 159, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 164, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 160, 51, 
	165, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 165, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 162, 51, 
	166, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 166, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	168, 51, 51, 169, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 153, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 153, 51, 51, 51, 51, 51, 
	51, 51, 51, 172, 51, 51, 154, 51, 
	173, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 173, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	174, 51, 51, 175, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 147, 148, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 146, 146, 146, 146, 
	146, 146, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 146, 146, 
	146, 176, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 177, 148, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 177, 146, 146, 
	146, 146, 146, 146, 146, 146, 157, 146, 
	146, 156, 146, 146, 146, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 146, 
	146, 146, 146, 146, 146, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 146, 146, 146, 176, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 166, 52, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	166, 51, 51, 51, 51, 51, 51, 51, 
	51, 168, 51, 51, 169, 51, 51, 51, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 51, 51, 51, 51, 51, 51, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 51, 51, 51, 178, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 173, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 173, 51, 51, 51, 51, 
	51, 51, 51, 51, 174, 51, 51, 175, 
	51, 51, 51, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 51, 51, 51, 
	51, 51, 51, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 51, 
	51, 51, 178, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 179, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 179, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 51, 181, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 181, 24, 24, 
	24, 24, 24, 24, 24, 182, 183, 24, 
	24, 184, 24, 24, 24, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	24, 24, 24, 24, 24, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 185, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 10, 187, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 187, 24, 24, 24, 
	24, 24, 24, 24, 24, 188, 24, 24, 
	189, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 190, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 190, 24, 24, 24, 24, 
	24, 24, 24, 182, 191, 24, 24, 192, 
	24, 24, 24, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 186, 24, 24, 
	24, 24, 24, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 185, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 10, 193, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 193, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 119, 119, 119, 119, 
	119, 119, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 194, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 32, 195, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 195, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 32, 32, 32, 32, 32, 
	32, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 32, 32, 32, 
	196, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 28, 57, 10, 10, 
	58, 10, 10, 10, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 10, 10, 
	10, 10, 10, 10, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	10, 10, 10, 197, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 28, 
	63, 10, 10, 64, 10, 10, 10, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 10, 10, 10, 10, 10, 10, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 10, 10, 10, 197, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 181, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 181, 24, 24, 24, 24, 24, 
	24, 24, 24, 183, 24, 24, 184, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	24, 24, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 198, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 10, 190, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 190, 24, 24, 24, 24, 24, 24, 
	24, 24, 191, 24, 24, 192, 24, 24, 
	24, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 24, 24, 24, 24, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	198, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	10, 199, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 45, 
	10, 200, 47, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	200, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 100, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	201, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 201, 
	10, 10, 10, 10, 10, 10, 10, 107, 
	202, 10, 10, 203, 10, 10, 10, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 111, 10, 10, 10, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 10, 10, 10, 110, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 204, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 204, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 85, 85, 85, 85, 
	85, 85, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 85, 85, 
	85, 205, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 206, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 206, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 85, 
	85, 85, 85, 85, 85, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 85, 85, 85, 205, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 207, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 108, 10, 10, 109, 10, 10, 10, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 10, 10, 10, 10, 10, 10, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 10, 10, 10, 208, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 209, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 202, 10, 10, 203, 
	10, 10, 10, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 10, 10, 10, 
	10, 10, 10, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 10, 
	10, 10, 208, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 210, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 210, 24, 
	24, 24, 24, 24, 24, 24, 24, 211, 
	24, 24, 212, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 213, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 214, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	214, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 134, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 10, 
	215, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 215, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 100, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 21, 21, 21, 21, 21, 21, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 216, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 1, 217, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 217, 24, 
	24, 24, 24, 24, 24, 24, 218, 24, 
	24, 24, 24, 24, 24, 24, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	24, 24, 24, 24, 24, 24, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 219, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 1, 220, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 220, 1, 1, 
	1, 1, 1, 1, 1, 31, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 193, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	193, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 119, 119, 119, 119, 119, 119, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 120, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 32, 
	221, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 221, 
	24, 24, 24, 24, 24, 24, 24, 222, 
	223, 24, 24, 224, 24, 24, 24, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 226, 24, 24, 24, 24, 24, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 225, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 10, 227, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 227, 24, 
	24, 24, 24, 24, 24, 24, 24, 228, 
	24, 24, 229, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 230, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 230, 24, 24, 
	24, 24, 24, 24, 24, 222, 231, 24, 
	24, 232, 24, 24, 24, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 226, 
	24, 24, 24, 24, 24, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 225, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 10, 233, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 233, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 102, 102, 
	102, 102, 102, 102, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 234, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 85, 235, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 235, 85, 85, 85, 85, 
	85, 85, 85, 85, 96, 85, 85, 86, 
	85, 85, 85, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 85, 85, 85, 
	85, 85, 85, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 85, 
	85, 85, 236, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 106, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 106, 10, 
	10, 10, 10, 10, 10, 10, 28, 108, 
	10, 10, 109, 10, 10, 10, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	10, 10, 10, 10, 10, 10, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 10, 10, 10, 237, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 201, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 201, 10, 10, 10, 10, 10, 10, 
	10, 28, 202, 10, 10, 203, 10, 10, 
	10, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 10, 10, 10, 10, 10, 
	10, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 10, 10, 10, 
	237, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 221, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 221, 24, 24, 24, 
	24, 24, 24, 24, 24, 223, 24, 24, 
	224, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 24, 24, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 238, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 10, 230, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 230, 24, 24, 24, 24, 
	24, 24, 24, 24, 231, 24, 24, 232, 
	24, 24, 24, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 24, 24, 24, 
	24, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 238, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 10, 207, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 207, 10, 10, 10, 10, 10, 
	10, 10, 239, 108, 10, 10, 109, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 93, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 93, 10, 10, 
	10, 10, 10, 10, 10, 10, 241, 10, 
	10, 94, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 209, 10, 10, 10, 10, 10, 
	10, 10, 239, 202, 10, 10, 203, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 242, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 242, 10, 10, 
	10, 10, 10, 10, 10, 10, 91, 10, 
	10, 92, 10, 10, 45, 10, 243, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 245, 32, 
	32, 84, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 244, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	244, 32, 32, 32, 32, 32, 32, 32, 
	32, 42, 32, 32, 84, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 246, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 246, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 247, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	247, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 117, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	248, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 248, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	249, 7, 7, 250, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 248, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 248, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 251, 7, 
	7, 7, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 7, 7, 
	7, 9, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 86, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 252, 85, 
	85, 253, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 85, 85, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 85, 85, 85, 89, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 254, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	254, 10, 10, 10, 10, 10, 10, 10, 
	10, 91, 10, 10, 92, 10, 255, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 255, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 99, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 248, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 7, 7, 
	7, 7, 7, 7, 7, 256, 7, 7, 
	251, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	257, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 257, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	12, 10, 10, 13, 10, 10, 45, 10, 
	258, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 258, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 259, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 259, 10, 
	260, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 260, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 261, 10, 
	10, 10, 10, 10, 10, 10, 262, 75, 
	10, 10, 76, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 14, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 14, 10, 10, 10, 10, 10, 10, 
	10, 10, 264, 10, 10, 15, 10, 265, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 265, 10, 
	10, 10, 10, 10, 10, 10, 262, 266, 
	10, 10, 267, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 8, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 8, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 7, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 269, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 269, 7, 7, 7, 
	7, 7, 7, 7, 7, 18, 7, 7, 
	17, 7, 7, 7, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 7, 7, 
	7, 7, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	7, 7, 7, 268, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	75, 10, 10, 76, 10, 10, 10, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 10, 10, 10, 10, 10, 10, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 10, 10, 10, 270, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 265, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 265, 10, 10, 10, 10, 10, 
	10, 10, 10, 266, 10, 10, 267, 10, 
	10, 10, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 10, 10, 10, 10, 
	10, 10, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 10, 10, 
	10, 270, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 271, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 271, 10, 10, 
	10, 10, 10, 10, 10, 10, 12, 10, 
	10, 13, 10, 10, 45, 10, 272, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 273, 32, 
	32, 274, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 275, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	275, 10, 10, 10, 10, 10, 10, 10, 
	74, 266, 10, 10, 267, 10, 10, 10, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 78, 10, 10, 10, 10, 10, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 10, 10, 10, 77, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 276, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 276, 24, 24, 24, 24, 
	24, 24, 24, 24, 277, 24, 24, 278, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 279, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 279, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 15, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	1, 1, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 26, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 280, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 280, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 10, 281, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 281, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 21, 21, 
	21, 21, 21, 21, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 216, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 1, 282, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 282, 24, 24, 24, 24, 
	24, 24, 24, 283, 284, 24, 24, 285, 
	24, 24, 24, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 287, 24, 24, 
	24, 24, 24, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 286, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 10, 288, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 288, 24, 24, 24, 24, 24, 
	24, 24, 24, 289, 24, 24, 290, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 291, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 291, 24, 24, 24, 24, 24, 24, 
	24, 283, 292, 24, 24, 293, 24, 24, 
	24, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 287, 24, 24, 24, 24, 
	24, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	286, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	10, 294, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	294, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 69, 69, 69, 69, 69, 69, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 295, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 7, 
	296, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 296, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 7, 7, 7, 7, 7, 7, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 7, 7, 7, 297, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 73, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 73, 10, 10, 10, 10, 10, 
	10, 10, 28, 75, 10, 10, 76, 10, 
	10, 10, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 10, 10, 10, 10, 
	10, 10, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 10, 10, 
	10, 298, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 275, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 275, 10, 10, 
	10, 10, 10, 10, 10, 28, 266, 10, 
	10, 267, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 282, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	282, 24, 24, 24, 24, 24, 24, 24, 
	24, 284, 24, 24, 285, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 24, 24, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 299, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 10, 
	291, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 291, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	292, 24, 24, 293, 24, 24, 24, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 24, 24, 24, 24, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 299, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 10, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 300, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 301, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 301, 1, 302, 1, 1, 1, 
	1, 303, 1, 305, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 306, 304, 308, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 309, 307, 307, 305, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 311, 310, 308, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	313, 312, 312, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 314, 314, 314, 314, 
	314, 314, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 314, 314, 
	314, 316, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 317, 1, 
	315, 318, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 315, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 314, 314, 314, 314, 314, 314, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 314, 314, 314, 319, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 320, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 1, 1, 1, 1, 1, 
	1, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 1, 1, 1, 
	321, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 322, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 1, 1, 1, 
	1, 1, 1, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 1, 
	1, 1, 321, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 324, 
	1, 1, 1, 1, 1, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 1, 1, 1, 323, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 322, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 324, 1, 1, 1, 1, 1, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 1, 1, 1, 323, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 314, 314, 314, 314, 
	314, 314, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 314, 314, 
	314, 319, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	1, 1, 1, 1, 1, 1, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 1, 1, 1, 325, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 326, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 326, 1, 1, 1, 1, 1, 1, 
	1, 327, 1, 1, 1, 1, 1, 1, 
	1, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 1, 1, 1, 1, 1, 
	1, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 1, 1, 1, 
	328, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 1, 1, 
	1, 1, 1, 1, 330, 1, 332, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 332, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 334, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 335, 10, 10, 336, 10, 337, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 337, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 338, 1, 339, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 339, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 331, 331, 331, 331, 
	331, 331, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 331, 331, 
	331, 333, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 340, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 340, 331, 331, 
	331, 331, 331, 331, 331, 331, 341, 331, 
	331, 340, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	342, 10, 10, 10, 10, 10, 10, 10, 
	343, 344, 10, 10, 345, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 337, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 337, 10, 10, 10, 10, 
	10, 10, 10, 10, 348, 10, 10, 338, 
	10, 349, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	349, 10, 10, 10, 10, 10, 10, 10, 
	343, 350, 10, 10, 351, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 332, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 332, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 331, 331, 331, 
	331, 331, 331, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 331, 
	331, 331, 352, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 353, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 353, 331, 
	331, 331, 331, 331, 331, 331, 331, 341, 
	331, 331, 340, 331, 331, 331, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	331, 331, 331, 331, 331, 331, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 331, 331, 331, 352, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 342, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 344, 10, 10, 345, 10, 10, 
	10, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 10, 10, 10, 10, 10, 
	10, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 10, 10, 10, 
	354, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 349, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 349, 10, 10, 10, 
	10, 10, 10, 10, 10, 350, 10, 10, 
	351, 10, 10, 10, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 10, 10, 
	10, 10, 10, 10, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	10, 10, 10, 354, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 1, 1, 1, 1, 1, 1, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 1, 1, 1, 355, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 356, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 356, 1, 1, 1, 1, 
	1, 1, 1, 357, 1, 1, 1, 1, 
	1, 1, 1, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 1, 1, 1, 
	1, 1, 1, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 1, 
	1, 1, 358, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 359, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 359, 1, 
	1, 1, 1, 1, 1, 1, 360, 1, 
	362, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 362, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	367, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 367, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 368, 1, 369, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 369, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 361, 361, 
	361, 361, 361, 361, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	361, 361, 361, 363, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	370, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 370, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 372, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	372, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 373, 10, 10, 10, 10, 10, 10, 
	10, 374, 375, 10, 10, 376, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 367, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 367, 10, 10, 10, 
	10, 10, 10, 10, 10, 379, 10, 10, 
	368, 10, 380, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 380, 10, 10, 10, 10, 10, 10, 
	10, 374, 381, 10, 10, 382, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 362, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 362, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 361, 361, 
	361, 361, 361, 361, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	361, 361, 361, 383, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	384, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 384, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 361, 361, 361, 361, 361, 361, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 361, 361, 361, 383, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 373, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 375, 10, 10, 376, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	10, 10, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 10, 10, 
	10, 385, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 380, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 380, 10, 10, 
	10, 10, 10, 10, 10, 10, 381, 10, 
	10, 382, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 10, 10, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 10, 10, 10, 385, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 1, 
	387, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 1, 389, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 390, 1, 391, 1, 1, 
	392, 394, 393, 1, 35, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 35, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 395, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 1, 1, 1, 1, 1, 1, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 396, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 317, 1, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 334, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	335, 10, 10, 336, 10, 10, 10, 1, 
	1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	143, 139, 0, 6, 137, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 34, 12, 
	11, 12, 13, 14, 15, 13, 14, 15, 
	16, 31, 27, 17, 25, 18, 17, 18, 
	19, 19, 20, 21, 217, 22, 21, 217, 
	22, 23, 24, 24, 217, 26, 26, 17, 
	28, 25, 18, 29, 30, 25, 17, 25, 
	18, 32, 31, 33, 35, 150, 154, 35, 
	36, 37, 38, 137, 7, 149, 142, 37, 
	39, 127, 129, 39, 40, 41, 44, 123, 
	125, 120, 42, 97, 43, 42, 43, 44, 
	45, 46, 46, 47, 64, 48, 104, 111, 
	48, 49, 50, 51, 97, 43, 99, 100, 
	50, 52, 40, 53, 53, 54, 55, 60, 
	88, 55, 56, 57, 58, 59, 57, 20, 
	57, 61, 62, 54, 61, 63, 64, 63, 
	65, 66, 87, 66, 67, 68, 69, 67, 
	68, 69, 70, 84, 218, 80, 71, 78, 
	72, 71, 72, 73, 73, 74, 75, 217, 
	76, 75, 76, 77, 79, 79, 71, 81, 
	78, 72, 82, 83, 78, 71, 78, 72, 
	85, 84, 86, 66, 87, 61, 89, 62, 
	54, 90, 91, 61, 62, 54, 61, 62, 
	54, 92, 95, 92, 93, 94, 96, 98, 
	98, 50, 97, 43, 101, 102, 101, 42, 
	103, 42, 105, 106, 47, 105, 107, 107, 
	108, 109, 110, 108, 109, 105, 112, 106, 
	47, 113, 114, 105, 106, 47, 105, 106, 
	47, 115, 118, 115, 116, 117, 119, 121, 
	122, 97, 124, 124, 126, 52, 128, 128, 
	130, 146, 148, 131, 132, 134, 133, 133, 
	135, 136, 136, 138, 138, 6, 140, 141, 
	137, 6, 137, 7, 144, 143, 145, 147, 
	147, 127, 129, 37, 151, 152, 34, 151, 
	153, 153, 151, 155, 152, 34, 156, 157, 
	151, 152, 34, 151, 152, 34, 158, 161, 
	158, 159, 160, 162, 219, 164, 165, 168, 
	166, 221, 167, 166, 221, 167, 169, 170, 
	169, 170, 172, 173, 176, 222, 223, 174, 
	222, 175, 222, 177, 178, 180, 181, 182, 
	180, 181, 182, 183, 191, 187, 184, 225, 
	185, 184, 185, 186, 186, 224, 184, 188, 
	225, 185, 189, 190, 225, 184, 225, 185, 
	192, 191, 193, 195, 196, 197, 195, 196, 
	197, 198, 208, 204, 199, 203, 200, 199, 
	200, 201, 201, 202, 226, 199, 205, 203, 
	200, 206, 207, 203, 199, 203, 200, 209, 
	208, 210, 212, 227, 212, 228, 214, 215, 
	216, 216, 228, 220, 219
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 1, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 9, 9, 0, 0, 
	0, 9, 9, 14, 15, 16, 0, 17, 
	0, 0, 18, 19, 20, 16, 0, 21, 
	22, 21, 21, 4, 23, 0, 24, 24, 
	24, 25, 9, 26, 12, 13, 27, 9, 
	28, 29, 30, 21, 21, 4, 23, 0, 
	0, 0, 0, 9, 9, 0, 9, 9, 
	9, 6, 9, 9, 9, 0, 0, 0, 
	9, 31, 0, 11, 11, 12, 13, 27, 
	9, 28, 29, 30, 21, 21, 4, 23, 
	0, 0, 0, 32, 0, 11, 12, 13, 
	33, 9, 1, 34, 35, 4, 0, 0, 
	36, 37, 38, 38, 0, 39, 40, 0, 
	13, 41, 42, 19, 43, 44, 45, 46, 
	19, 47, 19, 19, 20, 48, 49, 49, 
	49, 19, 19, 19, 49, 49, 50, 51, 
	52, 19, 19, 19, 52, 19, 53, 54, 
	53, 53, 46, 55, 19, 56, 56, 56, 
	57, 49, 58, 59, 60, 61, 62, 63, 
	63, 64, 65, 12, 13, 13, 66, 67, 
	67, 12, 68, 9, 1, 4, 69, 70, 
	0, 71, 24, 24, 0, 25, 9, 21, 
	26, 24, 72, 73, 73, 0, 74, 0, 
	75, 76, 77, 64, 0, 78, 79, 80, 
	80, 81, 82, 12, 13, 13, 83, 84, 
	84, 12, 85, 9, 86, 4, 87, 22, 
	4, 0, 14, 0, 9, 9, 88, 0, 
	9, 9, 9, 9, 9, 9, 10, 0, 
	9, 31, 0, 89, 0, 21, 22, 4, 
	0, 24, 24, 24, 25, 9, 26, 14, 
	0, 9, 9, 71, 72, 73, 73, 0, 
	90, 0, 78, 79, 80, 80, 81, 82, 
	12, 13, 13, 83, 84, 84, 12, 85, 
	9, 86, 4, 87, 25, 0, 0, 0, 
	91, 92, 91, 0, 93, 0, 91, 91, 
	0, 0, 0, 0, 25, 94, 94, 25, 
	95, 26, 96, 26, 23, 97, 2, 3, 
	4, 0, 5, 0, 0, 6, 9, 98, 
	9, 0, 0, 0, 9, 98, 21, 22, 
	99, 21, 4, 23, 100, 24, 101, 24, 
	25, 9, 26, 1, 2, 3, 4, 0, 
	5, 0, 0, 6, 9, 9, 9, 0, 
	0, 0, 9, 9, 102, 21, 22, 21, 
	21, 4, 23, 0, 24, 24, 24, 25, 
	9, 26, 11, 103, 13, 104, 0, 0, 
	18, 19, 105, 108, 26
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 0, 7, 7, 
	7, 7, 0, 0, 7, 7, 0, 0, 
	7, 7, 0, 7, 7, 0, 0, 7, 
	7, 0, 7, 7, 7, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 0, 0, 0, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 106, 107, 109, 0, 0, 0, 
	106, 106, 106, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 217;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 163;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 164;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 171;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 179;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 194;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 211;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 213;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 26 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 108 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 91 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 100 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 102 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 19 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 104 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 89 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 16 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 17 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 58 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 23 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 22 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 94 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 47 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 103 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 59 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 18 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 20 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 90 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 70 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 15 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 85 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 57 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 81 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 46 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 82 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 96 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 93 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 98 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 73 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 68 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 62 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 88 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 74 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 51 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 71 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 101 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 56 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 45 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 92 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 95 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 77 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 66 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 27 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 48 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 86 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 29 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 99 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 80 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 78 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 1 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 97 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 43 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 75 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 109 then
		begin

    yield @buffers[:ident]
  		end
	when 106 then
		begin

  		end
	when 107 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module SimpleStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 47, 9, 
	47, 47, 47, 10, 10, 
	10, 10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 126, 
	9, 122, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	47, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 47, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 126, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 10, 47, 10, 
	10, 9, 47, 9, 47, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 122, 9, 126, 
	9, 126, 9, 47, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 122, 9, 122, 
	9, 126, 9, 122, 9, 126, 
	9, 126, 9, 126, 9, 
	122, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 9, 126, 9, 126, 
	9, 122, 9, 44, 9, 122, 
	9, 47, 9, 47, 9, 
	122, 9, 122, 9, 44, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	126, 9, 122, 9, 47, 
	9, 126, 9, 32, 9, 126, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 47, 
	9, 47, 9, 122, 9, 
	122, 9, 126, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 122, 9, 126, 9, 126, 
	48, 122, 9, 39, 34, 
	92, 34, 92, 0, 0, 
	39, 92, 39, 92, 0, 0, 
	9, 122, 10, 10, 9, 
	122, 10, 122, 10, 122, 
	10, 122, 10, 122, 9, 122, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 122, 9, 44, 9, 
	122, 9, 122, 9, 122, 
	9, 122, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 9, 122, 9, 
	44, 9, 122, 9, 122, 
	9, 122, 9, 122, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 44, 
	10, 122, 0, 0, 0, 
	0, 0, 0, 10, 10, 
	9, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 36, 36, 114, 
	114, 36, 118, 118, 114, 114, 32, 114, 
	36, 36, 114, 114, 39, 39, 1, 1, 
	1, 39, 39, 114, 36, 114, 114, 114, 
	114, 114, 118, 114, 114, 36, 114, 114, 
	114, 36, 36, 114, 114, 39, 118, 118, 
	114, 114, 36, 114, 39, 118, 118, 114, 
	114, 36, 114, 114, 118, 114, 118, 114, 
	118, 118, 114, 114, 32, 114, 36, 36, 
	114, 114, 39, 39, 38, 1, 39, 39, 
	114, 36, 114, 114, 114, 114, 114, 118, 
	118, 118, 118, 118, 114, 114, 114, 118, 
	118, 39, 118, 114, 114, 114, 114, 114, 
	118, 114, 118, 118, 118, 114, 118, 118, 
	118, 118, 118, 114, 114, 114, 118, 118, 
	114, 36, 114, 39, 39, 114, 114, 36, 
	118, 114, 114, 114, 36, 118, 114, 39, 
	118, 24, 118, 114, 36, 114, 114, 114, 
	114, 114, 39, 39, 114, 114, 118, 114, 
	118, 118, 118, 118, 118, 118, 114, 114, 
	114, 118, 118, 75, 31, 59, 59, 0, 
	54, 54, 0, 114, 1, 114, 113, 113, 
	113, 113, 114, 75, 114, 32, 114, 36, 
	36, 114, 114, 114, 36, 114, 114, 114, 
	114, 114, 75, 114, 32, 114, 36, 36, 
	114, 114, 36, 1, 114, 36, 114, 114, 
	114, 114, 114, 94, 117, 38, 1, 1, 
	1, 0, 36, 113, 0, 0, 0, 1, 
	36, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 376, 413, 
	528, 643, 680, 799, 918, 1033, 1148, 1181, 
	1296, 1333, 1370, 1485, 1600, 1640, 1680, 1682, 
	1684, 1686, 1726, 1766, 1881, 1918, 2033, 2148, 
	2263, 2378, 2493, 2612, 2727, 2842, 2879, 2994, 
	3109, 3224, 3261, 3298, 3413, 3528, 3568, 3687, 
	3806, 3921, 4036, 4073, 4188, 4228, 4347, 4466, 
	4581, 4696, 4733, 4848, 4963, 5082, 5197, 5316, 
	5431, 5550, 5669, 5784, 5899, 5932, 6047, 6084, 
	6121, 6236, 6351, 6391, 6431, 6470, 6472, 6512, 
	6552, 6667, 6704, 6819, 6934, 7049, 7164, 7279, 
	7398, 7517, 7636, 7755, 7874, 7989, 8104, 8219, 
	8338, 8457, 8497, 8616, 8731, 8846, 8961, 9076, 
	9191, 9310, 9425, 9544, 9663, 9782, 9897, 10016, 
	10135, 10254, 10373, 10492, 10607, 10722, 10837, 10956, 
	11075, 11190, 11227, 11342, 11382, 11422, 11537, 11652, 
	11689, 11808, 11923, 12038, 12153, 12190, 12309, 12424, 
	12464, 12583, 12608, 12727, 12842, 12879, 12994, 13109, 
	13224, 13339, 13454, 13494, 13534, 13649, 13764, 13883, 
	13998, 14117, 14236, 14355, 14474, 14593, 14712, 14827, 
	14942, 15057, 15176, 15295, 15371, 15403, 15463, 15523, 
	15524, 15579, 15634, 15635, 15750, 15752, 15867, 15981, 
	16095, 16209, 16323, 16438, 16514, 16629, 16662, 16777, 
	16814, 16851, 16966, 17081, 17196, 17233, 17348, 17463, 
	17578, 17693, 17808, 17884, 17999, 18032, 18147, 18184, 
	18221, 18336, 18451, 18488, 18490, 18605, 18642, 18757, 
	18872, 18987, 19102, 19217, 19312, 19430, 19469, 19471, 
	19473, 19475, 19476, 19513, 19627, 19628, 19629, 19630, 
	19632, 19669, 19670, 19671, 19672
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 11, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 11, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 1, 16, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 16, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	17, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 17, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 19, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 19, 10, 10, 10, 10, 10, 
	10, 10, 10, 12, 10, 10, 13, 10, 
	20, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 20, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 25, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 25, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 27, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	27, 1, 1, 1, 1, 1, 1, 1, 
	28, 1, 1, 1, 1, 1, 1, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 1, 1, 1, 1, 1, 1, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 1, 1, 1, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 1, 30, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 30, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	35, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 35, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 38, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	39, 1, 40, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 40, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 32, 
	32, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 32, 32, 32, 
	34, 32, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 32, 41, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 41, 32, 32, 32, 
	32, 32, 32, 32, 32, 42, 32, 32, 
	41, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	43, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 43, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	36, 10, 10, 37, 10, 10, 45, 10, 
	46, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 1, 48, 1, 
	49, 1, 1, 50, 52, 51, 53, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 53, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 45, 10, 54, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 54, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 48, 1, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 55, 10, 10, 
	10, 10, 10, 10, 10, 56, 57, 10, 
	10, 58, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 38, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	38, 10, 10, 10, 10, 10, 10, 10, 
	10, 61, 10, 10, 39, 10, 62, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 62, 10, 10, 
	10, 10, 10, 10, 10, 56, 63, 10, 
	10, 64, 10, 10, 10, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 60, 
	10, 10, 10, 10, 10, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 10, 10, 10, 59, 10, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	10, 33, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 32, 32, 32, 32, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 65, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 66, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 66, 32, 32, 32, 32, 
	32, 32, 32, 32, 42, 32, 32, 41, 
	32, 32, 32, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 32, 32, 32, 
	32, 32, 32, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 32, 
	32, 32, 65, 32, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 32, 55, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 55, 10, 
	10, 10, 10, 10, 10, 10, 10, 57, 
	10, 10, 58, 10, 10, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	10, 10, 10, 10, 10, 10, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 10, 10, 10, 67, 10, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 10, 62, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 62, 10, 10, 10, 10, 10, 10, 
	10, 10, 63, 10, 10, 64, 10, 10, 
	10, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 10, 10, 10, 10, 10, 
	10, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 10, 10, 10, 
	67, 10, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 10, 68, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 69, 69, 
	69, 69, 69, 69, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 70, 69, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 69, 
	69, 69, 69, 7, 71, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 71, 7, 7, 7, 7, 
	7, 7, 7, 7, 18, 7, 7, 17, 
	7, 7, 7, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 7, 7, 7, 
	7, 7, 7, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 7, 
	7, 7, 72, 7, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 7, 73, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 73, 10, 
	10, 10, 10, 10, 10, 10, 74, 75, 
	10, 10, 76, 10, 10, 10, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	78, 10, 10, 10, 10, 10, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 10, 10, 10, 77, 10, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 10, 79, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 79, 1, 1, 1, 1, 1, 1, 
	1, 31, 1, 1, 1, 15, 1, 80, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 80, 32, 
	32, 32, 32, 32, 32, 32, 32, 81, 
	32, 32, 82, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 32, 32, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 32, 32, 32, 34, 32, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 32, 83, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 83, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 84, 32, 32, 
	32, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 32, 32, 32, 32, 32, 
	32, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 32, 32, 32, 
	65, 32, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 32, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 87, 85, 85, 
	88, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	90, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 90, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 93, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 93, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	94, 1, 95, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 95, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 85, 85, 85, 85, 85, 
	85, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 85, 85, 85, 
	89, 85, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 96, 85, 85, 
	86, 85, 85, 85, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 85, 85, 
	85, 85, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 89, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	97, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 97, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	91, 10, 10, 92, 10, 10, 45, 10, 
	98, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 98, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 99, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 101, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 101, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	102, 102, 102, 102, 102, 102, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 103, 102, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 102, 102, 102, 102, 85, 104, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 104, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 85, 
	85, 85, 85, 85, 85, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 85, 85, 85, 105, 85, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	85, 106, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	106, 10, 10, 10, 10, 10, 10, 10, 
	107, 108, 10, 10, 109, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 111, 10, 10, 10, 10, 10, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 10, 10, 10, 110, 
	10, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 10, 112, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 112, 1, 1, 1, 1, 
	1, 1, 1, 31, 1, 1, 1, 94, 
	1, 80, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	80, 32, 32, 32, 32, 32, 32, 32, 
	32, 113, 32, 32, 114, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 115, 44, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 115, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 10, 45, 10, 116, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 116, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 117, 
	21, 21, 100, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 1, 118, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 118, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 119, 119, 119, 119, 
	119, 119, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 120, 119, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 119, 119, 119, 
	119, 32, 121, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 121, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 32, 32, 32, 32, 32, 
	32, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 32, 32, 32, 
	122, 32, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 124, 57, 10, 10, 
	58, 10, 10, 10, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 60, 10, 
	10, 10, 10, 10, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	10, 10, 10, 125, 10, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 10, 
	126, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 126, 
	1, 1, 1, 1, 1, 1, 1, 31, 
	1, 1, 1, 39, 1, 33, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 33, 32, 32, 32, 
	32, 32, 32, 32, 32, 127, 32, 32, 
	40, 32, 32, 32, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 32, 32, 
	32, 32, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 34, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 124, 
	63, 10, 10, 64, 10, 10, 10, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 60, 10, 10, 10, 10, 10, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 10, 10, 10, 125, 10, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 10, 129, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 129, 24, 24, 24, 24, 24, 
	24, 24, 24, 130, 24, 24, 131, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 132, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 132, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 1, 
	1, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 1, 1, 1, 1, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	26, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 133, 44, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 133, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 134, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 135, 47, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 48, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 1, 1, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 1, 
	1, 1, 26, 1, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 23, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 23, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 136, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 1, 137, 1, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 137, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 50, 139, 52, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 139, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 51, 51, 
	51, 51, 51, 51, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	51, 51, 51, 140, 51, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 51, 
	141, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 141, 
	51, 51, 51, 51, 51, 51, 51, 142, 
	51, 51, 51, 51, 51, 51, 51, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 51, 51, 51, 51, 51, 51, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 51, 51, 51, 143, 51, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 51, 144, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 144, 51, 51, 51, 51, 51, 
	51, 51, 145, 51, 147, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 147, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 150, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 150, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 153, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 153, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 154, 
	51, 155, 148, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	155, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 146, 146, 146, 146, 146, 146, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 146, 146, 146, 149, 
	146, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 146, 156, 148, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 156, 146, 146, 146, 146, 
	146, 146, 146, 146, 157, 146, 146, 156, 
	146, 146, 146, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 146, 146, 146, 
	146, 146, 146, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 146, 
	146, 146, 149, 146, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 146, 158, 
	159, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 158, 51, 
	51, 51, 51, 51, 51, 51, 51, 151, 
	51, 51, 152, 51, 51, 160, 51, 161, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 161, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 154, 51, 51, 162, 51, 52, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 163, 51, 52, 50, 
	164, 159, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 164, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 160, 51, 
	165, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 165, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 162, 51, 
	166, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 166, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	168, 51, 51, 169, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 153, 52, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 153, 51, 51, 51, 51, 51, 
	51, 51, 51, 172, 51, 51, 154, 51, 
	173, 52, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 173, 
	51, 51, 51, 51, 51, 51, 51, 167, 
	174, 51, 51, 175, 51, 51, 51, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 171, 51, 51, 51, 51, 51, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 51, 51, 51, 170, 51, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 51, 147, 148, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 146, 146, 146, 146, 
	146, 146, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 146, 146, 
	146, 176, 146, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 146, 177, 148, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 177, 146, 146, 
	146, 146, 146, 146, 146, 146, 157, 146, 
	146, 156, 146, 146, 146, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 146, 
	146, 146, 146, 146, 146, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 146, 146, 146, 176, 146, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	146, 166, 52, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	166, 51, 51, 51, 51, 51, 51, 51, 
	51, 168, 51, 51, 169, 51, 51, 51, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 51, 51, 51, 51, 51, 51, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 51, 51, 51, 178, 
	51, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 51, 173, 52, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 173, 51, 51, 51, 51, 
	51, 51, 51, 51, 174, 51, 51, 175, 
	51, 51, 51, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 51, 51, 51, 
	51, 51, 51, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 51, 
	51, 51, 178, 51, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 51, 179, 
	52, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 179, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 51, 181, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 181, 24, 24, 
	24, 24, 24, 24, 24, 182, 183, 24, 
	24, 184, 24, 24, 24, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 186, 
	24, 24, 24, 24, 24, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 185, 24, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	24, 24, 24, 24, 10, 187, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 187, 24, 24, 24, 
	24, 24, 24, 24, 24, 188, 24, 24, 
	189, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 10, 190, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 190, 24, 24, 24, 24, 
	24, 24, 24, 182, 191, 24, 24, 192, 
	24, 24, 24, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 186, 24, 24, 
	24, 24, 24, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 185, 24, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 24, 24, 
	24, 24, 10, 193, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 193, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 119, 119, 119, 119, 
	119, 119, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 194, 119, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 119, 119, 119, 
	119, 32, 195, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 195, 32, 32, 32, 32, 32, 32, 
	32, 32, 42, 32, 32, 41, 32, 32, 
	32, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 32, 32, 32, 32, 32, 
	32, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 32, 32, 32, 
	196, 32, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 32, 123, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 123, 10, 10, 10, 
	10, 10, 10, 10, 28, 57, 10, 10, 
	58, 10, 10, 10, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 10, 10, 
	10, 10, 10, 10, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	10, 10, 10, 197, 10, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 10, 
	128, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 128, 
	10, 10, 10, 10, 10, 10, 10, 28, 
	63, 10, 10, 64, 10, 10, 10, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 10, 10, 10, 10, 10, 10, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 10, 10, 10, 197, 10, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 10, 181, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 181, 24, 24, 24, 24, 24, 
	24, 24, 24, 183, 24, 24, 184, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	24, 24, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 198, 24, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 24, 24, 24, 
	24, 10, 190, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 190, 24, 24, 24, 24, 24, 24, 
	24, 24, 191, 24, 24, 192, 24, 24, 
	24, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 24, 24, 24, 24, 24, 
	24, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	198, 24, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 24, 24, 24, 24, 
	10, 199, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	199, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 45, 
	10, 200, 47, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	200, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 100, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	201, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 201, 
	10, 10, 10, 10, 10, 10, 10, 107, 
	202, 10, 10, 203, 10, 10, 10, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 111, 10, 10, 10, 10, 10, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 10, 10, 10, 110, 10, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 10, 204, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 204, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 85, 85, 85, 85, 
	85, 85, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 85, 85, 
	85, 205, 85, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 85, 206, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 206, 85, 85, 
	85, 85, 85, 85, 85, 85, 96, 85, 
	85, 86, 85, 85, 85, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 85, 
	85, 85, 85, 85, 85, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 85, 85, 85, 205, 85, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	85, 207, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	207, 10, 10, 10, 10, 10, 10, 10, 
	10, 108, 10, 10, 109, 10, 10, 10, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 10, 10, 10, 10, 10, 10, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 10, 10, 10, 208, 
	10, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 10, 209, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 202, 10, 10, 203, 
	10, 10, 10, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 10, 10, 10, 
	10, 10, 10, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 10, 
	10, 10, 208, 10, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 10, 210, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 210, 24, 
	24, 24, 24, 24, 24, 24, 24, 211, 
	24, 24, 212, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 213, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 213, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 214, 44, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	214, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 134, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 10, 
	215, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 215, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 100, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 21, 21, 21, 21, 21, 21, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 216, 21, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 21, 21, 21, 21, 1, 217, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 217, 24, 
	24, 24, 24, 24, 24, 24, 218, 24, 
	24, 24, 24, 24, 24, 24, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	24, 24, 24, 24, 24, 24, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 219, 24, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 24, 24, 24, 24, 1, 220, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 220, 1, 1, 
	1, 1, 1, 1, 1, 31, 1, 1, 
	1, 1, 1, 1, 1, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	1, 1, 1, 1, 1, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 1, 1, 1, 26, 1, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	1, 193, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	193, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 119, 119, 119, 119, 119, 119, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 120, 
	119, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 119, 119, 119, 119, 32, 
	221, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 221, 
	24, 24, 24, 24, 24, 24, 24, 222, 
	223, 24, 24, 224, 24, 24, 24, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 226, 24, 24, 24, 24, 24, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 225, 24, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 24, 24, 24, 24, 10, 227, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 227, 24, 
	24, 24, 24, 24, 24, 24, 24, 228, 
	24, 24, 229, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 10, 230, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 230, 24, 24, 
	24, 24, 24, 24, 24, 222, 231, 24, 
	24, 232, 24, 24, 24, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 226, 
	24, 24, 24, 24, 24, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 225, 24, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	225, 225, 225, 225, 225, 225, 225, 225, 
	24, 24, 24, 24, 10, 233, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 233, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 102, 102, 
	102, 102, 102, 102, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 234, 102, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 102, 
	102, 102, 102, 85, 235, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 235, 85, 85, 85, 85, 
	85, 85, 85, 85, 96, 85, 85, 86, 
	85, 85, 85, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 85, 85, 85, 
	85, 85, 85, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 85, 
	85, 85, 236, 85, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 85, 106, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 106, 10, 
	10, 10, 10, 10, 10, 10, 28, 108, 
	10, 10, 109, 10, 10, 10, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	10, 10, 10, 10, 10, 10, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 10, 10, 10, 237, 10, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 10, 201, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 201, 10, 10, 10, 10, 10, 10, 
	10, 28, 202, 10, 10, 203, 10, 10, 
	10, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 10, 10, 10, 10, 10, 
	10, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 10, 10, 10, 
	237, 10, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 10, 221, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 221, 24, 24, 24, 
	24, 24, 24, 24, 24, 223, 24, 24, 
	224, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 24, 24, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 238, 24, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 24, 
	24, 24, 24, 10, 230, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 230, 24, 24, 24, 24, 
	24, 24, 24, 24, 231, 24, 24, 232, 
	24, 24, 24, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 24, 24, 24, 
	24, 24, 24, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 238, 24, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 24, 24, 
	24, 24, 10, 207, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 207, 10, 10, 10, 10, 10, 
	10, 10, 239, 108, 10, 10, 109, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 93, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 93, 10, 10, 
	10, 10, 10, 10, 10, 10, 241, 10, 
	10, 94, 10, 209, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 209, 10, 10, 10, 10, 10, 
	10, 10, 239, 202, 10, 10, 203, 10, 
	10, 10, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 111, 10, 10, 10, 
	10, 10, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 10, 10, 
	10, 240, 10, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 10, 242, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 242, 10, 10, 
	10, 10, 10, 10, 10, 10, 91, 10, 
	10, 92, 10, 10, 45, 10, 243, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 94, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 245, 32, 
	32, 84, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 244, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	244, 32, 32, 32, 32, 32, 32, 32, 
	32, 42, 32, 32, 84, 32, 32, 32, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 32, 32, 32, 32, 32, 32, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 32, 32, 32, 34, 
	32, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 32, 246, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 246, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 247, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	247, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 117, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 1, 
	248, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 248, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	249, 7, 7, 250, 7, 7, 7, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 7, 7, 7, 9, 7, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 7, 248, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 248, 7, 7, 7, 7, 7, 
	7, 7, 7, 18, 7, 7, 251, 7, 
	7, 7, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 7, 7, 
	7, 9, 7, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 7, 86, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 86, 85, 85, 
	85, 85, 85, 85, 85, 85, 252, 85, 
	85, 253, 85, 85, 85, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 85, 
	85, 85, 85, 85, 85, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 85, 85, 85, 89, 85, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	85, 254, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	254, 10, 10, 10, 10, 10, 10, 10, 
	10, 91, 10, 10, 92, 10, 255, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 255, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 99, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 1, 248, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 7, 7, 
	7, 7, 7, 7, 7, 256, 7, 7, 
	251, 7, 7, 7, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 7, 7, 
	7, 7, 7, 7, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	7, 7, 7, 9, 7, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 7, 
	257, 44, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 257, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	12, 10, 10, 13, 10, 10, 45, 10, 
	258, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 258, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 22, 21, 21, 100, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 259, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 259, 10, 
	260, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 260, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 1, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 261, 10, 
	10, 10, 10, 10, 10, 10, 262, 75, 
	10, 10, 76, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 14, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 14, 10, 10, 10, 10, 10, 10, 
	10, 10, 264, 10, 10, 15, 10, 265, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 265, 10, 
	10, 10, 10, 10, 10, 10, 262, 266, 
	10, 10, 267, 10, 10, 10, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	78, 10, 10, 10, 10, 10, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 10, 10, 10, 263, 10, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 10, 8, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 8, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 7, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 269, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 269, 7, 7, 7, 
	7, 7, 7, 7, 7, 18, 7, 7, 
	17, 7, 7, 7, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 7, 7, 
	7, 7, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	7, 7, 7, 268, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 7, 
	261, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 261, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	75, 10, 10, 76, 10, 10, 10, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 10, 10, 10, 10, 10, 10, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 10, 10, 10, 270, 10, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 10, 265, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 265, 10, 10, 10, 10, 10, 
	10, 10, 10, 266, 10, 10, 267, 10, 
	10, 10, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 10, 10, 10, 10, 
	10, 10, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 10, 10, 
	10, 270, 10, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 10, 271, 44, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 271, 10, 10, 
	10, 10, 10, 10, 10, 10, 12, 10, 
	10, 13, 10, 10, 45, 10, 272, 47, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 1, 1, 48, 1, 244, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 244, 32, 32, 
	32, 32, 32, 32, 32, 32, 273, 32, 
	32, 274, 32, 32, 32, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 32, 
	32, 32, 32, 32, 32, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 32, 32, 32, 34, 32, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	32, 275, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	275, 10, 10, 10, 10, 10, 10, 10, 
	74, 266, 10, 10, 267, 10, 10, 10, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 78, 10, 10, 10, 10, 10, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 10, 10, 10, 77, 
	10, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 10, 276, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 276, 24, 24, 24, 24, 
	24, 24, 24, 24, 277, 24, 24, 278, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 10, 279, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 279, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 15, 1, 
	1, 1, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 1, 1, 1, 1, 
	1, 1, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 1, 
	1, 26, 1, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 280, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 280, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 10, 281, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 281, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 21, 21, 
	21, 21, 21, 21, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 216, 21, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 21, 
	21, 21, 21, 1, 282, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 282, 24, 24, 24, 24, 
	24, 24, 24, 283, 284, 24, 24, 285, 
	24, 24, 24, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 287, 24, 24, 
	24, 24, 24, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 286, 24, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 24, 24, 
	24, 24, 10, 288, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 288, 24, 24, 24, 24, 24, 
	24, 24, 24, 289, 24, 24, 290, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	24, 10, 291, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 291, 24, 24, 24, 24, 24, 24, 
	24, 283, 292, 24, 24, 293, 24, 24, 
	24, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 287, 24, 24, 24, 24, 
	24, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	286, 24, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 24, 24, 24, 24, 
	10, 294, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	294, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 69, 69, 69, 69, 69, 69, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 295, 
	69, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 69, 69, 69, 69, 7, 
	296, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 296, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	18, 7, 7, 17, 7, 7, 7, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 7, 7, 7, 7, 7, 7, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 7, 7, 7, 297, 7, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 7, 73, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 73, 10, 10, 10, 10, 10, 
	10, 10, 28, 75, 10, 10, 76, 10, 
	10, 10, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 10, 10, 10, 10, 
	10, 10, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 10, 10, 
	10, 298, 10, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 10, 275, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 275, 10, 10, 
	10, 10, 10, 10, 10, 28, 266, 10, 
	10, 267, 10, 10, 10, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 10, 
	10, 10, 10, 10, 10, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 10, 10, 10, 298, 10, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	10, 282, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	282, 24, 24, 24, 24, 24, 24, 24, 
	24, 284, 24, 24, 285, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 24, 24, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 299, 
	24, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 24, 24, 24, 24, 10, 
	291, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 291, 
	24, 24, 24, 24, 24, 24, 24, 24, 
	292, 24, 24, 293, 24, 24, 24, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 24, 24, 24, 24, 24, 24, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 299, 24, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 24, 24, 24, 24, 10, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 1, 1, 1, 1, 1, 1, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 1, 1, 1, 300, 1, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1, 301, 301, 301, 301, 301, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 301, 1, 302, 1, 1, 1, 
	1, 303, 1, 305, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 306, 304, 308, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 309, 307, 307, 305, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 311, 310, 308, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	313, 312, 312, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 314, 314, 314, 314, 
	314, 314, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 314, 314, 
	314, 316, 314, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 314, 317, 1, 
	315, 318, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 315, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 314, 314, 314, 314, 314, 314, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 314, 314, 314, 319, 314, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 314, 320, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 1, 1, 1, 1, 1, 
	1, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 1, 1, 1, 
	321, 1, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 1, 322, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 1, 1, 1, 
	1, 1, 1, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 1, 
	1, 1, 321, 1, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 1, 320, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 324, 
	1, 1, 1, 1, 1, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 1, 1, 1, 323, 1, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	1, 322, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 324, 1, 1, 1, 1, 1, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 1, 1, 1, 323, 1, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 1, 315, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 315, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 314, 314, 314, 314, 
	314, 314, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 314, 314, 
	314, 319, 314, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 314, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	1, 1, 1, 1, 1, 1, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 1, 1, 1, 325, 1, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 1, 326, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 326, 1, 1, 1, 1, 1, 1, 
	1, 327, 1, 1, 1, 1, 1, 1, 
	1, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 1, 1, 1, 1, 1, 
	1, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 1, 1, 1, 
	328, 1, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 1, 329, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 329, 1, 1, 1, 
	1, 1, 1, 1, 330, 1, 332, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 332, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 334, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 335, 10, 10, 336, 10, 337, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 337, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 338, 1, 339, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 339, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 331, 331, 331, 331, 
	331, 331, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 331, 331, 
	331, 333, 331, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 331, 340, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 340, 331, 331, 
	331, 331, 331, 331, 331, 331, 341, 331, 
	331, 340, 331, 331, 331, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 331, 
	331, 331, 331, 331, 331, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 331, 331, 331, 333, 331, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	331, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	342, 10, 10, 10, 10, 10, 10, 10, 
	343, 344, 10, 10, 345, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 337, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 337, 10, 10, 10, 10, 
	10, 10, 10, 10, 348, 10, 10, 338, 
	10, 349, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	349, 10, 10, 10, 10, 10, 10, 10, 
	343, 350, 10, 10, 351, 10, 10, 10, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 347, 10, 10, 10, 10, 10, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 10, 10, 10, 346, 
	10, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 10, 332, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 332, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 331, 331, 331, 
	331, 331, 331, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 331, 
	331, 331, 352, 331, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 331, 353, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 353, 331, 
	331, 331, 331, 331, 331, 331, 331, 341, 
	331, 331, 340, 331, 331, 331, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	331, 331, 331, 331, 331, 331, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 331, 331, 331, 352, 331, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 331, 342, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 342, 10, 10, 10, 10, 10, 10, 
	10, 10, 344, 10, 10, 345, 10, 10, 
	10, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 10, 10, 10, 10, 10, 
	10, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 10, 10, 10, 
	354, 10, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 10, 349, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 349, 10, 10, 10, 
	10, 10, 10, 10, 10, 350, 10, 10, 
	351, 10, 10, 10, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 10, 10, 
	10, 10, 10, 10, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	10, 10, 10, 354, 10, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 10, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 1, 1, 1, 1, 1, 1, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 1, 1, 1, 355, 
	1, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 1, 356, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 356, 1, 1, 1, 1, 
	1, 1, 1, 357, 1, 1, 1, 1, 
	1, 1, 1, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 1, 1, 1, 
	1, 1, 1, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 1, 
	1, 1, 358, 1, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 1, 359, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 359, 1, 
	1, 1, 1, 1, 1, 1, 360, 1, 
	362, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 362, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	367, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 367, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 368, 1, 369, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 369, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 361, 361, 
	361, 361, 361, 361, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	361, 361, 361, 363, 361, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 361, 
	370, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 370, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 361, 361, 361, 361, 361, 361, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 361, 361, 361, 363, 361, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 364, 372, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 364, 10, 10, 10, 10, 10, 
	10, 10, 10, 365, 10, 10, 366, 10, 
	372, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 373, 10, 10, 10, 10, 10, 10, 
	10, 374, 375, 10, 10, 376, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 367, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 367, 10, 10, 10, 
	10, 10, 10, 10, 10, 379, 10, 10, 
	368, 10, 380, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 380, 10, 10, 10, 10, 10, 10, 
	10, 374, 381, 10, 10, 382, 10, 10, 
	10, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 378, 10, 10, 10, 10, 
	10, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 10, 10, 10, 
	377, 10, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 10, 362, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 362, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 361, 361, 
	361, 361, 361, 361, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	361, 361, 361, 383, 361, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 361, 
	384, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 384, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	371, 361, 361, 370, 361, 361, 361, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 361, 361, 361, 361, 361, 361, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 361, 361, 361, 383, 361, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 361, 373, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 373, 10, 10, 10, 10, 10, 
	10, 10, 10, 375, 10, 10, 376, 10, 
	10, 10, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 10, 10, 10, 10, 
	10, 10, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 10, 10, 
	10, 385, 10, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 10, 380, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 380, 10, 10, 
	10, 10, 10, 10, 10, 10, 381, 10, 
	10, 382, 10, 10, 10, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 10, 
	10, 10, 10, 10, 10, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 10, 10, 10, 385, 10, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	10, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 1, 
	387, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 1, 389, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 390, 1, 391, 1, 1, 
	392, 394, 393, 1, 35, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 35, 10, 10, 10, 10, 
	10, 10, 10, 10, 36, 10, 10, 37, 
	10, 395, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 1, 1, 1, 1, 1, 1, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 396, 1, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 396, 396, 396, 396, 396, 396, 
	396, 396, 1, 1, 1, 1, 317, 1, 
	334, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 334, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	335, 10, 10, 336, 10, 10, 10, 1, 
	1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	143, 139, 0, 6, 137, 7, 6, 7, 
	8, 8, 9, 10, 10, 11, 34, 12, 
	11, 12, 13, 14, 15, 13, 14, 15, 
	16, 31, 27, 17, 25, 18, 17, 18, 
	19, 19, 20, 21, 217, 22, 21, 217, 
	22, 23, 24, 24, 217, 26, 26, 17, 
	28, 25, 18, 29, 30, 25, 17, 25, 
	18, 32, 31, 33, 35, 150, 154, 35, 
	36, 37, 38, 137, 7, 149, 142, 37, 
	39, 127, 129, 39, 40, 41, 44, 123, 
	125, 120, 42, 97, 43, 42, 43, 44, 
	45, 46, 46, 47, 64, 48, 104, 111, 
	48, 49, 50, 51, 97, 43, 99, 100, 
	50, 52, 40, 53, 53, 54, 55, 60, 
	88, 55, 56, 57, 58, 59, 57, 20, 
	57, 61, 62, 54, 61, 63, 64, 63, 
	65, 66, 87, 66, 67, 68, 69, 67, 
	68, 69, 70, 84, 218, 80, 71, 78, 
	72, 71, 72, 73, 73, 74, 75, 217, 
	76, 75, 76, 77, 79, 79, 71, 81, 
	78, 72, 82, 83, 78, 71, 78, 72, 
	85, 84, 86, 66, 87, 61, 89, 62, 
	54, 90, 91, 61, 62, 54, 61, 62, 
	54, 92, 95, 92, 93, 94, 96, 98, 
	98, 50, 97, 43, 101, 102, 101, 42, 
	103, 42, 105, 106, 47, 105, 107, 107, 
	108, 109, 110, 108, 109, 105, 112, 106, 
	47, 113, 114, 105, 106, 47, 105, 106, 
	47, 115, 118, 115, 116, 117, 119, 121, 
	122, 97, 124, 124, 126, 52, 128, 128, 
	130, 146, 148, 131, 132, 134, 133, 133, 
	135, 136, 136, 138, 138, 6, 140, 141, 
	137, 6, 137, 7, 144, 143, 145, 147, 
	147, 127, 129, 37, 151, 152, 34, 151, 
	153, 153, 151, 155, 152, 34, 156, 157, 
	151, 152, 34, 151, 152, 34, 158, 161, 
	158, 159, 160, 162, 219, 164, 165, 168, 
	166, 221, 167, 166, 221, 167, 169, 170, 
	169, 170, 172, 173, 176, 222, 223, 174, 
	222, 175, 222, 177, 178, 180, 181, 182, 
	180, 181, 182, 183, 191, 187, 184, 225, 
	185, 184, 185, 186, 186, 224, 184, 188, 
	225, 185, 189, 190, 225, 184, 225, 185, 
	192, 191, 193, 195, 196, 197, 195, 196, 
	197, 198, 208, 204, 199, 203, 200, 199, 
	200, 201, 201, 202, 226, 199, 205, 203, 
	200, 206, 207, 203, 199, 203, 200, 209, 
	208, 210, 212, 227, 212, 228, 214, 215, 
	216, 216, 228, 220, 219
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 8, 9, 9, 9, 0, 0, 
	0, 9, 9, 10, 0, 11, 11, 12, 
	13, 0, 1, 2, 3, 4, 0, 5, 
	0, 0, 6, 9, 9, 9, 0, 0, 
	0, 9, 9, 14, 15, 16, 0, 17, 
	0, 0, 18, 19, 20, 16, 0, 21, 
	22, 21, 21, 4, 23, 0, 24, 24, 
	24, 25, 9, 26, 12, 13, 27, 9, 
	28, 29, 30, 21, 21, 4, 23, 0, 
	0, 0, 0, 9, 9, 0, 9, 9, 
	9, 6, 9, 9, 9, 0, 0, 0, 
	9, 31, 0, 11, 11, 12, 13, 27, 
	9, 28, 29, 30, 21, 21, 4, 23, 
	0, 0, 0, 32, 0, 11, 12, 13, 
	33, 9, 1, 34, 35, 4, 0, 0, 
	36, 37, 38, 38, 0, 39, 40, 0, 
	13, 41, 42, 19, 43, 44, 45, 46, 
	19, 47, 19, 19, 20, 48, 49, 49, 
	49, 19, 19, 19, 49, 49, 50, 51, 
	52, 19, 19, 19, 52, 19, 53, 54, 
	53, 53, 46, 55, 19, 56, 56, 56, 
	57, 49, 58, 59, 60, 61, 62, 63, 
	63, 64, 65, 12, 13, 13, 66, 67, 
	67, 12, 68, 9, 1, 4, 69, 70, 
	0, 71, 24, 24, 0, 25, 9, 21, 
	26, 24, 72, 73, 73, 0, 74, 0, 
	75, 76, 77, 64, 0, 78, 79, 80, 
	80, 81, 82, 12, 13, 13, 83, 84, 
	84, 12, 85, 9, 86, 4, 87, 22, 
	4, 0, 14, 0, 9, 9, 88, 0, 
	9, 9, 9, 9, 9, 9, 10, 0, 
	9, 31, 0, 89, 0, 21, 22, 4, 
	0, 24, 24, 24, 25, 9, 26, 14, 
	0, 9, 9, 71, 72, 73, 73, 0, 
	90, 0, 78, 79, 80, 80, 81, 82, 
	12, 13, 13, 83, 84, 84, 12, 85, 
	9, 86, 4, 87, 25, 0, 0, 0, 
	91, 92, 91, 0, 93, 0, 91, 91, 
	0, 0, 0, 0, 25, 94, 94, 25, 
	95, 26, 96, 26, 23, 97, 2, 3, 
	4, 0, 5, 0, 0, 6, 9, 98, 
	9, 0, 0, 0, 9, 98, 21, 22, 
	99, 21, 4, 23, 100, 24, 101, 24, 
	25, 9, 26, 1, 2, 3, 4, 0, 
	5, 0, 0, 6, 9, 9, 9, 0, 
	0, 0, 9, 9, 102, 21, 22, 21, 
	21, 4, 23, 0, 24, 24, 24, 25, 
	9, 26, 11, 103, 13, 104, 0, 0, 
	18, 19, 105, 108, 26
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 7, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	7, 0, 0, 7, 7, 0, 0, 0, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 0, 7, 7, 0, 7, 7, 
	7, 7, 0, 0, 7, 7, 0, 0, 
	7, 7, 0, 7, 7, 0, 0, 7, 
	7, 0, 7, 7, 7, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 0, 0, 0, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 7, 7, 0, 7, 7, 7, 7, 
	7, 7, 0, 7, 0, 7, 7, 7, 
	7, 0, 7, 0, 0, 0, 0, 7, 
	7, 7, 0, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 0, 7, 7, 7, 
	0, 7, 7, 7, 7, 0, 7, 7, 
	0, 7, 0, 7, 7, 7, 0, 7, 
	7, 7, 7, 0, 7, 7, 7, 0, 
	7, 0, 7, 7, 7, 0, 7, 7, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 0, 7, 7, 7, 7, 0, 7, 
	7, 7, 0, 0, 0, 0, 7, 0, 
	0, 7, 7, 7, 7, 7, 7, 0, 
	7, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 106, 107, 109, 0, 0, 0, 
	106, 106, 106, 0, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 217;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 163;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 164;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 171;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 179;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 194;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 211;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 213;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


      # end: ragel        
          end

          def each
            @buffers    = {}
            @incomplete = {}
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 26 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 108 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 91 then
		begin

    @opened = true
    p_start = p
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 100 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 102 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 19 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 104 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 89 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 16 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 17 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 25 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 87 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 58 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 23 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 22 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 94 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 47 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 11 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 60 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 103 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 59 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 39 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 18 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 105 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 20 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 90 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 70 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 52 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 15 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 85 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 57 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 81 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 46 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 82 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 55 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 96 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 24 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 44 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 79 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 54 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 93 then
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 98 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 73 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 72 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 49 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 10 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 14 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 68 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 64 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 62 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 38 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 42 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 37 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 88 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 74 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 51 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 71 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 101 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 84 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 83 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 56 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
	when 45 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 30 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 179
		_goto_level = _again
		next
	end

  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 92 then
		begin

    @opened = true
    p_start = p
  		end
		begin

    @closed = true
    p_end = p
  		end
		begin

    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
    $stderr.puts @buffers.inspect
  		end
		begin

    yield @buffers[:string]
  		end
	when 95 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 31 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 50 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 77 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 66 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 32 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 28 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
	when 27 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 48 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 86 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 29 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 99 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 80 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 78 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 53 then
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 1 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 97 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 63 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 61 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 43 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 75 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 109 then
		begin

    yield @buffers[:ident]
  		end
	when 106 then
		begin

  		end
	when 107 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 7 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::SimpleStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
