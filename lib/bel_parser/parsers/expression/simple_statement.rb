
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864, 7865
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 9, 14, 10, 
	14, 14, 14, 14, 11, 14, 16, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	17, 15, 19, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 20, 18, 21, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 21, 14, 14, 
	14, 14, 14, 14, 14, 14, 22, 14, 
	14, 23, 14, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 24, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 25, 1, 
	25, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 25, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 16, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	27, 26, 19, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 29, 
	28, 28, 31, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 31, 30, 30, 30, 30, 30, 30, 
	30, 32, 33, 30, 30, 34, 30, 30, 
	30, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 30, 30, 30, 30, 
	30, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 30, 30, 30, 
	35, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 24, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 1, 
	25, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 1, 39, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 39, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 1, 41, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 41, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 1, 1, 1, 1, 1, 1, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 1, 1, 1, 42, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 43, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 44, 1, 1, 1, 1, 
	1, 1, 1, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 1, 1, 1, 
	1, 1, 1, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 1, 
	1, 1, 45, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 46, 1, 
	1, 1, 1, 1, 1, 1, 47, 1, 
	48, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 48, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 48, 49, 49, 49, 49, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 48, 7, 50, 7, 7, 7, 
	7, 51, 7, 7, 7, 7, 7, 7, 
	7, 7, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 7, 7, 7, 7, 
	7, 7, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 7, 7, 
	7, 53, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 49, 49, 
	49, 49, 49, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 49, 14, 50, 
	14, 14, 14, 14, 51, 14, 55, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	56, 54, 58, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 59, 57, 60, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 60, 14, 14, 
	14, 14, 14, 14, 14, 14, 61, 14, 
	14, 62, 14, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 63, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 64, 1, 
	64, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 64, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 55, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	66, 65, 58, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 68, 
	67, 67, 69, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 69, 30, 30, 30, 30, 30, 30, 
	30, 70, 71, 30, 30, 72, 30, 30, 
	30, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 74, 30, 30, 30, 30, 
	30, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 30, 30, 30, 
	73, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 63, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 63, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 1, 
	64, 1, 76, 1, 1, 77, 78, 79, 
	79, 79, 79, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 78, 7, 80, 
	7, 7, 7, 7, 81, 7, 82, 7, 
	7, 83, 7, 7, 7, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 84, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 85, 49, 49, 49, 49, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	85, 7, 50, 7, 7, 7, 7, 51, 
	7, 86, 7, 7, 87, 7, 7, 7, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 7, 7, 7, 7, 7, 7, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 7, 7, 7, 53, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 69, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 69, 30, 30, 30, 30, 
	30, 30, 30, 30, 71, 30, 30, 72, 
	30, 30, 30, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 30, 30, 30, 
	30, 30, 30, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 30, 
	30, 30, 88, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 57, 
	89, 90, 90, 90, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 89, 
	7, 91, 7, 7, 7, 7, 92, 7, 
	93, 7, 7, 94, 7, 7, 7, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 7, 7, 7, 7, 7, 7, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 7, 7, 7, 95, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 96, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 96, 7, 10, 7, 7, 7, 
	7, 11, 7, 97, 7, 7, 98, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 31, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 33, 30, 
	30, 34, 30, 30, 30, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 30, 
	30, 30, 30, 30, 30, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 30, 30, 30, 99, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 18, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 100, 100, 100, 100, 
	100, 100, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 100, 100, 
	100, 101, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 102, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 105, 103, 103, 103, 103, 
	106, 103, 108, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 109, 107, 111, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	112, 110, 110, 108, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	114, 113, 111, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 116, 
	115, 115, 117, 118, 118, 118, 118, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 119, 7, 7, 7, 7, 
	120, 7, 7, 7, 7, 7, 7, 7, 
	7, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	121, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 117, 118, 118, 
	118, 118, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 117, 7, 119, 7, 
	7, 7, 7, 120, 7, 7, 7, 7, 
	7, 7, 7, 7, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 7, 7, 
	7, 7, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	7, 7, 7, 122, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	118, 118, 118, 118, 118, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 118, 
	14, 119, 14, 14, 14, 14, 120, 14, 
	124, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 125, 123, 127, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 128, 126, 
	126, 124, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 130, 129, 
	127, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 132, 131, 131, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 1, 1, 1, 1, 1, 1, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 1, 1, 1, 133, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 134, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 1, 
	1, 1, 136, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 137, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 1, 
	1, 1, 1, 1, 1, 1, 138, 1, 
	139, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 139, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 139, 140, 140, 140, 140, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 139, 7, 141, 7, 7, 7, 
	7, 142, 7, 7, 7, 7, 7, 7, 
	7, 7, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 7, 7, 7, 7, 
	7, 7, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 7, 7, 
	7, 144, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 140, 140, 
	140, 140, 140, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 140, 14, 141, 
	14, 14, 14, 14, 142, 14, 146, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	147, 145, 149, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 150, 148, 151, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 151, 14, 14, 
	14, 14, 14, 14, 14, 14, 152, 14, 
	14, 153, 14, 154, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 154, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 155, 1, 
	155, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 155, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 146, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	157, 156, 149, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 159, 
	158, 158, 160, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 160, 30, 30, 30, 30, 30, 30, 
	30, 161, 162, 30, 30, 163, 30, 30, 
	30, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 165, 30, 30, 30, 30, 
	30, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 30, 30, 30, 
	164, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 154, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 154, 1, 1, 1, 
	1, 1, 1, 1, 1, 166, 1, 1, 
	155, 1, 167, 168, 168, 168, 168, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 167, 7, 169, 7, 7, 7, 7, 
	170, 7, 171, 7, 7, 172, 7, 7, 
	7, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 7, 7, 7, 7, 7, 
	7, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 7, 7, 7, 
	173, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 174, 140, 140, 
	140, 140, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 174, 7, 141, 7, 
	7, 7, 7, 142, 7, 175, 7, 7, 
	176, 7, 7, 7, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 7, 7, 
	7, 7, 7, 7, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	7, 7, 7, 144, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	160, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 160, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	162, 30, 30, 163, 30, 30, 30, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 30, 30, 30, 30, 30, 30, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 30, 30, 30, 177, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 148, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 1, 1, 
	1, 1, 1, 1, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	1, 1, 1, 178, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	179, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 179, 
	1, 1, 1, 1, 1, 1, 1, 180, 
	1, 1, 1, 1, 1, 1, 1, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 1, 1, 1, 181, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 183, 1, 184, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 184, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 184, 
	185, 185, 185, 185, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	186, 7, 7, 7, 7, 187, 7, 7, 
	7, 7, 7, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	7, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 185, 185, 185, 185, 185, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 185, 14, 186, 14, 14, 14, 14, 
	187, 14, 191, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 192, 190, 194, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	195, 193, 196, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 196, 14, 14, 14, 14, 14, 14, 
	14, 14, 197, 14, 14, 198, 14, 199, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 199, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 200, 1, 200, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 191, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 202, 201, 194, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 204, 203, 203, 205, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 205, 30, 30, 
	30, 30, 30, 30, 30, 206, 207, 30, 
	30, 208, 30, 30, 30, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 210, 
	30, 30, 30, 30, 30, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 30, 30, 30, 209, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 200, 1, 212, 213, 
	213, 213, 213, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 212, 7, 214, 
	7, 7, 7, 7, 215, 7, 216, 7, 
	7, 217, 7, 7, 7, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 7, 
	7, 7, 7, 7, 7, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 7, 7, 7, 218, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 219, 185, 185, 185, 185, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	219, 7, 186, 7, 7, 7, 7, 187, 
	7, 220, 7, 7, 221, 7, 7, 7, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 7, 7, 7, 7, 7, 7, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 7, 7, 7, 189, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 205, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 205, 30, 30, 30, 30, 
	30, 30, 30, 30, 207, 30, 30, 208, 
	30, 30, 30, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 30, 30, 30, 
	30, 30, 30, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 30, 
	30, 30, 222, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 193, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 1, 224, 
	1, 225, 1, 227, 1, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 227, 226, 228, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 228, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 230, 1, 231, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 231, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 232, 1, 1, 234, 233, 235, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 100, 
	100, 100, 100, 100, 100, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 100, 100, 100, 236, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 1, 238, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 237, 237, 237, 237, 237, 237, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 237, 237, 239, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 103, 240, 14, 
	1, 241, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 30, 30, 30, 30, 30, 30, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 30, 30, 30, 242, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 241, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 244, 30, 30, 30, 30, 
	30, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 30, 30, 30, 
	243, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 245, 246, 247, 
	247, 247, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 245, 7, 248, 7, 
	7, 7, 7, 249, 7, 7, 7, 7, 
	7, 7, 7, 7, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 7, 7, 
	7, 7, 7, 7, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	7, 7, 7, 250, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	251, 252, 118, 118, 118, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 251, 
	7, 119, 7, 7, 7, 7, 120, 7, 
	7, 7, 7, 7, 7, 7, 7, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 7, 7, 7, 122, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 118, 118, 118, 118, 118, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 118, 14, 119, 14, 14, 14, 
	14, 120, 14, 1, 253, 1, 1, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1, 256, 255, 
	1, 227, 256, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	227, 226, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 44, 0, 8, 
	9, 45, 8, 9, 45, 10, 17, 11, 
	10, 11, 13, 14, 13, 14, 0, 10, 
	16, 17, 11, 15, 42, 17, 18, 18, 
	19, 20, 21, 22, 23, 21, 22, 23, 
	24, 25, 26, 31, 34, 40, 27, 28, 
	41, 27, 28, 41, 29, 108, 30, 29, 
	30, 32, 33, 32, 33, 29, 35, 108, 
	30, 34, 38, 108, 37, 111, 39, 25, 
	26, 31, 108, 30, 40, 39, 108, 30, 
	40, 43, 6, 7, 12, 17, 11, 44, 
	43, 17, 11, 44, 0, 112, 114, 0, 
	48, 49, 52, 50, 116, 51, 50, 116, 
	51, 53, 54, 53, 54, 56, 57, 58, 
	61, 120, 119, 59, 117, 60, 59, 117, 
	60, 62, 63, 62, 63, 65, 66, 67, 
	65, 66, 67, 68, 69, 70, 75, 78, 
	82, 71, 72, 83, 71, 72, 83, 73, 
	124, 74, 73, 74, 76, 77, 76, 77, 
	73, 79, 124, 74, 78, 80, 124, 81, 
	69, 70, 75, 124, 74, 82, 81, 124, 
	74, 82, 85, 86, 87, 85, 86, 87, 
	88, 89, 90, 95, 98, 102, 91, 92, 
	103, 91, 92, 103, 93, 125, 94, 93, 
	94, 96, 97, 96, 97, 93, 99, 125, 
	94, 98, 100, 125, 101, 89, 90, 95, 
	125, 94, 102, 101, 125, 94, 102, 127, 
	106, 107, 128, 130, 109, 110, 36, 109, 
	36, 111, 110, 113, 112, 0, 115, 114, 
	118, 118, 119, 120, 121, 122, 123, 57, 
	58, 61, 119, 122, 123, 126, 127, 128, 
	129
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 12, 14, 
	15, 14, 0, 16, 0, 18, 18, 18, 
	0, 0, 14, 14, 0, 0, 20, 21, 
	22, 21, 21, 0, 23, 0, 24, 0, 
	0, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 25, 27, 28, 
	28, 28, 27, 27, 29, 30, 30, 30, 
	0, 27, 28, 28, 28, 27, 27, 29, 
	30, 30, 30, 0, 32, 33, 10, 35, 
	0, 0, 0, 14, 37, 14, 0, 38, 
	0, 14, 14, 0, 0, 0, 0, 0, 
	0, 10, 10, 14, 15, 14, 0, 16, 
	0, 14, 14, 0, 0, 42, 3, 4, 
	0, 0, 5, 0, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	49, 18, 0, 0, 14, 14, 0, 0, 
	21, 22, 52, 21, 0, 23, 53, 27, 
	28, 28, 28, 55, 27, 29, 30, 56, 
	30, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 27, 28, 28, 28, 
	27, 27, 29, 30, 30, 30, 0, 58, 
	0, 0, 25, 25, 60, 59, 60, 0, 
	0, 0, 61, 3, 0, 65, 23, 0, 
	67, 69, 0, 0, 23, 28, 72, 28, 
	28, 28, 29, 0, 74, 76, 0, 0, 
	78
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 13, 13, 13, 19, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 0, 0, 26, 26, 
	31, 13, 26, 26, 31, 13, 32, 0, 
	34, 36, 36, 36, 36, 36, 36, 39, 
	39, 40, 41, 41, 41, 41, 41, 41, 
	1, 43, 44, 45, 46, 47, 48, 48, 
	12, 0, 50, 48, 48, 48, 51, 0, 
	54, 54, 57, 48, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 26, 26, 31, 13, 
	0, 0, 0, 0, 59, 59, 0, 61, 
	62, 63, 64, 66, 0, 67, 0, 68, 
	70, 71, 73, 75, 0, 76, 0, 77, 
	78, 0, 78
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 33 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 28 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 53 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 25 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 60 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 42 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 72 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 69 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 49 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 55 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 63 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 44 then
		begin
 $stderr.puts "EOF!" 		end
	when 62 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 43 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 47 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 34 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 77 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 39 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 71 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 70 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 45 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864, 7865
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 9, 14, 10, 
	14, 14, 14, 14, 11, 14, 16, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	17, 15, 19, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 20, 18, 21, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 21, 14, 14, 
	14, 14, 14, 14, 14, 14, 22, 14, 
	14, 23, 14, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 24, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 25, 1, 
	25, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 25, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 16, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	27, 26, 19, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 29, 
	28, 28, 31, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 31, 30, 30, 30, 30, 30, 30, 
	30, 32, 33, 30, 30, 34, 30, 30, 
	30, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 30, 30, 30, 30, 
	30, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 30, 30, 30, 
	35, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 24, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 1, 
	25, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 1, 39, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 39, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 1, 41, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 41, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 1, 1, 1, 1, 1, 1, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 1, 1, 1, 42, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 43, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 44, 1, 1, 1, 1, 
	1, 1, 1, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 1, 1, 1, 
	1, 1, 1, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 1, 
	1, 1, 45, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 46, 1, 
	1, 1, 1, 1, 1, 1, 47, 1, 
	48, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 48, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 48, 49, 49, 49, 49, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 48, 7, 50, 7, 7, 7, 
	7, 51, 7, 7, 7, 7, 7, 7, 
	7, 7, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 7, 7, 7, 7, 
	7, 7, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 7, 7, 
	7, 53, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 49, 49, 
	49, 49, 49, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 49, 14, 50, 
	14, 14, 14, 14, 51, 14, 55, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	56, 54, 58, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 59, 57, 60, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 60, 14, 14, 
	14, 14, 14, 14, 14, 14, 61, 14, 
	14, 62, 14, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 63, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 64, 1, 
	64, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 64, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 55, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	66, 65, 58, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 68, 
	67, 67, 69, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 69, 30, 30, 30, 30, 30, 30, 
	30, 70, 71, 30, 30, 72, 30, 30, 
	30, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 74, 30, 30, 30, 30, 
	30, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 30, 30, 30, 
	73, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 63, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 63, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 1, 
	64, 1, 76, 1, 1, 77, 78, 79, 
	79, 79, 79, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 78, 7, 80, 
	7, 7, 7, 7, 81, 7, 82, 7, 
	7, 83, 7, 7, 7, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 84, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 85, 49, 49, 49, 49, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	85, 7, 50, 7, 7, 7, 7, 51, 
	7, 86, 7, 7, 87, 7, 7, 7, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 7, 7, 7, 7, 7, 7, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 7, 7, 7, 53, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 69, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 69, 30, 30, 30, 30, 
	30, 30, 30, 30, 71, 30, 30, 72, 
	30, 30, 30, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 30, 30, 30, 
	30, 30, 30, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 30, 
	30, 30, 88, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 57, 
	89, 90, 90, 90, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 89, 
	7, 91, 7, 7, 7, 7, 92, 7, 
	93, 7, 7, 94, 7, 7, 7, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 7, 7, 7, 7, 7, 7, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 7, 7, 7, 95, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 96, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 96, 7, 10, 7, 7, 7, 
	7, 11, 7, 97, 7, 7, 98, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 31, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 33, 30, 
	30, 34, 30, 30, 30, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 30, 
	30, 30, 30, 30, 30, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 30, 30, 30, 99, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 18, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 100, 100, 100, 100, 
	100, 100, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 100, 100, 
	100, 101, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 102, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 105, 103, 103, 103, 103, 
	106, 103, 108, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 109, 107, 111, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	112, 110, 110, 108, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	114, 113, 111, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 116, 
	115, 115, 117, 118, 118, 118, 118, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 119, 7, 7, 7, 7, 
	120, 7, 7, 7, 7, 7, 7, 7, 
	7, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	121, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 117, 118, 118, 
	118, 118, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 117, 7, 119, 7, 
	7, 7, 7, 120, 7, 7, 7, 7, 
	7, 7, 7, 7, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 7, 7, 
	7, 7, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	7, 7, 7, 122, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	118, 118, 118, 118, 118, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 118, 
	14, 119, 14, 14, 14, 14, 120, 14, 
	124, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 125, 123, 127, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 128, 126, 
	126, 124, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 130, 129, 
	127, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 132, 131, 131, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 1, 1, 1, 1, 1, 1, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 1, 1, 1, 133, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 134, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 1, 
	1, 1, 136, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 137, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 1, 
	1, 1, 1, 1, 1, 1, 138, 1, 
	139, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 139, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 139, 140, 140, 140, 140, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 139, 7, 141, 7, 7, 7, 
	7, 142, 7, 7, 7, 7, 7, 7, 
	7, 7, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 7, 7, 7, 7, 
	7, 7, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 7, 7, 
	7, 144, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 140, 140, 
	140, 140, 140, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 140, 14, 141, 
	14, 14, 14, 14, 142, 14, 146, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	147, 145, 149, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 150, 148, 151, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 151, 14, 14, 
	14, 14, 14, 14, 14, 14, 152, 14, 
	14, 153, 14, 154, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 154, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 155, 1, 
	155, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 155, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 146, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	157, 156, 149, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 159, 
	158, 158, 160, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 160, 30, 30, 30, 30, 30, 30, 
	30, 161, 162, 30, 30, 163, 30, 30, 
	30, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 165, 30, 30, 30, 30, 
	30, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 30, 30, 30, 
	164, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 154, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 154, 1, 1, 1, 
	1, 1, 1, 1, 1, 166, 1, 1, 
	155, 1, 167, 168, 168, 168, 168, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 167, 7, 169, 7, 7, 7, 7, 
	170, 7, 171, 7, 7, 172, 7, 7, 
	7, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 7, 7, 7, 7, 7, 
	7, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 7, 7, 7, 
	173, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 174, 140, 140, 
	140, 140, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 174, 7, 141, 7, 
	7, 7, 7, 142, 7, 175, 7, 7, 
	176, 7, 7, 7, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 7, 7, 
	7, 7, 7, 7, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	7, 7, 7, 144, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	160, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 160, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	162, 30, 30, 163, 30, 30, 30, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 30, 30, 30, 30, 30, 30, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 30, 30, 30, 177, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 148, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 1, 1, 
	1, 1, 1, 1, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	1, 1, 1, 178, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	179, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 179, 
	1, 1, 1, 1, 1, 1, 1, 180, 
	1, 1, 1, 1, 1, 1, 1, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 1, 1, 1, 181, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 183, 1, 184, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 184, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 184, 
	185, 185, 185, 185, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	186, 7, 7, 7, 7, 187, 7, 7, 
	7, 7, 7, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	7, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 185, 185, 185, 185, 185, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 185, 14, 186, 14, 14, 14, 14, 
	187, 14, 191, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 192, 190, 194, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	195, 193, 196, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 196, 14, 14, 14, 14, 14, 14, 
	14, 14, 197, 14, 14, 198, 14, 199, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 199, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 200, 1, 200, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 191, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 202, 201, 194, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 204, 203, 203, 205, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 205, 30, 30, 
	30, 30, 30, 30, 30, 206, 207, 30, 
	30, 208, 30, 30, 30, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 210, 
	30, 30, 30, 30, 30, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 30, 30, 30, 209, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 200, 1, 212, 213, 
	213, 213, 213, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 212, 7, 214, 
	7, 7, 7, 7, 215, 7, 216, 7, 
	7, 217, 7, 7, 7, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 7, 
	7, 7, 7, 7, 7, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 7, 7, 7, 218, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 219, 185, 185, 185, 185, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	219, 7, 186, 7, 7, 7, 7, 187, 
	7, 220, 7, 7, 221, 7, 7, 7, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 7, 7, 7, 7, 7, 7, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 7, 7, 7, 189, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 205, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 205, 30, 30, 30, 30, 
	30, 30, 30, 30, 207, 30, 30, 208, 
	30, 30, 30, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 30, 30, 30, 
	30, 30, 30, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 30, 
	30, 30, 222, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 193, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 1, 224, 
	1, 225, 1, 227, 1, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 227, 226, 228, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 228, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 230, 1, 231, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 231, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 232, 1, 1, 234, 233, 235, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 100, 
	100, 100, 100, 100, 100, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 100, 100, 100, 236, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 1, 238, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 237, 237, 237, 237, 237, 237, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 237, 237, 239, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 103, 240, 14, 
	1, 241, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 30, 30, 30, 30, 30, 30, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 30, 30, 30, 242, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 241, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 244, 30, 30, 30, 30, 
	30, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 30, 30, 30, 
	243, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 245, 246, 247, 
	247, 247, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 245, 7, 248, 7, 
	7, 7, 7, 249, 7, 7, 7, 7, 
	7, 7, 7, 7, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 7, 7, 
	7, 7, 7, 7, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	7, 7, 7, 250, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	251, 252, 118, 118, 118, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 251, 
	7, 119, 7, 7, 7, 7, 120, 7, 
	7, 7, 7, 7, 7, 7, 7, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 7, 7, 7, 122, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 118, 118, 118, 118, 118, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 118, 14, 119, 14, 14, 14, 
	14, 120, 14, 1, 253, 1, 1, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1, 256, 255, 
	1, 227, 256, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	227, 226, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 44, 0, 8, 
	9, 45, 8, 9, 45, 10, 17, 11, 
	10, 11, 13, 14, 13, 14, 0, 10, 
	16, 17, 11, 15, 42, 17, 18, 18, 
	19, 20, 21, 22, 23, 21, 22, 23, 
	24, 25, 26, 31, 34, 40, 27, 28, 
	41, 27, 28, 41, 29, 108, 30, 29, 
	30, 32, 33, 32, 33, 29, 35, 108, 
	30, 34, 38, 108, 37, 111, 39, 25, 
	26, 31, 108, 30, 40, 39, 108, 30, 
	40, 43, 6, 7, 12, 17, 11, 44, 
	43, 17, 11, 44, 0, 112, 114, 0, 
	48, 49, 52, 50, 116, 51, 50, 116, 
	51, 53, 54, 53, 54, 56, 57, 58, 
	61, 120, 119, 59, 117, 60, 59, 117, 
	60, 62, 63, 62, 63, 65, 66, 67, 
	65, 66, 67, 68, 69, 70, 75, 78, 
	82, 71, 72, 83, 71, 72, 83, 73, 
	124, 74, 73, 74, 76, 77, 76, 77, 
	73, 79, 124, 74, 78, 80, 124, 81, 
	69, 70, 75, 124, 74, 82, 81, 124, 
	74, 82, 85, 86, 87, 85, 86, 87, 
	88, 89, 90, 95, 98, 102, 91, 92, 
	103, 91, 92, 103, 93, 125, 94, 93, 
	94, 96, 97, 96, 97, 93, 99, 125, 
	94, 98, 100, 125, 101, 89, 90, 95, 
	125, 94, 102, 101, 125, 94, 102, 127, 
	106, 107, 128, 130, 109, 110, 36, 109, 
	36, 111, 110, 113, 112, 0, 115, 114, 
	118, 118, 119, 120, 121, 122, 123, 57, 
	58, 61, 119, 122, 123, 126, 127, 128, 
	129
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 12, 14, 
	15, 14, 0, 16, 0, 18, 18, 18, 
	0, 0, 14, 14, 0, 0, 20, 21, 
	22, 21, 21, 0, 23, 0, 24, 0, 
	0, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 25, 27, 28, 
	28, 28, 27, 27, 29, 30, 30, 30, 
	0, 27, 28, 28, 28, 27, 27, 29, 
	30, 30, 30, 0, 32, 33, 10, 35, 
	0, 0, 0, 14, 37, 14, 0, 38, 
	0, 14, 14, 0, 0, 0, 0, 0, 
	0, 10, 10, 14, 15, 14, 0, 16, 
	0, 14, 14, 0, 0, 42, 3, 4, 
	0, 0, 5, 0, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	49, 18, 0, 0, 14, 14, 0, 0, 
	21, 22, 52, 21, 0, 23, 53, 27, 
	28, 28, 28, 55, 27, 29, 30, 56, 
	30, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 27, 28, 28, 28, 
	27, 27, 29, 30, 30, 30, 0, 58, 
	0, 0, 25, 25, 60, 59, 60, 0, 
	0, 0, 61, 3, 0, 65, 23, 0, 
	67, 69, 0, 0, 23, 28, 72, 28, 
	28, 28, 29, 0, 74, 76, 0, 0, 
	78
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 13, 13, 13, 19, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 0, 0, 26, 26, 
	31, 13, 26, 26, 31, 13, 32, 0, 
	34, 36, 36, 36, 36, 36, 36, 39, 
	39, 40, 41, 41, 41, 41, 41, 41, 
	1, 43, 44, 45, 46, 47, 48, 48, 
	12, 0, 50, 48, 48, 48, 51, 0, 
	54, 54, 57, 48, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 26, 26, 31, 13, 
	0, 0, 0, 0, 59, 59, 0, 61, 
	62, 63, 64, 66, 0, 67, 0, 68, 
	70, 71, 73, 75, 0, 76, 0, 77, 
	78, 0, 78
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 33 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 28 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 53 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 25 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 60 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 42 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 72 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 69 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 49 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 55 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 63 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 44 then
		begin
 $stderr.puts "EOF!" 		end
	when 62 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 43 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 47 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 34 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 77 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 39 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 71 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 70 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 45 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864, 7865
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 9, 14, 10, 
	14, 14, 14, 14, 11, 14, 16, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	17, 15, 19, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 20, 18, 21, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 21, 14, 14, 
	14, 14, 14, 14, 14, 14, 22, 14, 
	14, 23, 14, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 24, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 25, 1, 
	25, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 25, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 16, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	27, 26, 19, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 29, 
	28, 28, 31, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 31, 30, 30, 30, 30, 30, 30, 
	30, 32, 33, 30, 30, 34, 30, 30, 
	30, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 30, 30, 30, 30, 
	30, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 30, 30, 30, 
	35, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 24, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 1, 
	25, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 1, 39, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 39, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 1, 41, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 41, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 1, 1, 1, 1, 1, 1, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 1, 1, 1, 42, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 43, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 44, 1, 1, 1, 1, 
	1, 1, 1, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 1, 1, 1, 
	1, 1, 1, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 1, 
	1, 1, 45, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 46, 1, 
	1, 1, 1, 1, 1, 1, 47, 1, 
	48, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 48, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 48, 49, 49, 49, 49, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 48, 7, 50, 7, 7, 7, 
	7, 51, 7, 7, 7, 7, 7, 7, 
	7, 7, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 7, 7, 7, 7, 
	7, 7, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 7, 7, 
	7, 53, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 49, 49, 
	49, 49, 49, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 49, 14, 50, 
	14, 14, 14, 14, 51, 14, 55, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	56, 54, 58, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 59, 57, 60, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 60, 14, 14, 
	14, 14, 14, 14, 14, 14, 61, 14, 
	14, 62, 14, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 63, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 64, 1, 
	64, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 64, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 55, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	66, 65, 58, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 68, 
	67, 67, 69, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 69, 30, 30, 30, 30, 30, 30, 
	30, 70, 71, 30, 30, 72, 30, 30, 
	30, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 74, 30, 30, 30, 30, 
	30, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 30, 30, 30, 
	73, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 63, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 63, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 1, 
	64, 1, 76, 1, 1, 77, 78, 79, 
	79, 79, 79, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 78, 7, 80, 
	7, 7, 7, 7, 81, 7, 82, 7, 
	7, 83, 7, 7, 7, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 84, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 85, 49, 49, 49, 49, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	85, 7, 50, 7, 7, 7, 7, 51, 
	7, 86, 7, 7, 87, 7, 7, 7, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 7, 7, 7, 7, 7, 7, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 7, 7, 7, 53, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 69, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 69, 30, 30, 30, 30, 
	30, 30, 30, 30, 71, 30, 30, 72, 
	30, 30, 30, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 30, 30, 30, 
	30, 30, 30, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 30, 
	30, 30, 88, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 57, 
	89, 90, 90, 90, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 89, 
	7, 91, 7, 7, 7, 7, 92, 7, 
	93, 7, 7, 94, 7, 7, 7, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 7, 7, 7, 7, 7, 7, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 7, 7, 7, 95, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 96, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 96, 7, 10, 7, 7, 7, 
	7, 11, 7, 97, 7, 7, 98, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 31, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 33, 30, 
	30, 34, 30, 30, 30, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 30, 
	30, 30, 30, 30, 30, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 30, 30, 30, 99, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 18, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 100, 100, 100, 100, 
	100, 100, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 100, 100, 
	100, 101, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 102, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 105, 103, 103, 103, 103, 
	106, 103, 108, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 109, 107, 111, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	112, 110, 110, 108, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	114, 113, 111, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 116, 
	115, 115, 117, 118, 118, 118, 118, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 119, 7, 7, 7, 7, 
	120, 7, 7, 7, 7, 7, 7, 7, 
	7, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	121, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 117, 118, 118, 
	118, 118, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 117, 7, 119, 7, 
	7, 7, 7, 120, 7, 7, 7, 7, 
	7, 7, 7, 7, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 7, 7, 
	7, 7, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	7, 7, 7, 122, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	118, 118, 118, 118, 118, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 118, 
	14, 119, 14, 14, 14, 14, 120, 14, 
	124, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 125, 123, 127, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 128, 126, 
	126, 124, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 130, 129, 
	127, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 132, 131, 131, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 1, 1, 1, 1, 1, 1, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 1, 1, 1, 133, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 134, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 1, 
	1, 1, 136, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 137, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 1, 
	1, 1, 1, 1, 1, 1, 138, 1, 
	139, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 139, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 139, 140, 140, 140, 140, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 139, 7, 141, 7, 7, 7, 
	7, 142, 7, 7, 7, 7, 7, 7, 
	7, 7, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 7, 7, 7, 7, 
	7, 7, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 7, 7, 
	7, 144, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 140, 140, 
	140, 140, 140, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 140, 14, 141, 
	14, 14, 14, 14, 142, 14, 146, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	147, 145, 149, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 150, 148, 151, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 151, 14, 14, 
	14, 14, 14, 14, 14, 14, 152, 14, 
	14, 153, 14, 154, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 154, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 155, 1, 
	155, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 155, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 146, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	157, 156, 149, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 159, 
	158, 158, 160, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 160, 30, 30, 30, 30, 30, 30, 
	30, 161, 162, 30, 30, 163, 30, 30, 
	30, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 165, 30, 30, 30, 30, 
	30, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 30, 30, 30, 
	164, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 154, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 154, 1, 1, 1, 
	1, 1, 1, 1, 1, 166, 1, 1, 
	155, 1, 167, 168, 168, 168, 168, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 167, 7, 169, 7, 7, 7, 7, 
	170, 7, 171, 7, 7, 172, 7, 7, 
	7, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 7, 7, 7, 7, 7, 
	7, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 7, 7, 7, 
	173, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 174, 140, 140, 
	140, 140, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 174, 7, 141, 7, 
	7, 7, 7, 142, 7, 175, 7, 7, 
	176, 7, 7, 7, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 7, 7, 
	7, 7, 7, 7, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	7, 7, 7, 144, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	160, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 160, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	162, 30, 30, 163, 30, 30, 30, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 30, 30, 30, 30, 30, 30, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 30, 30, 30, 177, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 148, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 1, 1, 
	1, 1, 1, 1, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	1, 1, 1, 178, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	179, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 179, 
	1, 1, 1, 1, 1, 1, 1, 180, 
	1, 1, 1, 1, 1, 1, 1, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 1, 1, 1, 181, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 183, 1, 184, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 184, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 184, 
	185, 185, 185, 185, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	186, 7, 7, 7, 7, 187, 7, 7, 
	7, 7, 7, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	7, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 185, 185, 185, 185, 185, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 185, 14, 186, 14, 14, 14, 14, 
	187, 14, 191, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 192, 190, 194, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	195, 193, 196, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 196, 14, 14, 14, 14, 14, 14, 
	14, 14, 197, 14, 14, 198, 14, 199, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 199, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 200, 1, 200, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 191, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 202, 201, 194, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 204, 203, 203, 205, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 205, 30, 30, 
	30, 30, 30, 30, 30, 206, 207, 30, 
	30, 208, 30, 30, 30, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 210, 
	30, 30, 30, 30, 30, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 30, 30, 30, 209, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 200, 1, 212, 213, 
	213, 213, 213, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 212, 7, 214, 
	7, 7, 7, 7, 215, 7, 216, 7, 
	7, 217, 7, 7, 7, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 7, 
	7, 7, 7, 7, 7, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 7, 7, 7, 218, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 219, 185, 185, 185, 185, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	219, 7, 186, 7, 7, 7, 7, 187, 
	7, 220, 7, 7, 221, 7, 7, 7, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 7, 7, 7, 7, 7, 7, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 7, 7, 7, 189, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 205, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 205, 30, 30, 30, 30, 
	30, 30, 30, 30, 207, 30, 30, 208, 
	30, 30, 30, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 30, 30, 30, 
	30, 30, 30, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 30, 
	30, 30, 222, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 193, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 1, 224, 
	1, 225, 1, 227, 1, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 227, 226, 228, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 228, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 230, 1, 231, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 231, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 232, 1, 1, 234, 233, 235, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 100, 
	100, 100, 100, 100, 100, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 100, 100, 100, 236, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 1, 238, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 237, 237, 237, 237, 237, 237, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 237, 237, 239, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 103, 240, 14, 
	1, 241, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 30, 30, 30, 30, 30, 30, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 30, 30, 30, 242, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 241, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 244, 30, 30, 30, 30, 
	30, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 30, 30, 30, 
	243, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 245, 246, 247, 
	247, 247, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 245, 7, 248, 7, 
	7, 7, 7, 249, 7, 7, 7, 7, 
	7, 7, 7, 7, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 7, 7, 
	7, 7, 7, 7, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	7, 7, 7, 250, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	251, 252, 118, 118, 118, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 251, 
	7, 119, 7, 7, 7, 7, 120, 7, 
	7, 7, 7, 7, 7, 7, 7, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 7, 7, 7, 122, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 118, 118, 118, 118, 118, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 118, 14, 119, 14, 14, 14, 
	14, 120, 14, 1, 253, 1, 1, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1, 256, 255, 
	1, 227, 256, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	227, 226, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 44, 0, 8, 
	9, 45, 8, 9, 45, 10, 17, 11, 
	10, 11, 13, 14, 13, 14, 0, 10, 
	16, 17, 11, 15, 42, 17, 18, 18, 
	19, 20, 21, 22, 23, 21, 22, 23, 
	24, 25, 26, 31, 34, 40, 27, 28, 
	41, 27, 28, 41, 29, 108, 30, 29, 
	30, 32, 33, 32, 33, 29, 35, 108, 
	30, 34, 38, 108, 37, 111, 39, 25, 
	26, 31, 108, 30, 40, 39, 108, 30, 
	40, 43, 6, 7, 12, 17, 11, 44, 
	43, 17, 11, 44, 0, 112, 114, 0, 
	48, 49, 52, 50, 116, 51, 50, 116, 
	51, 53, 54, 53, 54, 56, 57, 58, 
	61, 120, 119, 59, 117, 60, 59, 117, 
	60, 62, 63, 62, 63, 65, 66, 67, 
	65, 66, 67, 68, 69, 70, 75, 78, 
	82, 71, 72, 83, 71, 72, 83, 73, 
	124, 74, 73, 74, 76, 77, 76, 77, 
	73, 79, 124, 74, 78, 80, 124, 81, 
	69, 70, 75, 124, 74, 82, 81, 124, 
	74, 82, 85, 86, 87, 85, 86, 87, 
	88, 89, 90, 95, 98, 102, 91, 92, 
	103, 91, 92, 103, 93, 125, 94, 93, 
	94, 96, 97, 96, 97, 93, 99, 125, 
	94, 98, 100, 125, 101, 89, 90, 95, 
	125, 94, 102, 101, 125, 94, 102, 127, 
	106, 107, 128, 130, 109, 110, 36, 109, 
	36, 111, 110, 113, 112, 0, 115, 114, 
	118, 118, 119, 120, 121, 122, 123, 57, 
	58, 61, 119, 122, 123, 126, 127, 128, 
	129
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 12, 14, 
	15, 14, 0, 16, 0, 18, 18, 18, 
	0, 0, 14, 14, 0, 0, 20, 21, 
	22, 21, 21, 0, 23, 0, 24, 0, 
	0, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 25, 27, 28, 
	28, 28, 27, 27, 29, 30, 30, 30, 
	0, 27, 28, 28, 28, 27, 27, 29, 
	30, 30, 30, 0, 32, 33, 10, 35, 
	0, 0, 0, 14, 37, 14, 0, 38, 
	0, 14, 14, 0, 0, 0, 0, 0, 
	0, 10, 10, 14, 15, 14, 0, 16, 
	0, 14, 14, 0, 0, 42, 3, 4, 
	0, 0, 5, 0, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	49, 18, 0, 0, 14, 14, 0, 0, 
	21, 22, 52, 21, 0, 23, 53, 27, 
	28, 28, 28, 55, 27, 29, 30, 56, 
	30, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 27, 28, 28, 28, 
	27, 27, 29, 30, 30, 30, 0, 58, 
	0, 0, 25, 25, 60, 59, 60, 0, 
	0, 0, 61, 3, 0, 65, 23, 0, 
	67, 69, 0, 0, 23, 28, 72, 28, 
	28, 28, 29, 0, 74, 76, 0, 0, 
	78
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 13, 13, 13, 19, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 0, 0, 26, 26, 
	31, 13, 26, 26, 31, 13, 32, 0, 
	34, 36, 36, 36, 36, 36, 36, 39, 
	39, 40, 41, 41, 41, 41, 41, 41, 
	1, 43, 44, 45, 46, 47, 48, 48, 
	12, 0, 50, 48, 48, 48, 51, 0, 
	54, 54, 57, 48, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 26, 26, 31, 13, 
	0, 0, 0, 0, 59, 59, 0, 61, 
	62, 63, 64, 66, 0, 67, 0, 68, 
	70, 71, 73, 75, 0, 76, 0, 77, 
	78, 0, 78
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 33 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 28 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 53 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 25 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 60 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 42 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 72 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 69 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 49 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 55 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 63 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 44 then
		begin
 $stderr.puts "EOF!" 		end
	when 62 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 43 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 47 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 34 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 77 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 39 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 71 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 70 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 45 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864, 7865
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 9, 14, 10, 
	14, 14, 14, 14, 11, 14, 16, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	17, 15, 19, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 20, 18, 21, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 21, 14, 14, 
	14, 14, 14, 14, 14, 14, 22, 14, 
	14, 23, 14, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 24, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 25, 1, 
	25, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 25, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 16, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	27, 26, 19, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 29, 
	28, 28, 31, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 31, 30, 30, 30, 30, 30, 30, 
	30, 32, 33, 30, 30, 34, 30, 30, 
	30, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 30, 30, 30, 30, 
	30, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 30, 30, 30, 
	35, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 24, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 1, 
	25, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 1, 39, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 39, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 1, 41, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 41, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 1, 1, 1, 1, 1, 1, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 1, 1, 1, 42, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 43, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 44, 1, 1, 1, 1, 
	1, 1, 1, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 1, 1, 1, 
	1, 1, 1, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 1, 
	1, 1, 45, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 46, 1, 
	1, 1, 1, 1, 1, 1, 47, 1, 
	48, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 48, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 48, 49, 49, 49, 49, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 48, 7, 50, 7, 7, 7, 
	7, 51, 7, 7, 7, 7, 7, 7, 
	7, 7, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 7, 7, 7, 7, 
	7, 7, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 7, 7, 
	7, 53, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 49, 49, 
	49, 49, 49, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 49, 14, 50, 
	14, 14, 14, 14, 51, 14, 55, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	56, 54, 58, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 59, 57, 60, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 60, 14, 14, 
	14, 14, 14, 14, 14, 14, 61, 14, 
	14, 62, 14, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 63, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 64, 1, 
	64, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 64, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 55, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	66, 65, 58, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 68, 
	67, 67, 69, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 69, 30, 30, 30, 30, 30, 30, 
	30, 70, 71, 30, 30, 72, 30, 30, 
	30, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 74, 30, 30, 30, 30, 
	30, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 30, 30, 30, 
	73, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 63, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 63, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 1, 
	64, 1, 76, 1, 1, 77, 78, 79, 
	79, 79, 79, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 78, 7, 80, 
	7, 7, 7, 7, 81, 7, 82, 7, 
	7, 83, 7, 7, 7, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 84, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 85, 49, 49, 49, 49, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	85, 7, 50, 7, 7, 7, 7, 51, 
	7, 86, 7, 7, 87, 7, 7, 7, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 7, 7, 7, 7, 7, 7, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 7, 7, 7, 53, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 69, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 69, 30, 30, 30, 30, 
	30, 30, 30, 30, 71, 30, 30, 72, 
	30, 30, 30, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 30, 30, 30, 
	30, 30, 30, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 30, 
	30, 30, 88, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 57, 
	89, 90, 90, 90, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 89, 
	7, 91, 7, 7, 7, 7, 92, 7, 
	93, 7, 7, 94, 7, 7, 7, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 7, 7, 7, 7, 7, 7, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 7, 7, 7, 95, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 96, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 96, 7, 10, 7, 7, 7, 
	7, 11, 7, 97, 7, 7, 98, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 31, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 33, 30, 
	30, 34, 30, 30, 30, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 30, 
	30, 30, 30, 30, 30, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 30, 30, 30, 99, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 18, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 100, 100, 100, 100, 
	100, 100, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 100, 100, 
	100, 101, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 102, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 105, 103, 103, 103, 103, 
	106, 103, 108, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 109, 107, 111, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	112, 110, 110, 108, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	114, 113, 111, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 116, 
	115, 115, 117, 118, 118, 118, 118, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 119, 7, 7, 7, 7, 
	120, 7, 7, 7, 7, 7, 7, 7, 
	7, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	121, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 117, 118, 118, 
	118, 118, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 117, 7, 119, 7, 
	7, 7, 7, 120, 7, 7, 7, 7, 
	7, 7, 7, 7, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 7, 7, 
	7, 7, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	7, 7, 7, 122, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	118, 118, 118, 118, 118, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 118, 
	14, 119, 14, 14, 14, 14, 120, 14, 
	124, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 125, 123, 127, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 128, 126, 
	126, 124, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 130, 129, 
	127, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 132, 131, 131, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 1, 1, 1, 1, 1, 1, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 1, 1, 1, 133, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 134, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 1, 
	1, 1, 136, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 137, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 1, 
	1, 1, 1, 1, 1, 1, 138, 1, 
	139, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 139, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 139, 140, 140, 140, 140, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 139, 7, 141, 7, 7, 7, 
	7, 142, 7, 7, 7, 7, 7, 7, 
	7, 7, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 7, 7, 7, 7, 
	7, 7, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 7, 7, 
	7, 144, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 140, 140, 
	140, 140, 140, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 140, 14, 141, 
	14, 14, 14, 14, 142, 14, 146, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	147, 145, 149, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 150, 148, 151, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 151, 14, 14, 
	14, 14, 14, 14, 14, 14, 152, 14, 
	14, 153, 14, 154, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 154, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 155, 1, 
	155, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 155, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 146, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	157, 156, 149, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 159, 
	158, 158, 160, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 160, 30, 30, 30, 30, 30, 30, 
	30, 161, 162, 30, 30, 163, 30, 30, 
	30, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 165, 30, 30, 30, 30, 
	30, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 30, 30, 30, 
	164, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 154, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 154, 1, 1, 1, 
	1, 1, 1, 1, 1, 166, 1, 1, 
	155, 1, 167, 168, 168, 168, 168, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 167, 7, 169, 7, 7, 7, 7, 
	170, 7, 171, 7, 7, 172, 7, 7, 
	7, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 7, 7, 7, 7, 7, 
	7, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 7, 7, 7, 
	173, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 174, 140, 140, 
	140, 140, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 174, 7, 141, 7, 
	7, 7, 7, 142, 7, 175, 7, 7, 
	176, 7, 7, 7, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 7, 7, 
	7, 7, 7, 7, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	7, 7, 7, 144, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	160, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 160, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	162, 30, 30, 163, 30, 30, 30, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 30, 30, 30, 30, 30, 30, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 30, 30, 30, 177, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 148, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 1, 1, 
	1, 1, 1, 1, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	1, 1, 1, 178, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	179, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 179, 
	1, 1, 1, 1, 1, 1, 1, 180, 
	1, 1, 1, 1, 1, 1, 1, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 1, 1, 1, 181, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 183, 1, 184, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 184, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 184, 
	185, 185, 185, 185, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	186, 7, 7, 7, 7, 187, 7, 7, 
	7, 7, 7, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	7, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 185, 185, 185, 185, 185, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 185, 14, 186, 14, 14, 14, 14, 
	187, 14, 191, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 192, 190, 194, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	195, 193, 196, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 196, 14, 14, 14, 14, 14, 14, 
	14, 14, 197, 14, 14, 198, 14, 199, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 199, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 200, 1, 200, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 191, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 202, 201, 194, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 204, 203, 203, 205, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 205, 30, 30, 
	30, 30, 30, 30, 30, 206, 207, 30, 
	30, 208, 30, 30, 30, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 210, 
	30, 30, 30, 30, 30, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 30, 30, 30, 209, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 200, 1, 212, 213, 
	213, 213, 213, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 212, 7, 214, 
	7, 7, 7, 7, 215, 7, 216, 7, 
	7, 217, 7, 7, 7, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 7, 
	7, 7, 7, 7, 7, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 7, 7, 7, 218, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 219, 185, 185, 185, 185, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	219, 7, 186, 7, 7, 7, 7, 187, 
	7, 220, 7, 7, 221, 7, 7, 7, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 7, 7, 7, 7, 7, 7, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 7, 7, 7, 189, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 205, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 205, 30, 30, 30, 30, 
	30, 30, 30, 30, 207, 30, 30, 208, 
	30, 30, 30, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 30, 30, 30, 
	30, 30, 30, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 30, 
	30, 30, 222, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 193, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 1, 224, 
	1, 225, 1, 227, 1, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 227, 226, 228, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 228, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 230, 1, 231, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 231, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 232, 1, 1, 234, 233, 235, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 100, 
	100, 100, 100, 100, 100, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 100, 100, 100, 236, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 1, 238, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 237, 237, 237, 237, 237, 237, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 237, 237, 239, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 103, 240, 14, 
	1, 241, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 30, 30, 30, 30, 30, 30, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 30, 30, 30, 242, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 241, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 244, 30, 30, 30, 30, 
	30, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 30, 30, 30, 
	243, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 245, 246, 247, 
	247, 247, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 245, 7, 248, 7, 
	7, 7, 7, 249, 7, 7, 7, 7, 
	7, 7, 7, 7, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 7, 7, 
	7, 7, 7, 7, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	7, 7, 7, 250, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	251, 252, 118, 118, 118, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 251, 
	7, 119, 7, 7, 7, 7, 120, 7, 
	7, 7, 7, 7, 7, 7, 7, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 7, 7, 7, 122, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 118, 118, 118, 118, 118, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 118, 14, 119, 14, 14, 14, 
	14, 120, 14, 1, 253, 1, 1, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1, 256, 255, 
	1, 227, 256, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	227, 226, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 44, 0, 8, 
	9, 45, 8, 9, 45, 10, 17, 11, 
	10, 11, 13, 14, 13, 14, 0, 10, 
	16, 17, 11, 15, 42, 17, 18, 18, 
	19, 20, 21, 22, 23, 21, 22, 23, 
	24, 25, 26, 31, 34, 40, 27, 28, 
	41, 27, 28, 41, 29, 108, 30, 29, 
	30, 32, 33, 32, 33, 29, 35, 108, 
	30, 34, 38, 108, 37, 111, 39, 25, 
	26, 31, 108, 30, 40, 39, 108, 30, 
	40, 43, 6, 7, 12, 17, 11, 44, 
	43, 17, 11, 44, 0, 112, 114, 0, 
	48, 49, 52, 50, 116, 51, 50, 116, 
	51, 53, 54, 53, 54, 56, 57, 58, 
	61, 120, 119, 59, 117, 60, 59, 117, 
	60, 62, 63, 62, 63, 65, 66, 67, 
	65, 66, 67, 68, 69, 70, 75, 78, 
	82, 71, 72, 83, 71, 72, 83, 73, 
	124, 74, 73, 74, 76, 77, 76, 77, 
	73, 79, 124, 74, 78, 80, 124, 81, 
	69, 70, 75, 124, 74, 82, 81, 124, 
	74, 82, 85, 86, 87, 85, 86, 87, 
	88, 89, 90, 95, 98, 102, 91, 92, 
	103, 91, 92, 103, 93, 125, 94, 93, 
	94, 96, 97, 96, 97, 93, 99, 125, 
	94, 98, 100, 125, 101, 89, 90, 95, 
	125, 94, 102, 101, 125, 94, 102, 127, 
	106, 107, 128, 130, 109, 110, 36, 109, 
	36, 111, 110, 113, 112, 0, 115, 114, 
	118, 118, 119, 120, 121, 122, 123, 57, 
	58, 61, 119, 122, 123, 126, 127, 128, 
	129
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 12, 14, 
	15, 14, 0, 16, 0, 18, 18, 18, 
	0, 0, 14, 14, 0, 0, 20, 21, 
	22, 21, 21, 0, 23, 0, 24, 0, 
	0, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 25, 27, 28, 
	28, 28, 27, 27, 29, 30, 30, 30, 
	0, 27, 28, 28, 28, 27, 27, 29, 
	30, 30, 30, 0, 32, 33, 10, 35, 
	0, 0, 0, 14, 37, 14, 0, 38, 
	0, 14, 14, 0, 0, 0, 0, 0, 
	0, 10, 10, 14, 15, 14, 0, 16, 
	0, 14, 14, 0, 0, 42, 3, 4, 
	0, 0, 5, 0, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	49, 18, 0, 0, 14, 14, 0, 0, 
	21, 22, 52, 21, 0, 23, 53, 27, 
	28, 28, 28, 55, 27, 29, 30, 56, 
	30, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 27, 28, 28, 28, 
	27, 27, 29, 30, 30, 30, 0, 58, 
	0, 0, 25, 25, 60, 59, 60, 0, 
	0, 0, 61, 3, 0, 65, 23, 0, 
	67, 69, 0, 0, 23, 28, 72, 28, 
	28, 28, 29, 0, 74, 76, 0, 0, 
	78
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 13, 13, 13, 19, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 0, 0, 26, 26, 
	31, 13, 26, 26, 31, 13, 32, 0, 
	34, 36, 36, 36, 36, 36, 36, 39, 
	39, 40, 41, 41, 41, 41, 41, 41, 
	1, 43, 44, 45, 46, 47, 48, 48, 
	12, 0, 50, 48, 48, 48, 51, 0, 
	54, 54, 57, 48, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 26, 26, 31, 13, 
	0, 0, 0, 0, 59, 59, 0, 61, 
	62, 63, 64, 66, 0, 67, 0, 68, 
	70, 71, 73, 75, 0, 76, 0, 77, 
	78, 0, 78
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 33 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 28 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 53 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 25 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 60 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 42 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 72 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 69 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 49 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 55 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 63 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 44 then
		begin
 $stderr.puts "EOF!" 		end
	when 62 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 43 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 47 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 34 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 77 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 39 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 71 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 70 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 45 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864, 7865
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 9, 14, 10, 
	14, 14, 14, 14, 11, 14, 16, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	17, 15, 19, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 20, 18, 21, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 21, 14, 14, 
	14, 14, 14, 14, 14, 14, 22, 14, 
	14, 23, 14, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 24, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 25, 1, 
	25, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 25, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 16, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	27, 26, 19, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 29, 
	28, 28, 31, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 31, 30, 30, 30, 30, 30, 30, 
	30, 32, 33, 30, 30, 34, 30, 30, 
	30, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 30, 30, 30, 30, 
	30, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 30, 30, 30, 
	35, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 24, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 1, 
	25, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 1, 39, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 39, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 1, 41, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 41, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 1, 1, 1, 1, 1, 1, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 1, 1, 1, 42, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 43, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 44, 1, 1, 1, 1, 
	1, 1, 1, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 1, 1, 1, 
	1, 1, 1, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 1, 
	1, 1, 45, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 46, 1, 
	1, 1, 1, 1, 1, 1, 47, 1, 
	48, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 48, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 48, 49, 49, 49, 49, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 48, 7, 50, 7, 7, 7, 
	7, 51, 7, 7, 7, 7, 7, 7, 
	7, 7, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 7, 7, 7, 7, 
	7, 7, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 7, 7, 
	7, 53, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 49, 49, 
	49, 49, 49, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 49, 14, 50, 
	14, 14, 14, 14, 51, 14, 55, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	56, 54, 58, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 59, 57, 60, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 60, 14, 14, 
	14, 14, 14, 14, 14, 14, 61, 14, 
	14, 62, 14, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 63, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 64, 1, 
	64, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 64, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 55, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	66, 65, 58, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 68, 
	67, 67, 69, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 69, 30, 30, 30, 30, 30, 30, 
	30, 70, 71, 30, 30, 72, 30, 30, 
	30, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 74, 30, 30, 30, 30, 
	30, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 30, 30, 30, 
	73, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 63, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 63, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 1, 
	64, 1, 76, 1, 1, 77, 78, 79, 
	79, 79, 79, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 78, 7, 80, 
	7, 7, 7, 7, 81, 7, 82, 7, 
	7, 83, 7, 7, 7, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 84, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 85, 49, 49, 49, 49, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	85, 7, 50, 7, 7, 7, 7, 51, 
	7, 86, 7, 7, 87, 7, 7, 7, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 7, 7, 7, 7, 7, 7, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 7, 7, 7, 53, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 69, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 69, 30, 30, 30, 30, 
	30, 30, 30, 30, 71, 30, 30, 72, 
	30, 30, 30, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 30, 30, 30, 
	30, 30, 30, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 30, 
	30, 30, 88, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 57, 
	89, 90, 90, 90, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 89, 
	7, 91, 7, 7, 7, 7, 92, 7, 
	93, 7, 7, 94, 7, 7, 7, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 7, 7, 7, 7, 7, 7, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 7, 7, 7, 95, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 96, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 96, 7, 10, 7, 7, 7, 
	7, 11, 7, 97, 7, 7, 98, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 31, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 33, 30, 
	30, 34, 30, 30, 30, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 30, 
	30, 30, 30, 30, 30, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 30, 30, 30, 99, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 18, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 100, 100, 100, 100, 
	100, 100, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 100, 100, 
	100, 101, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 102, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 105, 103, 103, 103, 103, 
	106, 103, 108, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 109, 107, 111, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	112, 110, 110, 108, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	114, 113, 111, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 116, 
	115, 115, 117, 118, 118, 118, 118, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 119, 7, 7, 7, 7, 
	120, 7, 7, 7, 7, 7, 7, 7, 
	7, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	121, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 117, 118, 118, 
	118, 118, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 117, 7, 119, 7, 
	7, 7, 7, 120, 7, 7, 7, 7, 
	7, 7, 7, 7, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 7, 7, 
	7, 7, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	7, 7, 7, 122, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	118, 118, 118, 118, 118, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 118, 
	14, 119, 14, 14, 14, 14, 120, 14, 
	124, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 125, 123, 127, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 128, 126, 
	126, 124, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 130, 129, 
	127, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 132, 131, 131, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 1, 1, 1, 1, 1, 1, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 1, 1, 1, 133, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 134, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 1, 
	1, 1, 136, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 137, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 1, 
	1, 1, 1, 1, 1, 1, 138, 1, 
	139, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 139, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 139, 140, 140, 140, 140, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 139, 7, 141, 7, 7, 7, 
	7, 142, 7, 7, 7, 7, 7, 7, 
	7, 7, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 7, 7, 7, 7, 
	7, 7, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 7, 7, 
	7, 144, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 140, 140, 
	140, 140, 140, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 140, 14, 141, 
	14, 14, 14, 14, 142, 14, 146, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	147, 145, 149, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 150, 148, 151, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 151, 14, 14, 
	14, 14, 14, 14, 14, 14, 152, 14, 
	14, 153, 14, 154, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 154, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 155, 1, 
	155, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 155, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 146, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	157, 156, 149, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 159, 
	158, 158, 160, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 160, 30, 30, 30, 30, 30, 30, 
	30, 161, 162, 30, 30, 163, 30, 30, 
	30, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 165, 30, 30, 30, 30, 
	30, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 30, 30, 30, 
	164, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 154, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 154, 1, 1, 1, 
	1, 1, 1, 1, 1, 166, 1, 1, 
	155, 1, 167, 168, 168, 168, 168, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 167, 7, 169, 7, 7, 7, 7, 
	170, 7, 171, 7, 7, 172, 7, 7, 
	7, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 7, 7, 7, 7, 7, 
	7, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 7, 7, 7, 
	173, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 174, 140, 140, 
	140, 140, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 174, 7, 141, 7, 
	7, 7, 7, 142, 7, 175, 7, 7, 
	176, 7, 7, 7, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 7, 7, 
	7, 7, 7, 7, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	7, 7, 7, 144, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	160, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 160, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	162, 30, 30, 163, 30, 30, 30, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 30, 30, 30, 30, 30, 30, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 30, 30, 30, 177, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 148, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 1, 1, 
	1, 1, 1, 1, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	1, 1, 1, 178, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	179, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 179, 
	1, 1, 1, 1, 1, 1, 1, 180, 
	1, 1, 1, 1, 1, 1, 1, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 1, 1, 1, 181, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 183, 1, 184, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 184, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 184, 
	185, 185, 185, 185, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	186, 7, 7, 7, 7, 187, 7, 7, 
	7, 7, 7, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	7, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 185, 185, 185, 185, 185, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 185, 14, 186, 14, 14, 14, 14, 
	187, 14, 191, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 192, 190, 194, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	195, 193, 196, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 196, 14, 14, 14, 14, 14, 14, 
	14, 14, 197, 14, 14, 198, 14, 199, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 199, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 200, 1, 200, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 191, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 202, 201, 194, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 204, 203, 203, 205, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 205, 30, 30, 
	30, 30, 30, 30, 30, 206, 207, 30, 
	30, 208, 30, 30, 30, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 210, 
	30, 30, 30, 30, 30, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 30, 30, 30, 209, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 200, 1, 212, 213, 
	213, 213, 213, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 212, 7, 214, 
	7, 7, 7, 7, 215, 7, 216, 7, 
	7, 217, 7, 7, 7, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 7, 
	7, 7, 7, 7, 7, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 7, 7, 7, 218, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 219, 185, 185, 185, 185, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	219, 7, 186, 7, 7, 7, 7, 187, 
	7, 220, 7, 7, 221, 7, 7, 7, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 7, 7, 7, 7, 7, 7, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 7, 7, 7, 189, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 205, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 205, 30, 30, 30, 30, 
	30, 30, 30, 30, 207, 30, 30, 208, 
	30, 30, 30, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 30, 30, 30, 
	30, 30, 30, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 30, 
	30, 30, 222, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 193, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 1, 224, 
	1, 225, 1, 227, 1, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 227, 226, 228, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 228, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 230, 1, 231, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 231, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 232, 1, 1, 234, 233, 235, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 100, 
	100, 100, 100, 100, 100, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 100, 100, 100, 236, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 1, 238, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 237, 237, 237, 237, 237, 237, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 237, 237, 239, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 103, 240, 14, 
	1, 241, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 30, 30, 30, 30, 30, 30, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 30, 30, 30, 242, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 241, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 244, 30, 30, 30, 30, 
	30, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 30, 30, 30, 
	243, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 245, 246, 247, 
	247, 247, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 245, 7, 248, 7, 
	7, 7, 7, 249, 7, 7, 7, 7, 
	7, 7, 7, 7, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 7, 7, 
	7, 7, 7, 7, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	7, 7, 7, 250, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	251, 252, 118, 118, 118, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 251, 
	7, 119, 7, 7, 7, 7, 120, 7, 
	7, 7, 7, 7, 7, 7, 7, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 7, 7, 7, 122, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 118, 118, 118, 118, 118, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 118, 14, 119, 14, 14, 14, 
	14, 120, 14, 1, 253, 1, 1, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1, 256, 255, 
	1, 227, 256, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	227, 226, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 44, 0, 8, 
	9, 45, 8, 9, 45, 10, 17, 11, 
	10, 11, 13, 14, 13, 14, 0, 10, 
	16, 17, 11, 15, 42, 17, 18, 18, 
	19, 20, 21, 22, 23, 21, 22, 23, 
	24, 25, 26, 31, 34, 40, 27, 28, 
	41, 27, 28, 41, 29, 108, 30, 29, 
	30, 32, 33, 32, 33, 29, 35, 108, 
	30, 34, 38, 108, 37, 111, 39, 25, 
	26, 31, 108, 30, 40, 39, 108, 30, 
	40, 43, 6, 7, 12, 17, 11, 44, 
	43, 17, 11, 44, 0, 112, 114, 0, 
	48, 49, 52, 50, 116, 51, 50, 116, 
	51, 53, 54, 53, 54, 56, 57, 58, 
	61, 120, 119, 59, 117, 60, 59, 117, 
	60, 62, 63, 62, 63, 65, 66, 67, 
	65, 66, 67, 68, 69, 70, 75, 78, 
	82, 71, 72, 83, 71, 72, 83, 73, 
	124, 74, 73, 74, 76, 77, 76, 77, 
	73, 79, 124, 74, 78, 80, 124, 81, 
	69, 70, 75, 124, 74, 82, 81, 124, 
	74, 82, 85, 86, 87, 85, 86, 87, 
	88, 89, 90, 95, 98, 102, 91, 92, 
	103, 91, 92, 103, 93, 125, 94, 93, 
	94, 96, 97, 96, 97, 93, 99, 125, 
	94, 98, 100, 125, 101, 89, 90, 95, 
	125, 94, 102, 101, 125, 94, 102, 127, 
	106, 107, 128, 130, 109, 110, 36, 109, 
	36, 111, 110, 113, 112, 0, 115, 114, 
	118, 118, 119, 120, 121, 122, 123, 57, 
	58, 61, 119, 122, 123, 126, 127, 128, 
	129
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 12, 14, 
	15, 14, 0, 16, 0, 18, 18, 18, 
	0, 0, 14, 14, 0, 0, 20, 21, 
	22, 21, 21, 0, 23, 0, 24, 0, 
	0, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 25, 27, 28, 
	28, 28, 27, 27, 29, 30, 30, 30, 
	0, 27, 28, 28, 28, 27, 27, 29, 
	30, 30, 30, 0, 32, 33, 10, 35, 
	0, 0, 0, 14, 37, 14, 0, 38, 
	0, 14, 14, 0, 0, 0, 0, 0, 
	0, 10, 10, 14, 15, 14, 0, 16, 
	0, 14, 14, 0, 0, 42, 3, 4, 
	0, 0, 5, 0, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	49, 18, 0, 0, 14, 14, 0, 0, 
	21, 22, 52, 21, 0, 23, 53, 27, 
	28, 28, 28, 55, 27, 29, 30, 56, 
	30, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 27, 28, 28, 28, 
	27, 27, 29, 30, 30, 30, 0, 58, 
	0, 0, 25, 25, 60, 59, 60, 0, 
	0, 0, 61, 3, 0, 65, 23, 0, 
	67, 69, 0, 0, 23, 28, 72, 28, 
	28, 28, 29, 0, 74, 76, 0, 0, 
	78
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 13, 13, 13, 19, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 0, 0, 26, 26, 
	31, 13, 26, 26, 31, 13, 32, 0, 
	34, 36, 36, 36, 36, 36, 36, 39, 
	39, 40, 41, 41, 41, 41, 41, 41, 
	1, 43, 44, 45, 46, 47, 48, 48, 
	12, 0, 50, 48, 48, 48, 51, 0, 
	54, 54, 57, 48, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 26, 26, 31, 13, 
	0, 0, 0, 0, 59, 59, 0, 61, 
	62, 63, 64, 66, 0, 67, 0, 68, 
	70, 71, 73, 75, 0, 76, 0, 77, 
	78, 0, 78
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 33 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 28 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 53 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 25 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 60 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 42 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 72 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 69 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 49 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 55 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 63 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 44 then
		begin
 $stderr.puts "EOF!" 		end
	when 62 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 43 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 47 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 34 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 77 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 39 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 71 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 70 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 45 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864, 7865
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 9, 14, 10, 
	14, 14, 14, 14, 11, 14, 16, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	17, 15, 19, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 20, 18, 21, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 21, 14, 14, 
	14, 14, 14, 14, 14, 14, 22, 14, 
	14, 23, 14, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 24, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 25, 1, 
	25, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 25, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 16, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	27, 26, 19, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 29, 
	28, 28, 31, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 31, 30, 30, 30, 30, 30, 30, 
	30, 32, 33, 30, 30, 34, 30, 30, 
	30, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 30, 30, 30, 30, 
	30, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 30, 30, 30, 
	35, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 24, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 1, 
	25, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 1, 39, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 39, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 1, 41, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 41, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 1, 1, 1, 1, 1, 1, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 1, 1, 1, 42, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 43, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 44, 1, 1, 1, 1, 
	1, 1, 1, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 1, 1, 1, 
	1, 1, 1, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 1, 
	1, 1, 45, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 46, 1, 
	1, 1, 1, 1, 1, 1, 47, 1, 
	48, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 48, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 48, 49, 49, 49, 49, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 48, 7, 50, 7, 7, 7, 
	7, 51, 7, 7, 7, 7, 7, 7, 
	7, 7, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 7, 7, 7, 7, 
	7, 7, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 7, 7, 
	7, 53, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 49, 49, 
	49, 49, 49, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 49, 14, 50, 
	14, 14, 14, 14, 51, 14, 55, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	56, 54, 58, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 59, 57, 60, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 60, 14, 14, 
	14, 14, 14, 14, 14, 14, 61, 14, 
	14, 62, 14, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 63, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 64, 1, 
	64, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 64, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 55, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	66, 65, 58, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 68, 
	67, 67, 69, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 69, 30, 30, 30, 30, 30, 30, 
	30, 70, 71, 30, 30, 72, 30, 30, 
	30, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 74, 30, 30, 30, 30, 
	30, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 30, 30, 30, 
	73, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 63, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 63, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 1, 
	64, 1, 76, 1, 1, 77, 78, 79, 
	79, 79, 79, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 78, 7, 80, 
	7, 7, 7, 7, 81, 7, 82, 7, 
	7, 83, 7, 7, 7, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 84, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 85, 49, 49, 49, 49, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	85, 7, 50, 7, 7, 7, 7, 51, 
	7, 86, 7, 7, 87, 7, 7, 7, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 7, 7, 7, 7, 7, 7, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 7, 7, 7, 53, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 69, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 69, 30, 30, 30, 30, 
	30, 30, 30, 30, 71, 30, 30, 72, 
	30, 30, 30, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 30, 30, 30, 
	30, 30, 30, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 30, 
	30, 30, 88, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 57, 
	89, 90, 90, 90, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 89, 
	7, 91, 7, 7, 7, 7, 92, 7, 
	93, 7, 7, 94, 7, 7, 7, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 7, 7, 7, 7, 7, 7, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 7, 7, 7, 95, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 96, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 96, 7, 10, 7, 7, 7, 
	7, 11, 7, 97, 7, 7, 98, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 31, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 33, 30, 
	30, 34, 30, 30, 30, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 30, 
	30, 30, 30, 30, 30, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 30, 30, 30, 99, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 18, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 100, 100, 100, 100, 
	100, 100, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 100, 100, 
	100, 101, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 102, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 105, 103, 103, 103, 103, 
	106, 103, 108, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 109, 107, 111, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	112, 110, 110, 108, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	114, 113, 111, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 116, 
	115, 115, 117, 118, 118, 118, 118, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 119, 7, 7, 7, 7, 
	120, 7, 7, 7, 7, 7, 7, 7, 
	7, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	121, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 117, 118, 118, 
	118, 118, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 117, 7, 119, 7, 
	7, 7, 7, 120, 7, 7, 7, 7, 
	7, 7, 7, 7, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 7, 7, 
	7, 7, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	7, 7, 7, 122, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	118, 118, 118, 118, 118, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 118, 
	14, 119, 14, 14, 14, 14, 120, 14, 
	124, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 125, 123, 127, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 128, 126, 
	126, 124, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 130, 129, 
	127, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 132, 131, 131, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 1, 1, 1, 1, 1, 1, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 1, 1, 1, 133, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 134, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 1, 
	1, 1, 136, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 137, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 1, 
	1, 1, 1, 1, 1, 1, 138, 1, 
	139, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 139, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 139, 140, 140, 140, 140, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 139, 7, 141, 7, 7, 7, 
	7, 142, 7, 7, 7, 7, 7, 7, 
	7, 7, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 7, 7, 7, 7, 
	7, 7, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 7, 7, 
	7, 144, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 140, 140, 
	140, 140, 140, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 140, 14, 141, 
	14, 14, 14, 14, 142, 14, 146, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	147, 145, 149, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 150, 148, 151, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 151, 14, 14, 
	14, 14, 14, 14, 14, 14, 152, 14, 
	14, 153, 14, 154, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 154, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 155, 1, 
	155, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 155, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 146, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	157, 156, 149, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 159, 
	158, 158, 160, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 160, 30, 30, 30, 30, 30, 30, 
	30, 161, 162, 30, 30, 163, 30, 30, 
	30, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 165, 30, 30, 30, 30, 
	30, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 30, 30, 30, 
	164, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 154, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 154, 1, 1, 1, 
	1, 1, 1, 1, 1, 166, 1, 1, 
	155, 1, 167, 168, 168, 168, 168, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 167, 7, 169, 7, 7, 7, 7, 
	170, 7, 171, 7, 7, 172, 7, 7, 
	7, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 7, 7, 7, 7, 7, 
	7, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 7, 7, 7, 
	173, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 174, 140, 140, 
	140, 140, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 174, 7, 141, 7, 
	7, 7, 7, 142, 7, 175, 7, 7, 
	176, 7, 7, 7, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 7, 7, 
	7, 7, 7, 7, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	7, 7, 7, 144, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	160, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 160, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	162, 30, 30, 163, 30, 30, 30, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 30, 30, 30, 30, 30, 30, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 30, 30, 30, 177, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 148, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 1, 1, 
	1, 1, 1, 1, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	1, 1, 1, 178, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	179, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 179, 
	1, 1, 1, 1, 1, 1, 1, 180, 
	1, 1, 1, 1, 1, 1, 1, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 1, 1, 1, 181, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 183, 1, 184, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 184, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 184, 
	185, 185, 185, 185, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	186, 7, 7, 7, 7, 187, 7, 7, 
	7, 7, 7, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	7, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 185, 185, 185, 185, 185, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 185, 14, 186, 14, 14, 14, 14, 
	187, 14, 191, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 192, 190, 194, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	195, 193, 196, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 196, 14, 14, 14, 14, 14, 14, 
	14, 14, 197, 14, 14, 198, 14, 199, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 199, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 200, 1, 200, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 191, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 202, 201, 194, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 204, 203, 203, 205, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 205, 30, 30, 
	30, 30, 30, 30, 30, 206, 207, 30, 
	30, 208, 30, 30, 30, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 210, 
	30, 30, 30, 30, 30, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 30, 30, 30, 209, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 200, 1, 212, 213, 
	213, 213, 213, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 212, 7, 214, 
	7, 7, 7, 7, 215, 7, 216, 7, 
	7, 217, 7, 7, 7, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 7, 
	7, 7, 7, 7, 7, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 7, 7, 7, 218, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 219, 185, 185, 185, 185, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	219, 7, 186, 7, 7, 7, 7, 187, 
	7, 220, 7, 7, 221, 7, 7, 7, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 7, 7, 7, 7, 7, 7, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 7, 7, 7, 189, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 205, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 205, 30, 30, 30, 30, 
	30, 30, 30, 30, 207, 30, 30, 208, 
	30, 30, 30, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 30, 30, 30, 
	30, 30, 30, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 30, 
	30, 30, 222, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 193, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 1, 224, 
	1, 225, 1, 227, 1, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 227, 226, 228, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 228, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 230, 1, 231, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 231, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 232, 1, 1, 234, 233, 235, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 100, 
	100, 100, 100, 100, 100, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 100, 100, 100, 236, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 1, 238, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 237, 237, 237, 237, 237, 237, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 237, 237, 239, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 103, 240, 14, 
	1, 241, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 30, 30, 30, 30, 30, 30, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 30, 30, 30, 242, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 241, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 244, 30, 30, 30, 30, 
	30, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 30, 30, 30, 
	243, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 245, 246, 247, 
	247, 247, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 245, 7, 248, 7, 
	7, 7, 7, 249, 7, 7, 7, 7, 
	7, 7, 7, 7, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 7, 7, 
	7, 7, 7, 7, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	7, 7, 7, 250, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	251, 252, 118, 118, 118, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 251, 
	7, 119, 7, 7, 7, 7, 120, 7, 
	7, 7, 7, 7, 7, 7, 7, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 7, 7, 7, 122, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 118, 118, 118, 118, 118, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 118, 14, 119, 14, 14, 14, 
	14, 120, 14, 1, 253, 1, 1, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1, 256, 255, 
	1, 227, 256, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	227, 226, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 44, 0, 8, 
	9, 45, 8, 9, 45, 10, 17, 11, 
	10, 11, 13, 14, 13, 14, 0, 10, 
	16, 17, 11, 15, 42, 17, 18, 18, 
	19, 20, 21, 22, 23, 21, 22, 23, 
	24, 25, 26, 31, 34, 40, 27, 28, 
	41, 27, 28, 41, 29, 108, 30, 29, 
	30, 32, 33, 32, 33, 29, 35, 108, 
	30, 34, 38, 108, 37, 111, 39, 25, 
	26, 31, 108, 30, 40, 39, 108, 30, 
	40, 43, 6, 7, 12, 17, 11, 44, 
	43, 17, 11, 44, 0, 112, 114, 0, 
	48, 49, 52, 50, 116, 51, 50, 116, 
	51, 53, 54, 53, 54, 56, 57, 58, 
	61, 120, 119, 59, 117, 60, 59, 117, 
	60, 62, 63, 62, 63, 65, 66, 67, 
	65, 66, 67, 68, 69, 70, 75, 78, 
	82, 71, 72, 83, 71, 72, 83, 73, 
	124, 74, 73, 74, 76, 77, 76, 77, 
	73, 79, 124, 74, 78, 80, 124, 81, 
	69, 70, 75, 124, 74, 82, 81, 124, 
	74, 82, 85, 86, 87, 85, 86, 87, 
	88, 89, 90, 95, 98, 102, 91, 92, 
	103, 91, 92, 103, 93, 125, 94, 93, 
	94, 96, 97, 96, 97, 93, 99, 125, 
	94, 98, 100, 125, 101, 89, 90, 95, 
	125, 94, 102, 101, 125, 94, 102, 127, 
	106, 107, 128, 130, 109, 110, 36, 109, 
	36, 111, 110, 113, 112, 0, 115, 114, 
	118, 118, 119, 120, 121, 122, 123, 57, 
	58, 61, 119, 122, 123, 126, 127, 128, 
	129
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 12, 14, 
	15, 14, 0, 16, 0, 18, 18, 18, 
	0, 0, 14, 14, 0, 0, 20, 21, 
	22, 21, 21, 0, 23, 0, 24, 0, 
	0, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 25, 27, 28, 
	28, 28, 27, 27, 29, 30, 30, 30, 
	0, 27, 28, 28, 28, 27, 27, 29, 
	30, 30, 30, 0, 32, 33, 10, 35, 
	0, 0, 0, 14, 37, 14, 0, 38, 
	0, 14, 14, 0, 0, 0, 0, 0, 
	0, 10, 10, 14, 15, 14, 0, 16, 
	0, 14, 14, 0, 0, 42, 3, 4, 
	0, 0, 5, 0, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	49, 18, 0, 0, 14, 14, 0, 0, 
	21, 22, 52, 21, 0, 23, 53, 27, 
	28, 28, 28, 55, 27, 29, 30, 56, 
	30, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 27, 28, 28, 28, 
	27, 27, 29, 30, 30, 30, 0, 58, 
	0, 0, 25, 25, 60, 59, 60, 0, 
	0, 0, 61, 3, 0, 65, 23, 0, 
	67, 69, 0, 0, 23, 28, 72, 28, 
	28, 28, 29, 0, 74, 76, 0, 0, 
	78
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 13, 13, 13, 19, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 0, 0, 26, 26, 
	31, 13, 26, 26, 31, 13, 32, 0, 
	34, 36, 36, 36, 36, 36, 36, 39, 
	39, 40, 41, 41, 41, 41, 41, 41, 
	1, 43, 44, 45, 46, 47, 48, 48, 
	12, 0, 50, 48, 48, 48, 51, 0, 
	54, 54, 57, 48, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 26, 26, 31, 13, 
	0, 0, 0, 0, 59, 59, 0, 61, 
	62, 63, 64, 66, 0, 67, 0, 68, 
	70, 71, 73, 75, 0, 76, 0, 77, 
	78, 0, 78
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 33 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 28 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 53 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 25 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 60 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 42 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 72 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 69 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 49 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 55 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 63 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 44 then
		begin
 $stderr.puts "EOF!" 		end
	when 62 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 43 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 47 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 34 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 77 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 39 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 71 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 70 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 45 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864, 7865
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 9, 14, 10, 
	14, 14, 14, 14, 11, 14, 16, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	17, 15, 19, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 20, 18, 21, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 21, 14, 14, 
	14, 14, 14, 14, 14, 14, 22, 14, 
	14, 23, 14, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 24, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 25, 1, 
	25, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 25, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 16, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	27, 26, 19, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 29, 
	28, 28, 31, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 31, 30, 30, 30, 30, 30, 30, 
	30, 32, 33, 30, 30, 34, 30, 30, 
	30, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 30, 30, 30, 30, 
	30, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 30, 30, 30, 
	35, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 24, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 1, 
	25, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 1, 39, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 39, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 1, 41, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 41, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 1, 1, 1, 1, 1, 1, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 1, 1, 1, 42, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 43, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 44, 1, 1, 1, 1, 
	1, 1, 1, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 1, 1, 1, 
	1, 1, 1, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 1, 
	1, 1, 45, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 46, 1, 
	1, 1, 1, 1, 1, 1, 47, 1, 
	48, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 48, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 48, 49, 49, 49, 49, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 48, 7, 50, 7, 7, 7, 
	7, 51, 7, 7, 7, 7, 7, 7, 
	7, 7, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 7, 7, 7, 7, 
	7, 7, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 7, 7, 
	7, 53, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 49, 49, 
	49, 49, 49, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 49, 14, 50, 
	14, 14, 14, 14, 51, 14, 55, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	56, 54, 58, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 59, 57, 60, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 60, 14, 14, 
	14, 14, 14, 14, 14, 14, 61, 14, 
	14, 62, 14, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 63, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 64, 1, 
	64, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 64, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 55, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	66, 65, 58, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 68, 
	67, 67, 69, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 69, 30, 30, 30, 30, 30, 30, 
	30, 70, 71, 30, 30, 72, 30, 30, 
	30, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 74, 30, 30, 30, 30, 
	30, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 30, 30, 30, 
	73, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 63, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 63, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 1, 
	64, 1, 76, 1, 1, 77, 78, 79, 
	79, 79, 79, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 78, 7, 80, 
	7, 7, 7, 7, 81, 7, 82, 7, 
	7, 83, 7, 7, 7, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 84, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 85, 49, 49, 49, 49, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	85, 7, 50, 7, 7, 7, 7, 51, 
	7, 86, 7, 7, 87, 7, 7, 7, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 7, 7, 7, 7, 7, 7, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 7, 7, 7, 53, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 69, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 69, 30, 30, 30, 30, 
	30, 30, 30, 30, 71, 30, 30, 72, 
	30, 30, 30, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 30, 30, 30, 
	30, 30, 30, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 30, 
	30, 30, 88, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 57, 
	89, 90, 90, 90, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 89, 
	7, 91, 7, 7, 7, 7, 92, 7, 
	93, 7, 7, 94, 7, 7, 7, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 7, 7, 7, 7, 7, 7, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 7, 7, 7, 95, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 96, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 96, 7, 10, 7, 7, 7, 
	7, 11, 7, 97, 7, 7, 98, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 31, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 33, 30, 
	30, 34, 30, 30, 30, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 30, 
	30, 30, 30, 30, 30, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 30, 30, 30, 99, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 18, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 100, 100, 100, 100, 
	100, 100, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 100, 100, 
	100, 101, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 102, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 105, 103, 103, 103, 103, 
	106, 103, 108, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 109, 107, 111, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	112, 110, 110, 108, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	114, 113, 111, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 116, 
	115, 115, 117, 118, 118, 118, 118, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 119, 7, 7, 7, 7, 
	120, 7, 7, 7, 7, 7, 7, 7, 
	7, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	121, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 117, 118, 118, 
	118, 118, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 117, 7, 119, 7, 
	7, 7, 7, 120, 7, 7, 7, 7, 
	7, 7, 7, 7, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 7, 7, 
	7, 7, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	7, 7, 7, 122, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	118, 118, 118, 118, 118, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 118, 
	14, 119, 14, 14, 14, 14, 120, 14, 
	124, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 125, 123, 127, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 128, 126, 
	126, 124, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 130, 129, 
	127, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 132, 131, 131, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 1, 1, 1, 1, 1, 1, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 1, 1, 1, 133, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 134, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 1, 
	1, 1, 136, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 137, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 1, 
	1, 1, 1, 1, 1, 1, 138, 1, 
	139, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 139, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 139, 140, 140, 140, 140, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 139, 7, 141, 7, 7, 7, 
	7, 142, 7, 7, 7, 7, 7, 7, 
	7, 7, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 7, 7, 7, 7, 
	7, 7, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 7, 7, 
	7, 144, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 140, 140, 
	140, 140, 140, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 140, 14, 141, 
	14, 14, 14, 14, 142, 14, 146, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	147, 145, 149, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 150, 148, 151, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 151, 14, 14, 
	14, 14, 14, 14, 14, 14, 152, 14, 
	14, 153, 14, 154, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 154, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 155, 1, 
	155, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 155, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 146, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	157, 156, 149, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 159, 
	158, 158, 160, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 160, 30, 30, 30, 30, 30, 30, 
	30, 161, 162, 30, 30, 163, 30, 30, 
	30, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 165, 30, 30, 30, 30, 
	30, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 30, 30, 30, 
	164, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 154, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 154, 1, 1, 1, 
	1, 1, 1, 1, 1, 166, 1, 1, 
	155, 1, 167, 168, 168, 168, 168, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 167, 7, 169, 7, 7, 7, 7, 
	170, 7, 171, 7, 7, 172, 7, 7, 
	7, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 7, 7, 7, 7, 7, 
	7, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 7, 7, 7, 
	173, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 174, 140, 140, 
	140, 140, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 174, 7, 141, 7, 
	7, 7, 7, 142, 7, 175, 7, 7, 
	176, 7, 7, 7, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 7, 7, 
	7, 7, 7, 7, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	7, 7, 7, 144, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	160, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 160, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	162, 30, 30, 163, 30, 30, 30, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 30, 30, 30, 30, 30, 30, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 30, 30, 30, 177, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 148, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 1, 1, 
	1, 1, 1, 1, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	1, 1, 1, 178, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	179, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 179, 
	1, 1, 1, 1, 1, 1, 1, 180, 
	1, 1, 1, 1, 1, 1, 1, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 1, 1, 1, 181, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 183, 1, 184, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 184, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 184, 
	185, 185, 185, 185, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	186, 7, 7, 7, 7, 187, 7, 7, 
	7, 7, 7, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	7, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 185, 185, 185, 185, 185, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 185, 14, 186, 14, 14, 14, 14, 
	187, 14, 191, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 192, 190, 194, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	195, 193, 196, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 196, 14, 14, 14, 14, 14, 14, 
	14, 14, 197, 14, 14, 198, 14, 199, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 199, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 200, 1, 200, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 191, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 202, 201, 194, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 204, 203, 203, 205, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 205, 30, 30, 
	30, 30, 30, 30, 30, 206, 207, 30, 
	30, 208, 30, 30, 30, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 210, 
	30, 30, 30, 30, 30, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 30, 30, 30, 209, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 200, 1, 212, 213, 
	213, 213, 213, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 212, 7, 214, 
	7, 7, 7, 7, 215, 7, 216, 7, 
	7, 217, 7, 7, 7, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 7, 
	7, 7, 7, 7, 7, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 7, 7, 7, 218, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 219, 185, 185, 185, 185, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	219, 7, 186, 7, 7, 7, 7, 187, 
	7, 220, 7, 7, 221, 7, 7, 7, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 7, 7, 7, 7, 7, 7, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 7, 7, 7, 189, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 205, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 205, 30, 30, 30, 30, 
	30, 30, 30, 30, 207, 30, 30, 208, 
	30, 30, 30, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 30, 30, 30, 
	30, 30, 30, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 30, 
	30, 30, 222, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 193, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 1, 224, 
	1, 225, 1, 227, 1, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 227, 226, 228, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 228, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 230, 1, 231, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 231, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 232, 1, 1, 234, 233, 235, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 100, 
	100, 100, 100, 100, 100, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 100, 100, 100, 236, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 1, 238, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 237, 237, 237, 237, 237, 237, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 237, 237, 239, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 103, 240, 14, 
	1, 241, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 30, 30, 30, 30, 30, 30, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 30, 30, 30, 242, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 241, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 244, 30, 30, 30, 30, 
	30, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 30, 30, 30, 
	243, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 245, 246, 247, 
	247, 247, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 245, 7, 248, 7, 
	7, 7, 7, 249, 7, 7, 7, 7, 
	7, 7, 7, 7, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 7, 7, 
	7, 7, 7, 7, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	7, 7, 7, 250, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	251, 252, 118, 118, 118, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 251, 
	7, 119, 7, 7, 7, 7, 120, 7, 
	7, 7, 7, 7, 7, 7, 7, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 7, 7, 7, 122, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 118, 118, 118, 118, 118, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 118, 14, 119, 14, 14, 14, 
	14, 120, 14, 1, 253, 1, 1, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1, 256, 255, 
	1, 227, 256, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	227, 226, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 44, 0, 8, 
	9, 45, 8, 9, 45, 10, 17, 11, 
	10, 11, 13, 14, 13, 14, 0, 10, 
	16, 17, 11, 15, 42, 17, 18, 18, 
	19, 20, 21, 22, 23, 21, 22, 23, 
	24, 25, 26, 31, 34, 40, 27, 28, 
	41, 27, 28, 41, 29, 108, 30, 29, 
	30, 32, 33, 32, 33, 29, 35, 108, 
	30, 34, 38, 108, 37, 111, 39, 25, 
	26, 31, 108, 30, 40, 39, 108, 30, 
	40, 43, 6, 7, 12, 17, 11, 44, 
	43, 17, 11, 44, 0, 112, 114, 0, 
	48, 49, 52, 50, 116, 51, 50, 116, 
	51, 53, 54, 53, 54, 56, 57, 58, 
	61, 120, 119, 59, 117, 60, 59, 117, 
	60, 62, 63, 62, 63, 65, 66, 67, 
	65, 66, 67, 68, 69, 70, 75, 78, 
	82, 71, 72, 83, 71, 72, 83, 73, 
	124, 74, 73, 74, 76, 77, 76, 77, 
	73, 79, 124, 74, 78, 80, 124, 81, 
	69, 70, 75, 124, 74, 82, 81, 124, 
	74, 82, 85, 86, 87, 85, 86, 87, 
	88, 89, 90, 95, 98, 102, 91, 92, 
	103, 91, 92, 103, 93, 125, 94, 93, 
	94, 96, 97, 96, 97, 93, 99, 125, 
	94, 98, 100, 125, 101, 89, 90, 95, 
	125, 94, 102, 101, 125, 94, 102, 127, 
	106, 107, 128, 130, 109, 110, 36, 109, 
	36, 111, 110, 113, 112, 0, 115, 114, 
	118, 118, 119, 120, 121, 122, 123, 57, 
	58, 61, 119, 122, 123, 126, 127, 128, 
	129
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 12, 14, 
	15, 14, 0, 16, 0, 18, 18, 18, 
	0, 0, 14, 14, 0, 0, 20, 21, 
	22, 21, 21, 0, 23, 0, 24, 0, 
	0, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 25, 27, 28, 
	28, 28, 27, 27, 29, 30, 30, 30, 
	0, 27, 28, 28, 28, 27, 27, 29, 
	30, 30, 30, 0, 32, 33, 10, 35, 
	0, 0, 0, 14, 37, 14, 0, 38, 
	0, 14, 14, 0, 0, 0, 0, 0, 
	0, 10, 10, 14, 15, 14, 0, 16, 
	0, 14, 14, 0, 0, 42, 3, 4, 
	0, 0, 5, 0, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	49, 18, 0, 0, 14, 14, 0, 0, 
	21, 22, 52, 21, 0, 23, 53, 27, 
	28, 28, 28, 55, 27, 29, 30, 56, 
	30, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 27, 28, 28, 28, 
	27, 27, 29, 30, 30, 30, 0, 58, 
	0, 0, 25, 25, 60, 59, 60, 0, 
	0, 0, 61, 3, 0, 65, 23, 0, 
	67, 69, 0, 0, 23, 28, 72, 28, 
	28, 28, 29, 0, 74, 76, 0, 0, 
	78
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 13, 13, 13, 19, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 0, 0, 26, 26, 
	31, 13, 26, 26, 31, 13, 32, 0, 
	34, 36, 36, 36, 36, 36, 36, 39, 
	39, 40, 41, 41, 41, 41, 41, 41, 
	1, 43, 44, 45, 46, 47, 48, 48, 
	12, 0, 50, 48, 48, 48, 51, 0, 
	54, 54, 57, 48, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 26, 26, 31, 13, 
	0, 0, 0, 0, 59, 59, 0, 61, 
	62, 63, 64, 66, 0, 67, 0, 68, 
	70, 71, 73, 75, 0, 76, 0, 77, 
	78, 0, 78
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 33 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 28 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 53 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 25 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 60 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 42 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 72 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 69 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 49 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 55 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 63 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 44 then
		begin
 $stderr.puts "EOF!" 		end
	when 62 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 43 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 47 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 34 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 77 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 39 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 71 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 70 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 45 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module SimpleStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 47, 47, 10, 
	10, 9, 122, 9, 122, 
	9, 122, 0, 0, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 48, 122, 
	9, 39, 34, 92, 34, 92, 
	0, 0, 39, 92, 39, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 0, 0, 39, 
	92, 39, 92, 0, 0, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 
	39, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	39, 92, 39, 92, 0, 
	0, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 9, 39, 34, 92, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 39, 92, 
	39, 92, 0, 0, 9, 122, 
	9, 44, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	33, 126, 47, 47, 47, 47, 
	9, 32, 9, 47, 9, 
	47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 122, 
	0, 0, 0, 0, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 122, 
	9, 39, 0, 0, 10, 
	10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 32, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 31, 59, 
	59, 36, 36, 114, 54, 54, 0, 114, 
	36, 24, 118, 118, 114, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 1, 1, 114, 114, 
	114, 0, 114, 114, 114, 0, 75, 75, 
	31, 59, 59, 0, 54, 54, 0, 114, 
	114, 31, 59, 59, 0, 54, 54, 0, 
	75, 114, 32, 114, 114, 31, 59, 59, 
	36, 36, 114, 54, 54, 0, 114, 36, 
	114, 114, 114, 0, 75, 114, 32, 114, 
	114, 31, 59, 59, 36, 36, 114, 54, 
	54, 0, 114, 36, 114, 114, 114, 0, 
	94, 1, 1, 24, 39, 39, 0, 1, 
	113, 0, 113, 0, 0, 1, 0, 113, 
	113, 114, 114, 31, 0, 1, 0, 94, 
	1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 486, 
	546, 606, 643, 680, 795, 850, 905, 906, 
	1021, 1058, 1083, 1202, 1321, 1436, 1551, 1584, 
	1699, 1814, 1846, 1906, 1966, 2003, 2040, 2155, 
	2210, 2265, 2266, 2381, 2418, 2420, 2422, 2537, 
	2652, 2767, 2768, 2883, 2998, 3113, 3114, 3190, 
	3266, 3298, 3358, 3418, 3419, 3474, 3529, 3530, 
	3645, 3760, 3792, 3852, 3912, 3913, 3968, 4023, 
	4024, 4100, 4215, 4248, 4363, 4478, 4510, 4570, 
	4630, 4667, 4704, 4819, 4874, 4929, 4930, 5045, 
	5082, 5197, 5312, 5427, 5428, 5504, 5619, 5652, 
	5767, 5882, 5914, 5974, 6034, 6071, 6108, 6223, 
	6278, 6333, 6334, 6449, 6486, 6601, 6716, 6831, 
	6832, 6927, 6929, 6931, 6956, 6996, 7036, 7037, 
	7039, 7153, 7154, 7268, 7269, 7270, 7272, 7273, 
	7387, 7501, 7616, 7731, 7763, 7764, 7766, 7767, 
	7862, 7864, 7865
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 11, 7, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 9, 9, 
	9, 9, 9, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 9, 14, 10, 
	14, 14, 14, 14, 11, 14, 16, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	17, 15, 19, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 20, 18, 21, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 21, 14, 14, 
	14, 14, 14, 14, 14, 14, 22, 14, 
	14, 23, 14, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 24, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 25, 1, 
	25, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 25, 
	7, 10, 7, 7, 7, 7, 11, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 7, 7, 7, 12, 7, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 7, 16, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	27, 26, 19, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 29, 
	28, 28, 31, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 31, 30, 30, 30, 30, 30, 30, 
	30, 32, 33, 30, 30, 34, 30, 30, 
	30, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 36, 30, 30, 30, 30, 
	30, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 30, 30, 30, 
	35, 30, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 30, 24, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 37, 1, 1, 
	25, 1, 38, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 38, 1, 39, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 39, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 1, 41, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 41, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 41, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	41, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 1, 1, 1, 1, 1, 1, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 1, 1, 1, 42, 
	1, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 1, 43, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 43, 1, 1, 1, 1, 
	1, 1, 1, 44, 1, 1, 1, 1, 
	1, 1, 1, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 1, 1, 1, 
	1, 1, 1, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 1, 
	1, 1, 45, 1, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 1, 46, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 46, 1, 
	1, 1, 1, 1, 1, 1, 47, 1, 
	48, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 48, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 48, 49, 49, 49, 49, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 48, 7, 50, 7, 7, 7, 
	7, 51, 7, 7, 7, 7, 7, 7, 
	7, 7, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 7, 7, 7, 7, 
	7, 7, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 7, 7, 
	7, 53, 7, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 7, 49, 49, 
	49, 49, 49, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 49, 14, 50, 
	14, 14, 14, 14, 51, 14, 55, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	56, 54, 58, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 59, 57, 60, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 60, 14, 14, 
	14, 14, 14, 14, 14, 14, 61, 14, 
	14, 62, 14, 63, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 63, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 64, 1, 
	64, 49, 49, 49, 49, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 64, 
	7, 50, 7, 7, 7, 7, 51, 7, 
	7, 7, 7, 7, 7, 7, 7, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 7, 7, 7, 7, 7, 7, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 7, 7, 7, 52, 7, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 7, 55, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	66, 65, 58, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 68, 
	67, 67, 69, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 69, 30, 30, 30, 30, 30, 30, 
	30, 70, 71, 30, 30, 72, 30, 30, 
	30, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 74, 30, 30, 30, 30, 
	30, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 30, 30, 30, 
	73, 30, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 30, 63, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 63, 1, 1, 1, 
	1, 1, 1, 1, 1, 75, 1, 1, 
	64, 1, 76, 1, 1, 77, 78, 79, 
	79, 79, 79, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 78, 7, 80, 
	7, 7, 7, 7, 81, 7, 82, 7, 
	7, 83, 7, 7, 7, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 84, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 85, 49, 49, 49, 49, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	85, 7, 50, 7, 7, 7, 7, 51, 
	7, 86, 7, 7, 87, 7, 7, 7, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 7, 7, 7, 7, 7, 7, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 7, 7, 7, 53, 
	7, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 7, 69, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 69, 30, 30, 30, 30, 
	30, 30, 30, 30, 71, 30, 30, 72, 
	30, 30, 30, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 30, 30, 30, 
	30, 30, 30, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 30, 
	30, 30, 88, 30, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 30, 57, 
	89, 90, 90, 90, 90, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 89, 
	7, 91, 7, 7, 7, 7, 92, 7, 
	93, 7, 7, 94, 7, 7, 7, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 7, 7, 7, 7, 7, 7, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 7, 7, 7, 95, 7, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 7, 96, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 96, 7, 10, 7, 7, 7, 
	7, 11, 7, 97, 7, 7, 98, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 7, 7, 
	7, 13, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 7, 31, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 31, 30, 30, 
	30, 30, 30, 30, 30, 30, 33, 30, 
	30, 34, 30, 30, 30, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 30, 
	30, 30, 30, 30, 30, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 30, 30, 30, 99, 30, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	30, 18, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 100, 100, 100, 100, 
	100, 100, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 100, 100, 
	100, 101, 100, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 100, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	1, 1, 1, 1, 1, 1, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 1, 1, 1, 102, 1, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 1, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 104, 103, 105, 103, 103, 103, 103, 
	106, 103, 108, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 109, 107, 111, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	112, 110, 110, 108, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	114, 113, 111, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 116, 
	115, 115, 117, 118, 118, 118, 118, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 119, 7, 7, 7, 7, 
	120, 7, 7, 7, 7, 7, 7, 7, 
	7, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 7, 7, 7, 7, 7, 
	7, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	121, 7, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 7, 117, 118, 118, 
	118, 118, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 117, 7, 119, 7, 
	7, 7, 7, 120, 7, 7, 7, 7, 
	7, 7, 7, 7, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 7, 7, 
	7, 7, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	7, 7, 7, 122, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 7, 
	118, 118, 118, 118, 118, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 118, 
	14, 119, 14, 14, 14, 14, 120, 14, 
	124, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 125, 123, 127, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 128, 126, 
	126, 124, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 130, 129, 
	127, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 132, 131, 131, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 1, 1, 1, 1, 1, 1, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 1, 1, 1, 133, 
	1, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 134, 1, 1, 1, 1, 
	1, 1, 1, 135, 1, 1, 1, 1, 
	1, 1, 1, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 1, 1, 1, 
	1, 1, 1, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 1, 
	1, 1, 136, 1, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 136, 136, 136, 136, 136, 1, 137, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 1, 
	1, 1, 1, 1, 1, 1, 138, 1, 
	139, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 139, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 139, 140, 140, 140, 140, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 139, 7, 141, 7, 7, 7, 
	7, 142, 7, 7, 7, 7, 7, 7, 
	7, 7, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 7, 7, 7, 7, 
	7, 7, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 7, 7, 
	7, 144, 7, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 7, 140, 140, 
	140, 140, 140, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 140, 14, 141, 
	14, 14, 14, 14, 142, 14, 146, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	147, 145, 149, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 150, 148, 151, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 151, 14, 14, 
	14, 14, 14, 14, 14, 14, 152, 14, 
	14, 153, 14, 154, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 154, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 155, 1, 
	155, 140, 140, 140, 140, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 155, 
	7, 141, 7, 7, 7, 7, 142, 7, 
	7, 7, 7, 7, 7, 7, 7, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 7, 7, 7, 7, 7, 7, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 7, 7, 7, 143, 7, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 7, 146, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	157, 156, 149, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 159, 
	158, 158, 160, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 160, 30, 30, 30, 30, 30, 30, 
	30, 161, 162, 30, 30, 163, 30, 30, 
	30, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 165, 30, 30, 30, 30, 
	30, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 30, 30, 30, 
	164, 30, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 30, 154, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 154, 1, 1, 1, 
	1, 1, 1, 1, 1, 166, 1, 1, 
	155, 1, 167, 168, 168, 168, 168, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 167, 7, 169, 7, 7, 7, 7, 
	170, 7, 171, 7, 7, 172, 7, 7, 
	7, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 7, 7, 7, 7, 7, 
	7, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 7, 7, 7, 
	173, 7, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 7, 174, 140, 140, 
	140, 140, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 174, 7, 141, 7, 
	7, 7, 7, 142, 7, 175, 7, 7, 
	176, 7, 7, 7, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 7, 7, 
	7, 7, 7, 7, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	7, 7, 7, 144, 7, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 7, 
	160, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 160, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	162, 30, 30, 163, 30, 30, 30, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 30, 30, 30, 30, 30, 30, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 30, 30, 30, 177, 30, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 30, 148, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 1, 1, 
	1, 1, 1, 1, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	1, 1, 1, 178, 1, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 1, 
	179, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 179, 
	1, 1, 1, 1, 1, 1, 1, 180, 
	1, 1, 1, 1, 1, 1, 1, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 1, 1, 1, 1, 1, 1, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 1, 1, 1, 181, 1, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 1, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 183, 1, 184, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 184, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 184, 
	185, 185, 185, 185, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	186, 7, 7, 7, 7, 187, 7, 7, 
	7, 7, 7, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	7, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 185, 185, 185, 185, 185, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 185, 14, 186, 14, 14, 14, 14, 
	187, 14, 191, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 192, 190, 194, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	195, 193, 196, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 196, 14, 14, 14, 14, 14, 14, 
	14, 14, 197, 14, 14, 198, 14, 199, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 199, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 200, 1, 200, 185, 185, 185, 
	185, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 7, 186, 7, 7, 
	7, 7, 187, 7, 7, 7, 7, 7, 
	7, 7, 7, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 7, 7, 7, 
	7, 7, 7, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 7, 
	7, 7, 188, 7, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 7, 191, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 202, 201, 194, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 204, 203, 203, 205, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 205, 30, 30, 
	30, 30, 30, 30, 30, 206, 207, 30, 
	30, 208, 30, 30, 30, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 210, 
	30, 30, 30, 30, 30, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 30, 30, 30, 209, 30, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	30, 199, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	199, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 200, 1, 212, 213, 
	213, 213, 213, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 212, 7, 214, 
	7, 7, 7, 7, 215, 7, 216, 7, 
	7, 217, 7, 7, 7, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 7, 
	7, 7, 7, 7, 7, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 7, 7, 7, 218, 7, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	7, 219, 185, 185, 185, 185, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	219, 7, 186, 7, 7, 7, 7, 187, 
	7, 220, 7, 7, 221, 7, 7, 7, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 7, 7, 7, 7, 7, 7, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 7, 7, 7, 189, 
	7, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 7, 205, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 205, 30, 30, 30, 30, 
	30, 30, 30, 30, 207, 30, 30, 208, 
	30, 30, 30, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 30, 30, 30, 
	30, 30, 30, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 30, 
	30, 30, 222, 30, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 30, 193, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 1, 224, 
	1, 225, 1, 227, 1, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 227, 226, 228, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 228, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 230, 1, 231, 229, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 231, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 232, 1, 1, 234, 233, 235, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 100, 
	100, 100, 100, 100, 100, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 100, 100, 100, 236, 100, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	100, 1, 238, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 237, 237, 237, 237, 237, 237, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 237, 237, 239, 
	237, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 237, 237, 103, 240, 14, 
	1, 241, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 30, 30, 30, 30, 30, 30, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 30, 30, 30, 242, 30, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 30, 241, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 244, 30, 30, 30, 30, 
	30, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 30, 30, 30, 
	243, 30, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 30, 245, 246, 247, 
	247, 247, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 245, 7, 248, 7, 
	7, 7, 7, 249, 7, 7, 7, 7, 
	7, 7, 7, 7, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 7, 7, 
	7, 7, 7, 7, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	7, 7, 7, 250, 7, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 7, 
	251, 252, 118, 118, 118, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 251, 
	7, 119, 7, 7, 7, 7, 120, 7, 
	7, 7, 7, 7, 7, 7, 7, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 7, 7, 7, 122, 7, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 7, 118, 118, 118, 118, 118, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 118, 14, 119, 14, 14, 14, 
	14, 120, 14, 1, 253, 1, 1, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1, 256, 255, 
	1, 227, 256, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	227, 226, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 15, 44, 0, 8, 
	9, 45, 8, 9, 45, 10, 17, 11, 
	10, 11, 13, 14, 13, 14, 0, 10, 
	16, 17, 11, 15, 42, 17, 18, 18, 
	19, 20, 21, 22, 23, 21, 22, 23, 
	24, 25, 26, 31, 34, 40, 27, 28, 
	41, 27, 28, 41, 29, 108, 30, 29, 
	30, 32, 33, 32, 33, 29, 35, 108, 
	30, 34, 38, 108, 37, 111, 39, 25, 
	26, 31, 108, 30, 40, 39, 108, 30, 
	40, 43, 6, 7, 12, 17, 11, 44, 
	43, 17, 11, 44, 0, 112, 114, 0, 
	48, 49, 52, 50, 116, 51, 50, 116, 
	51, 53, 54, 53, 54, 56, 57, 58, 
	61, 120, 119, 59, 117, 60, 59, 117, 
	60, 62, 63, 62, 63, 65, 66, 67, 
	65, 66, 67, 68, 69, 70, 75, 78, 
	82, 71, 72, 83, 71, 72, 83, 73, 
	124, 74, 73, 74, 76, 77, 76, 77, 
	73, 79, 124, 74, 78, 80, 124, 81, 
	69, 70, 75, 124, 74, 82, 81, 124, 
	74, 82, 85, 86, 87, 85, 86, 87, 
	88, 89, 90, 95, 98, 102, 91, 92, 
	103, 91, 92, 103, 93, 125, 94, 93, 
	94, 96, 97, 96, 97, 93, 99, 125, 
	94, 98, 100, 125, 101, 89, 90, 95, 
	125, 94, 102, 101, 125, 94, 102, 127, 
	106, 107, 128, 130, 109, 110, 36, 109, 
	36, 111, 110, 113, 112, 0, 115, 114, 
	118, 118, 119, 120, 121, 122, 123, 57, 
	58, 61, 119, 122, 123, 126, 127, 128, 
	129
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 0, 8, 10, 12, 14, 
	15, 14, 0, 16, 0, 18, 18, 18, 
	0, 0, 14, 14, 0, 0, 20, 21, 
	22, 21, 21, 0, 23, 0, 24, 0, 
	0, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 25, 27, 28, 
	28, 28, 27, 27, 29, 30, 30, 30, 
	0, 27, 28, 28, 28, 27, 27, 29, 
	30, 30, 30, 0, 32, 33, 10, 35, 
	0, 0, 0, 14, 37, 14, 0, 38, 
	0, 14, 14, 0, 0, 0, 0, 0, 
	0, 10, 10, 14, 15, 14, 0, 16, 
	0, 14, 14, 0, 0, 42, 3, 4, 
	0, 0, 5, 0, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	49, 18, 0, 0, 14, 14, 0, 0, 
	21, 22, 52, 21, 0, 23, 53, 27, 
	28, 28, 28, 55, 27, 29, 30, 56, 
	30, 0, 2, 3, 4, 0, 0, 5, 
	0, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 14, 14, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 27, 28, 28, 28, 
	27, 27, 29, 30, 30, 30, 0, 58, 
	0, 0, 25, 25, 60, 59, 60, 0, 
	0, 0, 61, 3, 0, 65, 23, 0, 
	67, 69, 0, 0, 23, 28, 72, 28, 
	28, 28, 29, 0, 74, 76, 0, 0, 
	78
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 13, 13, 13, 19, 
	0, 0, 0, 0, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 0, 0, 26, 26, 
	31, 13, 26, 26, 31, 13, 32, 0, 
	34, 36, 36, 36, 36, 36, 36, 39, 
	39, 40, 41, 41, 41, 41, 41, 41, 
	1, 43, 44, 45, 46, 47, 48, 48, 
	12, 0, 50, 48, 48, 48, 51, 0, 
	54, 54, 57, 48, 1, 1, 0, 6, 
	9, 11, 13, 13, 17, 0, 6, 13, 
	13, 13, 19, 0, 26, 26, 31, 13, 
	0, 0, 0, 0, 59, 59, 0, 61, 
	62, 63, 64, 66, 0, 67, 0, 68, 
	70, 71, 73, 75, 0, 76, 0, 77, 
	78, 0, 78
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 108;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 46;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 47;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 48;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 55;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 64;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 84;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 104;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 105;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


      # end: ragel
          end

          def each
            @buffers    = {}
            @incomplete = {}
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 33 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 65 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 35 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 28 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 53 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 25 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 60 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 64
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 42 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 56 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 72 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 27 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 69 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 37 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 49 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 55 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 32 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 63 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 44 then
		begin
 $stderr.puts "EOF!" 		end
	when 62 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 43 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 64 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 57 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 47 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 34 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 76 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 59 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 51 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 31 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 73 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 48 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 36 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 67 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 77 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 78 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 61 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 46 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 39 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 26 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 71 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 70 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 45 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::SimpleStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
