
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	48, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 0, 0, 
	33, 126, 9, 126, 9, 
	40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 33, 126, 47, 47, 
	47, 47, 9, 32, 9, 
	47, 9, 47, 0, 0, 
	10, 10, 9, 126, 10, 126, 
	9, 44, 9, 44, 9, 
	126, 9, 34, 9, 34, 
	10, 92, 10, 92, 34, 92, 
	9, 44, 9, 47, 9, 
	47, 10, 47, 10, 10, 
	10, 10, 9, 126, 9, 126, 
	10, 126, 10, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 10, 126, 
	0, 0, 10, 122, 0, 
	0, 0, 0, 10, 10, 
	0, 0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 
	34, 0, 0, 33, 126, 
	10, 10, 0, 0, 10, 126, 
	33, 126, 10, 10, 0, 
	0, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 24, 118, 
	118, 118, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	75, 26, 59, 59, 0, 114, 114, 26, 
	59, 59, 0, 94, 118, 32, 118, 114, 
	26, 59, 59, 36, 36, 118, 94, 36, 
	118, 118, 118, 114, 114, 118, 0, 118, 
	118, 118, 118, 118, 118, 118, 94, 118, 
	32, 118, 114, 26, 59, 59, 36, 36, 
	118, 94, 36, 118, 118, 118, 114, 114, 
	118, 0, 118, 118, 118, 118, 118, 118, 
	118, 94, 1, 1, 24, 39, 39, 0, 
	1, 118, 117, 36, 36, 118, 26, 26, 
	83, 83, 59, 36, 39, 39, 38, 1, 
	1, 118, 118, 117, 117, 118, 118, 114, 
	114, 118, 117, 0, 113, 0, 0, 1, 
	0, 113, 113, 114, 114, 26, 0, 94, 
	1, 0, 117, 94, 1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 978, 
	1097, 1216, 1335, 1454, 1487, 1606, 1721, 1748, 
	1808, 1868, 1905, 1942, 2061, 2156, 2193, 2195, 
	2197, 2316, 2411, 2529, 2530, 2649, 2768, 2883, 
	2998, 3117, 3236, 3355, 3474, 3593, 3712, 3831, 
	3950, 4069, 4188, 4307, 4426, 4541, 4656, 4775, 
	4776, 4895, 5014, 5133, 5252, 5371, 5490, 5609, 
	5704, 5780, 5807, 5867, 5927, 5928, 6043, 6158, 
	6185, 6245, 6305, 6306, 6401, 6520, 6553, 6672, 
	6787, 6814, 6874, 6934, 6971, 7008, 7127, 7222, 
	7259, 7378, 7497, 7616, 7731, 7846, 7965, 7966, 
	8085, 8204, 8323, 8442, 8561, 8680, 8799, 8894, 
	9013, 9046, 9165, 9280, 9307, 9367, 9427, 9464, 
	9501, 9620, 9715, 9752, 9871, 9990, 10109, 10224, 
	10339, 10458, 10459, 10578, 10697, 10816, 10935, 11054, 
	11173, 11292, 11387, 11389, 11391, 11416, 11456, 11496, 
	11497, 11499, 11618, 11736, 11773, 11810, 11929, 11956, 
	11983, 12067, 12151, 12211, 12248, 12288, 12328, 12367, 
	12369, 12371, 12490, 12609, 12727, 12845, 12964, 13083, 
	13198, 13313, 13432, 13550, 13551, 13665, 13666, 13667, 
	13669, 13670, 13784, 13898, 14013, 14128, 14155, 14156, 
	14251, 14253, 14254, 14372, 14467, 14469, 14470
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	30, 1, 31, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 31, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	1, 33, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 1, 
	33, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 33, 
	34, 1, 34, 34, 34, 34, 1, 1, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 1, 35, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 35, 36, 
	1, 36, 36, 36, 36, 1, 37, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 1, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 38, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 40, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 40, 42, 
	43, 42, 42, 42, 42, 7, 7, 42, 
	42, 42, 42, 42, 42, 42, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 44, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 7, 40, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 43, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 7, 
	7, 7, 7, 7, 7, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 7, 7, 7, 45, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 47, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 48, 46, 
	50, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 51, 49, 52, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 52, 14, 14, 14, 14, 
	14, 14, 14, 14, 53, 14, 14, 54, 
	14, 55, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	55, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 56, 1, 56, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 56, 42, 43, 
	42, 42, 42, 42, 7, 7, 42, 42, 
	42, 42, 42, 42, 42, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 42, 
	42, 42, 42, 42, 42, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 57, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 7, 58, 1, 58, 
	58, 58, 58, 1, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 55, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 55, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 56, 
	1, 61, 1, 1, 62, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	66, 58, 58, 58, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 58, 
	58, 58, 58, 58, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 67, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 63, 58, 1, 58, 58, 
	58, 58, 1, 59, 58, 58, 58, 58, 
	58, 58, 69, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 70, 62, 70, 70, 70, 70, 
	62, 71, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	62, 49, 56, 41, 41, 41, 41, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 56, 42, 43, 42, 42, 42, 42, 
	7, 59, 42, 42, 42, 42, 42, 42, 
	42, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 42, 42, 42, 42, 42, 
	42, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	57, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	7, 72, 73, 73, 73, 73, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	72, 58, 74, 58, 58, 58, 58, 7, 
	59, 75, 58, 58, 76, 58, 58, 58, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 58, 58, 58, 58, 58, 58, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 77, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 7, 
	78, 41, 41, 41, 41, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 78, 
	7, 43, 7, 7, 7, 7, 7, 7, 
	79, 7, 7, 80, 7, 7, 7, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 7, 7, 7, 7, 7, 7, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 7, 7, 7, 45, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 63, 63, 63, 63, 63, 
	63, 63, 63, 81, 63, 63, 82, 63, 
	63, 63, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 63, 63, 63, 63, 
	63, 63, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 63, 63, 
	63, 83, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 64, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 58, 63, 
	58, 58, 58, 58, 63, 59, 65, 58, 
	58, 66, 58, 58, 58, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 58, 
	58, 58, 58, 58, 58, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 84, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 63, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	85, 58, 58, 58, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 87, 58, 
	58, 58, 58, 58, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 86, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 63, 56, 41, 41, 41, 
	41, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 56, 42, 43, 42, 42, 
	42, 42, 7, 59, 42, 42, 42, 42, 
	42, 42, 42, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 42, 42, 42, 
	42, 42, 42, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 88, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 58, 63, 58, 58, 58, 
	58, 63, 59, 65, 58, 58, 85, 58, 
	58, 58, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 90, 58, 58, 58, 
	58, 58, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 89, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 63, 72, 73, 73, 73, 73, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 72, 58, 74, 58, 58, 58, 58, 
	7, 59, 75, 58, 58, 91, 58, 58, 
	58, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 58, 58, 58, 58, 58, 
	58, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	92, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	7, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 58, 63, 58, 58, 58, 58, 63, 
	59, 65, 58, 58, 85, 58, 58, 58, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 58, 58, 58, 58, 58, 58, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 93, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 63, 
	72, 73, 73, 73, 73, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 72, 
	58, 74, 58, 58, 58, 58, 7, 59, 
	75, 58, 58, 91, 58, 58, 58, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 58, 58, 58, 58, 58, 58, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 94, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 7, 64, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 64, 58, 
	63, 58, 58, 58, 58, 63, 59, 65, 
	58, 58, 85, 58, 58, 58, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	58, 58, 58, 58, 58, 58, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 95, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 63, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 98, 27, 27, 27, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 100, 
	27, 27, 27, 27, 27, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 99, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 63, 30, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 10, 10, 10, 
	10, 10, 10, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 26, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 7, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 105, 27, 
	27, 27, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 27, 27, 27, 27, 
	27, 27, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 106, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 7, 107, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 107, 7, 11, 7, 7, 7, 7, 
	7, 7, 108, 7, 7, 109, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	13, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 96, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 110, 63, 63, 
	111, 63, 63, 63, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 63, 63, 
	63, 63, 63, 63, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	63, 63, 63, 112, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 98, 27, 27, 27, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 27, 27, 27, 27, 27, 27, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 113, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 63, 18, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 114, 27, 27, 27, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 116, 27, 27, 27, 27, 27, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 115, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 63, 25, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 25, 10, 
	11, 10, 10, 10, 10, 7, 28, 10, 
	10, 10, 10, 10, 10, 10, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	10, 10, 10, 10, 10, 10, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 117, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 7, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 114, 27, 27, 27, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 119, 
	27, 27, 27, 27, 27, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 118, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 63, 101, 102, 102, 
	102, 102, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 101, 27, 103, 27, 
	27, 27, 27, 7, 28, 104, 27, 27, 
	120, 27, 27, 27, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 27, 27, 
	27, 27, 27, 27, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 121, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 7, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 96, 27, 63, 27, 27, 
	27, 27, 63, 28, 97, 27, 27, 114, 
	27, 27, 27, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 27, 27, 27, 
	27, 27, 27, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 122, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 63, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 120, 27, 
	27, 27, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 27, 27, 27, 27, 
	27, 27, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 123, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 7, 96, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 96, 27, 63, 27, 27, 27, 27, 
	63, 28, 97, 27, 27, 114, 27, 27, 
	27, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 27, 27, 27, 27, 27, 
	27, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	124, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	63, 126, 125, 126, 126, 126, 126, 125, 
	125, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 125, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 1, 1, 1, 1, 1, 1, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 1, 1, 1, 127, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 129, 129, 129, 129, 
	129, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 129, 128, 130, 128, 132, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 133, 131, 135, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 136, 134, 134, 
	137, 138, 138, 138, 138, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	7, 139, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 7, 7, 7, 7, 7, 7, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 7, 7, 7, 140, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 137, 138, 138, 138, 138, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 137, 7, 139, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 7, 7, 7, 7, 
	7, 7, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 7, 7, 
	7, 141, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 138, 138, 
	138, 138, 138, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 138, 14, 139, 
	14, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 146, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	145, 145, 148, 1, 148, 148, 148, 148, 
	1, 1, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	1, 149, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	149, 150, 1, 150, 150, 150, 150, 1, 
	151, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 1, 
	152, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 152, 
	1, 1, 1, 1, 1, 1, 1, 153, 
	1, 154, 155, 155, 155, 155, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	154, 156, 157, 156, 156, 156, 156, 7, 
	7, 156, 156, 156, 156, 156, 156, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 158, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 7, 
	154, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 154, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 155, 155, 155, 155, 155, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 155, 14, 157, 14, 161, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	162, 160, 164, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 165, 163, 166, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 166, 14, 14, 
	14, 14, 14, 14, 14, 14, 167, 14, 
	14, 168, 14, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 170, 1, 
	170, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 170, 
	156, 157, 156, 156, 156, 156, 7, 7, 
	156, 156, 156, 156, 156, 156, 156, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 156, 156, 156, 156, 156, 156, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 171, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 7, 172, 
	1, 172, 172, 172, 172, 1, 173, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 169, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 169, 1, 1, 
	1, 1, 1, 1, 1, 1, 174, 1, 
	1, 170, 1, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 172, 63, 172, 172, 172, 
	172, 63, 173, 176, 172, 172, 177, 172, 
	172, 172, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 179, 172, 172, 172, 
	172, 172, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 178, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 63, 170, 155, 155, 155, 155, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 170, 156, 157, 156, 156, 156, 156, 
	7, 173, 156, 156, 156, 156, 156, 156, 
	156, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 156, 156, 156, 156, 156, 
	156, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	171, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	7, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 184, 172, 172, 172, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 172, 172, 172, 172, 172, 172, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 185, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 7, 
	186, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	187, 7, 7, 188, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 189, 63, 63, 190, 63, 
	63, 63, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 63, 63, 63, 63, 
	63, 63, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 63, 63, 
	63, 191, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 177, 172, 172, 172, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 172, 
	172, 172, 172, 172, 172, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 192, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 63, 163, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 193, 172, 172, 172, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 195, 
	172, 172, 172, 172, 172, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 194, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 63, 170, 155, 155, 
	155, 155, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 170, 156, 157, 156, 
	156, 156, 156, 7, 173, 156, 156, 156, 
	156, 156, 156, 156, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 156, 156, 
	156, 156, 156, 156, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 196, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 7, 175, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 175, 172, 63, 172, 172, 
	172, 172, 63, 173, 176, 172, 172, 193, 
	172, 172, 172, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 198, 172, 172, 
	172, 172, 172, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 197, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 63, 180, 181, 181, 181, 181, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 180, 172, 182, 172, 172, 172, 
	172, 7, 173, 183, 172, 172, 199, 172, 
	172, 172, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 172, 172, 172, 172, 
	172, 172, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 200, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 7, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 175, 172, 63, 172, 172, 172, 172, 
	63, 173, 176, 172, 172, 193, 172, 172, 
	172, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 172, 172, 172, 172, 172, 
	172, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	201, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	63, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 199, 172, 172, 172, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 172, 172, 172, 172, 172, 172, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 202, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 7, 
	175, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 175, 
	172, 63, 172, 172, 172, 172, 63, 173, 
	176, 172, 172, 193, 172, 172, 172, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 172, 172, 172, 172, 172, 172, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 203, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 63, 204, 
	1, 204, 204, 204, 204, 1, 1, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 206, 1, 
	206, 206, 206, 206, 1, 207, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 1, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 1, 1, 1, 
	1, 1, 1, 1, 209, 1, 210, 211, 
	211, 211, 211, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 210, 212, 213, 
	212, 212, 212, 212, 7, 7, 212, 212, 
	212, 212, 212, 212, 212, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 212, 
	212, 212, 212, 212, 212, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 214, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 7, 210, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 210, 7, 213, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	211, 211, 211, 211, 211, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 211, 
	14, 213, 14, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 220, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 221, 219, 222, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 222, 14, 14, 14, 14, 14, 
	14, 14, 14, 223, 14, 14, 224, 14, 
	225, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 225, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 226, 1, 226, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 226, 212, 213, 212, 
	212, 212, 212, 7, 7, 212, 212, 212, 
	212, 212, 212, 212, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 212, 212, 
	212, 212, 212, 212, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 227, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 7, 228, 1, 228, 228, 
	228, 228, 1, 229, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 1, 225, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 225, 1, 1, 1, 1, 1, 
	1, 1, 1, 230, 1, 1, 226, 1, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	228, 63, 228, 228, 228, 228, 63, 229, 
	232, 228, 228, 233, 228, 228, 228, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 235, 228, 228, 228, 228, 228, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 234, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 63, 226, 
	211, 211, 211, 211, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 226, 212, 
	213, 212, 212, 212, 212, 7, 229, 212, 
	212, 212, 212, 212, 212, 212, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	212, 212, 212, 212, 212, 212, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 227, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 7, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 240, 228, 228, 228, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 228, 
	228, 228, 228, 228, 228, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 241, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 7, 242, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 242, 7, 213, 7, 
	7, 7, 7, 7, 7, 243, 7, 7, 
	244, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	245, 63, 63, 246, 63, 63, 63, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 63, 63, 63, 63, 63, 63, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 63, 63, 63, 247, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 233, 228, 
	228, 228, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 228, 228, 228, 228, 
	228, 228, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 248, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 63, 219, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 249, 228, 
	228, 228, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 251, 228, 228, 228, 
	228, 228, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 250, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 63, 226, 211, 211, 211, 211, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 226, 212, 213, 212, 212, 212, 212, 
	7, 229, 212, 212, 212, 212, 212, 212, 
	212, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 212, 212, 212, 212, 212, 
	212, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	252, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	7, 231, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	231, 228, 63, 228, 228, 228, 228, 63, 
	229, 232, 228, 228, 249, 228, 228, 228, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 254, 228, 228, 228, 228, 228, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 253, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 63, 
	236, 237, 237, 237, 237, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 236, 
	228, 238, 228, 228, 228, 228, 7, 229, 
	239, 228, 228, 255, 228, 228, 228, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 228, 228, 228, 228, 228, 228, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 256, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 7, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 231, 228, 
	63, 228, 228, 228, 228, 63, 229, 232, 
	228, 228, 249, 228, 228, 228, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	228, 228, 228, 228, 228, 228, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 257, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 63, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 255, 228, 228, 228, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 228, 
	228, 228, 228, 228, 228, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 258, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 7, 231, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 231, 228, 63, 228, 
	228, 228, 228, 63, 229, 232, 228, 228, 
	249, 228, 228, 228, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 228, 228, 
	228, 228, 228, 228, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 259, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 63, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 1, 261, 1, 262, 1, 264, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 264, 263, 
	265, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 265, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	268, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 269, 1, 
	1, 271, 270, 265, 266, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 265, 58, 1, 58, 58, 58, 
	58, 1, 59, 58, 58, 58, 58, 58, 
	58, 272, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 273, 270, 273, 273, 273, 273, 270, 
	274, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 270, 
	275, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 275, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	276, 270, 270, 277, 270, 275, 271, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 275, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	277, 270, 277, 278, 279, 279, 279, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 277, 280, 281, 280, 280, 280, 280, 
	270, 270, 280, 280, 280, 280, 280, 280, 
	280, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 280, 280, 280, 280, 280, 
	280, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	282, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	270, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 279, 278, 279, 279, 
	279, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 279, 270, 281, 270, 284, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 286, 283, 288, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 289, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 290, 287, 50, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 51, 49, 291, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 291, 270, 270, 270, 270, 270, 
	270, 270, 270, 292, 270, 270, 293, 270, 
	294, 295, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 294, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 296, 270, 
	297, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 297, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 298, 270, 
	271, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 299, 270, 271, 
	62, 288, 287, 300, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 300, 273, 270, 273, 273, 273, 
	273, 270, 274, 301, 273, 273, 302, 273, 
	273, 273, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 304, 273, 273, 273, 
	273, 273, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 303, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 270, 294, 295, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 294, 273, 270, 273, 273, 273, 273, 
	270, 274, 273, 273, 273, 273, 273, 273, 
	305, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	270, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	273, 270, 273, 273, 273, 273, 270, 274, 
	273, 273, 273, 273, 273, 273, 306, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 270, 271, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 70, 62, 
	70, 70, 70, 70, 62, 71, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 62, 277, 278, 279, 
	279, 279, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 277, 280, 281, 280, 
	280, 280, 280, 270, 274, 280, 280, 280, 
	280, 280, 280, 280, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 280, 280, 
	280, 280, 280, 280, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 282, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 270, 307, 308, 309, 309, 
	309, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 307, 273, 310, 273, 273, 
	273, 273, 270, 274, 311, 273, 273, 312, 
	273, 273, 273, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 273, 273, 273, 
	273, 273, 273, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 313, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 270, 314, 278, 279, 279, 279, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 314, 270, 281, 270, 270, 270, 
	270, 270, 270, 315, 270, 270, 316, 270, 
	270, 270, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 270, 270, 270, 270, 
	270, 270, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 270, 270, 
	270, 317, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 300, 271, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 300, 270, 270, 
	270, 270, 270, 270, 270, 270, 318, 270, 
	270, 319, 270, 270, 270, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 270, 
	270, 270, 270, 270, 270, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 270, 270, 270, 320, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 300, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	300, 273, 270, 273, 273, 273, 273, 270, 
	274, 301, 273, 273, 302, 273, 273, 273, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 273, 273, 273, 273, 273, 273, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 321, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 270, 
	322, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 323, 
	125, 323, 323, 323, 323, 125, 125, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 125, 1, 325, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 324, 
	324, 324, 324, 324, 324, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 324, 324, 326, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 128, 327, 14, 1, 328, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 63, 63, 
	63, 63, 63, 63, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	63, 63, 63, 329, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	328, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	331, 63, 63, 63, 63, 63, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 63, 63, 63, 330, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 332, 333, 334, 334, 334, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 332, 7, 335, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 7, 7, 7, 7, 7, 
	7, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 7, 7, 7, 
	336, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 337, 338, 138, 
	138, 138, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 337, 7, 139, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 7, 7, 
	7, 7, 7, 7, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	7, 7, 7, 141, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	138, 138, 138, 138, 138, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 138, 
	14, 139, 14, 1, 172, 1, 172, 172, 
	172, 172, 1, 173, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 1, 339, 1, 1, 339, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 228, 
	228, 228, 228, 1, 229, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 1, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 1, 342, 341, 1, 264, 342, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 264, 263, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 56, 53, 0, 8, 
	9, 55, 8, 9, 55, 10, 14, 11, 
	10, 11, 48, 12, 13, 14, 15, 15, 
	16, 17, 18, 19, 18, 20, 19, 20, 
	21, 22, 28, 23, 41, 39, 24, 25, 
	35, 24, 25, 35, 26, 133, 27, 26, 
	27, 32, 28, 29, 133, 31, 136, 0, 
	26, 137, 36, 32, 37, 34, 138, 139, 
	38, 22, 23, 137, 36, 40, 38, 133, 
	27, 133, 27, 39, 40, 42, 41, 46, 
	43, 43, 44, 42, 45, 45, 47, 47, 
	10, 49, 50, 48, 51, 52, 6, 7, 
	49, 50, 54, 52, 14, 11, 14, 11, 
	53, 54, 57, 56, 61, 58, 58, 59, 
	57, 60, 60, 62, 62, 0, 162, 164, 
	0, 65, 66, 67, 166, 68, 67, 166, 
	68, 70, 71, 72, 170, 169, 73, 167, 
	74, 73, 167, 74, 76, 77, 76, 78, 
	77, 78, 79, 80, 86, 81, 95, 92, 
	82, 83, 94, 82, 83, 94, 84, 174, 
	85, 84, 85, 88, 86, 87, 174, 84, 
	175, 89, 88, 90, 91, 80, 81, 175, 
	89, 93, 91, 174, 85, 174, 85, 92, 
	93, 96, 95, 100, 97, 97, 98, 96, 
	99, 99, 101, 101, 103, 104, 103, 105, 
	104, 105, 106, 107, 113, 108, 122, 119, 
	109, 110, 121, 109, 110, 121, 111, 176, 
	112, 111, 112, 115, 113, 114, 176, 111, 
	178, 116, 115, 117, 118, 107, 108, 178, 
	116, 120, 118, 176, 112, 176, 112, 119, 
	120, 123, 122, 127, 124, 124, 125, 123, 
	126, 126, 128, 128, 179, 131, 132, 180, 
	182, 134, 135, 30, 134, 30, 136, 135, 
	33, 138, 139, 140, 148, 141, 142, 143, 
	138, 144, 153, 145, 146, 147, 152, 145, 
	146, 147, 152, 140, 148, 141, 149, 135, 
	150, 149, 150, 151, 140, 154, 157, 153, 
	158, 155, 156, 159, 142, 143, 144, 154, 
	157, 161, 159, 148, 141, 160, 148, 141, 
	160, 161, 163, 162, 0, 165, 164, 168, 
	168, 169, 170, 171, 172, 173, 71, 72, 
	169, 172, 173, 177, 179, 180, 181
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 21, 0, 
	0, 0, 2, 3, 0, 4, 0, 5, 
	0, 0, 8, 0, 9, 11, 15, 16, 
	15, 0, 17, 0, 19, 19, 19, 0, 
	0, 9, 0, 20, 0, 0, 22, 24, 
	25, 25, 25, 0, 26, 0, 22, 27, 
	29, 30, 30, 29, 29, 31, 33, 33, 
	33, 25, 25, 0, 0, 25, 0, 26, 
	9, 0, 26, 29, 31, 0, 31, 0, 
	25, 25, 25, 0, 26, 29, 30, 30, 
	29, 29, 31, 33, 33, 33, 25, 25, 
	0, 0, 25, 0, 26, 9, 0, 26, 
	29, 31, 0, 31, 0, 38, 8, 11, 
	40, 0, 0, 15, 42, 15, 0, 43, 
	0, 0, 0, 0, 11, 11, 15, 16, 
	15, 0, 17, 0, 47, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 54, 
	19, 0, 0, 9, 0, 20, 56, 25, 
	58, 25, 0, 26, 29, 30, 30, 60, 
	29, 31, 33, 62, 33, 58, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 2, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 19, 
	19, 0, 0, 9, 0, 20, 0, 25, 
	25, 25, 0, 26, 29, 30, 30, 29, 
	29, 31, 33, 33, 33, 25, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 67, 0, 0, 22, 
	22, 69, 68, 69, 0, 0, 0, 70, 
	69, 0, 20, 0, 0, 0, 70, 0, 
	8, 0, 9, 15, 77, 16, 15, 0, 
	70, 17, 0, 19, 19, 19, 69, 80, 
	69, 0, 0, 0, 25, 25, 25, 0, 
	26, 69, 0, 29, 83, 30, 30, 29, 
	29, 31, 33, 33, 33, 11, 25, 25, 
	0, 0, 3, 0, 88, 26, 0, 90, 
	92, 0, 0, 26, 30, 95, 30, 30, 
	31, 0, 97, 99, 0, 0, 102
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	23, 1, 1, 14, 6, 28, 32, 34, 
	23, 23, 35, 36, 37, 36, 28, 23, 
	23, 1, 6, 28, 32, 34, 23, 14, 
	23, 35, 36, 37, 36, 28, 23, 38, 
	0, 39, 41, 41, 41, 44, 44, 45, 
	46, 46, 46, 1, 48, 49, 50, 51, 
	52, 53, 53, 13, 0, 55, 1, 0, 
	57, 55, 59, 61, 63, 57, 53, 57, 
	64, 65, 66, 65, 59, 57, 1, 1, 
	0, 6, 10, 12, 14, 14, 18, 0, 
	6, 1, 0, 23, 6, 28, 32, 34, 
	23, 14, 23, 35, 36, 37, 36, 28, 
	23, 0, 0, 0, 0, 68, 68, 0, 
	70, 71, 72, 70, 70, 73, 74, 75, 
	76, 76, 78, 79, 80, 70, 70, 70, 
	76, 81, 82, 72, 72, 73, 81, 84, 
	84, 81, 85, 86, 87, 89, 0, 90, 
	0, 91, 93, 94, 96, 98, 0, 1, 
	99, 0, 100, 101, 102, 0, 102
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 63;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 64;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 65;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 69;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 75;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 102;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 129;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 130;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 26 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 24 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 88 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 56 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 67 then
		begin

    trace('RELATIONSHIP start_relationship')
    p_start = p;
  		end
	when 22 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 21 then
		begin

    trace('SIMPLE_STATEMENT statement_subject')
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 69 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 97 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 33 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 47 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 27 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 43 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 62 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 95 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 92 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 42 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 77 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 54 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 60 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 83 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 58 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 86 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 89 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 98 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 49 then
		begin
 $stderr.puts "EOF!" 		end
	when 85 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 48 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 87 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 63 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 52 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 100 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 34 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 96 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 53 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 46 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 41 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 78 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 101 then
		begin

    trace('RELATIONSHIP stop_relationship')
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    trace('RELATIONSHIP relationship_end')
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 72 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 82 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 51 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 32 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 94 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 79 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 37 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 28 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 84 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 76 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 50 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 73 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	48, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 0, 0, 
	33, 126, 9, 126, 9, 
	40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 33, 126, 47, 47, 
	47, 47, 9, 32, 9, 
	47, 9, 47, 0, 0, 
	10, 10, 9, 126, 10, 126, 
	9, 44, 9, 44, 9, 
	126, 9, 34, 9, 34, 
	10, 92, 10, 92, 34, 92, 
	9, 44, 9, 47, 9, 
	47, 10, 47, 10, 10, 
	10, 10, 9, 126, 9, 126, 
	10, 126, 10, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 10, 126, 
	0, 0, 10, 122, 0, 
	0, 0, 0, 10, 10, 
	0, 0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 
	34, 0, 0, 33, 126, 
	10, 10, 0, 0, 10, 126, 
	33, 126, 10, 10, 0, 
	0, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 24, 118, 
	118, 118, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	75, 26, 59, 59, 0, 114, 114, 26, 
	59, 59, 0, 94, 118, 32, 118, 114, 
	26, 59, 59, 36, 36, 118, 94, 36, 
	118, 118, 118, 114, 114, 118, 0, 118, 
	118, 118, 118, 118, 118, 118, 94, 118, 
	32, 118, 114, 26, 59, 59, 36, 36, 
	118, 94, 36, 118, 118, 118, 114, 114, 
	118, 0, 118, 118, 118, 118, 118, 118, 
	118, 94, 1, 1, 24, 39, 39, 0, 
	1, 118, 117, 36, 36, 118, 26, 26, 
	83, 83, 59, 36, 39, 39, 38, 1, 
	1, 118, 118, 117, 117, 118, 118, 114, 
	114, 118, 117, 0, 113, 0, 0, 1, 
	0, 113, 113, 114, 114, 26, 0, 94, 
	1, 0, 117, 94, 1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 978, 
	1097, 1216, 1335, 1454, 1487, 1606, 1721, 1748, 
	1808, 1868, 1905, 1942, 2061, 2156, 2193, 2195, 
	2197, 2316, 2411, 2529, 2530, 2649, 2768, 2883, 
	2998, 3117, 3236, 3355, 3474, 3593, 3712, 3831, 
	3950, 4069, 4188, 4307, 4426, 4541, 4656, 4775, 
	4776, 4895, 5014, 5133, 5252, 5371, 5490, 5609, 
	5704, 5780, 5807, 5867, 5927, 5928, 6043, 6158, 
	6185, 6245, 6305, 6306, 6401, 6520, 6553, 6672, 
	6787, 6814, 6874, 6934, 6971, 7008, 7127, 7222, 
	7259, 7378, 7497, 7616, 7731, 7846, 7965, 7966, 
	8085, 8204, 8323, 8442, 8561, 8680, 8799, 8894, 
	9013, 9046, 9165, 9280, 9307, 9367, 9427, 9464, 
	9501, 9620, 9715, 9752, 9871, 9990, 10109, 10224, 
	10339, 10458, 10459, 10578, 10697, 10816, 10935, 11054, 
	11173, 11292, 11387, 11389, 11391, 11416, 11456, 11496, 
	11497, 11499, 11618, 11736, 11773, 11810, 11929, 11956, 
	11983, 12067, 12151, 12211, 12248, 12288, 12328, 12367, 
	12369, 12371, 12490, 12609, 12727, 12845, 12964, 13083, 
	13198, 13313, 13432, 13550, 13551, 13665, 13666, 13667, 
	13669, 13670, 13784, 13898, 14013, 14128, 14155, 14156, 
	14251, 14253, 14254, 14372, 14467, 14469, 14470
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	30, 1, 31, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 31, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	1, 33, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 1, 
	33, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 33, 
	34, 1, 34, 34, 34, 34, 1, 1, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 1, 35, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 35, 36, 
	1, 36, 36, 36, 36, 1, 37, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 1, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 38, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 40, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 40, 42, 
	43, 42, 42, 42, 42, 7, 7, 42, 
	42, 42, 42, 42, 42, 42, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 44, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 7, 40, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 43, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 7, 
	7, 7, 7, 7, 7, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 7, 7, 7, 45, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 47, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 48, 46, 
	50, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 51, 49, 52, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 52, 14, 14, 14, 14, 
	14, 14, 14, 14, 53, 14, 14, 54, 
	14, 55, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	55, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 56, 1, 56, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 56, 42, 43, 
	42, 42, 42, 42, 7, 7, 42, 42, 
	42, 42, 42, 42, 42, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 42, 
	42, 42, 42, 42, 42, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 57, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 7, 58, 1, 58, 
	58, 58, 58, 1, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 55, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 55, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 56, 
	1, 61, 1, 1, 62, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	66, 58, 58, 58, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 58, 
	58, 58, 58, 58, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 67, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 63, 58, 1, 58, 58, 
	58, 58, 1, 59, 58, 58, 58, 58, 
	58, 58, 69, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 70, 62, 70, 70, 70, 70, 
	62, 71, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	62, 49, 56, 41, 41, 41, 41, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 56, 42, 43, 42, 42, 42, 42, 
	7, 59, 42, 42, 42, 42, 42, 42, 
	42, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 42, 42, 42, 42, 42, 
	42, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	57, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	7, 72, 73, 73, 73, 73, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	72, 58, 74, 58, 58, 58, 58, 7, 
	59, 75, 58, 58, 76, 58, 58, 58, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 58, 58, 58, 58, 58, 58, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 77, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 7, 
	78, 41, 41, 41, 41, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 78, 
	7, 43, 7, 7, 7, 7, 7, 7, 
	79, 7, 7, 80, 7, 7, 7, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 7, 7, 7, 7, 7, 7, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 7, 7, 7, 45, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 63, 63, 63, 63, 63, 
	63, 63, 63, 81, 63, 63, 82, 63, 
	63, 63, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 63, 63, 63, 63, 
	63, 63, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 63, 63, 
	63, 83, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 64, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 58, 63, 
	58, 58, 58, 58, 63, 59, 65, 58, 
	58, 66, 58, 58, 58, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 58, 
	58, 58, 58, 58, 58, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 84, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 63, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	85, 58, 58, 58, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 87, 58, 
	58, 58, 58, 58, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 86, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 63, 56, 41, 41, 41, 
	41, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 56, 42, 43, 42, 42, 
	42, 42, 7, 59, 42, 42, 42, 42, 
	42, 42, 42, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 42, 42, 42, 
	42, 42, 42, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 88, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 58, 63, 58, 58, 58, 
	58, 63, 59, 65, 58, 58, 85, 58, 
	58, 58, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 90, 58, 58, 58, 
	58, 58, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 89, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 63, 72, 73, 73, 73, 73, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 72, 58, 74, 58, 58, 58, 58, 
	7, 59, 75, 58, 58, 91, 58, 58, 
	58, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 58, 58, 58, 58, 58, 
	58, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	92, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	7, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 58, 63, 58, 58, 58, 58, 63, 
	59, 65, 58, 58, 85, 58, 58, 58, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 58, 58, 58, 58, 58, 58, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 93, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 63, 
	72, 73, 73, 73, 73, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 72, 
	58, 74, 58, 58, 58, 58, 7, 59, 
	75, 58, 58, 91, 58, 58, 58, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 58, 58, 58, 58, 58, 58, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 94, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 7, 64, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 64, 58, 
	63, 58, 58, 58, 58, 63, 59, 65, 
	58, 58, 85, 58, 58, 58, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	58, 58, 58, 58, 58, 58, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 95, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 63, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 98, 27, 27, 27, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 100, 
	27, 27, 27, 27, 27, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 99, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 63, 30, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 10, 10, 10, 
	10, 10, 10, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 26, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 7, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 105, 27, 
	27, 27, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 27, 27, 27, 27, 
	27, 27, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 106, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 7, 107, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 107, 7, 11, 7, 7, 7, 7, 
	7, 7, 108, 7, 7, 109, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	13, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 96, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 110, 63, 63, 
	111, 63, 63, 63, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 63, 63, 
	63, 63, 63, 63, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	63, 63, 63, 112, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 98, 27, 27, 27, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 27, 27, 27, 27, 27, 27, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 113, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 63, 18, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 114, 27, 27, 27, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 116, 27, 27, 27, 27, 27, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 115, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 63, 25, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 25, 10, 
	11, 10, 10, 10, 10, 7, 28, 10, 
	10, 10, 10, 10, 10, 10, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	10, 10, 10, 10, 10, 10, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 117, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 7, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 114, 27, 27, 27, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 119, 
	27, 27, 27, 27, 27, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 118, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 63, 101, 102, 102, 
	102, 102, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 101, 27, 103, 27, 
	27, 27, 27, 7, 28, 104, 27, 27, 
	120, 27, 27, 27, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 27, 27, 
	27, 27, 27, 27, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 121, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 7, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 96, 27, 63, 27, 27, 
	27, 27, 63, 28, 97, 27, 27, 114, 
	27, 27, 27, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 27, 27, 27, 
	27, 27, 27, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 122, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 63, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 120, 27, 
	27, 27, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 27, 27, 27, 27, 
	27, 27, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 123, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 7, 96, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 96, 27, 63, 27, 27, 27, 27, 
	63, 28, 97, 27, 27, 114, 27, 27, 
	27, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 27, 27, 27, 27, 27, 
	27, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	124, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	63, 126, 125, 126, 126, 126, 126, 125, 
	125, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 125, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 1, 1, 1, 1, 1, 1, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 1, 1, 1, 127, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 129, 129, 129, 129, 
	129, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 129, 128, 130, 128, 132, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 133, 131, 135, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 136, 134, 134, 
	137, 138, 138, 138, 138, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	7, 139, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 7, 7, 7, 7, 7, 7, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 7, 7, 7, 140, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 137, 138, 138, 138, 138, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 137, 7, 139, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 7, 7, 7, 7, 
	7, 7, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 7, 7, 
	7, 141, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 138, 138, 
	138, 138, 138, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 138, 14, 139, 
	14, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 146, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	145, 145, 148, 1, 148, 148, 148, 148, 
	1, 1, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	1, 149, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	149, 150, 1, 150, 150, 150, 150, 1, 
	151, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 1, 
	152, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 152, 
	1, 1, 1, 1, 1, 1, 1, 153, 
	1, 154, 155, 155, 155, 155, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	154, 156, 157, 156, 156, 156, 156, 7, 
	7, 156, 156, 156, 156, 156, 156, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 158, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 7, 
	154, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 154, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 155, 155, 155, 155, 155, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 155, 14, 157, 14, 161, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	162, 160, 164, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 165, 163, 166, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 166, 14, 14, 
	14, 14, 14, 14, 14, 14, 167, 14, 
	14, 168, 14, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 170, 1, 
	170, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 170, 
	156, 157, 156, 156, 156, 156, 7, 7, 
	156, 156, 156, 156, 156, 156, 156, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 156, 156, 156, 156, 156, 156, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 171, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 7, 172, 
	1, 172, 172, 172, 172, 1, 173, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 169, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 169, 1, 1, 
	1, 1, 1, 1, 1, 1, 174, 1, 
	1, 170, 1, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 172, 63, 172, 172, 172, 
	172, 63, 173, 176, 172, 172, 177, 172, 
	172, 172, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 179, 172, 172, 172, 
	172, 172, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 178, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 63, 170, 155, 155, 155, 155, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 170, 156, 157, 156, 156, 156, 156, 
	7, 173, 156, 156, 156, 156, 156, 156, 
	156, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 156, 156, 156, 156, 156, 
	156, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	171, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	7, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 184, 172, 172, 172, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 172, 172, 172, 172, 172, 172, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 185, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 7, 
	186, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	187, 7, 7, 188, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 189, 63, 63, 190, 63, 
	63, 63, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 63, 63, 63, 63, 
	63, 63, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 63, 63, 
	63, 191, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 177, 172, 172, 172, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 172, 
	172, 172, 172, 172, 172, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 192, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 63, 163, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 193, 172, 172, 172, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 195, 
	172, 172, 172, 172, 172, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 194, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 63, 170, 155, 155, 
	155, 155, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 170, 156, 157, 156, 
	156, 156, 156, 7, 173, 156, 156, 156, 
	156, 156, 156, 156, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 156, 156, 
	156, 156, 156, 156, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 196, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 7, 175, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 175, 172, 63, 172, 172, 
	172, 172, 63, 173, 176, 172, 172, 193, 
	172, 172, 172, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 198, 172, 172, 
	172, 172, 172, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 197, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 63, 180, 181, 181, 181, 181, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 180, 172, 182, 172, 172, 172, 
	172, 7, 173, 183, 172, 172, 199, 172, 
	172, 172, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 172, 172, 172, 172, 
	172, 172, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 200, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 7, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 175, 172, 63, 172, 172, 172, 172, 
	63, 173, 176, 172, 172, 193, 172, 172, 
	172, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 172, 172, 172, 172, 172, 
	172, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	201, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	63, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 199, 172, 172, 172, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 172, 172, 172, 172, 172, 172, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 202, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 7, 
	175, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 175, 
	172, 63, 172, 172, 172, 172, 63, 173, 
	176, 172, 172, 193, 172, 172, 172, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 172, 172, 172, 172, 172, 172, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 203, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 63, 204, 
	1, 204, 204, 204, 204, 1, 1, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 206, 1, 
	206, 206, 206, 206, 1, 207, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 1, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 1, 1, 1, 
	1, 1, 1, 1, 209, 1, 210, 211, 
	211, 211, 211, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 210, 212, 213, 
	212, 212, 212, 212, 7, 7, 212, 212, 
	212, 212, 212, 212, 212, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 212, 
	212, 212, 212, 212, 212, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 214, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 7, 210, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 210, 7, 213, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	211, 211, 211, 211, 211, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 211, 
	14, 213, 14, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 220, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 221, 219, 222, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 222, 14, 14, 14, 14, 14, 
	14, 14, 14, 223, 14, 14, 224, 14, 
	225, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 225, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 226, 1, 226, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 226, 212, 213, 212, 
	212, 212, 212, 7, 7, 212, 212, 212, 
	212, 212, 212, 212, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 212, 212, 
	212, 212, 212, 212, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 227, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 7, 228, 1, 228, 228, 
	228, 228, 1, 229, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 1, 225, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 225, 1, 1, 1, 1, 1, 
	1, 1, 1, 230, 1, 1, 226, 1, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	228, 63, 228, 228, 228, 228, 63, 229, 
	232, 228, 228, 233, 228, 228, 228, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 235, 228, 228, 228, 228, 228, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 234, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 63, 226, 
	211, 211, 211, 211, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 226, 212, 
	213, 212, 212, 212, 212, 7, 229, 212, 
	212, 212, 212, 212, 212, 212, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	212, 212, 212, 212, 212, 212, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 227, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 7, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 240, 228, 228, 228, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 228, 
	228, 228, 228, 228, 228, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 241, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 7, 242, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 242, 7, 213, 7, 
	7, 7, 7, 7, 7, 243, 7, 7, 
	244, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	245, 63, 63, 246, 63, 63, 63, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 63, 63, 63, 63, 63, 63, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 63, 63, 63, 247, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 233, 228, 
	228, 228, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 228, 228, 228, 228, 
	228, 228, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 248, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 63, 219, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 249, 228, 
	228, 228, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 251, 228, 228, 228, 
	228, 228, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 250, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 63, 226, 211, 211, 211, 211, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 226, 212, 213, 212, 212, 212, 212, 
	7, 229, 212, 212, 212, 212, 212, 212, 
	212, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 212, 212, 212, 212, 212, 
	212, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	252, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	7, 231, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	231, 228, 63, 228, 228, 228, 228, 63, 
	229, 232, 228, 228, 249, 228, 228, 228, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 254, 228, 228, 228, 228, 228, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 253, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 63, 
	236, 237, 237, 237, 237, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 236, 
	228, 238, 228, 228, 228, 228, 7, 229, 
	239, 228, 228, 255, 228, 228, 228, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 228, 228, 228, 228, 228, 228, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 256, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 7, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 231, 228, 
	63, 228, 228, 228, 228, 63, 229, 232, 
	228, 228, 249, 228, 228, 228, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	228, 228, 228, 228, 228, 228, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 257, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 63, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 255, 228, 228, 228, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 228, 
	228, 228, 228, 228, 228, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 258, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 7, 231, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 231, 228, 63, 228, 
	228, 228, 228, 63, 229, 232, 228, 228, 
	249, 228, 228, 228, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 228, 228, 
	228, 228, 228, 228, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 259, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 63, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 1, 261, 1, 262, 1, 264, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 264, 263, 
	265, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 265, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	268, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 269, 1, 
	1, 271, 270, 265, 266, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 265, 58, 1, 58, 58, 58, 
	58, 1, 59, 58, 58, 58, 58, 58, 
	58, 272, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 273, 270, 273, 273, 273, 273, 270, 
	274, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 270, 
	275, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 275, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	276, 270, 270, 277, 270, 275, 271, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 275, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	277, 270, 277, 278, 279, 279, 279, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 277, 280, 281, 280, 280, 280, 280, 
	270, 270, 280, 280, 280, 280, 280, 280, 
	280, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 280, 280, 280, 280, 280, 
	280, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	282, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	270, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 279, 278, 279, 279, 
	279, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 279, 270, 281, 270, 284, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 286, 283, 288, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 289, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 290, 287, 50, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 51, 49, 291, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 291, 270, 270, 270, 270, 270, 
	270, 270, 270, 292, 270, 270, 293, 270, 
	294, 295, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 294, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 296, 270, 
	297, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 297, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 298, 270, 
	271, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 299, 270, 271, 
	62, 288, 287, 300, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 300, 273, 270, 273, 273, 273, 
	273, 270, 274, 301, 273, 273, 302, 273, 
	273, 273, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 304, 273, 273, 273, 
	273, 273, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 303, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 270, 294, 295, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 294, 273, 270, 273, 273, 273, 273, 
	270, 274, 273, 273, 273, 273, 273, 273, 
	305, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	270, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	273, 270, 273, 273, 273, 273, 270, 274, 
	273, 273, 273, 273, 273, 273, 306, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 270, 271, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 70, 62, 
	70, 70, 70, 70, 62, 71, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 62, 277, 278, 279, 
	279, 279, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 277, 280, 281, 280, 
	280, 280, 280, 270, 274, 280, 280, 280, 
	280, 280, 280, 280, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 280, 280, 
	280, 280, 280, 280, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 282, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 270, 307, 308, 309, 309, 
	309, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 307, 273, 310, 273, 273, 
	273, 273, 270, 274, 311, 273, 273, 312, 
	273, 273, 273, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 273, 273, 273, 
	273, 273, 273, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 313, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 270, 314, 278, 279, 279, 279, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 314, 270, 281, 270, 270, 270, 
	270, 270, 270, 315, 270, 270, 316, 270, 
	270, 270, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 270, 270, 270, 270, 
	270, 270, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 270, 270, 
	270, 317, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 300, 271, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 300, 270, 270, 
	270, 270, 270, 270, 270, 270, 318, 270, 
	270, 319, 270, 270, 270, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 270, 
	270, 270, 270, 270, 270, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 270, 270, 270, 320, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 300, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	300, 273, 270, 273, 273, 273, 273, 270, 
	274, 301, 273, 273, 302, 273, 273, 273, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 273, 273, 273, 273, 273, 273, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 321, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 270, 
	322, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 323, 
	125, 323, 323, 323, 323, 125, 125, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 125, 1, 325, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 324, 
	324, 324, 324, 324, 324, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 324, 324, 326, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 128, 327, 14, 1, 328, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 63, 63, 
	63, 63, 63, 63, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	63, 63, 63, 329, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	328, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	331, 63, 63, 63, 63, 63, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 63, 63, 63, 330, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 332, 333, 334, 334, 334, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 332, 7, 335, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 7, 7, 7, 7, 7, 
	7, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 7, 7, 7, 
	336, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 337, 338, 138, 
	138, 138, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 337, 7, 139, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 7, 7, 
	7, 7, 7, 7, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	7, 7, 7, 141, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	138, 138, 138, 138, 138, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 138, 
	14, 139, 14, 1, 172, 1, 172, 172, 
	172, 172, 1, 173, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 1, 339, 1, 1, 339, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 228, 
	228, 228, 228, 1, 229, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 1, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 1, 342, 341, 1, 264, 342, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 264, 263, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 56, 53, 0, 8, 
	9, 55, 8, 9, 55, 10, 14, 11, 
	10, 11, 48, 12, 13, 14, 15, 15, 
	16, 17, 18, 19, 18, 20, 19, 20, 
	21, 22, 28, 23, 41, 39, 24, 25, 
	35, 24, 25, 35, 26, 133, 27, 26, 
	27, 32, 28, 29, 133, 31, 136, 0, 
	26, 137, 36, 32, 37, 34, 138, 139, 
	38, 22, 23, 137, 36, 40, 38, 133, 
	27, 133, 27, 39, 40, 42, 41, 46, 
	43, 43, 44, 42, 45, 45, 47, 47, 
	10, 49, 50, 48, 51, 52, 6, 7, 
	49, 50, 54, 52, 14, 11, 14, 11, 
	53, 54, 57, 56, 61, 58, 58, 59, 
	57, 60, 60, 62, 62, 0, 162, 164, 
	0, 65, 66, 67, 166, 68, 67, 166, 
	68, 70, 71, 72, 170, 169, 73, 167, 
	74, 73, 167, 74, 76, 77, 76, 78, 
	77, 78, 79, 80, 86, 81, 95, 92, 
	82, 83, 94, 82, 83, 94, 84, 174, 
	85, 84, 85, 88, 86, 87, 174, 84, 
	175, 89, 88, 90, 91, 80, 81, 175, 
	89, 93, 91, 174, 85, 174, 85, 92, 
	93, 96, 95, 100, 97, 97, 98, 96, 
	99, 99, 101, 101, 103, 104, 103, 105, 
	104, 105, 106, 107, 113, 108, 122, 119, 
	109, 110, 121, 109, 110, 121, 111, 176, 
	112, 111, 112, 115, 113, 114, 176, 111, 
	178, 116, 115, 117, 118, 107, 108, 178, 
	116, 120, 118, 176, 112, 176, 112, 119, 
	120, 123, 122, 127, 124, 124, 125, 123, 
	126, 126, 128, 128, 179, 131, 132, 180, 
	182, 134, 135, 30, 134, 30, 136, 135, 
	33, 138, 139, 140, 148, 141, 142, 143, 
	138, 144, 153, 145, 146, 147, 152, 145, 
	146, 147, 152, 140, 148, 141, 149, 135, 
	150, 149, 150, 151, 140, 154, 157, 153, 
	158, 155, 156, 159, 142, 143, 144, 154, 
	157, 161, 159, 148, 141, 160, 148, 141, 
	160, 161, 163, 162, 0, 165, 164, 168, 
	168, 169, 170, 171, 172, 173, 71, 72, 
	169, 172, 173, 177, 179, 180, 181
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 21, 0, 
	0, 0, 2, 3, 0, 4, 0, 5, 
	0, 0, 8, 0, 9, 11, 15, 16, 
	15, 0, 17, 0, 19, 19, 19, 0, 
	0, 9, 0, 20, 0, 0, 22, 24, 
	25, 25, 25, 0, 26, 0, 22, 27, 
	29, 30, 30, 29, 29, 31, 33, 33, 
	33, 25, 25, 0, 0, 25, 0, 26, 
	9, 0, 26, 29, 31, 0, 31, 0, 
	25, 25, 25, 0, 26, 29, 30, 30, 
	29, 29, 31, 33, 33, 33, 25, 25, 
	0, 0, 25, 0, 26, 9, 0, 26, 
	29, 31, 0, 31, 0, 38, 8, 11, 
	40, 0, 0, 15, 42, 15, 0, 43, 
	0, 0, 0, 0, 11, 11, 15, 16, 
	15, 0, 17, 0, 47, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 54, 
	19, 0, 0, 9, 0, 20, 56, 25, 
	58, 25, 0, 26, 29, 30, 30, 60, 
	29, 31, 33, 62, 33, 58, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 2, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 19, 
	19, 0, 0, 9, 0, 20, 0, 25, 
	25, 25, 0, 26, 29, 30, 30, 29, 
	29, 31, 33, 33, 33, 25, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 67, 0, 0, 22, 
	22, 69, 68, 69, 0, 0, 0, 70, 
	69, 0, 20, 0, 0, 0, 70, 0, 
	8, 0, 9, 15, 77, 16, 15, 0, 
	70, 17, 0, 19, 19, 19, 69, 80, 
	69, 0, 0, 0, 25, 25, 25, 0, 
	26, 69, 0, 29, 83, 30, 30, 29, 
	29, 31, 33, 33, 33, 11, 25, 25, 
	0, 0, 3, 0, 88, 26, 0, 90, 
	92, 0, 0, 26, 30, 95, 30, 30, 
	31, 0, 97, 99, 0, 0, 102
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	23, 1, 1, 14, 6, 28, 32, 34, 
	23, 23, 35, 36, 37, 36, 28, 23, 
	23, 1, 6, 28, 32, 34, 23, 14, 
	23, 35, 36, 37, 36, 28, 23, 38, 
	0, 39, 41, 41, 41, 44, 44, 45, 
	46, 46, 46, 1, 48, 49, 50, 51, 
	52, 53, 53, 13, 0, 55, 1, 0, 
	57, 55, 59, 61, 63, 57, 53, 57, 
	64, 65, 66, 65, 59, 57, 1, 1, 
	0, 6, 10, 12, 14, 14, 18, 0, 
	6, 1, 0, 23, 6, 28, 32, 34, 
	23, 14, 23, 35, 36, 37, 36, 28, 
	23, 0, 0, 0, 0, 68, 68, 0, 
	70, 71, 72, 70, 70, 73, 74, 75, 
	76, 76, 78, 79, 80, 70, 70, 70, 
	76, 81, 82, 72, 72, 73, 81, 84, 
	84, 81, 85, 86, 87, 89, 0, 90, 
	0, 91, 93, 94, 96, 98, 0, 1, 
	99, 0, 100, 101, 102, 0, 102
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 63;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 64;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 65;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 69;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 75;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 102;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 129;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 130;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 26 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 24 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 88 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 56 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 67 then
		begin

    trace('RELATIONSHIP start_relationship')
    p_start = p;
  		end
	when 22 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 21 then
		begin

    trace('SIMPLE_STATEMENT statement_subject')
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 69 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 97 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 33 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 47 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 27 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 43 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 62 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 95 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 92 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 42 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 77 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 54 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 60 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 83 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 58 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 86 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 89 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 98 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 49 then
		begin
 $stderr.puts "EOF!" 		end
	when 85 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 48 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 87 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 63 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 52 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 100 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 34 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 96 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 53 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 46 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 41 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 78 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 101 then
		begin

    trace('RELATIONSHIP stop_relationship')
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    trace('RELATIONSHIP relationship_end')
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 72 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 82 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 51 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 32 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 94 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 79 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 37 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 28 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 84 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 76 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 50 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 73 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	48, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 0, 0, 
	33, 126, 9, 126, 9, 
	40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 33, 126, 47, 47, 
	47, 47, 9, 32, 9, 
	47, 9, 47, 0, 0, 
	10, 10, 9, 126, 10, 126, 
	9, 44, 9, 44, 9, 
	126, 9, 34, 9, 34, 
	10, 92, 10, 92, 34, 92, 
	9, 44, 9, 47, 9, 
	47, 10, 47, 10, 10, 
	10, 10, 9, 126, 9, 126, 
	10, 126, 10, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 10, 126, 
	0, 0, 10, 122, 0, 
	0, 0, 0, 10, 10, 
	0, 0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 
	34, 0, 0, 33, 126, 
	10, 10, 0, 0, 10, 126, 
	33, 126, 10, 10, 0, 
	0, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 24, 118, 
	118, 118, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	75, 26, 59, 59, 0, 114, 114, 26, 
	59, 59, 0, 94, 118, 32, 118, 114, 
	26, 59, 59, 36, 36, 118, 94, 36, 
	118, 118, 118, 114, 114, 118, 0, 118, 
	118, 118, 118, 118, 118, 118, 94, 118, 
	32, 118, 114, 26, 59, 59, 36, 36, 
	118, 94, 36, 118, 118, 118, 114, 114, 
	118, 0, 118, 118, 118, 118, 118, 118, 
	118, 94, 1, 1, 24, 39, 39, 0, 
	1, 118, 117, 36, 36, 118, 26, 26, 
	83, 83, 59, 36, 39, 39, 38, 1, 
	1, 118, 118, 117, 117, 118, 118, 114, 
	114, 118, 117, 0, 113, 0, 0, 1, 
	0, 113, 113, 114, 114, 26, 0, 94, 
	1, 0, 117, 94, 1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 978, 
	1097, 1216, 1335, 1454, 1487, 1606, 1721, 1748, 
	1808, 1868, 1905, 1942, 2061, 2156, 2193, 2195, 
	2197, 2316, 2411, 2529, 2530, 2649, 2768, 2883, 
	2998, 3117, 3236, 3355, 3474, 3593, 3712, 3831, 
	3950, 4069, 4188, 4307, 4426, 4541, 4656, 4775, 
	4776, 4895, 5014, 5133, 5252, 5371, 5490, 5609, 
	5704, 5780, 5807, 5867, 5927, 5928, 6043, 6158, 
	6185, 6245, 6305, 6306, 6401, 6520, 6553, 6672, 
	6787, 6814, 6874, 6934, 6971, 7008, 7127, 7222, 
	7259, 7378, 7497, 7616, 7731, 7846, 7965, 7966, 
	8085, 8204, 8323, 8442, 8561, 8680, 8799, 8894, 
	9013, 9046, 9165, 9280, 9307, 9367, 9427, 9464, 
	9501, 9620, 9715, 9752, 9871, 9990, 10109, 10224, 
	10339, 10458, 10459, 10578, 10697, 10816, 10935, 11054, 
	11173, 11292, 11387, 11389, 11391, 11416, 11456, 11496, 
	11497, 11499, 11618, 11736, 11773, 11810, 11929, 11956, 
	11983, 12067, 12151, 12211, 12248, 12288, 12328, 12367, 
	12369, 12371, 12490, 12609, 12727, 12845, 12964, 13083, 
	13198, 13313, 13432, 13550, 13551, 13665, 13666, 13667, 
	13669, 13670, 13784, 13898, 14013, 14128, 14155, 14156, 
	14251, 14253, 14254, 14372, 14467, 14469, 14470
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	30, 1, 31, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 31, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	1, 33, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 1, 
	33, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 33, 
	34, 1, 34, 34, 34, 34, 1, 1, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 1, 35, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 35, 36, 
	1, 36, 36, 36, 36, 1, 37, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 1, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 38, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 40, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 40, 42, 
	43, 42, 42, 42, 42, 7, 7, 42, 
	42, 42, 42, 42, 42, 42, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 44, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 7, 40, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 43, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 7, 
	7, 7, 7, 7, 7, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 7, 7, 7, 45, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 47, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 48, 46, 
	50, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 51, 49, 52, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 52, 14, 14, 14, 14, 
	14, 14, 14, 14, 53, 14, 14, 54, 
	14, 55, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	55, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 56, 1, 56, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 56, 42, 43, 
	42, 42, 42, 42, 7, 7, 42, 42, 
	42, 42, 42, 42, 42, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 42, 
	42, 42, 42, 42, 42, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 57, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 7, 58, 1, 58, 
	58, 58, 58, 1, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 55, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 55, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 56, 
	1, 61, 1, 1, 62, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	66, 58, 58, 58, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 58, 
	58, 58, 58, 58, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 67, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 63, 58, 1, 58, 58, 
	58, 58, 1, 59, 58, 58, 58, 58, 
	58, 58, 69, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 70, 62, 70, 70, 70, 70, 
	62, 71, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	62, 49, 56, 41, 41, 41, 41, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 56, 42, 43, 42, 42, 42, 42, 
	7, 59, 42, 42, 42, 42, 42, 42, 
	42, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 42, 42, 42, 42, 42, 
	42, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	57, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	7, 72, 73, 73, 73, 73, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	72, 58, 74, 58, 58, 58, 58, 7, 
	59, 75, 58, 58, 76, 58, 58, 58, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 58, 58, 58, 58, 58, 58, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 77, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 7, 
	78, 41, 41, 41, 41, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 78, 
	7, 43, 7, 7, 7, 7, 7, 7, 
	79, 7, 7, 80, 7, 7, 7, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 7, 7, 7, 7, 7, 7, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 7, 7, 7, 45, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 63, 63, 63, 63, 63, 
	63, 63, 63, 81, 63, 63, 82, 63, 
	63, 63, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 63, 63, 63, 63, 
	63, 63, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 63, 63, 
	63, 83, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 64, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 58, 63, 
	58, 58, 58, 58, 63, 59, 65, 58, 
	58, 66, 58, 58, 58, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 58, 
	58, 58, 58, 58, 58, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 84, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 63, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	85, 58, 58, 58, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 87, 58, 
	58, 58, 58, 58, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 86, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 63, 56, 41, 41, 41, 
	41, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 56, 42, 43, 42, 42, 
	42, 42, 7, 59, 42, 42, 42, 42, 
	42, 42, 42, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 42, 42, 42, 
	42, 42, 42, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 88, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 58, 63, 58, 58, 58, 
	58, 63, 59, 65, 58, 58, 85, 58, 
	58, 58, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 90, 58, 58, 58, 
	58, 58, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 89, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 63, 72, 73, 73, 73, 73, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 72, 58, 74, 58, 58, 58, 58, 
	7, 59, 75, 58, 58, 91, 58, 58, 
	58, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 58, 58, 58, 58, 58, 
	58, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	92, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	7, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 58, 63, 58, 58, 58, 58, 63, 
	59, 65, 58, 58, 85, 58, 58, 58, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 58, 58, 58, 58, 58, 58, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 93, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 63, 
	72, 73, 73, 73, 73, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 72, 
	58, 74, 58, 58, 58, 58, 7, 59, 
	75, 58, 58, 91, 58, 58, 58, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 58, 58, 58, 58, 58, 58, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 94, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 7, 64, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 64, 58, 
	63, 58, 58, 58, 58, 63, 59, 65, 
	58, 58, 85, 58, 58, 58, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	58, 58, 58, 58, 58, 58, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 95, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 63, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 98, 27, 27, 27, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 100, 
	27, 27, 27, 27, 27, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 99, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 63, 30, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 10, 10, 10, 
	10, 10, 10, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 26, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 7, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 105, 27, 
	27, 27, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 27, 27, 27, 27, 
	27, 27, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 106, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 7, 107, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 107, 7, 11, 7, 7, 7, 7, 
	7, 7, 108, 7, 7, 109, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	13, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 96, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 110, 63, 63, 
	111, 63, 63, 63, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 63, 63, 
	63, 63, 63, 63, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	63, 63, 63, 112, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 98, 27, 27, 27, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 27, 27, 27, 27, 27, 27, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 113, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 63, 18, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 114, 27, 27, 27, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 116, 27, 27, 27, 27, 27, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 115, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 63, 25, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 25, 10, 
	11, 10, 10, 10, 10, 7, 28, 10, 
	10, 10, 10, 10, 10, 10, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	10, 10, 10, 10, 10, 10, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 117, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 7, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 114, 27, 27, 27, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 119, 
	27, 27, 27, 27, 27, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 118, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 63, 101, 102, 102, 
	102, 102, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 101, 27, 103, 27, 
	27, 27, 27, 7, 28, 104, 27, 27, 
	120, 27, 27, 27, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 27, 27, 
	27, 27, 27, 27, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 121, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 7, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 96, 27, 63, 27, 27, 
	27, 27, 63, 28, 97, 27, 27, 114, 
	27, 27, 27, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 27, 27, 27, 
	27, 27, 27, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 122, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 63, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 120, 27, 
	27, 27, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 27, 27, 27, 27, 
	27, 27, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 123, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 7, 96, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 96, 27, 63, 27, 27, 27, 27, 
	63, 28, 97, 27, 27, 114, 27, 27, 
	27, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 27, 27, 27, 27, 27, 
	27, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	124, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	63, 126, 125, 126, 126, 126, 126, 125, 
	125, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 125, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 1, 1, 1, 1, 1, 1, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 1, 1, 1, 127, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 129, 129, 129, 129, 
	129, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 129, 128, 130, 128, 132, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 133, 131, 135, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 136, 134, 134, 
	137, 138, 138, 138, 138, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	7, 139, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 7, 7, 7, 7, 7, 7, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 7, 7, 7, 140, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 137, 138, 138, 138, 138, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 137, 7, 139, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 7, 7, 7, 7, 
	7, 7, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 7, 7, 
	7, 141, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 138, 138, 
	138, 138, 138, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 138, 14, 139, 
	14, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 146, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	145, 145, 148, 1, 148, 148, 148, 148, 
	1, 1, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	1, 149, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	149, 150, 1, 150, 150, 150, 150, 1, 
	151, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 1, 
	152, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 152, 
	1, 1, 1, 1, 1, 1, 1, 153, 
	1, 154, 155, 155, 155, 155, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	154, 156, 157, 156, 156, 156, 156, 7, 
	7, 156, 156, 156, 156, 156, 156, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 158, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 7, 
	154, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 154, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 155, 155, 155, 155, 155, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 155, 14, 157, 14, 161, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	162, 160, 164, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 165, 163, 166, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 166, 14, 14, 
	14, 14, 14, 14, 14, 14, 167, 14, 
	14, 168, 14, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 170, 1, 
	170, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 170, 
	156, 157, 156, 156, 156, 156, 7, 7, 
	156, 156, 156, 156, 156, 156, 156, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 156, 156, 156, 156, 156, 156, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 171, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 7, 172, 
	1, 172, 172, 172, 172, 1, 173, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 169, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 169, 1, 1, 
	1, 1, 1, 1, 1, 1, 174, 1, 
	1, 170, 1, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 172, 63, 172, 172, 172, 
	172, 63, 173, 176, 172, 172, 177, 172, 
	172, 172, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 179, 172, 172, 172, 
	172, 172, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 178, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 63, 170, 155, 155, 155, 155, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 170, 156, 157, 156, 156, 156, 156, 
	7, 173, 156, 156, 156, 156, 156, 156, 
	156, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 156, 156, 156, 156, 156, 
	156, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	171, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	7, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 184, 172, 172, 172, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 172, 172, 172, 172, 172, 172, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 185, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 7, 
	186, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	187, 7, 7, 188, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 189, 63, 63, 190, 63, 
	63, 63, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 63, 63, 63, 63, 
	63, 63, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 63, 63, 
	63, 191, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 177, 172, 172, 172, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 172, 
	172, 172, 172, 172, 172, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 192, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 63, 163, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 193, 172, 172, 172, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 195, 
	172, 172, 172, 172, 172, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 194, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 63, 170, 155, 155, 
	155, 155, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 170, 156, 157, 156, 
	156, 156, 156, 7, 173, 156, 156, 156, 
	156, 156, 156, 156, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 156, 156, 
	156, 156, 156, 156, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 196, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 7, 175, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 175, 172, 63, 172, 172, 
	172, 172, 63, 173, 176, 172, 172, 193, 
	172, 172, 172, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 198, 172, 172, 
	172, 172, 172, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 197, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 63, 180, 181, 181, 181, 181, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 180, 172, 182, 172, 172, 172, 
	172, 7, 173, 183, 172, 172, 199, 172, 
	172, 172, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 172, 172, 172, 172, 
	172, 172, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 200, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 7, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 175, 172, 63, 172, 172, 172, 172, 
	63, 173, 176, 172, 172, 193, 172, 172, 
	172, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 172, 172, 172, 172, 172, 
	172, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	201, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	63, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 199, 172, 172, 172, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 172, 172, 172, 172, 172, 172, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 202, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 7, 
	175, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 175, 
	172, 63, 172, 172, 172, 172, 63, 173, 
	176, 172, 172, 193, 172, 172, 172, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 172, 172, 172, 172, 172, 172, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 203, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 63, 204, 
	1, 204, 204, 204, 204, 1, 1, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 206, 1, 
	206, 206, 206, 206, 1, 207, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 1, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 1, 1, 1, 
	1, 1, 1, 1, 209, 1, 210, 211, 
	211, 211, 211, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 210, 212, 213, 
	212, 212, 212, 212, 7, 7, 212, 212, 
	212, 212, 212, 212, 212, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 212, 
	212, 212, 212, 212, 212, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 214, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 7, 210, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 210, 7, 213, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	211, 211, 211, 211, 211, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 211, 
	14, 213, 14, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 220, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 221, 219, 222, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 222, 14, 14, 14, 14, 14, 
	14, 14, 14, 223, 14, 14, 224, 14, 
	225, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 225, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 226, 1, 226, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 226, 212, 213, 212, 
	212, 212, 212, 7, 7, 212, 212, 212, 
	212, 212, 212, 212, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 212, 212, 
	212, 212, 212, 212, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 227, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 7, 228, 1, 228, 228, 
	228, 228, 1, 229, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 1, 225, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 225, 1, 1, 1, 1, 1, 
	1, 1, 1, 230, 1, 1, 226, 1, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	228, 63, 228, 228, 228, 228, 63, 229, 
	232, 228, 228, 233, 228, 228, 228, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 235, 228, 228, 228, 228, 228, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 234, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 63, 226, 
	211, 211, 211, 211, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 226, 212, 
	213, 212, 212, 212, 212, 7, 229, 212, 
	212, 212, 212, 212, 212, 212, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	212, 212, 212, 212, 212, 212, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 227, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 7, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 240, 228, 228, 228, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 228, 
	228, 228, 228, 228, 228, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 241, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 7, 242, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 242, 7, 213, 7, 
	7, 7, 7, 7, 7, 243, 7, 7, 
	244, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	245, 63, 63, 246, 63, 63, 63, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 63, 63, 63, 63, 63, 63, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 63, 63, 63, 247, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 233, 228, 
	228, 228, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 228, 228, 228, 228, 
	228, 228, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 248, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 63, 219, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 249, 228, 
	228, 228, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 251, 228, 228, 228, 
	228, 228, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 250, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 63, 226, 211, 211, 211, 211, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 226, 212, 213, 212, 212, 212, 212, 
	7, 229, 212, 212, 212, 212, 212, 212, 
	212, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 212, 212, 212, 212, 212, 
	212, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	252, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	7, 231, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	231, 228, 63, 228, 228, 228, 228, 63, 
	229, 232, 228, 228, 249, 228, 228, 228, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 254, 228, 228, 228, 228, 228, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 253, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 63, 
	236, 237, 237, 237, 237, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 236, 
	228, 238, 228, 228, 228, 228, 7, 229, 
	239, 228, 228, 255, 228, 228, 228, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 228, 228, 228, 228, 228, 228, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 256, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 7, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 231, 228, 
	63, 228, 228, 228, 228, 63, 229, 232, 
	228, 228, 249, 228, 228, 228, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	228, 228, 228, 228, 228, 228, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 257, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 63, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 255, 228, 228, 228, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 228, 
	228, 228, 228, 228, 228, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 258, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 7, 231, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 231, 228, 63, 228, 
	228, 228, 228, 63, 229, 232, 228, 228, 
	249, 228, 228, 228, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 228, 228, 
	228, 228, 228, 228, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 259, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 63, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 1, 261, 1, 262, 1, 264, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 264, 263, 
	265, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 265, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	268, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 269, 1, 
	1, 271, 270, 265, 266, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 265, 58, 1, 58, 58, 58, 
	58, 1, 59, 58, 58, 58, 58, 58, 
	58, 272, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 273, 270, 273, 273, 273, 273, 270, 
	274, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 270, 
	275, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 275, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	276, 270, 270, 277, 270, 275, 271, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 275, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	277, 270, 277, 278, 279, 279, 279, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 277, 280, 281, 280, 280, 280, 280, 
	270, 270, 280, 280, 280, 280, 280, 280, 
	280, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 280, 280, 280, 280, 280, 
	280, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	282, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	270, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 279, 278, 279, 279, 
	279, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 279, 270, 281, 270, 284, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 286, 283, 288, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 289, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 290, 287, 50, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 51, 49, 291, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 291, 270, 270, 270, 270, 270, 
	270, 270, 270, 292, 270, 270, 293, 270, 
	294, 295, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 294, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 296, 270, 
	297, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 297, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 298, 270, 
	271, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 299, 270, 271, 
	62, 288, 287, 300, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 300, 273, 270, 273, 273, 273, 
	273, 270, 274, 301, 273, 273, 302, 273, 
	273, 273, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 304, 273, 273, 273, 
	273, 273, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 303, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 270, 294, 295, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 294, 273, 270, 273, 273, 273, 273, 
	270, 274, 273, 273, 273, 273, 273, 273, 
	305, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	270, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	273, 270, 273, 273, 273, 273, 270, 274, 
	273, 273, 273, 273, 273, 273, 306, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 270, 271, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 70, 62, 
	70, 70, 70, 70, 62, 71, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 62, 277, 278, 279, 
	279, 279, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 277, 280, 281, 280, 
	280, 280, 280, 270, 274, 280, 280, 280, 
	280, 280, 280, 280, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 280, 280, 
	280, 280, 280, 280, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 282, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 270, 307, 308, 309, 309, 
	309, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 307, 273, 310, 273, 273, 
	273, 273, 270, 274, 311, 273, 273, 312, 
	273, 273, 273, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 273, 273, 273, 
	273, 273, 273, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 313, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 270, 314, 278, 279, 279, 279, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 314, 270, 281, 270, 270, 270, 
	270, 270, 270, 315, 270, 270, 316, 270, 
	270, 270, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 270, 270, 270, 270, 
	270, 270, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 270, 270, 
	270, 317, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 300, 271, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 300, 270, 270, 
	270, 270, 270, 270, 270, 270, 318, 270, 
	270, 319, 270, 270, 270, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 270, 
	270, 270, 270, 270, 270, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 270, 270, 270, 320, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 300, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	300, 273, 270, 273, 273, 273, 273, 270, 
	274, 301, 273, 273, 302, 273, 273, 273, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 273, 273, 273, 273, 273, 273, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 321, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 270, 
	322, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 323, 
	125, 323, 323, 323, 323, 125, 125, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 125, 1, 325, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 324, 
	324, 324, 324, 324, 324, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 324, 324, 326, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 128, 327, 14, 1, 328, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 63, 63, 
	63, 63, 63, 63, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	63, 63, 63, 329, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	328, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	331, 63, 63, 63, 63, 63, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 63, 63, 63, 330, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 332, 333, 334, 334, 334, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 332, 7, 335, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 7, 7, 7, 7, 7, 
	7, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 7, 7, 7, 
	336, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 337, 338, 138, 
	138, 138, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 337, 7, 139, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 7, 7, 
	7, 7, 7, 7, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	7, 7, 7, 141, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	138, 138, 138, 138, 138, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 138, 
	14, 139, 14, 1, 172, 1, 172, 172, 
	172, 172, 1, 173, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 1, 339, 1, 1, 339, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 228, 
	228, 228, 228, 1, 229, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 1, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 1, 342, 341, 1, 264, 342, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 264, 263, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 56, 53, 0, 8, 
	9, 55, 8, 9, 55, 10, 14, 11, 
	10, 11, 48, 12, 13, 14, 15, 15, 
	16, 17, 18, 19, 18, 20, 19, 20, 
	21, 22, 28, 23, 41, 39, 24, 25, 
	35, 24, 25, 35, 26, 133, 27, 26, 
	27, 32, 28, 29, 133, 31, 136, 0, 
	26, 137, 36, 32, 37, 34, 138, 139, 
	38, 22, 23, 137, 36, 40, 38, 133, 
	27, 133, 27, 39, 40, 42, 41, 46, 
	43, 43, 44, 42, 45, 45, 47, 47, 
	10, 49, 50, 48, 51, 52, 6, 7, 
	49, 50, 54, 52, 14, 11, 14, 11, 
	53, 54, 57, 56, 61, 58, 58, 59, 
	57, 60, 60, 62, 62, 0, 162, 164, 
	0, 65, 66, 67, 166, 68, 67, 166, 
	68, 70, 71, 72, 170, 169, 73, 167, 
	74, 73, 167, 74, 76, 77, 76, 78, 
	77, 78, 79, 80, 86, 81, 95, 92, 
	82, 83, 94, 82, 83, 94, 84, 174, 
	85, 84, 85, 88, 86, 87, 174, 84, 
	175, 89, 88, 90, 91, 80, 81, 175, 
	89, 93, 91, 174, 85, 174, 85, 92, 
	93, 96, 95, 100, 97, 97, 98, 96, 
	99, 99, 101, 101, 103, 104, 103, 105, 
	104, 105, 106, 107, 113, 108, 122, 119, 
	109, 110, 121, 109, 110, 121, 111, 176, 
	112, 111, 112, 115, 113, 114, 176, 111, 
	178, 116, 115, 117, 118, 107, 108, 178, 
	116, 120, 118, 176, 112, 176, 112, 119, 
	120, 123, 122, 127, 124, 124, 125, 123, 
	126, 126, 128, 128, 179, 131, 132, 180, 
	182, 134, 135, 30, 134, 30, 136, 135, 
	33, 138, 139, 140, 148, 141, 142, 143, 
	138, 144, 153, 145, 146, 147, 152, 145, 
	146, 147, 152, 140, 148, 141, 149, 135, 
	150, 149, 150, 151, 140, 154, 157, 153, 
	158, 155, 156, 159, 142, 143, 144, 154, 
	157, 161, 159, 148, 141, 160, 148, 141, 
	160, 161, 163, 162, 0, 165, 164, 168, 
	168, 169, 170, 171, 172, 173, 71, 72, 
	169, 172, 173, 177, 179, 180, 181
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 21, 0, 
	0, 0, 2, 3, 0, 4, 0, 5, 
	0, 0, 8, 0, 9, 11, 15, 16, 
	15, 0, 17, 0, 19, 19, 19, 0, 
	0, 9, 0, 20, 0, 0, 22, 24, 
	25, 25, 25, 0, 26, 0, 22, 27, 
	29, 30, 30, 29, 29, 31, 33, 33, 
	33, 25, 25, 0, 0, 25, 0, 26, 
	9, 0, 26, 29, 31, 0, 31, 0, 
	25, 25, 25, 0, 26, 29, 30, 30, 
	29, 29, 31, 33, 33, 33, 25, 25, 
	0, 0, 25, 0, 26, 9, 0, 26, 
	29, 31, 0, 31, 0, 38, 8, 11, 
	40, 0, 0, 15, 42, 15, 0, 43, 
	0, 0, 0, 0, 11, 11, 15, 16, 
	15, 0, 17, 0, 47, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 54, 
	19, 0, 0, 9, 0, 20, 56, 25, 
	58, 25, 0, 26, 29, 30, 30, 60, 
	29, 31, 33, 62, 33, 58, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 2, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 19, 
	19, 0, 0, 9, 0, 20, 0, 25, 
	25, 25, 0, 26, 29, 30, 30, 29, 
	29, 31, 33, 33, 33, 25, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 67, 0, 0, 22, 
	22, 69, 68, 69, 0, 0, 0, 70, 
	69, 0, 20, 0, 0, 0, 70, 0, 
	8, 0, 9, 15, 77, 16, 15, 0, 
	70, 17, 0, 19, 19, 19, 69, 80, 
	69, 0, 0, 0, 25, 25, 25, 0, 
	26, 69, 0, 29, 83, 30, 30, 29, 
	29, 31, 33, 33, 33, 11, 25, 25, 
	0, 0, 3, 0, 88, 26, 0, 90, 
	92, 0, 0, 26, 30, 95, 30, 30, 
	31, 0, 97, 99, 0, 0, 102
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	23, 1, 1, 14, 6, 28, 32, 34, 
	23, 23, 35, 36, 37, 36, 28, 23, 
	23, 1, 6, 28, 32, 34, 23, 14, 
	23, 35, 36, 37, 36, 28, 23, 38, 
	0, 39, 41, 41, 41, 44, 44, 45, 
	46, 46, 46, 1, 48, 49, 50, 51, 
	52, 53, 53, 13, 0, 55, 1, 0, 
	57, 55, 59, 61, 63, 57, 53, 57, 
	64, 65, 66, 65, 59, 57, 1, 1, 
	0, 6, 10, 12, 14, 14, 18, 0, 
	6, 1, 0, 23, 6, 28, 32, 34, 
	23, 14, 23, 35, 36, 37, 36, 28, 
	23, 0, 0, 0, 0, 68, 68, 0, 
	70, 71, 72, 70, 70, 73, 74, 75, 
	76, 76, 78, 79, 80, 70, 70, 70, 
	76, 81, 82, 72, 72, 73, 81, 84, 
	84, 81, 85, 86, 87, 89, 0, 90, 
	0, 91, 93, 94, 96, 98, 0, 1, 
	99, 0, 100, 101, 102, 0, 102
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 63;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 64;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 65;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 69;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 75;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 102;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 129;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 130;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 26 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 24 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 88 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 56 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 67 then
		begin

    trace('RELATIONSHIP start_relationship')
    p_start = p;
  		end
	when 22 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 21 then
		begin

    trace('SIMPLE_STATEMENT statement_subject')
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 69 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 97 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 33 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 47 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 27 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 43 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 62 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 95 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 92 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 42 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 77 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 54 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 60 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 83 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 58 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 86 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 89 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 98 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 49 then
		begin
 $stderr.puts "EOF!" 		end
	when 85 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 48 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 87 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 63 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 52 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 100 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 34 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 96 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 53 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 46 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 41 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 78 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 101 then
		begin

    trace('RELATIONSHIP stop_relationship')
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    trace('RELATIONSHIP relationship_end')
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 72 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 82 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 51 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 32 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 94 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 79 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 37 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 28 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 84 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 76 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 50 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 73 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	48, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 0, 0, 
	33, 126, 9, 126, 9, 
	40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 33, 126, 47, 47, 
	47, 47, 9, 32, 9, 
	47, 9, 47, 0, 0, 
	10, 10, 9, 126, 10, 126, 
	9, 44, 9, 44, 9, 
	126, 9, 34, 9, 34, 
	10, 92, 10, 92, 34, 92, 
	9, 44, 9, 47, 9, 
	47, 10, 47, 10, 10, 
	10, 10, 9, 126, 9, 126, 
	10, 126, 10, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 10, 126, 
	0, 0, 10, 122, 0, 
	0, 0, 0, 10, 10, 
	0, 0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 
	34, 0, 0, 33, 126, 
	10, 10, 0, 0, 10, 126, 
	33, 126, 10, 10, 0, 
	0, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 24, 118, 
	118, 118, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	75, 26, 59, 59, 0, 114, 114, 26, 
	59, 59, 0, 94, 118, 32, 118, 114, 
	26, 59, 59, 36, 36, 118, 94, 36, 
	118, 118, 118, 114, 114, 118, 0, 118, 
	118, 118, 118, 118, 118, 118, 94, 118, 
	32, 118, 114, 26, 59, 59, 36, 36, 
	118, 94, 36, 118, 118, 118, 114, 114, 
	118, 0, 118, 118, 118, 118, 118, 118, 
	118, 94, 1, 1, 24, 39, 39, 0, 
	1, 118, 117, 36, 36, 118, 26, 26, 
	83, 83, 59, 36, 39, 39, 38, 1, 
	1, 118, 118, 117, 117, 118, 118, 114, 
	114, 118, 117, 0, 113, 0, 0, 1, 
	0, 113, 113, 114, 114, 26, 0, 94, 
	1, 0, 117, 94, 1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 978, 
	1097, 1216, 1335, 1454, 1487, 1606, 1721, 1748, 
	1808, 1868, 1905, 1942, 2061, 2156, 2193, 2195, 
	2197, 2316, 2411, 2529, 2530, 2649, 2768, 2883, 
	2998, 3117, 3236, 3355, 3474, 3593, 3712, 3831, 
	3950, 4069, 4188, 4307, 4426, 4541, 4656, 4775, 
	4776, 4895, 5014, 5133, 5252, 5371, 5490, 5609, 
	5704, 5780, 5807, 5867, 5927, 5928, 6043, 6158, 
	6185, 6245, 6305, 6306, 6401, 6520, 6553, 6672, 
	6787, 6814, 6874, 6934, 6971, 7008, 7127, 7222, 
	7259, 7378, 7497, 7616, 7731, 7846, 7965, 7966, 
	8085, 8204, 8323, 8442, 8561, 8680, 8799, 8894, 
	9013, 9046, 9165, 9280, 9307, 9367, 9427, 9464, 
	9501, 9620, 9715, 9752, 9871, 9990, 10109, 10224, 
	10339, 10458, 10459, 10578, 10697, 10816, 10935, 11054, 
	11173, 11292, 11387, 11389, 11391, 11416, 11456, 11496, 
	11497, 11499, 11618, 11736, 11773, 11810, 11929, 11956, 
	11983, 12067, 12151, 12211, 12248, 12288, 12328, 12367, 
	12369, 12371, 12490, 12609, 12727, 12845, 12964, 13083, 
	13198, 13313, 13432, 13550, 13551, 13665, 13666, 13667, 
	13669, 13670, 13784, 13898, 14013, 14128, 14155, 14156, 
	14251, 14253, 14254, 14372, 14467, 14469, 14470
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	30, 1, 31, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 31, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	1, 33, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 1, 
	33, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 33, 
	34, 1, 34, 34, 34, 34, 1, 1, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 1, 35, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 35, 36, 
	1, 36, 36, 36, 36, 1, 37, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 1, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 38, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 40, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 40, 42, 
	43, 42, 42, 42, 42, 7, 7, 42, 
	42, 42, 42, 42, 42, 42, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 44, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 7, 40, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 43, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 7, 
	7, 7, 7, 7, 7, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 7, 7, 7, 45, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 47, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 48, 46, 
	50, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 51, 49, 52, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 52, 14, 14, 14, 14, 
	14, 14, 14, 14, 53, 14, 14, 54, 
	14, 55, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	55, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 56, 1, 56, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 56, 42, 43, 
	42, 42, 42, 42, 7, 7, 42, 42, 
	42, 42, 42, 42, 42, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 42, 
	42, 42, 42, 42, 42, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 57, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 7, 58, 1, 58, 
	58, 58, 58, 1, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 55, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 55, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 56, 
	1, 61, 1, 1, 62, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	66, 58, 58, 58, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 58, 
	58, 58, 58, 58, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 67, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 63, 58, 1, 58, 58, 
	58, 58, 1, 59, 58, 58, 58, 58, 
	58, 58, 69, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 70, 62, 70, 70, 70, 70, 
	62, 71, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	62, 49, 56, 41, 41, 41, 41, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 56, 42, 43, 42, 42, 42, 42, 
	7, 59, 42, 42, 42, 42, 42, 42, 
	42, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 42, 42, 42, 42, 42, 
	42, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	57, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	7, 72, 73, 73, 73, 73, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	72, 58, 74, 58, 58, 58, 58, 7, 
	59, 75, 58, 58, 76, 58, 58, 58, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 58, 58, 58, 58, 58, 58, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 77, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 7, 
	78, 41, 41, 41, 41, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 78, 
	7, 43, 7, 7, 7, 7, 7, 7, 
	79, 7, 7, 80, 7, 7, 7, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 7, 7, 7, 7, 7, 7, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 7, 7, 7, 45, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 63, 63, 63, 63, 63, 
	63, 63, 63, 81, 63, 63, 82, 63, 
	63, 63, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 63, 63, 63, 63, 
	63, 63, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 63, 63, 
	63, 83, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 64, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 58, 63, 
	58, 58, 58, 58, 63, 59, 65, 58, 
	58, 66, 58, 58, 58, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 58, 
	58, 58, 58, 58, 58, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 84, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 63, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	85, 58, 58, 58, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 87, 58, 
	58, 58, 58, 58, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 86, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 63, 56, 41, 41, 41, 
	41, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 56, 42, 43, 42, 42, 
	42, 42, 7, 59, 42, 42, 42, 42, 
	42, 42, 42, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 42, 42, 42, 
	42, 42, 42, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 88, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 58, 63, 58, 58, 58, 
	58, 63, 59, 65, 58, 58, 85, 58, 
	58, 58, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 90, 58, 58, 58, 
	58, 58, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 89, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 63, 72, 73, 73, 73, 73, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 72, 58, 74, 58, 58, 58, 58, 
	7, 59, 75, 58, 58, 91, 58, 58, 
	58, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 58, 58, 58, 58, 58, 
	58, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	92, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	7, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 58, 63, 58, 58, 58, 58, 63, 
	59, 65, 58, 58, 85, 58, 58, 58, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 58, 58, 58, 58, 58, 58, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 93, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 63, 
	72, 73, 73, 73, 73, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 72, 
	58, 74, 58, 58, 58, 58, 7, 59, 
	75, 58, 58, 91, 58, 58, 58, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 58, 58, 58, 58, 58, 58, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 94, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 7, 64, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 64, 58, 
	63, 58, 58, 58, 58, 63, 59, 65, 
	58, 58, 85, 58, 58, 58, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	58, 58, 58, 58, 58, 58, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 95, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 63, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 98, 27, 27, 27, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 100, 
	27, 27, 27, 27, 27, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 99, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 63, 30, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 10, 10, 10, 
	10, 10, 10, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 26, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 7, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 105, 27, 
	27, 27, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 27, 27, 27, 27, 
	27, 27, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 106, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 7, 107, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 107, 7, 11, 7, 7, 7, 7, 
	7, 7, 108, 7, 7, 109, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	13, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 96, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 110, 63, 63, 
	111, 63, 63, 63, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 63, 63, 
	63, 63, 63, 63, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	63, 63, 63, 112, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 98, 27, 27, 27, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 27, 27, 27, 27, 27, 27, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 113, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 63, 18, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 114, 27, 27, 27, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 116, 27, 27, 27, 27, 27, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 115, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 63, 25, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 25, 10, 
	11, 10, 10, 10, 10, 7, 28, 10, 
	10, 10, 10, 10, 10, 10, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	10, 10, 10, 10, 10, 10, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 117, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 7, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 114, 27, 27, 27, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 119, 
	27, 27, 27, 27, 27, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 118, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 63, 101, 102, 102, 
	102, 102, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 101, 27, 103, 27, 
	27, 27, 27, 7, 28, 104, 27, 27, 
	120, 27, 27, 27, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 27, 27, 
	27, 27, 27, 27, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 121, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 7, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 96, 27, 63, 27, 27, 
	27, 27, 63, 28, 97, 27, 27, 114, 
	27, 27, 27, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 27, 27, 27, 
	27, 27, 27, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 122, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 63, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 120, 27, 
	27, 27, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 27, 27, 27, 27, 
	27, 27, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 123, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 7, 96, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 96, 27, 63, 27, 27, 27, 27, 
	63, 28, 97, 27, 27, 114, 27, 27, 
	27, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 27, 27, 27, 27, 27, 
	27, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	124, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	63, 126, 125, 126, 126, 126, 126, 125, 
	125, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 125, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 1, 1, 1, 1, 1, 1, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 1, 1, 1, 127, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 129, 129, 129, 129, 
	129, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 129, 128, 130, 128, 132, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 133, 131, 135, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 136, 134, 134, 
	137, 138, 138, 138, 138, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	7, 139, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 7, 7, 7, 7, 7, 7, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 7, 7, 7, 140, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 137, 138, 138, 138, 138, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 137, 7, 139, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 7, 7, 7, 7, 
	7, 7, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 7, 7, 
	7, 141, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 138, 138, 
	138, 138, 138, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 138, 14, 139, 
	14, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 146, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	145, 145, 148, 1, 148, 148, 148, 148, 
	1, 1, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	1, 149, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	149, 150, 1, 150, 150, 150, 150, 1, 
	151, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 1, 
	152, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 152, 
	1, 1, 1, 1, 1, 1, 1, 153, 
	1, 154, 155, 155, 155, 155, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	154, 156, 157, 156, 156, 156, 156, 7, 
	7, 156, 156, 156, 156, 156, 156, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 158, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 7, 
	154, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 154, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 155, 155, 155, 155, 155, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 155, 14, 157, 14, 161, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	162, 160, 164, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 165, 163, 166, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 166, 14, 14, 
	14, 14, 14, 14, 14, 14, 167, 14, 
	14, 168, 14, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 170, 1, 
	170, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 170, 
	156, 157, 156, 156, 156, 156, 7, 7, 
	156, 156, 156, 156, 156, 156, 156, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 156, 156, 156, 156, 156, 156, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 171, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 7, 172, 
	1, 172, 172, 172, 172, 1, 173, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 169, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 169, 1, 1, 
	1, 1, 1, 1, 1, 1, 174, 1, 
	1, 170, 1, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 172, 63, 172, 172, 172, 
	172, 63, 173, 176, 172, 172, 177, 172, 
	172, 172, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 179, 172, 172, 172, 
	172, 172, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 178, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 63, 170, 155, 155, 155, 155, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 170, 156, 157, 156, 156, 156, 156, 
	7, 173, 156, 156, 156, 156, 156, 156, 
	156, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 156, 156, 156, 156, 156, 
	156, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	171, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	7, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 184, 172, 172, 172, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 172, 172, 172, 172, 172, 172, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 185, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 7, 
	186, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	187, 7, 7, 188, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 189, 63, 63, 190, 63, 
	63, 63, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 63, 63, 63, 63, 
	63, 63, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 63, 63, 
	63, 191, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 177, 172, 172, 172, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 172, 
	172, 172, 172, 172, 172, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 192, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 63, 163, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 193, 172, 172, 172, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 195, 
	172, 172, 172, 172, 172, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 194, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 63, 170, 155, 155, 
	155, 155, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 170, 156, 157, 156, 
	156, 156, 156, 7, 173, 156, 156, 156, 
	156, 156, 156, 156, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 156, 156, 
	156, 156, 156, 156, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 196, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 7, 175, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 175, 172, 63, 172, 172, 
	172, 172, 63, 173, 176, 172, 172, 193, 
	172, 172, 172, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 198, 172, 172, 
	172, 172, 172, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 197, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 63, 180, 181, 181, 181, 181, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 180, 172, 182, 172, 172, 172, 
	172, 7, 173, 183, 172, 172, 199, 172, 
	172, 172, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 172, 172, 172, 172, 
	172, 172, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 200, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 7, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 175, 172, 63, 172, 172, 172, 172, 
	63, 173, 176, 172, 172, 193, 172, 172, 
	172, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 172, 172, 172, 172, 172, 
	172, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	201, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	63, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 199, 172, 172, 172, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 172, 172, 172, 172, 172, 172, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 202, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 7, 
	175, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 175, 
	172, 63, 172, 172, 172, 172, 63, 173, 
	176, 172, 172, 193, 172, 172, 172, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 172, 172, 172, 172, 172, 172, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 203, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 63, 204, 
	1, 204, 204, 204, 204, 1, 1, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 206, 1, 
	206, 206, 206, 206, 1, 207, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 1, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 1, 1, 1, 
	1, 1, 1, 1, 209, 1, 210, 211, 
	211, 211, 211, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 210, 212, 213, 
	212, 212, 212, 212, 7, 7, 212, 212, 
	212, 212, 212, 212, 212, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 212, 
	212, 212, 212, 212, 212, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 214, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 7, 210, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 210, 7, 213, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	211, 211, 211, 211, 211, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 211, 
	14, 213, 14, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 220, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 221, 219, 222, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 222, 14, 14, 14, 14, 14, 
	14, 14, 14, 223, 14, 14, 224, 14, 
	225, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 225, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 226, 1, 226, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 226, 212, 213, 212, 
	212, 212, 212, 7, 7, 212, 212, 212, 
	212, 212, 212, 212, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 212, 212, 
	212, 212, 212, 212, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 227, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 7, 228, 1, 228, 228, 
	228, 228, 1, 229, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 1, 225, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 225, 1, 1, 1, 1, 1, 
	1, 1, 1, 230, 1, 1, 226, 1, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	228, 63, 228, 228, 228, 228, 63, 229, 
	232, 228, 228, 233, 228, 228, 228, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 235, 228, 228, 228, 228, 228, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 234, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 63, 226, 
	211, 211, 211, 211, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 226, 212, 
	213, 212, 212, 212, 212, 7, 229, 212, 
	212, 212, 212, 212, 212, 212, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	212, 212, 212, 212, 212, 212, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 227, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 7, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 240, 228, 228, 228, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 228, 
	228, 228, 228, 228, 228, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 241, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 7, 242, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 242, 7, 213, 7, 
	7, 7, 7, 7, 7, 243, 7, 7, 
	244, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	245, 63, 63, 246, 63, 63, 63, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 63, 63, 63, 63, 63, 63, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 63, 63, 63, 247, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 233, 228, 
	228, 228, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 228, 228, 228, 228, 
	228, 228, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 248, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 63, 219, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 249, 228, 
	228, 228, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 251, 228, 228, 228, 
	228, 228, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 250, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 63, 226, 211, 211, 211, 211, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 226, 212, 213, 212, 212, 212, 212, 
	7, 229, 212, 212, 212, 212, 212, 212, 
	212, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 212, 212, 212, 212, 212, 
	212, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	252, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	7, 231, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	231, 228, 63, 228, 228, 228, 228, 63, 
	229, 232, 228, 228, 249, 228, 228, 228, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 254, 228, 228, 228, 228, 228, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 253, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 63, 
	236, 237, 237, 237, 237, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 236, 
	228, 238, 228, 228, 228, 228, 7, 229, 
	239, 228, 228, 255, 228, 228, 228, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 228, 228, 228, 228, 228, 228, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 256, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 7, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 231, 228, 
	63, 228, 228, 228, 228, 63, 229, 232, 
	228, 228, 249, 228, 228, 228, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	228, 228, 228, 228, 228, 228, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 257, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 63, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 255, 228, 228, 228, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 228, 
	228, 228, 228, 228, 228, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 258, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 7, 231, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 231, 228, 63, 228, 
	228, 228, 228, 63, 229, 232, 228, 228, 
	249, 228, 228, 228, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 228, 228, 
	228, 228, 228, 228, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 259, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 63, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 1, 261, 1, 262, 1, 264, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 264, 263, 
	265, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 265, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	268, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 269, 1, 
	1, 271, 270, 265, 266, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 265, 58, 1, 58, 58, 58, 
	58, 1, 59, 58, 58, 58, 58, 58, 
	58, 272, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 273, 270, 273, 273, 273, 273, 270, 
	274, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 270, 
	275, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 275, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	276, 270, 270, 277, 270, 275, 271, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 275, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	277, 270, 277, 278, 279, 279, 279, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 277, 280, 281, 280, 280, 280, 280, 
	270, 270, 280, 280, 280, 280, 280, 280, 
	280, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 280, 280, 280, 280, 280, 
	280, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	282, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	270, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 279, 278, 279, 279, 
	279, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 279, 270, 281, 270, 284, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 286, 283, 288, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 289, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 290, 287, 50, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 51, 49, 291, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 291, 270, 270, 270, 270, 270, 
	270, 270, 270, 292, 270, 270, 293, 270, 
	294, 295, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 294, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 296, 270, 
	297, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 297, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 298, 270, 
	271, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 299, 270, 271, 
	62, 288, 287, 300, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 300, 273, 270, 273, 273, 273, 
	273, 270, 274, 301, 273, 273, 302, 273, 
	273, 273, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 304, 273, 273, 273, 
	273, 273, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 303, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 270, 294, 295, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 294, 273, 270, 273, 273, 273, 273, 
	270, 274, 273, 273, 273, 273, 273, 273, 
	305, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	270, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	273, 270, 273, 273, 273, 273, 270, 274, 
	273, 273, 273, 273, 273, 273, 306, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 270, 271, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 70, 62, 
	70, 70, 70, 70, 62, 71, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 62, 277, 278, 279, 
	279, 279, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 277, 280, 281, 280, 
	280, 280, 280, 270, 274, 280, 280, 280, 
	280, 280, 280, 280, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 280, 280, 
	280, 280, 280, 280, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 282, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 270, 307, 308, 309, 309, 
	309, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 307, 273, 310, 273, 273, 
	273, 273, 270, 274, 311, 273, 273, 312, 
	273, 273, 273, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 273, 273, 273, 
	273, 273, 273, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 313, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 270, 314, 278, 279, 279, 279, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 314, 270, 281, 270, 270, 270, 
	270, 270, 270, 315, 270, 270, 316, 270, 
	270, 270, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 270, 270, 270, 270, 
	270, 270, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 270, 270, 
	270, 317, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 300, 271, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 300, 270, 270, 
	270, 270, 270, 270, 270, 270, 318, 270, 
	270, 319, 270, 270, 270, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 270, 
	270, 270, 270, 270, 270, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 270, 270, 270, 320, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 300, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	300, 273, 270, 273, 273, 273, 273, 270, 
	274, 301, 273, 273, 302, 273, 273, 273, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 273, 273, 273, 273, 273, 273, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 321, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 270, 
	322, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 323, 
	125, 323, 323, 323, 323, 125, 125, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 125, 1, 325, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 324, 
	324, 324, 324, 324, 324, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 324, 324, 326, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 128, 327, 14, 1, 328, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 63, 63, 
	63, 63, 63, 63, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	63, 63, 63, 329, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	328, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	331, 63, 63, 63, 63, 63, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 63, 63, 63, 330, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 332, 333, 334, 334, 334, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 332, 7, 335, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 7, 7, 7, 7, 7, 
	7, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 7, 7, 7, 
	336, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 337, 338, 138, 
	138, 138, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 337, 7, 139, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 7, 7, 
	7, 7, 7, 7, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	7, 7, 7, 141, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	138, 138, 138, 138, 138, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 138, 
	14, 139, 14, 1, 172, 1, 172, 172, 
	172, 172, 1, 173, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 1, 339, 1, 1, 339, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 228, 
	228, 228, 228, 1, 229, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 1, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 1, 342, 341, 1, 264, 342, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 264, 263, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 56, 53, 0, 8, 
	9, 55, 8, 9, 55, 10, 14, 11, 
	10, 11, 48, 12, 13, 14, 15, 15, 
	16, 17, 18, 19, 18, 20, 19, 20, 
	21, 22, 28, 23, 41, 39, 24, 25, 
	35, 24, 25, 35, 26, 133, 27, 26, 
	27, 32, 28, 29, 133, 31, 136, 0, 
	26, 137, 36, 32, 37, 34, 138, 139, 
	38, 22, 23, 137, 36, 40, 38, 133, 
	27, 133, 27, 39, 40, 42, 41, 46, 
	43, 43, 44, 42, 45, 45, 47, 47, 
	10, 49, 50, 48, 51, 52, 6, 7, 
	49, 50, 54, 52, 14, 11, 14, 11, 
	53, 54, 57, 56, 61, 58, 58, 59, 
	57, 60, 60, 62, 62, 0, 162, 164, 
	0, 65, 66, 67, 166, 68, 67, 166, 
	68, 70, 71, 72, 170, 169, 73, 167, 
	74, 73, 167, 74, 76, 77, 76, 78, 
	77, 78, 79, 80, 86, 81, 95, 92, 
	82, 83, 94, 82, 83, 94, 84, 174, 
	85, 84, 85, 88, 86, 87, 174, 84, 
	175, 89, 88, 90, 91, 80, 81, 175, 
	89, 93, 91, 174, 85, 174, 85, 92, 
	93, 96, 95, 100, 97, 97, 98, 96, 
	99, 99, 101, 101, 103, 104, 103, 105, 
	104, 105, 106, 107, 113, 108, 122, 119, 
	109, 110, 121, 109, 110, 121, 111, 176, 
	112, 111, 112, 115, 113, 114, 176, 111, 
	178, 116, 115, 117, 118, 107, 108, 178, 
	116, 120, 118, 176, 112, 176, 112, 119, 
	120, 123, 122, 127, 124, 124, 125, 123, 
	126, 126, 128, 128, 179, 131, 132, 180, 
	182, 134, 135, 30, 134, 30, 136, 135, 
	33, 138, 139, 140, 148, 141, 142, 143, 
	138, 144, 153, 145, 146, 147, 152, 145, 
	146, 147, 152, 140, 148, 141, 149, 135, 
	150, 149, 150, 151, 140, 154, 157, 153, 
	158, 155, 156, 159, 142, 143, 144, 154, 
	157, 161, 159, 148, 141, 160, 148, 141, 
	160, 161, 163, 162, 0, 165, 164, 168, 
	168, 169, 170, 171, 172, 173, 71, 72, 
	169, 172, 173, 177, 179, 180, 181
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 21, 0, 
	0, 0, 2, 3, 0, 4, 0, 5, 
	0, 0, 8, 0, 9, 11, 15, 16, 
	15, 0, 17, 0, 19, 19, 19, 0, 
	0, 9, 0, 20, 0, 0, 22, 24, 
	25, 25, 25, 0, 26, 0, 22, 27, 
	29, 30, 30, 29, 29, 31, 33, 33, 
	33, 25, 25, 0, 0, 25, 0, 26, 
	9, 0, 26, 29, 31, 0, 31, 0, 
	25, 25, 25, 0, 26, 29, 30, 30, 
	29, 29, 31, 33, 33, 33, 25, 25, 
	0, 0, 25, 0, 26, 9, 0, 26, 
	29, 31, 0, 31, 0, 38, 8, 11, 
	40, 0, 0, 15, 42, 15, 0, 43, 
	0, 0, 0, 0, 11, 11, 15, 16, 
	15, 0, 17, 0, 47, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 54, 
	19, 0, 0, 9, 0, 20, 56, 25, 
	58, 25, 0, 26, 29, 30, 30, 60, 
	29, 31, 33, 62, 33, 58, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 2, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 19, 
	19, 0, 0, 9, 0, 20, 0, 25, 
	25, 25, 0, 26, 29, 30, 30, 29, 
	29, 31, 33, 33, 33, 25, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 67, 0, 0, 22, 
	22, 69, 68, 69, 0, 0, 0, 70, 
	69, 0, 20, 0, 0, 0, 70, 0, 
	8, 0, 9, 15, 77, 16, 15, 0, 
	70, 17, 0, 19, 19, 19, 69, 80, 
	69, 0, 0, 0, 25, 25, 25, 0, 
	26, 69, 0, 29, 83, 30, 30, 29, 
	29, 31, 33, 33, 33, 11, 25, 25, 
	0, 0, 3, 0, 88, 26, 0, 90, 
	92, 0, 0, 26, 30, 95, 30, 30, 
	31, 0, 97, 99, 0, 0, 102
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	23, 1, 1, 14, 6, 28, 32, 34, 
	23, 23, 35, 36, 37, 36, 28, 23, 
	23, 1, 6, 28, 32, 34, 23, 14, 
	23, 35, 36, 37, 36, 28, 23, 38, 
	0, 39, 41, 41, 41, 44, 44, 45, 
	46, 46, 46, 1, 48, 49, 50, 51, 
	52, 53, 53, 13, 0, 55, 1, 0, 
	57, 55, 59, 61, 63, 57, 53, 57, 
	64, 65, 66, 65, 59, 57, 1, 1, 
	0, 6, 10, 12, 14, 14, 18, 0, 
	6, 1, 0, 23, 6, 28, 32, 34, 
	23, 14, 23, 35, 36, 37, 36, 28, 
	23, 0, 0, 0, 0, 68, 68, 0, 
	70, 71, 72, 70, 70, 73, 74, 75, 
	76, 76, 78, 79, 80, 70, 70, 70, 
	76, 81, 82, 72, 72, 73, 81, 84, 
	84, 81, 85, 86, 87, 89, 0, 90, 
	0, 91, 93, 94, 96, 98, 0, 1, 
	99, 0, 100, 101, 102, 0, 102
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 63;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 64;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 65;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 69;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 75;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 102;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 129;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 130;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 26 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 24 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 88 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 56 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 67 then
		begin

    trace('RELATIONSHIP start_relationship')
    p_start = p;
  		end
	when 22 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 21 then
		begin

    trace('SIMPLE_STATEMENT statement_subject')
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 69 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 97 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 33 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 47 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 27 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 43 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 62 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 95 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 92 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 42 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 77 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 54 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 60 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 83 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 58 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 86 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 89 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 98 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 49 then
		begin
 $stderr.puts "EOF!" 		end
	when 85 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 48 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 87 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 63 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 52 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 100 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 34 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 96 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 53 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 46 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 41 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 78 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 101 then
		begin

    trace('RELATIONSHIP stop_relationship')
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    trace('RELATIONSHIP relationship_end')
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 72 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 82 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 51 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 32 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 94 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 79 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 37 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 28 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 84 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 76 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 50 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 73 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	48, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 0, 0, 
	33, 126, 9, 126, 9, 
	40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 33, 126, 47, 47, 
	47, 47, 9, 32, 9, 
	47, 9, 47, 0, 0, 
	10, 10, 9, 126, 10, 126, 
	9, 44, 9, 44, 9, 
	126, 9, 34, 9, 34, 
	10, 92, 10, 92, 34, 92, 
	9, 44, 9, 47, 9, 
	47, 10, 47, 10, 10, 
	10, 10, 9, 126, 9, 126, 
	10, 126, 10, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 10, 126, 
	0, 0, 10, 122, 0, 
	0, 0, 0, 10, 10, 
	0, 0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 
	34, 0, 0, 33, 126, 
	10, 10, 0, 0, 10, 126, 
	33, 126, 10, 10, 0, 
	0, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 24, 118, 
	118, 118, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	75, 26, 59, 59, 0, 114, 114, 26, 
	59, 59, 0, 94, 118, 32, 118, 114, 
	26, 59, 59, 36, 36, 118, 94, 36, 
	118, 118, 118, 114, 114, 118, 0, 118, 
	118, 118, 118, 118, 118, 118, 94, 118, 
	32, 118, 114, 26, 59, 59, 36, 36, 
	118, 94, 36, 118, 118, 118, 114, 114, 
	118, 0, 118, 118, 118, 118, 118, 118, 
	118, 94, 1, 1, 24, 39, 39, 0, 
	1, 118, 117, 36, 36, 118, 26, 26, 
	83, 83, 59, 36, 39, 39, 38, 1, 
	1, 118, 118, 117, 117, 118, 118, 114, 
	114, 118, 117, 0, 113, 0, 0, 1, 
	0, 113, 113, 114, 114, 26, 0, 94, 
	1, 0, 117, 94, 1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 978, 
	1097, 1216, 1335, 1454, 1487, 1606, 1721, 1748, 
	1808, 1868, 1905, 1942, 2061, 2156, 2193, 2195, 
	2197, 2316, 2411, 2529, 2530, 2649, 2768, 2883, 
	2998, 3117, 3236, 3355, 3474, 3593, 3712, 3831, 
	3950, 4069, 4188, 4307, 4426, 4541, 4656, 4775, 
	4776, 4895, 5014, 5133, 5252, 5371, 5490, 5609, 
	5704, 5780, 5807, 5867, 5927, 5928, 6043, 6158, 
	6185, 6245, 6305, 6306, 6401, 6520, 6553, 6672, 
	6787, 6814, 6874, 6934, 6971, 7008, 7127, 7222, 
	7259, 7378, 7497, 7616, 7731, 7846, 7965, 7966, 
	8085, 8204, 8323, 8442, 8561, 8680, 8799, 8894, 
	9013, 9046, 9165, 9280, 9307, 9367, 9427, 9464, 
	9501, 9620, 9715, 9752, 9871, 9990, 10109, 10224, 
	10339, 10458, 10459, 10578, 10697, 10816, 10935, 11054, 
	11173, 11292, 11387, 11389, 11391, 11416, 11456, 11496, 
	11497, 11499, 11618, 11736, 11773, 11810, 11929, 11956, 
	11983, 12067, 12151, 12211, 12248, 12288, 12328, 12367, 
	12369, 12371, 12490, 12609, 12727, 12845, 12964, 13083, 
	13198, 13313, 13432, 13550, 13551, 13665, 13666, 13667, 
	13669, 13670, 13784, 13898, 14013, 14128, 14155, 14156, 
	14251, 14253, 14254, 14372, 14467, 14469, 14470
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	30, 1, 31, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 31, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	1, 33, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 1, 
	33, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 33, 
	34, 1, 34, 34, 34, 34, 1, 1, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 1, 35, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 35, 36, 
	1, 36, 36, 36, 36, 1, 37, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 1, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 38, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 40, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 40, 42, 
	43, 42, 42, 42, 42, 7, 7, 42, 
	42, 42, 42, 42, 42, 42, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 44, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 7, 40, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 43, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 7, 
	7, 7, 7, 7, 7, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 7, 7, 7, 45, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 47, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 48, 46, 
	50, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 51, 49, 52, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 52, 14, 14, 14, 14, 
	14, 14, 14, 14, 53, 14, 14, 54, 
	14, 55, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	55, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 56, 1, 56, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 56, 42, 43, 
	42, 42, 42, 42, 7, 7, 42, 42, 
	42, 42, 42, 42, 42, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 42, 
	42, 42, 42, 42, 42, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 57, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 7, 58, 1, 58, 
	58, 58, 58, 1, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 55, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 55, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 56, 
	1, 61, 1, 1, 62, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	66, 58, 58, 58, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 58, 
	58, 58, 58, 58, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 67, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 63, 58, 1, 58, 58, 
	58, 58, 1, 59, 58, 58, 58, 58, 
	58, 58, 69, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 70, 62, 70, 70, 70, 70, 
	62, 71, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	62, 49, 56, 41, 41, 41, 41, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 56, 42, 43, 42, 42, 42, 42, 
	7, 59, 42, 42, 42, 42, 42, 42, 
	42, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 42, 42, 42, 42, 42, 
	42, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	57, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	7, 72, 73, 73, 73, 73, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	72, 58, 74, 58, 58, 58, 58, 7, 
	59, 75, 58, 58, 76, 58, 58, 58, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 58, 58, 58, 58, 58, 58, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 77, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 7, 
	78, 41, 41, 41, 41, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 78, 
	7, 43, 7, 7, 7, 7, 7, 7, 
	79, 7, 7, 80, 7, 7, 7, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 7, 7, 7, 7, 7, 7, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 7, 7, 7, 45, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 63, 63, 63, 63, 63, 
	63, 63, 63, 81, 63, 63, 82, 63, 
	63, 63, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 63, 63, 63, 63, 
	63, 63, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 63, 63, 
	63, 83, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 64, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 58, 63, 
	58, 58, 58, 58, 63, 59, 65, 58, 
	58, 66, 58, 58, 58, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 58, 
	58, 58, 58, 58, 58, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 84, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 63, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	85, 58, 58, 58, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 87, 58, 
	58, 58, 58, 58, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 86, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 63, 56, 41, 41, 41, 
	41, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 56, 42, 43, 42, 42, 
	42, 42, 7, 59, 42, 42, 42, 42, 
	42, 42, 42, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 42, 42, 42, 
	42, 42, 42, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 88, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 58, 63, 58, 58, 58, 
	58, 63, 59, 65, 58, 58, 85, 58, 
	58, 58, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 90, 58, 58, 58, 
	58, 58, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 89, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 63, 72, 73, 73, 73, 73, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 72, 58, 74, 58, 58, 58, 58, 
	7, 59, 75, 58, 58, 91, 58, 58, 
	58, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 58, 58, 58, 58, 58, 
	58, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	92, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	7, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 58, 63, 58, 58, 58, 58, 63, 
	59, 65, 58, 58, 85, 58, 58, 58, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 58, 58, 58, 58, 58, 58, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 93, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 63, 
	72, 73, 73, 73, 73, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 72, 
	58, 74, 58, 58, 58, 58, 7, 59, 
	75, 58, 58, 91, 58, 58, 58, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 58, 58, 58, 58, 58, 58, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 94, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 7, 64, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 64, 58, 
	63, 58, 58, 58, 58, 63, 59, 65, 
	58, 58, 85, 58, 58, 58, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	58, 58, 58, 58, 58, 58, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 95, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 63, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 98, 27, 27, 27, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 100, 
	27, 27, 27, 27, 27, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 99, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 63, 30, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 10, 10, 10, 
	10, 10, 10, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 26, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 7, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 105, 27, 
	27, 27, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 27, 27, 27, 27, 
	27, 27, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 106, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 7, 107, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 107, 7, 11, 7, 7, 7, 7, 
	7, 7, 108, 7, 7, 109, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	13, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 96, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 110, 63, 63, 
	111, 63, 63, 63, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 63, 63, 
	63, 63, 63, 63, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	63, 63, 63, 112, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 98, 27, 27, 27, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 27, 27, 27, 27, 27, 27, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 113, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 63, 18, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 114, 27, 27, 27, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 116, 27, 27, 27, 27, 27, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 115, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 63, 25, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 25, 10, 
	11, 10, 10, 10, 10, 7, 28, 10, 
	10, 10, 10, 10, 10, 10, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	10, 10, 10, 10, 10, 10, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 117, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 7, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 114, 27, 27, 27, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 119, 
	27, 27, 27, 27, 27, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 118, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 63, 101, 102, 102, 
	102, 102, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 101, 27, 103, 27, 
	27, 27, 27, 7, 28, 104, 27, 27, 
	120, 27, 27, 27, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 27, 27, 
	27, 27, 27, 27, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 121, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 7, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 96, 27, 63, 27, 27, 
	27, 27, 63, 28, 97, 27, 27, 114, 
	27, 27, 27, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 27, 27, 27, 
	27, 27, 27, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 122, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 63, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 120, 27, 
	27, 27, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 27, 27, 27, 27, 
	27, 27, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 123, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 7, 96, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 96, 27, 63, 27, 27, 27, 27, 
	63, 28, 97, 27, 27, 114, 27, 27, 
	27, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 27, 27, 27, 27, 27, 
	27, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	124, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	63, 126, 125, 126, 126, 126, 126, 125, 
	125, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 125, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 1, 1, 1, 1, 1, 1, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 1, 1, 1, 127, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 129, 129, 129, 129, 
	129, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 129, 128, 130, 128, 132, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 133, 131, 135, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 136, 134, 134, 
	137, 138, 138, 138, 138, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	7, 139, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 7, 7, 7, 7, 7, 7, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 7, 7, 7, 140, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 137, 138, 138, 138, 138, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 137, 7, 139, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 7, 7, 7, 7, 
	7, 7, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 7, 7, 
	7, 141, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 138, 138, 
	138, 138, 138, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 138, 14, 139, 
	14, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 146, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	145, 145, 148, 1, 148, 148, 148, 148, 
	1, 1, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	1, 149, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	149, 150, 1, 150, 150, 150, 150, 1, 
	151, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 1, 
	152, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 152, 
	1, 1, 1, 1, 1, 1, 1, 153, 
	1, 154, 155, 155, 155, 155, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	154, 156, 157, 156, 156, 156, 156, 7, 
	7, 156, 156, 156, 156, 156, 156, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 158, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 7, 
	154, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 154, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 155, 155, 155, 155, 155, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 155, 14, 157, 14, 161, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	162, 160, 164, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 165, 163, 166, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 166, 14, 14, 
	14, 14, 14, 14, 14, 14, 167, 14, 
	14, 168, 14, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 170, 1, 
	170, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 170, 
	156, 157, 156, 156, 156, 156, 7, 7, 
	156, 156, 156, 156, 156, 156, 156, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 156, 156, 156, 156, 156, 156, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 171, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 7, 172, 
	1, 172, 172, 172, 172, 1, 173, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 169, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 169, 1, 1, 
	1, 1, 1, 1, 1, 1, 174, 1, 
	1, 170, 1, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 172, 63, 172, 172, 172, 
	172, 63, 173, 176, 172, 172, 177, 172, 
	172, 172, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 179, 172, 172, 172, 
	172, 172, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 178, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 63, 170, 155, 155, 155, 155, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 170, 156, 157, 156, 156, 156, 156, 
	7, 173, 156, 156, 156, 156, 156, 156, 
	156, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 156, 156, 156, 156, 156, 
	156, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	171, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	7, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 184, 172, 172, 172, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 172, 172, 172, 172, 172, 172, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 185, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 7, 
	186, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	187, 7, 7, 188, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 189, 63, 63, 190, 63, 
	63, 63, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 63, 63, 63, 63, 
	63, 63, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 63, 63, 
	63, 191, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 177, 172, 172, 172, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 172, 
	172, 172, 172, 172, 172, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 192, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 63, 163, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 193, 172, 172, 172, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 195, 
	172, 172, 172, 172, 172, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 194, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 63, 170, 155, 155, 
	155, 155, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 170, 156, 157, 156, 
	156, 156, 156, 7, 173, 156, 156, 156, 
	156, 156, 156, 156, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 156, 156, 
	156, 156, 156, 156, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 196, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 7, 175, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 175, 172, 63, 172, 172, 
	172, 172, 63, 173, 176, 172, 172, 193, 
	172, 172, 172, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 198, 172, 172, 
	172, 172, 172, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 197, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 63, 180, 181, 181, 181, 181, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 180, 172, 182, 172, 172, 172, 
	172, 7, 173, 183, 172, 172, 199, 172, 
	172, 172, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 172, 172, 172, 172, 
	172, 172, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 200, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 7, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 175, 172, 63, 172, 172, 172, 172, 
	63, 173, 176, 172, 172, 193, 172, 172, 
	172, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 172, 172, 172, 172, 172, 
	172, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	201, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	63, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 199, 172, 172, 172, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 172, 172, 172, 172, 172, 172, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 202, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 7, 
	175, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 175, 
	172, 63, 172, 172, 172, 172, 63, 173, 
	176, 172, 172, 193, 172, 172, 172, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 172, 172, 172, 172, 172, 172, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 203, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 63, 204, 
	1, 204, 204, 204, 204, 1, 1, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 206, 1, 
	206, 206, 206, 206, 1, 207, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 1, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 1, 1, 1, 
	1, 1, 1, 1, 209, 1, 210, 211, 
	211, 211, 211, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 210, 212, 213, 
	212, 212, 212, 212, 7, 7, 212, 212, 
	212, 212, 212, 212, 212, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 212, 
	212, 212, 212, 212, 212, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 214, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 7, 210, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 210, 7, 213, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	211, 211, 211, 211, 211, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 211, 
	14, 213, 14, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 220, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 221, 219, 222, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 222, 14, 14, 14, 14, 14, 
	14, 14, 14, 223, 14, 14, 224, 14, 
	225, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 225, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 226, 1, 226, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 226, 212, 213, 212, 
	212, 212, 212, 7, 7, 212, 212, 212, 
	212, 212, 212, 212, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 212, 212, 
	212, 212, 212, 212, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 227, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 7, 228, 1, 228, 228, 
	228, 228, 1, 229, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 1, 225, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 225, 1, 1, 1, 1, 1, 
	1, 1, 1, 230, 1, 1, 226, 1, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	228, 63, 228, 228, 228, 228, 63, 229, 
	232, 228, 228, 233, 228, 228, 228, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 235, 228, 228, 228, 228, 228, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 234, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 63, 226, 
	211, 211, 211, 211, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 226, 212, 
	213, 212, 212, 212, 212, 7, 229, 212, 
	212, 212, 212, 212, 212, 212, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	212, 212, 212, 212, 212, 212, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 227, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 7, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 240, 228, 228, 228, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 228, 
	228, 228, 228, 228, 228, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 241, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 7, 242, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 242, 7, 213, 7, 
	7, 7, 7, 7, 7, 243, 7, 7, 
	244, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	245, 63, 63, 246, 63, 63, 63, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 63, 63, 63, 63, 63, 63, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 63, 63, 63, 247, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 233, 228, 
	228, 228, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 228, 228, 228, 228, 
	228, 228, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 248, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 63, 219, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 249, 228, 
	228, 228, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 251, 228, 228, 228, 
	228, 228, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 250, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 63, 226, 211, 211, 211, 211, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 226, 212, 213, 212, 212, 212, 212, 
	7, 229, 212, 212, 212, 212, 212, 212, 
	212, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 212, 212, 212, 212, 212, 
	212, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	252, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	7, 231, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	231, 228, 63, 228, 228, 228, 228, 63, 
	229, 232, 228, 228, 249, 228, 228, 228, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 254, 228, 228, 228, 228, 228, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 253, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 63, 
	236, 237, 237, 237, 237, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 236, 
	228, 238, 228, 228, 228, 228, 7, 229, 
	239, 228, 228, 255, 228, 228, 228, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 228, 228, 228, 228, 228, 228, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 256, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 7, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 231, 228, 
	63, 228, 228, 228, 228, 63, 229, 232, 
	228, 228, 249, 228, 228, 228, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	228, 228, 228, 228, 228, 228, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 257, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 63, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 255, 228, 228, 228, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 228, 
	228, 228, 228, 228, 228, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 258, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 7, 231, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 231, 228, 63, 228, 
	228, 228, 228, 63, 229, 232, 228, 228, 
	249, 228, 228, 228, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 228, 228, 
	228, 228, 228, 228, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 259, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 63, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 1, 261, 1, 262, 1, 264, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 264, 263, 
	265, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 265, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	268, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 269, 1, 
	1, 271, 270, 265, 266, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 265, 58, 1, 58, 58, 58, 
	58, 1, 59, 58, 58, 58, 58, 58, 
	58, 272, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 273, 270, 273, 273, 273, 273, 270, 
	274, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 270, 
	275, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 275, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	276, 270, 270, 277, 270, 275, 271, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 275, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	277, 270, 277, 278, 279, 279, 279, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 277, 280, 281, 280, 280, 280, 280, 
	270, 270, 280, 280, 280, 280, 280, 280, 
	280, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 280, 280, 280, 280, 280, 
	280, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	282, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	270, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 279, 278, 279, 279, 
	279, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 279, 270, 281, 270, 284, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 286, 283, 288, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 289, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 290, 287, 50, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 51, 49, 291, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 291, 270, 270, 270, 270, 270, 
	270, 270, 270, 292, 270, 270, 293, 270, 
	294, 295, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 294, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 296, 270, 
	297, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 297, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 298, 270, 
	271, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 299, 270, 271, 
	62, 288, 287, 300, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 300, 273, 270, 273, 273, 273, 
	273, 270, 274, 301, 273, 273, 302, 273, 
	273, 273, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 304, 273, 273, 273, 
	273, 273, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 303, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 270, 294, 295, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 294, 273, 270, 273, 273, 273, 273, 
	270, 274, 273, 273, 273, 273, 273, 273, 
	305, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	270, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	273, 270, 273, 273, 273, 273, 270, 274, 
	273, 273, 273, 273, 273, 273, 306, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 270, 271, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 70, 62, 
	70, 70, 70, 70, 62, 71, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 62, 277, 278, 279, 
	279, 279, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 277, 280, 281, 280, 
	280, 280, 280, 270, 274, 280, 280, 280, 
	280, 280, 280, 280, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 280, 280, 
	280, 280, 280, 280, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 282, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 270, 307, 308, 309, 309, 
	309, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 307, 273, 310, 273, 273, 
	273, 273, 270, 274, 311, 273, 273, 312, 
	273, 273, 273, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 273, 273, 273, 
	273, 273, 273, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 313, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 270, 314, 278, 279, 279, 279, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 314, 270, 281, 270, 270, 270, 
	270, 270, 270, 315, 270, 270, 316, 270, 
	270, 270, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 270, 270, 270, 270, 
	270, 270, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 270, 270, 
	270, 317, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 300, 271, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 300, 270, 270, 
	270, 270, 270, 270, 270, 270, 318, 270, 
	270, 319, 270, 270, 270, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 270, 
	270, 270, 270, 270, 270, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 270, 270, 270, 320, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 300, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	300, 273, 270, 273, 273, 273, 273, 270, 
	274, 301, 273, 273, 302, 273, 273, 273, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 273, 273, 273, 273, 273, 273, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 321, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 270, 
	322, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 323, 
	125, 323, 323, 323, 323, 125, 125, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 125, 1, 325, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 324, 
	324, 324, 324, 324, 324, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 324, 324, 326, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 128, 327, 14, 1, 328, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 63, 63, 
	63, 63, 63, 63, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	63, 63, 63, 329, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	328, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	331, 63, 63, 63, 63, 63, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 63, 63, 63, 330, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 332, 333, 334, 334, 334, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 332, 7, 335, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 7, 7, 7, 7, 7, 
	7, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 7, 7, 7, 
	336, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 337, 338, 138, 
	138, 138, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 337, 7, 139, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 7, 7, 
	7, 7, 7, 7, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	7, 7, 7, 141, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	138, 138, 138, 138, 138, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 138, 
	14, 139, 14, 1, 172, 1, 172, 172, 
	172, 172, 1, 173, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 1, 339, 1, 1, 339, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 228, 
	228, 228, 228, 1, 229, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 1, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 1, 342, 341, 1, 264, 342, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 264, 263, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 56, 53, 0, 8, 
	9, 55, 8, 9, 55, 10, 14, 11, 
	10, 11, 48, 12, 13, 14, 15, 15, 
	16, 17, 18, 19, 18, 20, 19, 20, 
	21, 22, 28, 23, 41, 39, 24, 25, 
	35, 24, 25, 35, 26, 133, 27, 26, 
	27, 32, 28, 29, 133, 31, 136, 0, 
	26, 137, 36, 32, 37, 34, 138, 139, 
	38, 22, 23, 137, 36, 40, 38, 133, 
	27, 133, 27, 39, 40, 42, 41, 46, 
	43, 43, 44, 42, 45, 45, 47, 47, 
	10, 49, 50, 48, 51, 52, 6, 7, 
	49, 50, 54, 52, 14, 11, 14, 11, 
	53, 54, 57, 56, 61, 58, 58, 59, 
	57, 60, 60, 62, 62, 0, 162, 164, 
	0, 65, 66, 67, 166, 68, 67, 166, 
	68, 70, 71, 72, 170, 169, 73, 167, 
	74, 73, 167, 74, 76, 77, 76, 78, 
	77, 78, 79, 80, 86, 81, 95, 92, 
	82, 83, 94, 82, 83, 94, 84, 174, 
	85, 84, 85, 88, 86, 87, 174, 84, 
	175, 89, 88, 90, 91, 80, 81, 175, 
	89, 93, 91, 174, 85, 174, 85, 92, 
	93, 96, 95, 100, 97, 97, 98, 96, 
	99, 99, 101, 101, 103, 104, 103, 105, 
	104, 105, 106, 107, 113, 108, 122, 119, 
	109, 110, 121, 109, 110, 121, 111, 176, 
	112, 111, 112, 115, 113, 114, 176, 111, 
	178, 116, 115, 117, 118, 107, 108, 178, 
	116, 120, 118, 176, 112, 176, 112, 119, 
	120, 123, 122, 127, 124, 124, 125, 123, 
	126, 126, 128, 128, 179, 131, 132, 180, 
	182, 134, 135, 30, 134, 30, 136, 135, 
	33, 138, 139, 140, 148, 141, 142, 143, 
	138, 144, 153, 145, 146, 147, 152, 145, 
	146, 147, 152, 140, 148, 141, 149, 135, 
	150, 149, 150, 151, 140, 154, 157, 153, 
	158, 155, 156, 159, 142, 143, 144, 154, 
	157, 161, 159, 148, 141, 160, 148, 141, 
	160, 161, 163, 162, 0, 165, 164, 168, 
	168, 169, 170, 171, 172, 173, 71, 72, 
	169, 172, 173, 177, 179, 180, 181
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 21, 0, 
	0, 0, 2, 3, 0, 4, 0, 5, 
	0, 0, 8, 0, 9, 11, 15, 16, 
	15, 0, 17, 0, 19, 19, 19, 0, 
	0, 9, 0, 20, 0, 0, 22, 24, 
	25, 25, 25, 0, 26, 0, 22, 27, 
	29, 30, 30, 29, 29, 31, 33, 33, 
	33, 25, 25, 0, 0, 25, 0, 26, 
	9, 0, 26, 29, 31, 0, 31, 0, 
	25, 25, 25, 0, 26, 29, 30, 30, 
	29, 29, 31, 33, 33, 33, 25, 25, 
	0, 0, 25, 0, 26, 9, 0, 26, 
	29, 31, 0, 31, 0, 38, 8, 11, 
	40, 0, 0, 15, 42, 15, 0, 43, 
	0, 0, 0, 0, 11, 11, 15, 16, 
	15, 0, 17, 0, 47, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 54, 
	19, 0, 0, 9, 0, 20, 56, 25, 
	58, 25, 0, 26, 29, 30, 30, 60, 
	29, 31, 33, 62, 33, 58, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 2, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 19, 
	19, 0, 0, 9, 0, 20, 0, 25, 
	25, 25, 0, 26, 29, 30, 30, 29, 
	29, 31, 33, 33, 33, 25, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 67, 0, 0, 22, 
	22, 69, 68, 69, 0, 0, 0, 70, 
	69, 0, 20, 0, 0, 0, 70, 0, 
	8, 0, 9, 15, 77, 16, 15, 0, 
	70, 17, 0, 19, 19, 19, 69, 80, 
	69, 0, 0, 0, 25, 25, 25, 0, 
	26, 69, 0, 29, 83, 30, 30, 29, 
	29, 31, 33, 33, 33, 11, 25, 25, 
	0, 0, 3, 0, 88, 26, 0, 90, 
	92, 0, 0, 26, 30, 95, 30, 30, 
	31, 0, 97, 99, 0, 0, 102
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	23, 1, 1, 14, 6, 28, 32, 34, 
	23, 23, 35, 36, 37, 36, 28, 23, 
	23, 1, 6, 28, 32, 34, 23, 14, 
	23, 35, 36, 37, 36, 28, 23, 38, 
	0, 39, 41, 41, 41, 44, 44, 45, 
	46, 46, 46, 1, 48, 49, 50, 51, 
	52, 53, 53, 13, 0, 55, 1, 0, 
	57, 55, 59, 61, 63, 57, 53, 57, 
	64, 65, 66, 65, 59, 57, 1, 1, 
	0, 6, 10, 12, 14, 14, 18, 0, 
	6, 1, 0, 23, 6, 28, 32, 34, 
	23, 14, 23, 35, 36, 37, 36, 28, 
	23, 0, 0, 0, 0, 68, 68, 0, 
	70, 71, 72, 70, 70, 73, 74, 75, 
	76, 76, 78, 79, 80, 70, 70, 70, 
	76, 81, 82, 72, 72, 73, 81, 84, 
	84, 81, 85, 86, 87, 89, 0, 90, 
	0, 91, 93, 94, 96, 98, 0, 1, 
	99, 0, 100, 101, 102, 0, 102
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 63;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 64;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 65;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 69;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 75;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 102;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 129;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 130;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 26 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 24 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 88 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 56 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 67 then
		begin

    trace('RELATIONSHIP start_relationship')
    p_start = p;
  		end
	when 22 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 21 then
		begin

    trace('SIMPLE_STATEMENT statement_subject')
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 69 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 97 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 33 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 47 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 27 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 43 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 62 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 95 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 92 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 42 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 77 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 54 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 60 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 83 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 58 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 86 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 89 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 98 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 49 then
		begin
 $stderr.puts "EOF!" 		end
	when 85 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 48 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 87 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 63 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 52 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 100 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 34 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 96 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 53 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 46 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 41 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 78 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 101 then
		begin

    trace('RELATIONSHIP stop_relationship')
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    trace('RELATIONSHIP relationship_end')
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 72 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 82 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 51 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 32 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 94 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 79 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 37 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 28 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 84 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 76 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 50 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 73 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	48, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 0, 0, 
	33, 126, 9, 126, 9, 
	40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 33, 126, 47, 47, 
	47, 47, 9, 32, 9, 
	47, 9, 47, 0, 0, 
	10, 10, 9, 126, 10, 126, 
	9, 44, 9, 44, 9, 
	126, 9, 34, 9, 34, 
	10, 92, 10, 92, 34, 92, 
	9, 44, 9, 47, 9, 
	47, 10, 47, 10, 10, 
	10, 10, 9, 126, 9, 126, 
	10, 126, 10, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 10, 126, 
	0, 0, 10, 122, 0, 
	0, 0, 0, 10, 10, 
	0, 0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 
	34, 0, 0, 33, 126, 
	10, 10, 0, 0, 10, 126, 
	33, 126, 10, 10, 0, 
	0, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 24, 118, 
	118, 118, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	75, 26, 59, 59, 0, 114, 114, 26, 
	59, 59, 0, 94, 118, 32, 118, 114, 
	26, 59, 59, 36, 36, 118, 94, 36, 
	118, 118, 118, 114, 114, 118, 0, 118, 
	118, 118, 118, 118, 118, 118, 94, 118, 
	32, 118, 114, 26, 59, 59, 36, 36, 
	118, 94, 36, 118, 118, 118, 114, 114, 
	118, 0, 118, 118, 118, 118, 118, 118, 
	118, 94, 1, 1, 24, 39, 39, 0, 
	1, 118, 117, 36, 36, 118, 26, 26, 
	83, 83, 59, 36, 39, 39, 38, 1, 
	1, 118, 118, 117, 117, 118, 118, 114, 
	114, 118, 117, 0, 113, 0, 0, 1, 
	0, 113, 113, 114, 114, 26, 0, 94, 
	1, 0, 117, 94, 1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 978, 
	1097, 1216, 1335, 1454, 1487, 1606, 1721, 1748, 
	1808, 1868, 1905, 1942, 2061, 2156, 2193, 2195, 
	2197, 2316, 2411, 2529, 2530, 2649, 2768, 2883, 
	2998, 3117, 3236, 3355, 3474, 3593, 3712, 3831, 
	3950, 4069, 4188, 4307, 4426, 4541, 4656, 4775, 
	4776, 4895, 5014, 5133, 5252, 5371, 5490, 5609, 
	5704, 5780, 5807, 5867, 5927, 5928, 6043, 6158, 
	6185, 6245, 6305, 6306, 6401, 6520, 6553, 6672, 
	6787, 6814, 6874, 6934, 6971, 7008, 7127, 7222, 
	7259, 7378, 7497, 7616, 7731, 7846, 7965, 7966, 
	8085, 8204, 8323, 8442, 8561, 8680, 8799, 8894, 
	9013, 9046, 9165, 9280, 9307, 9367, 9427, 9464, 
	9501, 9620, 9715, 9752, 9871, 9990, 10109, 10224, 
	10339, 10458, 10459, 10578, 10697, 10816, 10935, 11054, 
	11173, 11292, 11387, 11389, 11391, 11416, 11456, 11496, 
	11497, 11499, 11618, 11736, 11773, 11810, 11929, 11956, 
	11983, 12067, 12151, 12211, 12248, 12288, 12328, 12367, 
	12369, 12371, 12490, 12609, 12727, 12845, 12964, 13083, 
	13198, 13313, 13432, 13550, 13551, 13665, 13666, 13667, 
	13669, 13670, 13784, 13898, 14013, 14128, 14155, 14156, 
	14251, 14253, 14254, 14372, 14467, 14469, 14470
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	30, 1, 31, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 31, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	1, 33, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 1, 
	33, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 33, 
	34, 1, 34, 34, 34, 34, 1, 1, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 1, 35, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 35, 36, 
	1, 36, 36, 36, 36, 1, 37, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 1, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 38, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 40, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 40, 42, 
	43, 42, 42, 42, 42, 7, 7, 42, 
	42, 42, 42, 42, 42, 42, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 44, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 7, 40, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 43, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 7, 
	7, 7, 7, 7, 7, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 7, 7, 7, 45, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 47, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 48, 46, 
	50, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 51, 49, 52, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 52, 14, 14, 14, 14, 
	14, 14, 14, 14, 53, 14, 14, 54, 
	14, 55, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	55, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 56, 1, 56, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 56, 42, 43, 
	42, 42, 42, 42, 7, 7, 42, 42, 
	42, 42, 42, 42, 42, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 42, 
	42, 42, 42, 42, 42, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 57, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 7, 58, 1, 58, 
	58, 58, 58, 1, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 55, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 55, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 56, 
	1, 61, 1, 1, 62, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	66, 58, 58, 58, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 58, 
	58, 58, 58, 58, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 67, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 63, 58, 1, 58, 58, 
	58, 58, 1, 59, 58, 58, 58, 58, 
	58, 58, 69, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 70, 62, 70, 70, 70, 70, 
	62, 71, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	62, 49, 56, 41, 41, 41, 41, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 56, 42, 43, 42, 42, 42, 42, 
	7, 59, 42, 42, 42, 42, 42, 42, 
	42, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 42, 42, 42, 42, 42, 
	42, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	57, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	7, 72, 73, 73, 73, 73, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	72, 58, 74, 58, 58, 58, 58, 7, 
	59, 75, 58, 58, 76, 58, 58, 58, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 58, 58, 58, 58, 58, 58, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 77, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 7, 
	78, 41, 41, 41, 41, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 78, 
	7, 43, 7, 7, 7, 7, 7, 7, 
	79, 7, 7, 80, 7, 7, 7, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 7, 7, 7, 7, 7, 7, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 7, 7, 7, 45, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 63, 63, 63, 63, 63, 
	63, 63, 63, 81, 63, 63, 82, 63, 
	63, 63, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 63, 63, 63, 63, 
	63, 63, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 63, 63, 
	63, 83, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 64, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 58, 63, 
	58, 58, 58, 58, 63, 59, 65, 58, 
	58, 66, 58, 58, 58, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 58, 
	58, 58, 58, 58, 58, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 84, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 63, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	85, 58, 58, 58, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 87, 58, 
	58, 58, 58, 58, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 86, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 63, 56, 41, 41, 41, 
	41, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 56, 42, 43, 42, 42, 
	42, 42, 7, 59, 42, 42, 42, 42, 
	42, 42, 42, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 42, 42, 42, 
	42, 42, 42, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 88, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 58, 63, 58, 58, 58, 
	58, 63, 59, 65, 58, 58, 85, 58, 
	58, 58, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 90, 58, 58, 58, 
	58, 58, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 89, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 63, 72, 73, 73, 73, 73, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 72, 58, 74, 58, 58, 58, 58, 
	7, 59, 75, 58, 58, 91, 58, 58, 
	58, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 58, 58, 58, 58, 58, 
	58, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	92, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	7, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 58, 63, 58, 58, 58, 58, 63, 
	59, 65, 58, 58, 85, 58, 58, 58, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 58, 58, 58, 58, 58, 58, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 93, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 63, 
	72, 73, 73, 73, 73, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 72, 
	58, 74, 58, 58, 58, 58, 7, 59, 
	75, 58, 58, 91, 58, 58, 58, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 58, 58, 58, 58, 58, 58, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 94, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 7, 64, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 64, 58, 
	63, 58, 58, 58, 58, 63, 59, 65, 
	58, 58, 85, 58, 58, 58, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	58, 58, 58, 58, 58, 58, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 95, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 63, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 98, 27, 27, 27, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 100, 
	27, 27, 27, 27, 27, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 99, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 63, 30, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 10, 10, 10, 
	10, 10, 10, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 26, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 7, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 105, 27, 
	27, 27, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 27, 27, 27, 27, 
	27, 27, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 106, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 7, 107, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 107, 7, 11, 7, 7, 7, 7, 
	7, 7, 108, 7, 7, 109, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	13, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 96, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 110, 63, 63, 
	111, 63, 63, 63, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 63, 63, 
	63, 63, 63, 63, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	63, 63, 63, 112, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 98, 27, 27, 27, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 27, 27, 27, 27, 27, 27, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 113, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 63, 18, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 114, 27, 27, 27, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 116, 27, 27, 27, 27, 27, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 115, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 63, 25, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 25, 10, 
	11, 10, 10, 10, 10, 7, 28, 10, 
	10, 10, 10, 10, 10, 10, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	10, 10, 10, 10, 10, 10, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 117, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 7, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 114, 27, 27, 27, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 119, 
	27, 27, 27, 27, 27, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 118, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 63, 101, 102, 102, 
	102, 102, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 101, 27, 103, 27, 
	27, 27, 27, 7, 28, 104, 27, 27, 
	120, 27, 27, 27, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 27, 27, 
	27, 27, 27, 27, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 121, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 7, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 96, 27, 63, 27, 27, 
	27, 27, 63, 28, 97, 27, 27, 114, 
	27, 27, 27, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 27, 27, 27, 
	27, 27, 27, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 122, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 63, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 120, 27, 
	27, 27, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 27, 27, 27, 27, 
	27, 27, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 123, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 7, 96, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 96, 27, 63, 27, 27, 27, 27, 
	63, 28, 97, 27, 27, 114, 27, 27, 
	27, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 27, 27, 27, 27, 27, 
	27, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	124, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	63, 126, 125, 126, 126, 126, 126, 125, 
	125, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 125, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 1, 1, 1, 1, 1, 1, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 1, 1, 1, 127, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 129, 129, 129, 129, 
	129, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 129, 128, 130, 128, 132, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 133, 131, 135, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 136, 134, 134, 
	137, 138, 138, 138, 138, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	7, 139, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 7, 7, 7, 7, 7, 7, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 7, 7, 7, 140, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 137, 138, 138, 138, 138, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 137, 7, 139, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 7, 7, 7, 7, 
	7, 7, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 7, 7, 
	7, 141, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 138, 138, 
	138, 138, 138, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 138, 14, 139, 
	14, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 146, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	145, 145, 148, 1, 148, 148, 148, 148, 
	1, 1, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	1, 149, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	149, 150, 1, 150, 150, 150, 150, 1, 
	151, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 1, 
	152, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 152, 
	1, 1, 1, 1, 1, 1, 1, 153, 
	1, 154, 155, 155, 155, 155, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	154, 156, 157, 156, 156, 156, 156, 7, 
	7, 156, 156, 156, 156, 156, 156, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 158, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 7, 
	154, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 154, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 155, 155, 155, 155, 155, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 155, 14, 157, 14, 161, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	162, 160, 164, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 165, 163, 166, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 166, 14, 14, 
	14, 14, 14, 14, 14, 14, 167, 14, 
	14, 168, 14, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 170, 1, 
	170, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 170, 
	156, 157, 156, 156, 156, 156, 7, 7, 
	156, 156, 156, 156, 156, 156, 156, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 156, 156, 156, 156, 156, 156, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 171, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 7, 172, 
	1, 172, 172, 172, 172, 1, 173, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 169, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 169, 1, 1, 
	1, 1, 1, 1, 1, 1, 174, 1, 
	1, 170, 1, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 172, 63, 172, 172, 172, 
	172, 63, 173, 176, 172, 172, 177, 172, 
	172, 172, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 179, 172, 172, 172, 
	172, 172, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 178, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 63, 170, 155, 155, 155, 155, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 170, 156, 157, 156, 156, 156, 156, 
	7, 173, 156, 156, 156, 156, 156, 156, 
	156, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 156, 156, 156, 156, 156, 
	156, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	171, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	7, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 184, 172, 172, 172, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 172, 172, 172, 172, 172, 172, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 185, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 7, 
	186, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	187, 7, 7, 188, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 189, 63, 63, 190, 63, 
	63, 63, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 63, 63, 63, 63, 
	63, 63, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 63, 63, 
	63, 191, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 177, 172, 172, 172, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 172, 
	172, 172, 172, 172, 172, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 192, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 63, 163, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 193, 172, 172, 172, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 195, 
	172, 172, 172, 172, 172, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 194, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 63, 170, 155, 155, 
	155, 155, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 170, 156, 157, 156, 
	156, 156, 156, 7, 173, 156, 156, 156, 
	156, 156, 156, 156, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 156, 156, 
	156, 156, 156, 156, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 196, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 7, 175, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 175, 172, 63, 172, 172, 
	172, 172, 63, 173, 176, 172, 172, 193, 
	172, 172, 172, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 198, 172, 172, 
	172, 172, 172, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 197, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 63, 180, 181, 181, 181, 181, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 180, 172, 182, 172, 172, 172, 
	172, 7, 173, 183, 172, 172, 199, 172, 
	172, 172, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 172, 172, 172, 172, 
	172, 172, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 200, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 7, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 175, 172, 63, 172, 172, 172, 172, 
	63, 173, 176, 172, 172, 193, 172, 172, 
	172, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 172, 172, 172, 172, 172, 
	172, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	201, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	63, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 199, 172, 172, 172, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 172, 172, 172, 172, 172, 172, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 202, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 7, 
	175, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 175, 
	172, 63, 172, 172, 172, 172, 63, 173, 
	176, 172, 172, 193, 172, 172, 172, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 172, 172, 172, 172, 172, 172, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 203, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 63, 204, 
	1, 204, 204, 204, 204, 1, 1, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 206, 1, 
	206, 206, 206, 206, 1, 207, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 1, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 1, 1, 1, 
	1, 1, 1, 1, 209, 1, 210, 211, 
	211, 211, 211, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 210, 212, 213, 
	212, 212, 212, 212, 7, 7, 212, 212, 
	212, 212, 212, 212, 212, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 212, 
	212, 212, 212, 212, 212, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 214, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 7, 210, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 210, 7, 213, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	211, 211, 211, 211, 211, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 211, 
	14, 213, 14, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 220, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 221, 219, 222, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 222, 14, 14, 14, 14, 14, 
	14, 14, 14, 223, 14, 14, 224, 14, 
	225, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 225, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 226, 1, 226, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 226, 212, 213, 212, 
	212, 212, 212, 7, 7, 212, 212, 212, 
	212, 212, 212, 212, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 212, 212, 
	212, 212, 212, 212, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 227, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 7, 228, 1, 228, 228, 
	228, 228, 1, 229, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 1, 225, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 225, 1, 1, 1, 1, 1, 
	1, 1, 1, 230, 1, 1, 226, 1, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	228, 63, 228, 228, 228, 228, 63, 229, 
	232, 228, 228, 233, 228, 228, 228, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 235, 228, 228, 228, 228, 228, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 234, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 63, 226, 
	211, 211, 211, 211, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 226, 212, 
	213, 212, 212, 212, 212, 7, 229, 212, 
	212, 212, 212, 212, 212, 212, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	212, 212, 212, 212, 212, 212, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 227, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 7, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 240, 228, 228, 228, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 228, 
	228, 228, 228, 228, 228, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 241, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 7, 242, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 242, 7, 213, 7, 
	7, 7, 7, 7, 7, 243, 7, 7, 
	244, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	245, 63, 63, 246, 63, 63, 63, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 63, 63, 63, 63, 63, 63, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 63, 63, 63, 247, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 233, 228, 
	228, 228, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 228, 228, 228, 228, 
	228, 228, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 248, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 63, 219, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 249, 228, 
	228, 228, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 251, 228, 228, 228, 
	228, 228, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 250, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 63, 226, 211, 211, 211, 211, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 226, 212, 213, 212, 212, 212, 212, 
	7, 229, 212, 212, 212, 212, 212, 212, 
	212, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 212, 212, 212, 212, 212, 
	212, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	252, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	7, 231, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	231, 228, 63, 228, 228, 228, 228, 63, 
	229, 232, 228, 228, 249, 228, 228, 228, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 254, 228, 228, 228, 228, 228, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 253, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 63, 
	236, 237, 237, 237, 237, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 236, 
	228, 238, 228, 228, 228, 228, 7, 229, 
	239, 228, 228, 255, 228, 228, 228, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 228, 228, 228, 228, 228, 228, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 256, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 7, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 231, 228, 
	63, 228, 228, 228, 228, 63, 229, 232, 
	228, 228, 249, 228, 228, 228, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	228, 228, 228, 228, 228, 228, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 257, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 63, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 255, 228, 228, 228, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 228, 
	228, 228, 228, 228, 228, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 258, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 7, 231, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 231, 228, 63, 228, 
	228, 228, 228, 63, 229, 232, 228, 228, 
	249, 228, 228, 228, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 228, 228, 
	228, 228, 228, 228, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 259, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 63, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 1, 261, 1, 262, 1, 264, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 264, 263, 
	265, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 265, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	268, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 269, 1, 
	1, 271, 270, 265, 266, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 265, 58, 1, 58, 58, 58, 
	58, 1, 59, 58, 58, 58, 58, 58, 
	58, 272, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 273, 270, 273, 273, 273, 273, 270, 
	274, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 270, 
	275, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 275, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	276, 270, 270, 277, 270, 275, 271, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 275, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	277, 270, 277, 278, 279, 279, 279, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 277, 280, 281, 280, 280, 280, 280, 
	270, 270, 280, 280, 280, 280, 280, 280, 
	280, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 280, 280, 280, 280, 280, 
	280, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	282, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	270, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 279, 278, 279, 279, 
	279, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 279, 270, 281, 270, 284, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 286, 283, 288, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 289, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 290, 287, 50, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 51, 49, 291, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 291, 270, 270, 270, 270, 270, 
	270, 270, 270, 292, 270, 270, 293, 270, 
	294, 295, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 294, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 296, 270, 
	297, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 297, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 298, 270, 
	271, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 299, 270, 271, 
	62, 288, 287, 300, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 300, 273, 270, 273, 273, 273, 
	273, 270, 274, 301, 273, 273, 302, 273, 
	273, 273, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 304, 273, 273, 273, 
	273, 273, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 303, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 270, 294, 295, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 294, 273, 270, 273, 273, 273, 273, 
	270, 274, 273, 273, 273, 273, 273, 273, 
	305, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	270, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	273, 270, 273, 273, 273, 273, 270, 274, 
	273, 273, 273, 273, 273, 273, 306, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 270, 271, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 70, 62, 
	70, 70, 70, 70, 62, 71, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 62, 277, 278, 279, 
	279, 279, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 277, 280, 281, 280, 
	280, 280, 280, 270, 274, 280, 280, 280, 
	280, 280, 280, 280, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 280, 280, 
	280, 280, 280, 280, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 282, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 270, 307, 308, 309, 309, 
	309, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 307, 273, 310, 273, 273, 
	273, 273, 270, 274, 311, 273, 273, 312, 
	273, 273, 273, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 273, 273, 273, 
	273, 273, 273, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 313, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 270, 314, 278, 279, 279, 279, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 314, 270, 281, 270, 270, 270, 
	270, 270, 270, 315, 270, 270, 316, 270, 
	270, 270, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 270, 270, 270, 270, 
	270, 270, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 270, 270, 
	270, 317, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 300, 271, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 300, 270, 270, 
	270, 270, 270, 270, 270, 270, 318, 270, 
	270, 319, 270, 270, 270, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 270, 
	270, 270, 270, 270, 270, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 270, 270, 270, 320, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 300, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	300, 273, 270, 273, 273, 273, 273, 270, 
	274, 301, 273, 273, 302, 273, 273, 273, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 273, 273, 273, 273, 273, 273, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 321, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 270, 
	322, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 323, 
	125, 323, 323, 323, 323, 125, 125, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 125, 1, 325, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 324, 
	324, 324, 324, 324, 324, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 324, 324, 326, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 128, 327, 14, 1, 328, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 63, 63, 
	63, 63, 63, 63, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	63, 63, 63, 329, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	328, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	331, 63, 63, 63, 63, 63, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 63, 63, 63, 330, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 332, 333, 334, 334, 334, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 332, 7, 335, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 7, 7, 7, 7, 7, 
	7, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 7, 7, 7, 
	336, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 337, 338, 138, 
	138, 138, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 337, 7, 139, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 7, 7, 
	7, 7, 7, 7, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	7, 7, 7, 141, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	138, 138, 138, 138, 138, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 138, 
	14, 139, 14, 1, 172, 1, 172, 172, 
	172, 172, 1, 173, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 1, 339, 1, 1, 339, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 228, 
	228, 228, 228, 1, 229, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 1, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 1, 342, 341, 1, 264, 342, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 264, 263, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 56, 53, 0, 8, 
	9, 55, 8, 9, 55, 10, 14, 11, 
	10, 11, 48, 12, 13, 14, 15, 15, 
	16, 17, 18, 19, 18, 20, 19, 20, 
	21, 22, 28, 23, 41, 39, 24, 25, 
	35, 24, 25, 35, 26, 133, 27, 26, 
	27, 32, 28, 29, 133, 31, 136, 0, 
	26, 137, 36, 32, 37, 34, 138, 139, 
	38, 22, 23, 137, 36, 40, 38, 133, 
	27, 133, 27, 39, 40, 42, 41, 46, 
	43, 43, 44, 42, 45, 45, 47, 47, 
	10, 49, 50, 48, 51, 52, 6, 7, 
	49, 50, 54, 52, 14, 11, 14, 11, 
	53, 54, 57, 56, 61, 58, 58, 59, 
	57, 60, 60, 62, 62, 0, 162, 164, 
	0, 65, 66, 67, 166, 68, 67, 166, 
	68, 70, 71, 72, 170, 169, 73, 167, 
	74, 73, 167, 74, 76, 77, 76, 78, 
	77, 78, 79, 80, 86, 81, 95, 92, 
	82, 83, 94, 82, 83, 94, 84, 174, 
	85, 84, 85, 88, 86, 87, 174, 84, 
	175, 89, 88, 90, 91, 80, 81, 175, 
	89, 93, 91, 174, 85, 174, 85, 92, 
	93, 96, 95, 100, 97, 97, 98, 96, 
	99, 99, 101, 101, 103, 104, 103, 105, 
	104, 105, 106, 107, 113, 108, 122, 119, 
	109, 110, 121, 109, 110, 121, 111, 176, 
	112, 111, 112, 115, 113, 114, 176, 111, 
	178, 116, 115, 117, 118, 107, 108, 178, 
	116, 120, 118, 176, 112, 176, 112, 119, 
	120, 123, 122, 127, 124, 124, 125, 123, 
	126, 126, 128, 128, 179, 131, 132, 180, 
	182, 134, 135, 30, 134, 30, 136, 135, 
	33, 138, 139, 140, 148, 141, 142, 143, 
	138, 144, 153, 145, 146, 147, 152, 145, 
	146, 147, 152, 140, 148, 141, 149, 135, 
	150, 149, 150, 151, 140, 154, 157, 153, 
	158, 155, 156, 159, 142, 143, 144, 154, 
	157, 161, 159, 148, 141, 160, 148, 141, 
	160, 161, 163, 162, 0, 165, 164, 168, 
	168, 169, 170, 171, 172, 173, 71, 72, 
	169, 172, 173, 177, 179, 180, 181
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 21, 0, 
	0, 0, 2, 3, 0, 4, 0, 5, 
	0, 0, 8, 0, 9, 11, 15, 16, 
	15, 0, 17, 0, 19, 19, 19, 0, 
	0, 9, 0, 20, 0, 0, 22, 24, 
	25, 25, 25, 0, 26, 0, 22, 27, 
	29, 30, 30, 29, 29, 31, 33, 33, 
	33, 25, 25, 0, 0, 25, 0, 26, 
	9, 0, 26, 29, 31, 0, 31, 0, 
	25, 25, 25, 0, 26, 29, 30, 30, 
	29, 29, 31, 33, 33, 33, 25, 25, 
	0, 0, 25, 0, 26, 9, 0, 26, 
	29, 31, 0, 31, 0, 38, 8, 11, 
	40, 0, 0, 15, 42, 15, 0, 43, 
	0, 0, 0, 0, 11, 11, 15, 16, 
	15, 0, 17, 0, 47, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 54, 
	19, 0, 0, 9, 0, 20, 56, 25, 
	58, 25, 0, 26, 29, 30, 30, 60, 
	29, 31, 33, 62, 33, 58, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 2, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 19, 
	19, 0, 0, 9, 0, 20, 0, 25, 
	25, 25, 0, 26, 29, 30, 30, 29, 
	29, 31, 33, 33, 33, 25, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 67, 0, 0, 22, 
	22, 69, 68, 69, 0, 0, 0, 70, 
	69, 0, 20, 0, 0, 0, 70, 0, 
	8, 0, 9, 15, 77, 16, 15, 0, 
	70, 17, 0, 19, 19, 19, 69, 80, 
	69, 0, 0, 0, 25, 25, 25, 0, 
	26, 69, 0, 29, 83, 30, 30, 29, 
	29, 31, 33, 33, 33, 11, 25, 25, 
	0, 0, 3, 0, 88, 26, 0, 90, 
	92, 0, 0, 26, 30, 95, 30, 30, 
	31, 0, 97, 99, 0, 0, 102
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	23, 1, 1, 14, 6, 28, 32, 34, 
	23, 23, 35, 36, 37, 36, 28, 23, 
	23, 1, 6, 28, 32, 34, 23, 14, 
	23, 35, 36, 37, 36, 28, 23, 38, 
	0, 39, 41, 41, 41, 44, 44, 45, 
	46, 46, 46, 1, 48, 49, 50, 51, 
	52, 53, 53, 13, 0, 55, 1, 0, 
	57, 55, 59, 61, 63, 57, 53, 57, 
	64, 65, 66, 65, 59, 57, 1, 1, 
	0, 6, 10, 12, 14, 14, 18, 0, 
	6, 1, 0, 23, 6, 28, 32, 34, 
	23, 14, 23, 35, 36, 37, 36, 28, 
	23, 0, 0, 0, 0, 68, 68, 0, 
	70, 71, 72, 70, 70, 73, 74, 75, 
	76, 76, 78, 79, 80, 70, 70, 70, 
	76, 81, 82, 72, 72, 73, 81, 84, 
	84, 81, 85, 86, 87, 89, 0, 90, 
	0, 91, 93, 94, 96, 98, 0, 1, 
	99, 0, 100, 101, 102, 0, 102
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 63;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 64;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 65;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 69;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 75;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 102;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 129;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 130;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 26 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 24 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 88 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 56 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 67 then
		begin

    trace('RELATIONSHIP start_relationship')
    p_start = p;
  		end
	when 22 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 21 then
		begin

    trace('SIMPLE_STATEMENT statement_subject')
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 69 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 97 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 33 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 47 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 27 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 43 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 62 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 95 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 92 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 42 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 77 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 54 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 60 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 83 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 58 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 86 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 89 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 98 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 49 then
		begin
 $stderr.puts "EOF!" 		end
	when 85 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 48 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 87 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 63 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 52 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 100 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 34 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 96 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 53 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 46 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 41 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 78 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 101 then
		begin

    trace('RELATIONSHIP stop_relationship')
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    trace('RELATIONSHIP relationship_end')
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 72 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 82 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 51 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 32 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 94 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 79 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 37 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 28 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 84 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 76 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 50 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 73 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	48, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 0, 0, 
	33, 126, 9, 126, 9, 
	40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 33, 126, 47, 47, 
	47, 47, 9, 32, 9, 
	47, 9, 47, 0, 0, 
	10, 10, 9, 126, 10, 126, 
	9, 44, 9, 44, 9, 
	126, 9, 34, 9, 34, 
	10, 92, 10, 92, 34, 92, 
	9, 44, 9, 47, 9, 
	47, 10, 47, 10, 10, 
	10, 10, 9, 126, 9, 126, 
	10, 126, 10, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 10, 126, 
	0, 0, 10, 122, 0, 
	0, 0, 0, 10, 10, 
	0, 0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 
	34, 0, 0, 33, 126, 
	10, 10, 0, 0, 10, 126, 
	33, 126, 10, 10, 0, 
	0, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 24, 118, 
	118, 118, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	75, 26, 59, 59, 0, 114, 114, 26, 
	59, 59, 0, 94, 118, 32, 118, 114, 
	26, 59, 59, 36, 36, 118, 94, 36, 
	118, 118, 118, 114, 114, 118, 0, 118, 
	118, 118, 118, 118, 118, 118, 94, 118, 
	32, 118, 114, 26, 59, 59, 36, 36, 
	118, 94, 36, 118, 118, 118, 114, 114, 
	118, 0, 118, 118, 118, 118, 118, 118, 
	118, 94, 1, 1, 24, 39, 39, 0, 
	1, 118, 117, 36, 36, 118, 26, 26, 
	83, 83, 59, 36, 39, 39, 38, 1, 
	1, 118, 118, 117, 117, 118, 118, 114, 
	114, 118, 117, 0, 113, 0, 0, 1, 
	0, 113, 113, 114, 114, 26, 0, 94, 
	1, 0, 117, 94, 1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 978, 
	1097, 1216, 1335, 1454, 1487, 1606, 1721, 1748, 
	1808, 1868, 1905, 1942, 2061, 2156, 2193, 2195, 
	2197, 2316, 2411, 2529, 2530, 2649, 2768, 2883, 
	2998, 3117, 3236, 3355, 3474, 3593, 3712, 3831, 
	3950, 4069, 4188, 4307, 4426, 4541, 4656, 4775, 
	4776, 4895, 5014, 5133, 5252, 5371, 5490, 5609, 
	5704, 5780, 5807, 5867, 5927, 5928, 6043, 6158, 
	6185, 6245, 6305, 6306, 6401, 6520, 6553, 6672, 
	6787, 6814, 6874, 6934, 6971, 7008, 7127, 7222, 
	7259, 7378, 7497, 7616, 7731, 7846, 7965, 7966, 
	8085, 8204, 8323, 8442, 8561, 8680, 8799, 8894, 
	9013, 9046, 9165, 9280, 9307, 9367, 9427, 9464, 
	9501, 9620, 9715, 9752, 9871, 9990, 10109, 10224, 
	10339, 10458, 10459, 10578, 10697, 10816, 10935, 11054, 
	11173, 11292, 11387, 11389, 11391, 11416, 11456, 11496, 
	11497, 11499, 11618, 11736, 11773, 11810, 11929, 11956, 
	11983, 12067, 12151, 12211, 12248, 12288, 12328, 12367, 
	12369, 12371, 12490, 12609, 12727, 12845, 12964, 13083, 
	13198, 13313, 13432, 13550, 13551, 13665, 13666, 13667, 
	13669, 13670, 13784, 13898, 14013, 14128, 14155, 14156, 
	14251, 14253, 14254, 14372, 14467, 14469, 14470
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	30, 1, 31, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 31, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	1, 33, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 1, 
	33, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 33, 
	34, 1, 34, 34, 34, 34, 1, 1, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 1, 35, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 35, 36, 
	1, 36, 36, 36, 36, 1, 37, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 1, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 38, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 40, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 40, 42, 
	43, 42, 42, 42, 42, 7, 7, 42, 
	42, 42, 42, 42, 42, 42, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 44, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 7, 40, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 43, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 7, 
	7, 7, 7, 7, 7, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 7, 7, 7, 45, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 47, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 48, 46, 
	50, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 51, 49, 52, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 52, 14, 14, 14, 14, 
	14, 14, 14, 14, 53, 14, 14, 54, 
	14, 55, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	55, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 56, 1, 56, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 56, 42, 43, 
	42, 42, 42, 42, 7, 7, 42, 42, 
	42, 42, 42, 42, 42, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 42, 
	42, 42, 42, 42, 42, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 57, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 7, 58, 1, 58, 
	58, 58, 58, 1, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 55, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 55, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 56, 
	1, 61, 1, 1, 62, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	66, 58, 58, 58, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 58, 
	58, 58, 58, 58, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 67, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 63, 58, 1, 58, 58, 
	58, 58, 1, 59, 58, 58, 58, 58, 
	58, 58, 69, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 70, 62, 70, 70, 70, 70, 
	62, 71, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	62, 49, 56, 41, 41, 41, 41, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 56, 42, 43, 42, 42, 42, 42, 
	7, 59, 42, 42, 42, 42, 42, 42, 
	42, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 42, 42, 42, 42, 42, 
	42, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	57, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	7, 72, 73, 73, 73, 73, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	72, 58, 74, 58, 58, 58, 58, 7, 
	59, 75, 58, 58, 76, 58, 58, 58, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 58, 58, 58, 58, 58, 58, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 77, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 7, 
	78, 41, 41, 41, 41, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 78, 
	7, 43, 7, 7, 7, 7, 7, 7, 
	79, 7, 7, 80, 7, 7, 7, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 7, 7, 7, 7, 7, 7, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 7, 7, 7, 45, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 63, 63, 63, 63, 63, 
	63, 63, 63, 81, 63, 63, 82, 63, 
	63, 63, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 63, 63, 63, 63, 
	63, 63, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 63, 63, 
	63, 83, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 64, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 58, 63, 
	58, 58, 58, 58, 63, 59, 65, 58, 
	58, 66, 58, 58, 58, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 58, 
	58, 58, 58, 58, 58, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 84, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 63, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	85, 58, 58, 58, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 87, 58, 
	58, 58, 58, 58, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 86, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 63, 56, 41, 41, 41, 
	41, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 56, 42, 43, 42, 42, 
	42, 42, 7, 59, 42, 42, 42, 42, 
	42, 42, 42, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 42, 42, 42, 
	42, 42, 42, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 88, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 58, 63, 58, 58, 58, 
	58, 63, 59, 65, 58, 58, 85, 58, 
	58, 58, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 90, 58, 58, 58, 
	58, 58, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 89, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 63, 72, 73, 73, 73, 73, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 72, 58, 74, 58, 58, 58, 58, 
	7, 59, 75, 58, 58, 91, 58, 58, 
	58, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 58, 58, 58, 58, 58, 
	58, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	92, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	7, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 58, 63, 58, 58, 58, 58, 63, 
	59, 65, 58, 58, 85, 58, 58, 58, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 58, 58, 58, 58, 58, 58, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 93, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 63, 
	72, 73, 73, 73, 73, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 72, 
	58, 74, 58, 58, 58, 58, 7, 59, 
	75, 58, 58, 91, 58, 58, 58, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 58, 58, 58, 58, 58, 58, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 94, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 7, 64, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 64, 58, 
	63, 58, 58, 58, 58, 63, 59, 65, 
	58, 58, 85, 58, 58, 58, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	58, 58, 58, 58, 58, 58, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 95, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 63, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 98, 27, 27, 27, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 100, 
	27, 27, 27, 27, 27, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 99, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 63, 30, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 10, 10, 10, 
	10, 10, 10, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 26, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 7, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 105, 27, 
	27, 27, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 27, 27, 27, 27, 
	27, 27, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 106, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 7, 107, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 107, 7, 11, 7, 7, 7, 7, 
	7, 7, 108, 7, 7, 109, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	13, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 96, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 110, 63, 63, 
	111, 63, 63, 63, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 63, 63, 
	63, 63, 63, 63, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	63, 63, 63, 112, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 98, 27, 27, 27, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 27, 27, 27, 27, 27, 27, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 113, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 63, 18, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 114, 27, 27, 27, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 116, 27, 27, 27, 27, 27, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 115, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 63, 25, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 25, 10, 
	11, 10, 10, 10, 10, 7, 28, 10, 
	10, 10, 10, 10, 10, 10, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	10, 10, 10, 10, 10, 10, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 117, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 7, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 114, 27, 27, 27, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 119, 
	27, 27, 27, 27, 27, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 118, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 63, 101, 102, 102, 
	102, 102, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 101, 27, 103, 27, 
	27, 27, 27, 7, 28, 104, 27, 27, 
	120, 27, 27, 27, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 27, 27, 
	27, 27, 27, 27, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 121, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 7, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 96, 27, 63, 27, 27, 
	27, 27, 63, 28, 97, 27, 27, 114, 
	27, 27, 27, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 27, 27, 27, 
	27, 27, 27, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 122, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 63, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 120, 27, 
	27, 27, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 27, 27, 27, 27, 
	27, 27, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 123, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 7, 96, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 96, 27, 63, 27, 27, 27, 27, 
	63, 28, 97, 27, 27, 114, 27, 27, 
	27, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 27, 27, 27, 27, 27, 
	27, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	124, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	63, 126, 125, 126, 126, 126, 126, 125, 
	125, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 125, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 1, 1, 1, 1, 1, 1, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 1, 1, 1, 127, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 129, 129, 129, 129, 
	129, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 129, 128, 130, 128, 132, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 133, 131, 135, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 136, 134, 134, 
	137, 138, 138, 138, 138, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	7, 139, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 7, 7, 7, 7, 7, 7, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 7, 7, 7, 140, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 137, 138, 138, 138, 138, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 137, 7, 139, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 7, 7, 7, 7, 
	7, 7, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 7, 7, 
	7, 141, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 138, 138, 
	138, 138, 138, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 138, 14, 139, 
	14, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 146, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	145, 145, 148, 1, 148, 148, 148, 148, 
	1, 1, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	1, 149, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	149, 150, 1, 150, 150, 150, 150, 1, 
	151, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 1, 
	152, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 152, 
	1, 1, 1, 1, 1, 1, 1, 153, 
	1, 154, 155, 155, 155, 155, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	154, 156, 157, 156, 156, 156, 156, 7, 
	7, 156, 156, 156, 156, 156, 156, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 158, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 7, 
	154, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 154, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 155, 155, 155, 155, 155, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 155, 14, 157, 14, 161, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	162, 160, 164, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 165, 163, 166, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 166, 14, 14, 
	14, 14, 14, 14, 14, 14, 167, 14, 
	14, 168, 14, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 170, 1, 
	170, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 170, 
	156, 157, 156, 156, 156, 156, 7, 7, 
	156, 156, 156, 156, 156, 156, 156, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 156, 156, 156, 156, 156, 156, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 171, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 7, 172, 
	1, 172, 172, 172, 172, 1, 173, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 169, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 169, 1, 1, 
	1, 1, 1, 1, 1, 1, 174, 1, 
	1, 170, 1, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 172, 63, 172, 172, 172, 
	172, 63, 173, 176, 172, 172, 177, 172, 
	172, 172, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 179, 172, 172, 172, 
	172, 172, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 178, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 63, 170, 155, 155, 155, 155, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 170, 156, 157, 156, 156, 156, 156, 
	7, 173, 156, 156, 156, 156, 156, 156, 
	156, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 156, 156, 156, 156, 156, 
	156, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	171, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	7, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 184, 172, 172, 172, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 172, 172, 172, 172, 172, 172, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 185, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 7, 
	186, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	187, 7, 7, 188, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 189, 63, 63, 190, 63, 
	63, 63, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 63, 63, 63, 63, 
	63, 63, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 63, 63, 
	63, 191, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 177, 172, 172, 172, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 172, 
	172, 172, 172, 172, 172, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 192, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 63, 163, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 193, 172, 172, 172, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 195, 
	172, 172, 172, 172, 172, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 194, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 63, 170, 155, 155, 
	155, 155, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 170, 156, 157, 156, 
	156, 156, 156, 7, 173, 156, 156, 156, 
	156, 156, 156, 156, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 156, 156, 
	156, 156, 156, 156, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 196, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 7, 175, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 175, 172, 63, 172, 172, 
	172, 172, 63, 173, 176, 172, 172, 193, 
	172, 172, 172, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 198, 172, 172, 
	172, 172, 172, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 197, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 63, 180, 181, 181, 181, 181, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 180, 172, 182, 172, 172, 172, 
	172, 7, 173, 183, 172, 172, 199, 172, 
	172, 172, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 172, 172, 172, 172, 
	172, 172, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 200, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 7, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 175, 172, 63, 172, 172, 172, 172, 
	63, 173, 176, 172, 172, 193, 172, 172, 
	172, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 172, 172, 172, 172, 172, 
	172, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	201, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	63, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 199, 172, 172, 172, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 172, 172, 172, 172, 172, 172, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 202, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 7, 
	175, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 175, 
	172, 63, 172, 172, 172, 172, 63, 173, 
	176, 172, 172, 193, 172, 172, 172, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 172, 172, 172, 172, 172, 172, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 203, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 63, 204, 
	1, 204, 204, 204, 204, 1, 1, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 206, 1, 
	206, 206, 206, 206, 1, 207, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 1, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 1, 1, 1, 
	1, 1, 1, 1, 209, 1, 210, 211, 
	211, 211, 211, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 210, 212, 213, 
	212, 212, 212, 212, 7, 7, 212, 212, 
	212, 212, 212, 212, 212, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 212, 
	212, 212, 212, 212, 212, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 214, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 7, 210, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 210, 7, 213, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	211, 211, 211, 211, 211, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 211, 
	14, 213, 14, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 220, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 221, 219, 222, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 222, 14, 14, 14, 14, 14, 
	14, 14, 14, 223, 14, 14, 224, 14, 
	225, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 225, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 226, 1, 226, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 226, 212, 213, 212, 
	212, 212, 212, 7, 7, 212, 212, 212, 
	212, 212, 212, 212, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 212, 212, 
	212, 212, 212, 212, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 227, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 7, 228, 1, 228, 228, 
	228, 228, 1, 229, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 1, 225, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 225, 1, 1, 1, 1, 1, 
	1, 1, 1, 230, 1, 1, 226, 1, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	228, 63, 228, 228, 228, 228, 63, 229, 
	232, 228, 228, 233, 228, 228, 228, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 235, 228, 228, 228, 228, 228, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 234, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 63, 226, 
	211, 211, 211, 211, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 226, 212, 
	213, 212, 212, 212, 212, 7, 229, 212, 
	212, 212, 212, 212, 212, 212, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	212, 212, 212, 212, 212, 212, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 227, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 7, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 240, 228, 228, 228, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 228, 
	228, 228, 228, 228, 228, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 241, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 7, 242, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 242, 7, 213, 7, 
	7, 7, 7, 7, 7, 243, 7, 7, 
	244, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	245, 63, 63, 246, 63, 63, 63, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 63, 63, 63, 63, 63, 63, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 63, 63, 63, 247, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 233, 228, 
	228, 228, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 228, 228, 228, 228, 
	228, 228, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 248, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 63, 219, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 249, 228, 
	228, 228, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 251, 228, 228, 228, 
	228, 228, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 250, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 63, 226, 211, 211, 211, 211, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 226, 212, 213, 212, 212, 212, 212, 
	7, 229, 212, 212, 212, 212, 212, 212, 
	212, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 212, 212, 212, 212, 212, 
	212, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	252, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	7, 231, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	231, 228, 63, 228, 228, 228, 228, 63, 
	229, 232, 228, 228, 249, 228, 228, 228, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 254, 228, 228, 228, 228, 228, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 253, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 63, 
	236, 237, 237, 237, 237, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 236, 
	228, 238, 228, 228, 228, 228, 7, 229, 
	239, 228, 228, 255, 228, 228, 228, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 228, 228, 228, 228, 228, 228, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 256, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 7, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 231, 228, 
	63, 228, 228, 228, 228, 63, 229, 232, 
	228, 228, 249, 228, 228, 228, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	228, 228, 228, 228, 228, 228, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 257, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 63, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 255, 228, 228, 228, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 228, 
	228, 228, 228, 228, 228, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 258, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 7, 231, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 231, 228, 63, 228, 
	228, 228, 228, 63, 229, 232, 228, 228, 
	249, 228, 228, 228, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 228, 228, 
	228, 228, 228, 228, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 259, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 63, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 1, 261, 1, 262, 1, 264, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 264, 263, 
	265, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 265, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	268, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 269, 1, 
	1, 271, 270, 265, 266, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 265, 58, 1, 58, 58, 58, 
	58, 1, 59, 58, 58, 58, 58, 58, 
	58, 272, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 273, 270, 273, 273, 273, 273, 270, 
	274, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 270, 
	275, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 275, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	276, 270, 270, 277, 270, 275, 271, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 275, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	277, 270, 277, 278, 279, 279, 279, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 277, 280, 281, 280, 280, 280, 280, 
	270, 270, 280, 280, 280, 280, 280, 280, 
	280, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 280, 280, 280, 280, 280, 
	280, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	282, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	270, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 279, 278, 279, 279, 
	279, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 279, 270, 281, 270, 284, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 286, 283, 288, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 289, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 290, 287, 50, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 51, 49, 291, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 291, 270, 270, 270, 270, 270, 
	270, 270, 270, 292, 270, 270, 293, 270, 
	294, 295, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 294, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 296, 270, 
	297, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 297, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 298, 270, 
	271, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 299, 270, 271, 
	62, 288, 287, 300, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 300, 273, 270, 273, 273, 273, 
	273, 270, 274, 301, 273, 273, 302, 273, 
	273, 273, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 304, 273, 273, 273, 
	273, 273, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 303, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 270, 294, 295, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 294, 273, 270, 273, 273, 273, 273, 
	270, 274, 273, 273, 273, 273, 273, 273, 
	305, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	270, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	273, 270, 273, 273, 273, 273, 270, 274, 
	273, 273, 273, 273, 273, 273, 306, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 270, 271, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 70, 62, 
	70, 70, 70, 70, 62, 71, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 62, 277, 278, 279, 
	279, 279, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 277, 280, 281, 280, 
	280, 280, 280, 270, 274, 280, 280, 280, 
	280, 280, 280, 280, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 280, 280, 
	280, 280, 280, 280, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 282, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 270, 307, 308, 309, 309, 
	309, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 307, 273, 310, 273, 273, 
	273, 273, 270, 274, 311, 273, 273, 312, 
	273, 273, 273, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 273, 273, 273, 
	273, 273, 273, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 313, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 270, 314, 278, 279, 279, 279, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 314, 270, 281, 270, 270, 270, 
	270, 270, 270, 315, 270, 270, 316, 270, 
	270, 270, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 270, 270, 270, 270, 
	270, 270, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 270, 270, 
	270, 317, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 300, 271, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 300, 270, 270, 
	270, 270, 270, 270, 270, 270, 318, 270, 
	270, 319, 270, 270, 270, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 270, 
	270, 270, 270, 270, 270, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 270, 270, 270, 320, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 300, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	300, 273, 270, 273, 273, 273, 273, 270, 
	274, 301, 273, 273, 302, 273, 273, 273, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 273, 273, 273, 273, 273, 273, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 321, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 270, 
	322, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 323, 
	125, 323, 323, 323, 323, 125, 125, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 125, 1, 325, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 324, 
	324, 324, 324, 324, 324, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 324, 324, 326, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 128, 327, 14, 1, 328, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 63, 63, 
	63, 63, 63, 63, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	63, 63, 63, 329, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	328, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	331, 63, 63, 63, 63, 63, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 63, 63, 63, 330, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 332, 333, 334, 334, 334, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 332, 7, 335, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 7, 7, 7, 7, 7, 
	7, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 7, 7, 7, 
	336, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 337, 338, 138, 
	138, 138, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 337, 7, 139, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 7, 7, 
	7, 7, 7, 7, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	7, 7, 7, 141, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	138, 138, 138, 138, 138, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 138, 
	14, 139, 14, 1, 172, 1, 172, 172, 
	172, 172, 1, 173, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 1, 339, 1, 1, 339, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 228, 
	228, 228, 228, 1, 229, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 1, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 1, 342, 341, 1, 264, 342, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 264, 263, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 56, 53, 0, 8, 
	9, 55, 8, 9, 55, 10, 14, 11, 
	10, 11, 48, 12, 13, 14, 15, 15, 
	16, 17, 18, 19, 18, 20, 19, 20, 
	21, 22, 28, 23, 41, 39, 24, 25, 
	35, 24, 25, 35, 26, 133, 27, 26, 
	27, 32, 28, 29, 133, 31, 136, 0, 
	26, 137, 36, 32, 37, 34, 138, 139, 
	38, 22, 23, 137, 36, 40, 38, 133, 
	27, 133, 27, 39, 40, 42, 41, 46, 
	43, 43, 44, 42, 45, 45, 47, 47, 
	10, 49, 50, 48, 51, 52, 6, 7, 
	49, 50, 54, 52, 14, 11, 14, 11, 
	53, 54, 57, 56, 61, 58, 58, 59, 
	57, 60, 60, 62, 62, 0, 162, 164, 
	0, 65, 66, 67, 166, 68, 67, 166, 
	68, 70, 71, 72, 170, 169, 73, 167, 
	74, 73, 167, 74, 76, 77, 76, 78, 
	77, 78, 79, 80, 86, 81, 95, 92, 
	82, 83, 94, 82, 83, 94, 84, 174, 
	85, 84, 85, 88, 86, 87, 174, 84, 
	175, 89, 88, 90, 91, 80, 81, 175, 
	89, 93, 91, 174, 85, 174, 85, 92, 
	93, 96, 95, 100, 97, 97, 98, 96, 
	99, 99, 101, 101, 103, 104, 103, 105, 
	104, 105, 106, 107, 113, 108, 122, 119, 
	109, 110, 121, 109, 110, 121, 111, 176, 
	112, 111, 112, 115, 113, 114, 176, 111, 
	178, 116, 115, 117, 118, 107, 108, 178, 
	116, 120, 118, 176, 112, 176, 112, 119, 
	120, 123, 122, 127, 124, 124, 125, 123, 
	126, 126, 128, 128, 179, 131, 132, 180, 
	182, 134, 135, 30, 134, 30, 136, 135, 
	33, 138, 139, 140, 148, 141, 142, 143, 
	138, 144, 153, 145, 146, 147, 152, 145, 
	146, 147, 152, 140, 148, 141, 149, 135, 
	150, 149, 150, 151, 140, 154, 157, 153, 
	158, 155, 156, 159, 142, 143, 144, 154, 
	157, 161, 159, 148, 141, 160, 148, 141, 
	160, 161, 163, 162, 0, 165, 164, 168, 
	168, 169, 170, 171, 172, 173, 71, 72, 
	169, 172, 173, 177, 179, 180, 181
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 21, 0, 
	0, 0, 2, 3, 0, 4, 0, 5, 
	0, 0, 8, 0, 9, 11, 15, 16, 
	15, 0, 17, 0, 19, 19, 19, 0, 
	0, 9, 0, 20, 0, 0, 22, 24, 
	25, 25, 25, 0, 26, 0, 22, 27, 
	29, 30, 30, 29, 29, 31, 33, 33, 
	33, 25, 25, 0, 0, 25, 0, 26, 
	9, 0, 26, 29, 31, 0, 31, 0, 
	25, 25, 25, 0, 26, 29, 30, 30, 
	29, 29, 31, 33, 33, 33, 25, 25, 
	0, 0, 25, 0, 26, 9, 0, 26, 
	29, 31, 0, 31, 0, 38, 8, 11, 
	40, 0, 0, 15, 42, 15, 0, 43, 
	0, 0, 0, 0, 11, 11, 15, 16, 
	15, 0, 17, 0, 47, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 54, 
	19, 0, 0, 9, 0, 20, 56, 25, 
	58, 25, 0, 26, 29, 30, 30, 60, 
	29, 31, 33, 62, 33, 58, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 2, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 19, 
	19, 0, 0, 9, 0, 20, 0, 25, 
	25, 25, 0, 26, 29, 30, 30, 29, 
	29, 31, 33, 33, 33, 25, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 67, 0, 0, 22, 
	22, 69, 68, 69, 0, 0, 0, 70, 
	69, 0, 20, 0, 0, 0, 70, 0, 
	8, 0, 9, 15, 77, 16, 15, 0, 
	70, 17, 0, 19, 19, 19, 69, 80, 
	69, 0, 0, 0, 25, 25, 25, 0, 
	26, 69, 0, 29, 83, 30, 30, 29, 
	29, 31, 33, 33, 33, 11, 25, 25, 
	0, 0, 3, 0, 88, 26, 0, 90, 
	92, 0, 0, 26, 30, 95, 30, 30, 
	31, 0, 97, 99, 0, 0, 102
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	23, 1, 1, 14, 6, 28, 32, 34, 
	23, 23, 35, 36, 37, 36, 28, 23, 
	23, 1, 6, 28, 32, 34, 23, 14, 
	23, 35, 36, 37, 36, 28, 23, 38, 
	0, 39, 41, 41, 41, 44, 44, 45, 
	46, 46, 46, 1, 48, 49, 50, 51, 
	52, 53, 53, 13, 0, 55, 1, 0, 
	57, 55, 59, 61, 63, 57, 53, 57, 
	64, 65, 66, 65, 59, 57, 1, 1, 
	0, 6, 10, 12, 14, 14, 18, 0, 
	6, 1, 0, 23, 6, 28, 32, 34, 
	23, 14, 23, 35, 36, 37, 36, 28, 
	23, 0, 0, 0, 0, 68, 68, 0, 
	70, 71, 72, 70, 70, 73, 74, 75, 
	76, 76, 78, 79, 80, 70, 70, 70, 
	76, 81, 82, 72, 72, 73, 81, 84, 
	84, 81, 85, 86, 87, 89, 0, 90, 
	0, 91, 93, 94, 96, 98, 0, 1, 
	99, 0, 100, 101, 102, 0, 102
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 63;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 64;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 65;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 69;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 75;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 102;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 129;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 130;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 26 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 24 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 88 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 56 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 67 then
		begin

    trace('RELATIONSHIP start_relationship')
    p_start = p;
  		end
	when 22 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 21 then
		begin

    trace('SIMPLE_STATEMENT statement_subject')
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 69 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 97 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 33 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 47 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 27 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 43 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 62 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 95 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 92 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 42 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 77 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 54 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 60 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 83 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 58 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 86 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 89 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 98 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 49 then
		begin
 $stderr.puts "EOF!" 		end
	when 85 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 48 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 87 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 63 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 52 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 100 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 34 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 96 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 53 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 46 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 41 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 78 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 101 then
		begin

    trace('RELATIONSHIP stop_relationship')
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    trace('RELATIONSHIP relationship_end')
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 72 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 82 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 51 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 32 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 94 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 79 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 37 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 28 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 84 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 76 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 50 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 73 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'
require_relative '../tracer'

module BELParser
  module Parsers
    module Expression
      module SimpleStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp
          include BELParser::Parsers::Tracer

          def initialize(content)
            @content = content
      # begin: ragel
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 40, 9, 126, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 
	44, 47, 47, 10, 10, 
	9, 126, 33, 126, 10, 126, 
	0, 0, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 122, 9, 
	122, 9, 126, 0, 0, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 33, 126, 
	48, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 0, 0, 
	33, 126, 9, 126, 9, 
	40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 33, 126, 9, 126, 
	9, 40, 9, 126, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 126, 33, 126, 9, 44, 
	9, 126, 9, 126, 9, 
	126, 9, 122, 9, 122, 
	9, 126, 0, 0, 9, 126, 
	9, 126, 9, 126, 9, 
	126, 9, 126, 9, 126, 
	9, 126, 33, 126, 47, 47, 
	47, 47, 9, 32, 9, 
	47, 9, 47, 0, 0, 
	10, 10, 9, 126, 10, 126, 
	9, 44, 9, 44, 9, 
	126, 9, 34, 9, 34, 
	10, 92, 10, 92, 34, 92, 
	9, 44, 9, 47, 9, 
	47, 10, 47, 10, 10, 
	10, 10, 9, 126, 9, 126, 
	10, 126, 10, 126, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 126, 10, 126, 
	0, 0, 10, 122, 0, 
	0, 0, 0, 10, 10, 
	0, 0, 10, 122, 10, 122, 
	9, 122, 9, 122, 9, 
	34, 0, 0, 33, 126, 
	10, 10, 0, 0, 10, 126, 
	33, 126, 10, 10, 0, 
	0, 9, 32, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 94, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 24, 118, 
	118, 118, 118, 32, 118, 114, 26, 59, 
	59, 36, 36, 118, 94, 36, 1, 1, 
	118, 94, 117, 0, 118, 118, 114, 114, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 114, 114, 118, 0, 
	118, 118, 118, 118, 118, 118, 118, 94, 
	75, 26, 59, 59, 0, 114, 114, 26, 
	59, 59, 0, 94, 118, 32, 118, 114, 
	26, 59, 59, 36, 36, 118, 94, 36, 
	118, 118, 118, 114, 114, 118, 0, 118, 
	118, 118, 118, 118, 118, 118, 94, 118, 
	32, 118, 114, 26, 59, 59, 36, 36, 
	118, 94, 36, 118, 118, 118, 114, 114, 
	118, 0, 118, 118, 118, 118, 118, 118, 
	118, 94, 1, 1, 24, 39, 39, 0, 
	1, 118, 117, 36, 36, 118, 26, 26, 
	83, 83, 59, 36, 39, 39, 38, 1, 
	1, 118, 118, 117, 117, 118, 118, 114, 
	114, 118, 117, 0, 113, 0, 0, 1, 
	0, 113, 113, 114, 114, 26, 0, 94, 
	1, 0, 117, 94, 1, 0, 24
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 95, 214, 247, 366, 481, 508, 
	568, 628, 665, 702, 821, 916, 953, 978, 
	1097, 1216, 1335, 1454, 1487, 1606, 1721, 1748, 
	1808, 1868, 1905, 1942, 2061, 2156, 2193, 2195, 
	2197, 2316, 2411, 2529, 2530, 2649, 2768, 2883, 
	2998, 3117, 3236, 3355, 3474, 3593, 3712, 3831, 
	3950, 4069, 4188, 4307, 4426, 4541, 4656, 4775, 
	4776, 4895, 5014, 5133, 5252, 5371, 5490, 5609, 
	5704, 5780, 5807, 5867, 5927, 5928, 6043, 6158, 
	6185, 6245, 6305, 6306, 6401, 6520, 6553, 6672, 
	6787, 6814, 6874, 6934, 6971, 7008, 7127, 7222, 
	7259, 7378, 7497, 7616, 7731, 7846, 7965, 7966, 
	8085, 8204, 8323, 8442, 8561, 8680, 8799, 8894, 
	9013, 9046, 9165, 9280, 9307, 9367, 9427, 9464, 
	9501, 9620, 9715, 9752, 9871, 9990, 10109, 10224, 
	10339, 10458, 10459, 10578, 10697, 10816, 10935, 11054, 
	11173, 11292, 11387, 11389, 11391, 11416, 11456, 11496, 
	11497, 11499, 11618, 11736, 11773, 11810, 11929, 11956, 
	11983, 12067, 12151, 12211, 12248, 12288, 12328, 12367, 
	12369, 12371, 12490, 12609, 12727, 12845, 12964, 13083, 
	13198, 13313, 13432, 13550, 13551, 13665, 13666, 13667, 
	13669, 13670, 13784, 13898, 14013, 14128, 14155, 14156, 
	14251, 14253, 14254, 14372, 14467, 14469, 14470
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	1, 3, 3, 3, 3, 1, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 8, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 8, 10, 
	11, 10, 10, 10, 10, 7, 7, 10, 
	10, 10, 10, 10, 10, 10, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	10, 10, 10, 10, 10, 10, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 12, 10, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 10, 10, 10, 10, 7, 8, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 8, 7, 11, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 7, 
	7, 7, 7, 7, 7, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 7, 7, 7, 13, 7, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	7, 9, 9, 9, 9, 9, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	9, 14, 11, 14, 16, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 17, 15, 
	19, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 20, 18, 21, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 21, 14, 14, 14, 14, 
	14, 14, 14, 14, 22, 14, 14, 23, 
	14, 24, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	24, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 25, 1, 25, 9, 
	9, 9, 9, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 25, 10, 11, 
	10, 10, 10, 10, 7, 7, 10, 10, 
	10, 10, 10, 10, 10, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 10, 
	10, 10, 10, 10, 10, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 26, 10, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	10, 10, 10, 10, 7, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 24, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 24, 1, 1, 1, 1, 
	1, 1, 1, 1, 29, 1, 1, 25, 
	1, 30, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	30, 1, 31, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 31, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	1, 33, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	33, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 1, 
	33, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 33, 
	34, 1, 34, 34, 34, 34, 1, 1, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 1, 35, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 35, 36, 
	1, 36, 36, 36, 36, 1, 37, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 1, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 38, 1, 1, 
	1, 1, 1, 1, 1, 39, 1, 40, 
	41, 41, 41, 41, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 40, 42, 
	43, 42, 42, 42, 42, 7, 7, 42, 
	42, 42, 42, 42, 42, 42, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 44, 42, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 42, 42, 42, 42, 7, 40, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 40, 7, 43, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 7, 
	7, 7, 7, 7, 7, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 7, 7, 7, 45, 7, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	7, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 47, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 48, 46, 
	50, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 51, 49, 52, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 52, 14, 14, 14, 14, 
	14, 14, 14, 14, 53, 14, 14, 54, 
	14, 55, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	55, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 56, 1, 56, 41, 
	41, 41, 41, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 56, 42, 43, 
	42, 42, 42, 42, 7, 7, 42, 42, 
	42, 42, 42, 42, 42, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 42, 
	42, 42, 42, 42, 42, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 57, 42, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	42, 42, 42, 42, 7, 58, 1, 58, 
	58, 58, 58, 1, 59, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 1, 55, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 55, 1, 1, 1, 1, 
	1, 1, 1, 1, 60, 1, 1, 56, 
	1, 61, 1, 1, 62, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	66, 58, 58, 58, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 68, 58, 
	58, 58, 58, 58, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 67, 58, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 58, 
	58, 58, 58, 63, 58, 1, 58, 58, 
	58, 58, 1, 59, 58, 58, 58, 58, 
	58, 58, 69, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 70, 62, 70, 70, 70, 70, 
	62, 71, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	62, 49, 56, 41, 41, 41, 41, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 56, 42, 43, 42, 42, 42, 42, 
	7, 59, 42, 42, 42, 42, 42, 42, 
	42, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 42, 42, 42, 42, 42, 
	42, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	57, 42, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 42, 42, 42, 42, 
	7, 72, 73, 73, 73, 73, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	72, 58, 74, 58, 58, 58, 58, 7, 
	59, 75, 58, 58, 76, 58, 58, 58, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 58, 58, 58, 58, 58, 58, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 77, 
	58, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 58, 58, 58, 58, 7, 
	78, 41, 41, 41, 41, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 78, 
	7, 43, 7, 7, 7, 7, 7, 7, 
	79, 7, 7, 80, 7, 7, 7, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 7, 7, 7, 7, 7, 7, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 7, 7, 7, 45, 7, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 63, 63, 63, 63, 63, 
	63, 63, 63, 81, 63, 63, 82, 63, 
	63, 63, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 63, 63, 63, 63, 
	63, 63, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 63, 63, 
	63, 83, 63, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 63, 64, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 64, 58, 63, 
	58, 58, 58, 58, 63, 59, 65, 58, 
	58, 66, 58, 58, 58, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 58, 
	58, 58, 58, 58, 58, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 84, 58, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	58, 58, 58, 58, 63, 64, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 64, 58, 63, 58, 
	58, 58, 58, 63, 59, 65, 58, 58, 
	85, 58, 58, 58, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 87, 58, 
	58, 58, 58, 58, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 86, 58, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 58, 
	58, 58, 58, 63, 56, 41, 41, 41, 
	41, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 56, 42, 43, 42, 42, 
	42, 42, 7, 59, 42, 42, 42, 42, 
	42, 42, 42, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 42, 42, 42, 
	42, 42, 42, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 88, 42, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 42, 42, 
	42, 42, 7, 64, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 64, 58, 63, 58, 58, 58, 
	58, 63, 59, 65, 58, 58, 85, 58, 
	58, 58, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 90, 58, 58, 58, 
	58, 58, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 89, 58, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 58, 58, 58, 
	58, 63, 72, 73, 73, 73, 73, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 72, 58, 74, 58, 58, 58, 58, 
	7, 59, 75, 58, 58, 91, 58, 58, 
	58, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 58, 58, 58, 58, 58, 
	58, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	92, 58, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 58, 58, 58, 58, 
	7, 64, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	64, 58, 63, 58, 58, 58, 58, 63, 
	59, 65, 58, 58, 85, 58, 58, 58, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 58, 58, 58, 58, 58, 58, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 93, 
	58, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 58, 58, 58, 58, 63, 
	72, 73, 73, 73, 73, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 72, 
	58, 74, 58, 58, 58, 58, 7, 59, 
	75, 58, 58, 91, 58, 58, 58, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 58, 58, 58, 58, 58, 58, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 94, 58, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 58, 58, 58, 58, 7, 64, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 64, 58, 
	63, 58, 58, 58, 58, 63, 59, 65, 
	58, 58, 85, 58, 58, 58, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	58, 58, 58, 58, 58, 58, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 95, 58, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 58, 58, 58, 58, 63, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 98, 27, 27, 27, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 100, 
	27, 27, 27, 27, 27, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 99, 27, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	27, 27, 27, 27, 63, 30, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 30, 27, 1, 27, 
	27, 27, 27, 1, 28, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 1, 25, 9, 9, 9, 
	9, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 25, 10, 11, 10, 10, 
	10, 10, 7, 28, 10, 10, 10, 10, 
	10, 10, 10, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 10, 10, 10, 
	10, 10, 10, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 26, 10, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 10, 10, 
	10, 10, 7, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 105, 27, 
	27, 27, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 27, 27, 27, 27, 
	27, 27, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 106, 27, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 27, 27, 27, 
	27, 7, 107, 9, 9, 9, 9, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 107, 7, 11, 7, 7, 7, 7, 
	7, 7, 108, 7, 7, 109, 7, 7, 
	7, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 7, 7, 7, 7, 7, 
	7, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 7, 7, 7, 
	13, 7, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 7, 96, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 110, 63, 63, 
	111, 63, 63, 63, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 63, 63, 
	63, 63, 63, 63, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	63, 63, 63, 112, 63, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 63, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 98, 27, 27, 27, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 27, 27, 27, 27, 27, 27, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 113, 27, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 27, 27, 27, 27, 63, 18, 
	96, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 96, 
	27, 63, 27, 27, 27, 27, 63, 28, 
	97, 27, 27, 114, 27, 27, 27, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 116, 27, 27, 27, 27, 27, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 115, 27, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 27, 27, 27, 27, 63, 25, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 25, 10, 
	11, 10, 10, 10, 10, 7, 28, 10, 
	10, 10, 10, 10, 10, 10, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	10, 10, 10, 10, 10, 10, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 117, 10, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 10, 10, 10, 10, 7, 96, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 96, 27, 63, 
	27, 27, 27, 27, 63, 28, 97, 27, 
	27, 114, 27, 27, 27, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 119, 
	27, 27, 27, 27, 27, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 118, 27, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	27, 27, 27, 27, 63, 101, 102, 102, 
	102, 102, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 101, 27, 103, 27, 
	27, 27, 27, 7, 28, 104, 27, 27, 
	120, 27, 27, 27, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 27, 27, 
	27, 27, 27, 27, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 121, 27, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 27, 
	27, 27, 27, 7, 96, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 96, 27, 63, 27, 27, 
	27, 27, 63, 28, 97, 27, 27, 114, 
	27, 27, 27, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 27, 27, 27, 
	27, 27, 27, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 122, 27, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 27, 27, 
	27, 27, 63, 101, 102, 102, 102, 102, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 101, 27, 103, 27, 27, 27, 
	27, 7, 28, 104, 27, 27, 120, 27, 
	27, 27, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 27, 27, 27, 27, 
	27, 27, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 123, 27, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 27, 27, 27, 
	27, 7, 96, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 96, 27, 63, 27, 27, 27, 27, 
	63, 28, 97, 27, 27, 114, 27, 27, 
	27, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 27, 27, 27, 27, 27, 
	27, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	124, 27, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 27, 27, 27, 27, 
	63, 126, 125, 126, 126, 126, 126, 125, 
	125, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 125, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 1, 1, 1, 1, 1, 1, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 1, 1, 1, 127, 
	1, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 1, 129, 129, 129, 129, 
	129, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 129, 128, 130, 128, 132, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 133, 131, 135, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 136, 134, 134, 
	137, 138, 138, 138, 138, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 137, 
	7, 139, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 7, 7, 7, 7, 7, 7, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 7, 7, 7, 140, 7, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 7, 137, 138, 138, 138, 138, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 137, 7, 139, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 7, 7, 7, 7, 
	7, 7, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 7, 7, 
	7, 141, 7, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 7, 138, 138, 
	138, 138, 138, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 138, 14, 139, 
	14, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 146, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 147, 
	145, 145, 148, 1, 148, 148, 148, 148, 
	1, 1, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	1, 149, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	149, 150, 1, 150, 150, 150, 150, 1, 
	151, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 1, 
	152, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 152, 
	1, 1, 1, 1, 1, 1, 1, 153, 
	1, 154, 155, 155, 155, 155, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	154, 156, 157, 156, 156, 156, 156, 7, 
	7, 156, 156, 156, 156, 156, 156, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 158, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 7, 
	154, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 154, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 155, 155, 155, 155, 155, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 155, 14, 157, 14, 161, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	162, 160, 164, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 165, 163, 166, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 166, 14, 14, 
	14, 14, 14, 14, 14, 14, 167, 14, 
	14, 168, 14, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 170, 1, 
	170, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 170, 
	156, 157, 156, 156, 156, 156, 7, 7, 
	156, 156, 156, 156, 156, 156, 156, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 156, 156, 156, 156, 156, 156, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 171, 156, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 156, 156, 156, 156, 7, 172, 
	1, 172, 172, 172, 172, 1, 173, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 169, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 169, 1, 1, 
	1, 1, 1, 1, 1, 1, 174, 1, 
	1, 170, 1, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 172, 63, 172, 172, 172, 
	172, 63, 173, 176, 172, 172, 177, 172, 
	172, 172, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 179, 172, 172, 172, 
	172, 172, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 178, 172, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 172, 172, 172, 
	172, 63, 170, 155, 155, 155, 155, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 170, 156, 157, 156, 156, 156, 156, 
	7, 173, 156, 156, 156, 156, 156, 156, 
	156, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 156, 156, 156, 156, 156, 
	156, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	171, 156, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 156, 156, 156, 156, 
	7, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 184, 172, 172, 172, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 172, 172, 172, 172, 172, 172, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 185, 
	172, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 172, 172, 172, 172, 7, 
	186, 155, 155, 155, 155, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 186, 
	7, 157, 7, 7, 7, 7, 7, 7, 
	187, 7, 7, 188, 7, 7, 7, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 7, 7, 7, 7, 7, 7, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 7, 7, 7, 159, 7, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 7, 175, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 189, 63, 63, 190, 63, 
	63, 63, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 63, 63, 63, 63, 
	63, 63, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 63, 63, 
	63, 191, 63, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 63, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 177, 172, 172, 172, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 172, 
	172, 172, 172, 172, 172, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 192, 172, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	172, 172, 172, 172, 63, 163, 175, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 175, 172, 63, 
	172, 172, 172, 172, 63, 173, 176, 172, 
	172, 193, 172, 172, 172, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 195, 
	172, 172, 172, 172, 172, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 194, 172, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	172, 172, 172, 172, 63, 170, 155, 155, 
	155, 155, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 170, 156, 157, 156, 
	156, 156, 156, 7, 173, 156, 156, 156, 
	156, 156, 156, 156, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 156, 156, 
	156, 156, 156, 156, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 196, 156, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 156, 
	156, 156, 156, 7, 175, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 175, 172, 63, 172, 172, 
	172, 172, 63, 173, 176, 172, 172, 193, 
	172, 172, 172, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 198, 172, 172, 
	172, 172, 172, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 197, 172, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 172, 172, 
	172, 172, 63, 180, 181, 181, 181, 181, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 180, 172, 182, 172, 172, 172, 
	172, 7, 173, 183, 172, 172, 199, 172, 
	172, 172, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 172, 172, 172, 172, 
	172, 172, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 200, 172, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 172, 172, 172, 
	172, 7, 175, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 175, 172, 63, 172, 172, 172, 172, 
	63, 173, 176, 172, 172, 193, 172, 172, 
	172, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 172, 172, 172, 172, 172, 
	172, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	201, 172, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 172, 172, 172, 172, 
	63, 180, 181, 181, 181, 181, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	180, 172, 182, 172, 172, 172, 172, 7, 
	173, 183, 172, 172, 199, 172, 172, 172, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 172, 172, 172, 172, 172, 172, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 202, 
	172, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 172, 172, 172, 172, 7, 
	175, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 175, 
	172, 63, 172, 172, 172, 172, 63, 173, 
	176, 172, 172, 193, 172, 172, 172, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 172, 172, 172, 172, 172, 172, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 203, 172, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 172, 172, 172, 172, 63, 204, 
	1, 204, 204, 204, 204, 1, 1, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 1, 205, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 205, 206, 1, 
	206, 206, 206, 206, 1, 207, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 1, 208, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 208, 1, 1, 1, 
	1, 1, 1, 1, 209, 1, 210, 211, 
	211, 211, 211, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 210, 212, 213, 
	212, 212, 212, 212, 7, 7, 212, 212, 
	212, 212, 212, 212, 212, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 212, 
	212, 212, 212, 212, 212, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 214, 212, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	212, 212, 212, 212, 7, 210, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 210, 7, 213, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	211, 211, 211, 211, 211, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 211, 
	14, 213, 14, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 220, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 221, 219, 222, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 222, 14, 14, 14, 14, 14, 
	14, 14, 14, 223, 14, 14, 224, 14, 
	225, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 225, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 226, 1, 226, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 226, 212, 213, 212, 
	212, 212, 212, 7, 7, 212, 212, 212, 
	212, 212, 212, 212, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 212, 212, 
	212, 212, 212, 212, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 227, 212, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 212, 
	212, 212, 212, 7, 228, 1, 228, 228, 
	228, 228, 1, 229, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 1, 225, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 225, 1, 1, 1, 1, 1, 
	1, 1, 1, 230, 1, 1, 226, 1, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	228, 63, 228, 228, 228, 228, 63, 229, 
	232, 228, 228, 233, 228, 228, 228, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 235, 228, 228, 228, 228, 228, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 234, 228, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 228, 228, 228, 228, 63, 226, 
	211, 211, 211, 211, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 226, 212, 
	213, 212, 212, 212, 212, 7, 229, 212, 
	212, 212, 212, 212, 212, 212, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	212, 212, 212, 212, 212, 212, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 227, 212, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 212, 212, 212, 212, 7, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 240, 228, 228, 228, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 228, 
	228, 228, 228, 228, 228, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 241, 228, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	228, 228, 228, 228, 7, 242, 211, 211, 
	211, 211, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 242, 7, 213, 7, 
	7, 7, 7, 7, 7, 243, 7, 7, 
	244, 7, 7, 7, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 7, 7, 
	7, 7, 7, 7, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	7, 7, 7, 215, 7, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 7, 
	231, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	245, 63, 63, 246, 63, 63, 63, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 63, 63, 63, 63, 63, 63, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 63, 63, 63, 247, 63, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 63, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 233, 228, 
	228, 228, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 228, 228, 228, 228, 
	228, 228, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 248, 228, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 228, 228, 228, 
	228, 63, 219, 231, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 231, 228, 63, 228, 228, 228, 
	228, 63, 229, 232, 228, 228, 249, 228, 
	228, 228, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 251, 228, 228, 228, 
	228, 228, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 250, 228, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 228, 228, 228, 
	228, 63, 226, 211, 211, 211, 211, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 226, 212, 213, 212, 212, 212, 212, 
	7, 229, 212, 212, 212, 212, 212, 212, 
	212, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 212, 212, 212, 212, 212, 
	212, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	252, 212, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 212, 212, 212, 212, 
	7, 231, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	231, 228, 63, 228, 228, 228, 228, 63, 
	229, 232, 228, 228, 249, 228, 228, 228, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 254, 228, 228, 228, 228, 228, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 253, 
	228, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 228, 228, 228, 228, 63, 
	236, 237, 237, 237, 237, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 236, 
	228, 238, 228, 228, 228, 228, 7, 229, 
	239, 228, 228, 255, 228, 228, 228, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 228, 228, 228, 228, 228, 228, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 256, 228, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 228, 228, 228, 228, 7, 231, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 231, 228, 
	63, 228, 228, 228, 228, 63, 229, 232, 
	228, 228, 249, 228, 228, 228, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	228, 228, 228, 228, 228, 228, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 257, 228, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 228, 228, 228, 228, 63, 236, 237, 
	237, 237, 237, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 236, 228, 238, 
	228, 228, 228, 228, 7, 229, 239, 228, 
	228, 255, 228, 228, 228, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 228, 
	228, 228, 228, 228, 228, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 258, 228, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	228, 228, 228, 228, 7, 231, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 231, 228, 63, 228, 
	228, 228, 228, 63, 229, 232, 228, 228, 
	249, 228, 228, 228, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 228, 228, 
	228, 228, 228, 228, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 259, 228, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 228, 
	228, 228, 228, 63, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 1, 261, 1, 262, 1, 264, 
	1, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 264, 263, 
	265, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 265, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 267, 1, 
	268, 266, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 268, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 269, 1, 
	1, 271, 270, 265, 266, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 265, 58, 1, 58, 58, 58, 
	58, 1, 59, 58, 58, 58, 58, 58, 
	58, 272, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 273, 270, 273, 273, 273, 273, 270, 
	274, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 270, 
	275, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 275, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	276, 270, 270, 277, 270, 275, 271, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 275, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	277, 270, 277, 278, 279, 279, 279, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 277, 280, 281, 280, 280, 280, 280, 
	270, 270, 280, 280, 280, 280, 280, 280, 
	280, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 280, 280, 280, 280, 280, 
	280, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	282, 280, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 280, 280, 280, 280, 
	270, 41, 41, 41, 41, 41, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	41, 14, 43, 14, 279, 278, 279, 279, 
	279, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 279, 270, 281, 270, 284, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 285, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 286, 283, 288, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 289, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 290, 287, 50, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 51, 49, 291, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 291, 270, 270, 270, 270, 270, 
	270, 270, 270, 292, 270, 270, 293, 270, 
	294, 295, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 294, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 296, 270, 
	297, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 297, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 298, 270, 
	271, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 299, 270, 271, 
	62, 288, 287, 300, 271, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 300, 273, 270, 273, 273, 273, 
	273, 270, 274, 301, 273, 273, 302, 273, 
	273, 273, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 304, 273, 273, 273, 
	273, 273, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 303, 273, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 273, 273, 273, 
	273, 270, 294, 295, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 294, 273, 270, 273, 273, 273, 273, 
	270, 274, 273, 273, 273, 273, 273, 273, 
	305, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	270, 271, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	273, 270, 273, 273, 273, 273, 270, 274, 
	273, 273, 273, 273, 273, 273, 306, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 270, 271, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 70, 62, 
	70, 70, 70, 70, 62, 71, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 62, 277, 278, 279, 
	279, 279, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 277, 280, 281, 280, 
	280, 280, 280, 270, 274, 280, 280, 280, 
	280, 280, 280, 280, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 280, 280, 
	280, 280, 280, 280, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 282, 280, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 280, 
	280, 280, 280, 270, 307, 308, 309, 309, 
	309, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 307, 273, 310, 273, 273, 
	273, 273, 270, 274, 311, 273, 273, 312, 
	273, 273, 273, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 273, 273, 273, 
	273, 273, 273, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 313, 273, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 313, 273, 273, 
	273, 273, 270, 314, 278, 279, 279, 279, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 314, 270, 281, 270, 270, 270, 
	270, 270, 270, 315, 270, 270, 316, 270, 
	270, 270, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 270, 270, 270, 270, 
	270, 270, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 270, 270, 
	270, 317, 270, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 270, 300, 271, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 300, 270, 270, 
	270, 270, 270, 270, 270, 270, 318, 270, 
	270, 319, 270, 270, 270, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 270, 
	270, 270, 270, 270, 270, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 270, 270, 270, 320, 270, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	270, 300, 271, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	300, 273, 270, 273, 273, 273, 273, 270, 
	274, 301, 273, 273, 302, 273, 273, 273, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 273, 273, 273, 273, 273, 273, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 321, 
	273, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 273, 273, 273, 273, 270, 
	322, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 323, 
	125, 323, 323, 323, 323, 125, 125, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 125, 1, 325, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 324, 
	324, 324, 324, 324, 324, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 324, 324, 326, 324, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	324, 324, 128, 327, 14, 1, 328, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 63, 63, 
	63, 63, 63, 63, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	63, 63, 63, 329, 63, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 63, 
	328, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 63, 63, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	331, 63, 63, 63, 63, 63, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 63, 63, 63, 330, 63, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	330, 63, 332, 333, 334, 334, 334, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 332, 7, 335, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 7, 7, 7, 7, 7, 
	7, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 7, 7, 7, 
	336, 7, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 7, 337, 338, 138, 
	138, 138, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 337, 7, 139, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 7, 7, 
	7, 7, 7, 7, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	7, 7, 7, 141, 7, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 7, 
	138, 138, 138, 138, 138, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 138, 
	14, 139, 14, 1, 172, 1, 172, 172, 
	172, 172, 1, 173, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 1, 339, 1, 1, 339, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 228, 1, 228, 
	228, 228, 228, 1, 229, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 1, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 1, 342, 341, 1, 264, 342, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 264, 263, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 2, 4, 3, 4, 0, 
	5, 6, 12, 7, 56, 53, 0, 8, 
	9, 55, 8, 9, 55, 10, 14, 11, 
	10, 11, 48, 12, 13, 14, 15, 15, 
	16, 17, 18, 19, 18, 20, 19, 20, 
	21, 22, 28, 23, 41, 39, 24, 25, 
	35, 24, 25, 35, 26, 133, 27, 26, 
	27, 32, 28, 29, 133, 31, 136, 0, 
	26, 137, 36, 32, 37, 34, 138, 139, 
	38, 22, 23, 137, 36, 40, 38, 133, 
	27, 133, 27, 39, 40, 42, 41, 46, 
	43, 43, 44, 42, 45, 45, 47, 47, 
	10, 49, 50, 48, 51, 52, 6, 7, 
	49, 50, 54, 52, 14, 11, 14, 11, 
	53, 54, 57, 56, 61, 58, 58, 59, 
	57, 60, 60, 62, 62, 0, 162, 164, 
	0, 65, 66, 67, 166, 68, 67, 166, 
	68, 70, 71, 72, 170, 169, 73, 167, 
	74, 73, 167, 74, 76, 77, 76, 78, 
	77, 78, 79, 80, 86, 81, 95, 92, 
	82, 83, 94, 82, 83, 94, 84, 174, 
	85, 84, 85, 88, 86, 87, 174, 84, 
	175, 89, 88, 90, 91, 80, 81, 175, 
	89, 93, 91, 174, 85, 174, 85, 92, 
	93, 96, 95, 100, 97, 97, 98, 96, 
	99, 99, 101, 101, 103, 104, 103, 105, 
	104, 105, 106, 107, 113, 108, 122, 119, 
	109, 110, 121, 109, 110, 121, 111, 176, 
	112, 111, 112, 115, 113, 114, 176, 111, 
	178, 116, 115, 117, 118, 107, 108, 178, 
	116, 120, 118, 176, 112, 176, 112, 119, 
	120, 123, 122, 127, 124, 124, 125, 123, 
	126, 126, 128, 128, 179, 131, 132, 180, 
	182, 134, 135, 30, 134, 30, 136, 135, 
	33, 138, 139, 140, 148, 141, 142, 143, 
	138, 144, 153, 145, 146, 147, 152, 145, 
	146, 147, 152, 140, 148, 141, 149, 135, 
	150, 149, 150, 151, 140, 154, 157, 153, 
	158, 155, 156, 159, 142, 143, 144, 154, 
	157, 161, 159, 148, 141, 160, 148, 141, 
	160, 161, 163, 162, 0, 165, 164, 168, 
	168, 169, 170, 171, 172, 173, 71, 72, 
	169, 172, 173, 177, 179, 180, 181
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 0, 4, 0, 5, 7, 
	0, 0, 8, 0, 9, 11, 13, 15, 
	16, 15, 0, 17, 0, 19, 19, 19, 
	0, 0, 9, 0, 20, 0, 21, 0, 
	0, 0, 2, 3, 0, 4, 0, 5, 
	0, 0, 8, 0, 9, 11, 15, 16, 
	15, 0, 17, 0, 19, 19, 19, 0, 
	0, 9, 0, 20, 0, 0, 22, 24, 
	25, 25, 25, 0, 26, 0, 22, 27, 
	29, 30, 30, 29, 29, 31, 33, 33, 
	33, 25, 25, 0, 0, 25, 0, 26, 
	9, 0, 26, 29, 31, 0, 31, 0, 
	25, 25, 25, 0, 26, 29, 30, 30, 
	29, 29, 31, 33, 33, 33, 25, 25, 
	0, 0, 25, 0, 26, 9, 0, 26, 
	29, 31, 0, 31, 0, 38, 8, 11, 
	40, 0, 0, 15, 42, 15, 0, 43, 
	0, 0, 0, 0, 11, 11, 15, 16, 
	15, 0, 17, 0, 47, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 54, 
	19, 0, 0, 9, 0, 20, 56, 25, 
	58, 25, 0, 26, 29, 30, 30, 60, 
	29, 31, 33, 62, 33, 58, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 2, 3, 0, 4, 
	0, 5, 0, 0, 8, 0, 9, 11, 
	15, 16, 15, 0, 17, 0, 19, 19, 
	19, 0, 0, 9, 0, 20, 0, 25, 
	25, 25, 0, 26, 29, 30, 30, 29, 
	29, 31, 33, 33, 33, 25, 25, 0, 
	0, 25, 0, 26, 9, 0, 26, 29, 
	31, 0, 31, 0, 67, 0, 0, 22, 
	22, 69, 68, 69, 0, 0, 0, 70, 
	69, 0, 20, 0, 0, 0, 70, 0, 
	8, 0, 9, 15, 77, 16, 15, 0, 
	70, 17, 0, 19, 19, 19, 69, 80, 
	69, 0, 0, 0, 25, 25, 25, 0, 
	26, 69, 0, 29, 83, 30, 30, 29, 
	29, 31, 33, 33, 33, 11, 25, 25, 
	0, 0, 3, 0, 88, 26, 0, 90, 
	92, 0, 0, 26, 30, 95, 30, 30, 
	31, 0, 97, 99, 0, 0, 102
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	0, 1, 1, 0, 6, 10, 12, 14, 
	14, 18, 0, 6, 1, 0, 0, 0, 
	23, 1, 1, 14, 6, 28, 32, 34, 
	23, 23, 35, 36, 37, 36, 28, 23, 
	23, 1, 6, 28, 32, 34, 23, 14, 
	23, 35, 36, 37, 36, 28, 23, 38, 
	0, 39, 41, 41, 41, 44, 44, 45, 
	46, 46, 46, 1, 48, 49, 50, 51, 
	52, 53, 53, 13, 0, 55, 1, 0, 
	57, 55, 59, 61, 63, 57, 53, 57, 
	64, 65, 66, 65, 59, 57, 1, 1, 
	0, 6, 10, 12, 14, 14, 18, 0, 
	6, 1, 0, 23, 6, 28, 32, 34, 
	23, 14, 23, 35, 36, 37, 36, 28, 
	23, 0, 0, 0, 0, 68, 68, 0, 
	70, 71, 72, 70, 70, 73, 74, 75, 
	76, 76, 78, 79, 80, 70, 70, 70, 
	76, 81, 82, 72, 72, 73, 81, 84, 
	84, 81, 85, 86, 87, 89, 0, 90, 
	0, 91, 93, 94, 96, 98, 0, 1, 
	99, 0, 100, 101, 102, 0, 102
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 133;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 63;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 64;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 65;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 69;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 75;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 102;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 129;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 130;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


      # end: ragel
          end

          def each
            @buffers    = {}
            @incomplete = {}
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 8 then
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 11 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 26 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 24 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 88 then
		begin

    trace('IDENTIFIER ident_node_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 15 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 56 then
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 67 then
		begin

    trace('RELATIONSHIP start_relationship')
    p_start = p;
  		end
	when 22 then
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 21 then
		begin

    trace('SIMPLE_STATEMENT statement_subject')
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 69 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 4 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM term_fx')
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 20 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
	when 9 then
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 17 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 97 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 33 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('IDENTIFIER start_identifier')
    @identifier_started = true
    id_start = p;
  		end
	when 2 then
		begin

    trace('TERM term_init')
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 47 then
		begin

    trace('TERM inner_term_init')
    @buffers[:term_stack] << term()
  		end
		begin

    trace('FUNCTION start_function')
    @function_started = true
    p_start = p;
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 27 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('TERM fxbt')
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 75
		_goto_level = _again
		next
	end

  		end
		begin

    trace('COMMENT start_comment')
    p_start = p;
  		end
	when 16 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 43 then
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 19 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 62 then
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 95 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 92 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 25 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 42 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('STRING stop_string')
    @string_closed = true
    p_end = p
  		end
		begin

    trace('STRING string_end')
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    trace('STRING yield_string')
    yield @buffers[:string]
  		end
	when 77 then
		begin

    trace('STRING start_string')
    @string_opened = true
    p_start = p
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 54 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 60 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 83 then
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 58 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM term_argument')
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    trace('TERM fxret')
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 38 then
		begin

    trace('FUNCTION function_node_err')
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 86 then
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 89 then
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 98 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 49 then
		begin
 $stderr.puts "EOF!" 		end
	when 85 then
		begin

    trace('FUNCTION end_function')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    trace('FUNCTION yield_function')
    yield @buffers[:function]
  		end
	when 48 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 87 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER yield_identifier')
    yield @buffers[:ident]
  		end
	when 63 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 52 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 45 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 18 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 39 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 74 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 99 then
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 68 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 65 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 100 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('TERM outer_term_end')
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 57 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 61 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 34 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 96 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 53 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 46 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 41 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 78 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 90 then
		begin

    trace('PARAMETER add_string_param_value')
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 101 then
		begin

    trace('RELATIONSHIP stop_relationship')
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    trace('RELATIONSHIP relationship_end')
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 102 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('COMMENT comment_end')
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    trace('COMMENT yield_comment')
    yield @buffers[:comment] || comment(nil)
  		end
	when 70 then
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 80 then
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 66 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 36 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 72 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 82 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 59 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 51 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 44 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 32 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 94 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_prefix')
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 79 then
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 64 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 37 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 91 then
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 93 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER end_identifier')
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    trace('PARAMETER add_ident_param_value')
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    trace('PARAMETER parameter_end')
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        trace('PN incomplete')
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        trace('VN incomplete')
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('PARAMETER yield_parameter')
    yield @buffers[:parameter]
  		end
	when 55 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 10 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 28 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 84 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 75 then
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 35 then
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 76 then
		begin

    trace('STRING eof_string')
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 50 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    trace('IDENTIFIER an_ident_err')
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 73 then
		begin

    trace('IDENTIFIER an_ident_eof')
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    trace('TERM eof_parameter_argument')
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    trace('FUNCTION a_function_eof')
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin

    trace('COMMENT stop_comment')
    p_end = p;
  		end
		begin

    trace('SIMPLE_STATEMENT statement_object')
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    trace('YIELD_SIMPLE_STATEMENT')
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::SimpleStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
