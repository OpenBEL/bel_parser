
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 
	10, 10, 10, 92, 92, 
	9, 122, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 39, 39, 1, 1, 1, 1, 
	114, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1233, 1348, 1381, 1496, 1611, 1671, 1708, 1745, 
	1860, 1975, 2012, 2052, 2092, 2094, 2096, 2098, 
	2100, 2215, 2217, 2332, 2408, 2522, 2524, 2584, 
	2586, 2588, 2703, 2818, 2878, 2880, 2882, 2996, 
	3110, 3186, 3301, 3334, 3449, 3564, 3624, 3661, 
	3698, 3813, 3928, 3965, 3967, 4082, 4158, 4273, 
	4306, 4421, 4536, 4596, 4633, 4670, 4785, 4900, 
	4937, 4939, 4941, 5056, 5151, 5269, 5308, 5310, 
	5312, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 
	5321
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 0, 
	0, 0, 0, 0, 0, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 0, 0, 0, 38, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 39, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	39, 0, 0, 0, 0, 0, 0, 0, 
	40, 0, 0, 0, 0, 0, 0, 0, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 0, 0, 0, 0, 0, 0, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 0, 0, 0, 41, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 42, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 42, 6, 6, 6, 6, 
	6, 6, 6, 43, 6, 44, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 44, 8, 45, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 8, 8, 
	8, 8, 8, 8, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	8, 8, 8, 46, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	44, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 44, 
	12, 45, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 12, 12, 12, 12, 12, 12, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 12, 12, 12, 47, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 49, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 50, 48, 51, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 51, 17, 
	17, 17, 17, 17, 17, 17, 17, 52, 
	17, 17, 53, 17, 54, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 54, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 55, 
	6, 55, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	55, 8, 45, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 8, 8, 8, 8, 8, 8, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 8, 8, 8, 46, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 57, 58, 23, 23, 59, 
	23, 23, 23, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 61, 23, 23, 
	23, 23, 23, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 23, 
	23, 23, 60, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 54, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 54, 30, 
	30, 30, 30, 30, 30, 30, 30, 62, 
	30, 30, 55, 30, 63, 64, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 63, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 65, 30, 66, 67, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 66, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 6, 6, 70, 
	72, 71, 50, 48, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 23, 58, 23, 23, 59, 
	23, 23, 23, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 23, 23, 23, 
	23, 23, 23, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 23, 
	23, 23, 73, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 23, 23, 23, 23, 23, 23, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 23, 23, 23, 74, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 75, 75, 
	75, 75, 75, 75, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 76, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	77, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	75, 75, 75, 75, 75, 75, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 75, 75, 75, 78, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 80, 79, 82, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 83, 81, 
	84, 79, 83, 81, 85, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 85, 8, 86, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 8, 8, 8, 
	8, 8, 8, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 8, 
	8, 8, 87, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 85, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 85, 12, 
	86, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	12, 12, 12, 12, 12, 12, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 12, 12, 12, 88, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 90, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 89, 93, 92, 
	91, 89, 94, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 0, 0, 0, 0, 0, 0, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 0, 0, 0, 95, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 94, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 97, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	0, 0, 0, 0, 0, 0, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 0, 0, 0, 98, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 99, 0, 0, 0, 0, 0, 0, 
	0, 100, 0, 0, 0, 0, 0, 0, 
	0, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 0, 0, 0, 0, 0, 
	0, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 0, 0, 0, 
	101, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 102, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 102, 6, 6, 6, 
	6, 6, 6, 6, 103, 6, 104, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 8, 105, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 8, 
	8, 8, 8, 8, 8, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 8, 8, 8, 106, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 104, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	104, 12, 105, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 12, 12, 12, 12, 12, 12, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 12, 12, 12, 107, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 109, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 110, 108, 
	111, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	112, 17, 17, 113, 17, 114, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 114, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	115, 6, 115, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 115, 8, 105, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 8, 8, 8, 8, 8, 
	8, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 8, 8, 8, 
	106, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 116, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 116, 23, 23, 23, 
	23, 23, 23, 23, 117, 118, 23, 23, 
	119, 23, 23, 23, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 121, 23, 
	23, 23, 23, 23, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	23, 23, 23, 120, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	114, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 114, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	122, 30, 30, 115, 30, 110, 108, 116, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 116, 23, 
	23, 23, 23, 23, 23, 23, 23, 118, 
	23, 23, 119, 23, 23, 23, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	23, 23, 23, 23, 23, 23, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 23, 23, 23, 123, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 0, 0, 0, 0, 
	0, 0, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 0, 0, 
	0, 124, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 125, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 125, 0, 0, 
	0, 0, 0, 0, 0, 126, 0, 0, 
	0, 0, 0, 0, 0, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 0, 
	0, 0, 0, 0, 0, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 0, 0, 0, 127, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 128, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	128, 6, 6, 6, 6, 6, 6, 6, 
	129, 6, 130, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 130, 8, 131, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 8, 8, 8, 8, 8, 
	8, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 8, 8, 8, 
	132, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 130, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 130, 12, 131, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 12, 12, 
	12, 12, 12, 12, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	12, 12, 12, 133, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	135, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 136, 134, 137, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 137, 17, 17, 17, 17, 
	17, 17, 17, 17, 138, 17, 17, 139, 
	17, 140, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	140, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 141, 6, 141, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 141, 8, 131, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 8, 
	8, 8, 8, 8, 8, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 8, 8, 8, 132, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 142, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	142, 23, 23, 23, 23, 23, 23, 23, 
	143, 144, 23, 23, 145, 23, 23, 23, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 23, 23, 23, 23, 23, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 23, 23, 23, 146, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 140, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 140, 30, 30, 30, 30, 
	30, 30, 30, 30, 148, 30, 30, 141, 
	30, 149, 30, 136, 134, 142, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 142, 23, 23, 23, 
	23, 23, 23, 23, 23, 144, 23, 23, 
	145, 23, 23, 23, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 23, 23, 
	23, 23, 23, 23, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	23, 23, 23, 150, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 6, 152, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 6, 154, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 155, 6, 156, 6, 6, 157, 
	159, 158, 6, 6, 6, 6, 30, 30, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 34, 6, 7, 
	33, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	18, 16, 17, 18, 19, 20, 24, 32, 
	20, 21, 31, 22, 26, 23, 22, 23, 
	22, 25, 26, 23, 24, 19, 26, 27, 
	81, 28, 27, 81, 28, 29, 30, 30, 
	81, 32, 34, 0, 36, 82, 36, 0, 
	38, 38, 39, 40, 83, 42, 43, 47, 
	46, 43, 44, 45, 0, 84, 84, 46, 
	47, 42, 49, 50, 51, 49, 50, 51, 
	52, 53, 57, 60, 53, 54, 59, 55, 
	85, 56, 55, 56, 55, 58, 85, 56, 
	57, 52, 85, 60, 62, 63, 64, 62, 
	63, 64, 65, 66, 70, 74, 66, 67, 
	73, 68, 72, 69, 68, 69, 68, 71, 
	72, 69, 70, 65, 72, 86, 74, 76, 
	87, 76, 88, 78, 79, 80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 2, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 15, 15, 0, 0, 
	17, 18, 17, 17, 5, 19, 0, 25, 
	26, 25, 0, 27, 0, 0, 28, 29, 
	30, 31, 31, 32, 11, 33, 31, 34, 
	8, 13, 13, 13, 35, 0, 8, 11, 
	11, 13, 13, 13, 12, 36, 37, 31, 
	31, 19, 38, 3, 4, 5, 0, 6, 
	0, 8, 9, 11, 13, 13, 13, 15, 
	39, 15, 0, 0, 17, 18, 40, 17, 
	5, 19, 41, 31, 2, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 42, 31, 22, 
	43, 24, 44, 0, 0, 28, 29, 45
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 0, 0, 12, 
	16, 12, 16, 32, 32, 34, 34, 34, 
	34, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 41 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 29 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 25 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 27 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 28 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 30 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 37 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 38 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 
	10, 10, 10, 92, 92, 
	9, 122, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 39, 39, 1, 1, 1, 1, 
	114, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1233, 1348, 1381, 1496, 1611, 1671, 1708, 1745, 
	1860, 1975, 2012, 2052, 2092, 2094, 2096, 2098, 
	2100, 2215, 2217, 2332, 2408, 2522, 2524, 2584, 
	2586, 2588, 2703, 2818, 2878, 2880, 2882, 2996, 
	3110, 3186, 3301, 3334, 3449, 3564, 3624, 3661, 
	3698, 3813, 3928, 3965, 3967, 4082, 4158, 4273, 
	4306, 4421, 4536, 4596, 4633, 4670, 4785, 4900, 
	4937, 4939, 4941, 5056, 5151, 5269, 5308, 5310, 
	5312, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 
	5321
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 0, 
	0, 0, 0, 0, 0, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 0, 0, 0, 38, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 39, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	39, 0, 0, 0, 0, 0, 0, 0, 
	40, 0, 0, 0, 0, 0, 0, 0, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 0, 0, 0, 0, 0, 0, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 0, 0, 0, 41, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 42, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 42, 6, 6, 6, 6, 
	6, 6, 6, 43, 6, 44, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 44, 8, 45, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 8, 8, 
	8, 8, 8, 8, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	8, 8, 8, 46, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	44, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 44, 
	12, 45, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 12, 12, 12, 12, 12, 12, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 12, 12, 12, 47, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 49, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 50, 48, 51, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 51, 17, 
	17, 17, 17, 17, 17, 17, 17, 52, 
	17, 17, 53, 17, 54, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 54, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 55, 
	6, 55, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	55, 8, 45, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 8, 8, 8, 8, 8, 8, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 8, 8, 8, 46, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 57, 58, 23, 23, 59, 
	23, 23, 23, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 61, 23, 23, 
	23, 23, 23, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 23, 
	23, 23, 60, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 54, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 54, 30, 
	30, 30, 30, 30, 30, 30, 30, 62, 
	30, 30, 55, 30, 63, 64, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 63, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 65, 30, 66, 67, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 66, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 6, 6, 70, 
	72, 71, 50, 48, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 23, 58, 23, 23, 59, 
	23, 23, 23, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 23, 23, 23, 
	23, 23, 23, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 23, 
	23, 23, 73, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 23, 23, 23, 23, 23, 23, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 23, 23, 23, 74, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 75, 75, 
	75, 75, 75, 75, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 76, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	77, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	75, 75, 75, 75, 75, 75, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 75, 75, 75, 78, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 80, 79, 82, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 83, 81, 
	84, 79, 83, 81, 85, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 85, 8, 86, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 8, 8, 8, 
	8, 8, 8, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 8, 
	8, 8, 87, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 85, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 85, 12, 
	86, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	12, 12, 12, 12, 12, 12, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 12, 12, 12, 88, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 90, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 89, 93, 92, 
	91, 89, 94, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 0, 0, 0, 0, 0, 0, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 0, 0, 0, 95, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 94, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 97, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	0, 0, 0, 0, 0, 0, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 0, 0, 0, 98, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 99, 0, 0, 0, 0, 0, 0, 
	0, 100, 0, 0, 0, 0, 0, 0, 
	0, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 0, 0, 0, 0, 0, 
	0, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 0, 0, 0, 
	101, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 102, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 102, 6, 6, 6, 
	6, 6, 6, 6, 103, 6, 104, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 8, 105, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 8, 
	8, 8, 8, 8, 8, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 8, 8, 8, 106, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 104, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	104, 12, 105, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 12, 12, 12, 12, 12, 12, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 12, 12, 12, 107, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 109, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 110, 108, 
	111, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	112, 17, 17, 113, 17, 114, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 114, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	115, 6, 115, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 115, 8, 105, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 8, 8, 8, 8, 8, 
	8, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 8, 8, 8, 
	106, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 116, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 116, 23, 23, 23, 
	23, 23, 23, 23, 117, 118, 23, 23, 
	119, 23, 23, 23, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 121, 23, 
	23, 23, 23, 23, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	23, 23, 23, 120, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	114, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 114, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	122, 30, 30, 115, 30, 110, 108, 116, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 116, 23, 
	23, 23, 23, 23, 23, 23, 23, 118, 
	23, 23, 119, 23, 23, 23, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	23, 23, 23, 23, 23, 23, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 23, 23, 23, 123, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 0, 0, 0, 0, 
	0, 0, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 0, 0, 
	0, 124, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 125, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 125, 0, 0, 
	0, 0, 0, 0, 0, 126, 0, 0, 
	0, 0, 0, 0, 0, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 0, 
	0, 0, 0, 0, 0, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 0, 0, 0, 127, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 128, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	128, 6, 6, 6, 6, 6, 6, 6, 
	129, 6, 130, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 130, 8, 131, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 8, 8, 8, 8, 8, 
	8, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 8, 8, 8, 
	132, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 130, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 130, 12, 131, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 12, 12, 
	12, 12, 12, 12, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	12, 12, 12, 133, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	135, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 136, 134, 137, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 137, 17, 17, 17, 17, 
	17, 17, 17, 17, 138, 17, 17, 139, 
	17, 140, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	140, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 141, 6, 141, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 141, 8, 131, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 8, 
	8, 8, 8, 8, 8, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 8, 8, 8, 132, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 142, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	142, 23, 23, 23, 23, 23, 23, 23, 
	143, 144, 23, 23, 145, 23, 23, 23, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 23, 23, 23, 23, 23, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 23, 23, 23, 146, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 140, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 140, 30, 30, 30, 30, 
	30, 30, 30, 30, 148, 30, 30, 141, 
	30, 149, 30, 136, 134, 142, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 142, 23, 23, 23, 
	23, 23, 23, 23, 23, 144, 23, 23, 
	145, 23, 23, 23, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 23, 23, 
	23, 23, 23, 23, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	23, 23, 23, 150, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 6, 152, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 6, 154, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 155, 6, 156, 6, 6, 157, 
	159, 158, 6, 6, 6, 6, 30, 30, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 34, 6, 7, 
	33, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	18, 16, 17, 18, 19, 20, 24, 32, 
	20, 21, 31, 22, 26, 23, 22, 23, 
	22, 25, 26, 23, 24, 19, 26, 27, 
	81, 28, 27, 81, 28, 29, 30, 30, 
	81, 32, 34, 0, 36, 82, 36, 0, 
	38, 38, 39, 40, 83, 42, 43, 47, 
	46, 43, 44, 45, 0, 84, 84, 46, 
	47, 42, 49, 50, 51, 49, 50, 51, 
	52, 53, 57, 60, 53, 54, 59, 55, 
	85, 56, 55, 56, 55, 58, 85, 56, 
	57, 52, 85, 60, 62, 63, 64, 62, 
	63, 64, 65, 66, 70, 74, 66, 67, 
	73, 68, 72, 69, 68, 69, 68, 71, 
	72, 69, 70, 65, 72, 86, 74, 76, 
	87, 76, 88, 78, 79, 80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 2, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 15, 15, 0, 0, 
	17, 18, 17, 17, 5, 19, 0, 25, 
	26, 25, 0, 27, 0, 0, 28, 29, 
	30, 31, 31, 32, 11, 33, 31, 34, 
	8, 13, 13, 13, 35, 0, 8, 11, 
	11, 13, 13, 13, 12, 36, 37, 31, 
	31, 19, 38, 3, 4, 5, 0, 6, 
	0, 8, 9, 11, 13, 13, 13, 15, 
	39, 15, 0, 0, 17, 18, 40, 17, 
	5, 19, 41, 31, 2, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 42, 31, 22, 
	43, 24, 44, 0, 0, 28, 29, 45
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 0, 0, 12, 
	16, 12, 16, 32, 32, 34, 34, 34, 
	34, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 41 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 29 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 25 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 27 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 28 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 30 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 37 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 38 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 
	10, 10, 10, 92, 92, 
	9, 122, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 39, 39, 1, 1, 1, 1, 
	114, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1233, 1348, 1381, 1496, 1611, 1671, 1708, 1745, 
	1860, 1975, 2012, 2052, 2092, 2094, 2096, 2098, 
	2100, 2215, 2217, 2332, 2408, 2522, 2524, 2584, 
	2586, 2588, 2703, 2818, 2878, 2880, 2882, 2996, 
	3110, 3186, 3301, 3334, 3449, 3564, 3624, 3661, 
	3698, 3813, 3928, 3965, 3967, 4082, 4158, 4273, 
	4306, 4421, 4536, 4596, 4633, 4670, 4785, 4900, 
	4937, 4939, 4941, 5056, 5151, 5269, 5308, 5310, 
	5312, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 
	5321
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 0, 
	0, 0, 0, 0, 0, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 0, 0, 0, 38, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 39, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	39, 0, 0, 0, 0, 0, 0, 0, 
	40, 0, 0, 0, 0, 0, 0, 0, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 0, 0, 0, 0, 0, 0, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 0, 0, 0, 41, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 42, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 42, 6, 6, 6, 6, 
	6, 6, 6, 43, 6, 44, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 44, 8, 45, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 8, 8, 
	8, 8, 8, 8, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	8, 8, 8, 46, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	44, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 44, 
	12, 45, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 12, 12, 12, 12, 12, 12, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 12, 12, 12, 47, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 49, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 50, 48, 51, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 51, 17, 
	17, 17, 17, 17, 17, 17, 17, 52, 
	17, 17, 53, 17, 54, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 54, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 55, 
	6, 55, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	55, 8, 45, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 8, 8, 8, 8, 8, 8, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 8, 8, 8, 46, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 57, 58, 23, 23, 59, 
	23, 23, 23, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 61, 23, 23, 
	23, 23, 23, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 23, 
	23, 23, 60, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 54, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 54, 30, 
	30, 30, 30, 30, 30, 30, 30, 62, 
	30, 30, 55, 30, 63, 64, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 63, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 65, 30, 66, 67, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 66, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 6, 6, 70, 
	72, 71, 50, 48, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 23, 58, 23, 23, 59, 
	23, 23, 23, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 23, 23, 23, 
	23, 23, 23, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 23, 
	23, 23, 73, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 23, 23, 23, 23, 23, 23, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 23, 23, 23, 74, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 75, 75, 
	75, 75, 75, 75, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 76, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	77, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	75, 75, 75, 75, 75, 75, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 75, 75, 75, 78, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 80, 79, 82, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 83, 81, 
	84, 79, 83, 81, 85, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 85, 8, 86, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 8, 8, 8, 
	8, 8, 8, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 8, 
	8, 8, 87, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 85, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 85, 12, 
	86, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	12, 12, 12, 12, 12, 12, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 12, 12, 12, 88, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 90, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 89, 93, 92, 
	91, 89, 94, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 0, 0, 0, 0, 0, 0, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 0, 0, 0, 95, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 94, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 97, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	0, 0, 0, 0, 0, 0, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 0, 0, 0, 98, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 99, 0, 0, 0, 0, 0, 0, 
	0, 100, 0, 0, 0, 0, 0, 0, 
	0, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 0, 0, 0, 0, 0, 
	0, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 0, 0, 0, 
	101, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 102, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 102, 6, 6, 6, 
	6, 6, 6, 6, 103, 6, 104, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 8, 105, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 8, 
	8, 8, 8, 8, 8, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 8, 8, 8, 106, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 104, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	104, 12, 105, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 12, 12, 12, 12, 12, 12, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 12, 12, 12, 107, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 109, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 110, 108, 
	111, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	112, 17, 17, 113, 17, 114, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 114, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	115, 6, 115, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 115, 8, 105, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 8, 8, 8, 8, 8, 
	8, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 8, 8, 8, 
	106, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 116, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 116, 23, 23, 23, 
	23, 23, 23, 23, 117, 118, 23, 23, 
	119, 23, 23, 23, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 121, 23, 
	23, 23, 23, 23, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	23, 23, 23, 120, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	114, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 114, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	122, 30, 30, 115, 30, 110, 108, 116, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 116, 23, 
	23, 23, 23, 23, 23, 23, 23, 118, 
	23, 23, 119, 23, 23, 23, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	23, 23, 23, 23, 23, 23, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 23, 23, 23, 123, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 0, 0, 0, 0, 
	0, 0, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 0, 0, 
	0, 124, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 125, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 125, 0, 0, 
	0, 0, 0, 0, 0, 126, 0, 0, 
	0, 0, 0, 0, 0, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 0, 
	0, 0, 0, 0, 0, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 0, 0, 0, 127, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 128, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	128, 6, 6, 6, 6, 6, 6, 6, 
	129, 6, 130, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 130, 8, 131, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 8, 8, 8, 8, 8, 
	8, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 8, 8, 8, 
	132, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 130, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 130, 12, 131, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 12, 12, 
	12, 12, 12, 12, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	12, 12, 12, 133, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	135, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 136, 134, 137, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 137, 17, 17, 17, 17, 
	17, 17, 17, 17, 138, 17, 17, 139, 
	17, 140, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	140, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 141, 6, 141, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 141, 8, 131, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 8, 
	8, 8, 8, 8, 8, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 8, 8, 8, 132, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 142, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	142, 23, 23, 23, 23, 23, 23, 23, 
	143, 144, 23, 23, 145, 23, 23, 23, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 23, 23, 23, 23, 23, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 23, 23, 23, 146, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 140, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 140, 30, 30, 30, 30, 
	30, 30, 30, 30, 148, 30, 30, 141, 
	30, 149, 30, 136, 134, 142, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 142, 23, 23, 23, 
	23, 23, 23, 23, 23, 144, 23, 23, 
	145, 23, 23, 23, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 23, 23, 
	23, 23, 23, 23, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	23, 23, 23, 150, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 6, 152, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 6, 154, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 155, 6, 156, 6, 6, 157, 
	159, 158, 6, 6, 6, 6, 30, 30, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 34, 6, 7, 
	33, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	18, 16, 17, 18, 19, 20, 24, 32, 
	20, 21, 31, 22, 26, 23, 22, 23, 
	22, 25, 26, 23, 24, 19, 26, 27, 
	81, 28, 27, 81, 28, 29, 30, 30, 
	81, 32, 34, 0, 36, 82, 36, 0, 
	38, 38, 39, 40, 83, 42, 43, 47, 
	46, 43, 44, 45, 0, 84, 84, 46, 
	47, 42, 49, 50, 51, 49, 50, 51, 
	52, 53, 57, 60, 53, 54, 59, 55, 
	85, 56, 55, 56, 55, 58, 85, 56, 
	57, 52, 85, 60, 62, 63, 64, 62, 
	63, 64, 65, 66, 70, 74, 66, 67, 
	73, 68, 72, 69, 68, 69, 68, 71, 
	72, 69, 70, 65, 72, 86, 74, 76, 
	87, 76, 88, 78, 79, 80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 2, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 15, 15, 0, 0, 
	17, 18, 17, 17, 5, 19, 0, 25, 
	26, 25, 0, 27, 0, 0, 28, 29, 
	30, 31, 31, 32, 11, 33, 31, 34, 
	8, 13, 13, 13, 35, 0, 8, 11, 
	11, 13, 13, 13, 12, 36, 37, 31, 
	31, 19, 38, 3, 4, 5, 0, 6, 
	0, 8, 9, 11, 13, 13, 13, 15, 
	39, 15, 0, 0, 17, 18, 40, 17, 
	5, 19, 41, 31, 2, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 42, 31, 22, 
	43, 24, 44, 0, 0, 28, 29, 45
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 0, 0, 12, 
	16, 12, 16, 32, 32, 34, 34, 34, 
	34, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 41 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 29 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 25 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 27 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 28 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 30 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 37 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 38 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 
	10, 10, 10, 92, 92, 
	9, 122, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 39, 39, 1, 1, 1, 1, 
	114, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1233, 1348, 1381, 1496, 1611, 1671, 1708, 1745, 
	1860, 1975, 2012, 2052, 2092, 2094, 2096, 2098, 
	2100, 2215, 2217, 2332, 2408, 2522, 2524, 2584, 
	2586, 2588, 2703, 2818, 2878, 2880, 2882, 2996, 
	3110, 3186, 3301, 3334, 3449, 3564, 3624, 3661, 
	3698, 3813, 3928, 3965, 3967, 4082, 4158, 4273, 
	4306, 4421, 4536, 4596, 4633, 4670, 4785, 4900, 
	4937, 4939, 4941, 5056, 5151, 5269, 5308, 5310, 
	5312, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 
	5321
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 0, 
	0, 0, 0, 0, 0, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 0, 0, 0, 38, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 39, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	39, 0, 0, 0, 0, 0, 0, 0, 
	40, 0, 0, 0, 0, 0, 0, 0, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 0, 0, 0, 0, 0, 0, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 0, 0, 0, 41, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 42, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 42, 6, 6, 6, 6, 
	6, 6, 6, 43, 6, 44, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 44, 8, 45, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 8, 8, 
	8, 8, 8, 8, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	8, 8, 8, 46, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	44, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 44, 
	12, 45, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 12, 12, 12, 12, 12, 12, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 12, 12, 12, 47, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 49, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 50, 48, 51, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 51, 17, 
	17, 17, 17, 17, 17, 17, 17, 52, 
	17, 17, 53, 17, 54, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 54, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 55, 
	6, 55, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	55, 8, 45, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 8, 8, 8, 8, 8, 8, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 8, 8, 8, 46, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 57, 58, 23, 23, 59, 
	23, 23, 23, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 61, 23, 23, 
	23, 23, 23, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 23, 
	23, 23, 60, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 54, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 54, 30, 
	30, 30, 30, 30, 30, 30, 30, 62, 
	30, 30, 55, 30, 63, 64, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 63, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 65, 30, 66, 67, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 66, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 6, 6, 70, 
	72, 71, 50, 48, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 23, 58, 23, 23, 59, 
	23, 23, 23, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 23, 23, 23, 
	23, 23, 23, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 23, 
	23, 23, 73, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 23, 23, 23, 23, 23, 23, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 23, 23, 23, 74, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 75, 75, 
	75, 75, 75, 75, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 76, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	77, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	75, 75, 75, 75, 75, 75, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 75, 75, 75, 78, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 80, 79, 82, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 83, 81, 
	84, 79, 83, 81, 85, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 85, 8, 86, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 8, 8, 8, 
	8, 8, 8, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 8, 
	8, 8, 87, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 85, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 85, 12, 
	86, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	12, 12, 12, 12, 12, 12, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 12, 12, 12, 88, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 90, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 89, 93, 92, 
	91, 89, 94, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 0, 0, 0, 0, 0, 0, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 0, 0, 0, 95, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 94, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 97, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	0, 0, 0, 0, 0, 0, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 0, 0, 0, 98, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 99, 0, 0, 0, 0, 0, 0, 
	0, 100, 0, 0, 0, 0, 0, 0, 
	0, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 0, 0, 0, 0, 0, 
	0, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 0, 0, 0, 
	101, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 102, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 102, 6, 6, 6, 
	6, 6, 6, 6, 103, 6, 104, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 8, 105, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 8, 
	8, 8, 8, 8, 8, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 8, 8, 8, 106, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 104, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	104, 12, 105, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 12, 12, 12, 12, 12, 12, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 12, 12, 12, 107, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 109, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 110, 108, 
	111, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	112, 17, 17, 113, 17, 114, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 114, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	115, 6, 115, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 115, 8, 105, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 8, 8, 8, 8, 8, 
	8, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 8, 8, 8, 
	106, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 116, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 116, 23, 23, 23, 
	23, 23, 23, 23, 117, 118, 23, 23, 
	119, 23, 23, 23, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 121, 23, 
	23, 23, 23, 23, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	23, 23, 23, 120, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	114, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 114, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	122, 30, 30, 115, 30, 110, 108, 116, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 116, 23, 
	23, 23, 23, 23, 23, 23, 23, 118, 
	23, 23, 119, 23, 23, 23, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	23, 23, 23, 23, 23, 23, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 23, 23, 23, 123, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 0, 0, 0, 0, 
	0, 0, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 0, 0, 
	0, 124, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 125, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 125, 0, 0, 
	0, 0, 0, 0, 0, 126, 0, 0, 
	0, 0, 0, 0, 0, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 0, 
	0, 0, 0, 0, 0, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 0, 0, 0, 127, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 128, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	128, 6, 6, 6, 6, 6, 6, 6, 
	129, 6, 130, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 130, 8, 131, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 8, 8, 8, 8, 8, 
	8, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 8, 8, 8, 
	132, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 130, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 130, 12, 131, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 12, 12, 
	12, 12, 12, 12, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	12, 12, 12, 133, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	135, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 136, 134, 137, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 137, 17, 17, 17, 17, 
	17, 17, 17, 17, 138, 17, 17, 139, 
	17, 140, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	140, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 141, 6, 141, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 141, 8, 131, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 8, 
	8, 8, 8, 8, 8, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 8, 8, 8, 132, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 142, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	142, 23, 23, 23, 23, 23, 23, 23, 
	143, 144, 23, 23, 145, 23, 23, 23, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 23, 23, 23, 23, 23, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 23, 23, 23, 146, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 140, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 140, 30, 30, 30, 30, 
	30, 30, 30, 30, 148, 30, 30, 141, 
	30, 149, 30, 136, 134, 142, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 142, 23, 23, 23, 
	23, 23, 23, 23, 23, 144, 23, 23, 
	145, 23, 23, 23, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 23, 23, 
	23, 23, 23, 23, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	23, 23, 23, 150, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 6, 152, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 6, 154, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 155, 6, 156, 6, 6, 157, 
	159, 158, 6, 6, 6, 6, 30, 30, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 34, 6, 7, 
	33, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	18, 16, 17, 18, 19, 20, 24, 32, 
	20, 21, 31, 22, 26, 23, 22, 23, 
	22, 25, 26, 23, 24, 19, 26, 27, 
	81, 28, 27, 81, 28, 29, 30, 30, 
	81, 32, 34, 0, 36, 82, 36, 0, 
	38, 38, 39, 40, 83, 42, 43, 47, 
	46, 43, 44, 45, 0, 84, 84, 46, 
	47, 42, 49, 50, 51, 49, 50, 51, 
	52, 53, 57, 60, 53, 54, 59, 55, 
	85, 56, 55, 56, 55, 58, 85, 56, 
	57, 52, 85, 60, 62, 63, 64, 62, 
	63, 64, 65, 66, 70, 74, 66, 67, 
	73, 68, 72, 69, 68, 69, 68, 71, 
	72, 69, 70, 65, 72, 86, 74, 76, 
	87, 76, 88, 78, 79, 80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 2, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 15, 15, 0, 0, 
	17, 18, 17, 17, 5, 19, 0, 25, 
	26, 25, 0, 27, 0, 0, 28, 29, 
	30, 31, 31, 32, 11, 33, 31, 34, 
	8, 13, 13, 13, 35, 0, 8, 11, 
	11, 13, 13, 13, 12, 36, 37, 31, 
	31, 19, 38, 3, 4, 5, 0, 6, 
	0, 8, 9, 11, 13, 13, 13, 15, 
	39, 15, 0, 0, 17, 18, 40, 17, 
	5, 19, 41, 31, 2, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 42, 31, 22, 
	43, 24, 44, 0, 0, 28, 29, 45
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 0, 0, 12, 
	16, 12, 16, 32, 32, 34, 34, 34, 
	34, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 41 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 29 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 25 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 27 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 28 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 30 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 37 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 38 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 
	10, 10, 10, 92, 92, 
	9, 122, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 39, 39, 1, 1, 1, 1, 
	114, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1233, 1348, 1381, 1496, 1611, 1671, 1708, 1745, 
	1860, 1975, 2012, 2052, 2092, 2094, 2096, 2098, 
	2100, 2215, 2217, 2332, 2408, 2522, 2524, 2584, 
	2586, 2588, 2703, 2818, 2878, 2880, 2882, 2996, 
	3110, 3186, 3301, 3334, 3449, 3564, 3624, 3661, 
	3698, 3813, 3928, 3965, 3967, 4082, 4158, 4273, 
	4306, 4421, 4536, 4596, 4633, 4670, 4785, 4900, 
	4937, 4939, 4941, 5056, 5151, 5269, 5308, 5310, 
	5312, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 
	5321
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 0, 
	0, 0, 0, 0, 0, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 0, 0, 0, 38, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 39, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	39, 0, 0, 0, 0, 0, 0, 0, 
	40, 0, 0, 0, 0, 0, 0, 0, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 0, 0, 0, 0, 0, 0, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 0, 0, 0, 41, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 42, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 42, 6, 6, 6, 6, 
	6, 6, 6, 43, 6, 44, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 44, 8, 45, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 8, 8, 
	8, 8, 8, 8, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	8, 8, 8, 46, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	44, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 44, 
	12, 45, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 12, 12, 12, 12, 12, 12, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 12, 12, 12, 47, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 49, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 50, 48, 51, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 51, 17, 
	17, 17, 17, 17, 17, 17, 17, 52, 
	17, 17, 53, 17, 54, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 54, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 55, 
	6, 55, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	55, 8, 45, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 8, 8, 8, 8, 8, 8, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 8, 8, 8, 46, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 57, 58, 23, 23, 59, 
	23, 23, 23, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 61, 23, 23, 
	23, 23, 23, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 23, 
	23, 23, 60, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 54, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 54, 30, 
	30, 30, 30, 30, 30, 30, 30, 62, 
	30, 30, 55, 30, 63, 64, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 63, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 65, 30, 66, 67, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 66, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 6, 6, 70, 
	72, 71, 50, 48, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 23, 58, 23, 23, 59, 
	23, 23, 23, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 23, 23, 23, 
	23, 23, 23, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 23, 
	23, 23, 73, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 23, 23, 23, 23, 23, 23, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 23, 23, 23, 74, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 75, 75, 
	75, 75, 75, 75, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 76, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	77, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	75, 75, 75, 75, 75, 75, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 75, 75, 75, 78, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 80, 79, 82, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 83, 81, 
	84, 79, 83, 81, 85, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 85, 8, 86, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 8, 8, 8, 
	8, 8, 8, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 8, 
	8, 8, 87, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 85, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 85, 12, 
	86, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	12, 12, 12, 12, 12, 12, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 12, 12, 12, 88, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 90, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 89, 93, 92, 
	91, 89, 94, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 0, 0, 0, 0, 0, 0, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 0, 0, 0, 95, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 94, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 97, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	0, 0, 0, 0, 0, 0, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 0, 0, 0, 98, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 99, 0, 0, 0, 0, 0, 0, 
	0, 100, 0, 0, 0, 0, 0, 0, 
	0, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 0, 0, 0, 0, 0, 
	0, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 0, 0, 0, 
	101, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 102, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 102, 6, 6, 6, 
	6, 6, 6, 6, 103, 6, 104, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 8, 105, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 8, 
	8, 8, 8, 8, 8, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 8, 8, 8, 106, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 104, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	104, 12, 105, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 12, 12, 12, 12, 12, 12, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 12, 12, 12, 107, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 109, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 110, 108, 
	111, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	112, 17, 17, 113, 17, 114, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 114, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	115, 6, 115, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 115, 8, 105, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 8, 8, 8, 8, 8, 
	8, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 8, 8, 8, 
	106, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 116, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 116, 23, 23, 23, 
	23, 23, 23, 23, 117, 118, 23, 23, 
	119, 23, 23, 23, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 121, 23, 
	23, 23, 23, 23, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	23, 23, 23, 120, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	114, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 114, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	122, 30, 30, 115, 30, 110, 108, 116, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 116, 23, 
	23, 23, 23, 23, 23, 23, 23, 118, 
	23, 23, 119, 23, 23, 23, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	23, 23, 23, 23, 23, 23, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 23, 23, 23, 123, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 0, 0, 0, 0, 
	0, 0, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 0, 0, 
	0, 124, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 125, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 125, 0, 0, 
	0, 0, 0, 0, 0, 126, 0, 0, 
	0, 0, 0, 0, 0, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 0, 
	0, 0, 0, 0, 0, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 0, 0, 0, 127, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 128, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	128, 6, 6, 6, 6, 6, 6, 6, 
	129, 6, 130, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 130, 8, 131, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 8, 8, 8, 8, 8, 
	8, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 8, 8, 8, 
	132, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 130, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 130, 12, 131, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 12, 12, 
	12, 12, 12, 12, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	12, 12, 12, 133, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	135, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 136, 134, 137, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 137, 17, 17, 17, 17, 
	17, 17, 17, 17, 138, 17, 17, 139, 
	17, 140, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	140, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 141, 6, 141, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 141, 8, 131, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 8, 
	8, 8, 8, 8, 8, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 8, 8, 8, 132, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 142, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	142, 23, 23, 23, 23, 23, 23, 23, 
	143, 144, 23, 23, 145, 23, 23, 23, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 23, 23, 23, 23, 23, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 23, 23, 23, 146, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 140, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 140, 30, 30, 30, 30, 
	30, 30, 30, 30, 148, 30, 30, 141, 
	30, 149, 30, 136, 134, 142, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 142, 23, 23, 23, 
	23, 23, 23, 23, 23, 144, 23, 23, 
	145, 23, 23, 23, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 23, 23, 
	23, 23, 23, 23, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	23, 23, 23, 150, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 6, 152, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 6, 154, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 155, 6, 156, 6, 6, 157, 
	159, 158, 6, 6, 6, 6, 30, 30, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 34, 6, 7, 
	33, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	18, 16, 17, 18, 19, 20, 24, 32, 
	20, 21, 31, 22, 26, 23, 22, 23, 
	22, 25, 26, 23, 24, 19, 26, 27, 
	81, 28, 27, 81, 28, 29, 30, 30, 
	81, 32, 34, 0, 36, 82, 36, 0, 
	38, 38, 39, 40, 83, 42, 43, 47, 
	46, 43, 44, 45, 0, 84, 84, 46, 
	47, 42, 49, 50, 51, 49, 50, 51, 
	52, 53, 57, 60, 53, 54, 59, 55, 
	85, 56, 55, 56, 55, 58, 85, 56, 
	57, 52, 85, 60, 62, 63, 64, 62, 
	63, 64, 65, 66, 70, 74, 66, 67, 
	73, 68, 72, 69, 68, 69, 68, 71, 
	72, 69, 70, 65, 72, 86, 74, 76, 
	87, 76, 88, 78, 79, 80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 2, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 15, 15, 0, 0, 
	17, 18, 17, 17, 5, 19, 0, 25, 
	26, 25, 0, 27, 0, 0, 28, 29, 
	30, 31, 31, 32, 11, 33, 31, 34, 
	8, 13, 13, 13, 35, 0, 8, 11, 
	11, 13, 13, 13, 12, 36, 37, 31, 
	31, 19, 38, 3, 4, 5, 0, 6, 
	0, 8, 9, 11, 13, 13, 13, 15, 
	39, 15, 0, 0, 17, 18, 40, 17, 
	5, 19, 41, 31, 2, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 42, 31, 22, 
	43, 24, 44, 0, 0, 28, 29, 45
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 0, 0, 12, 
	16, 12, 16, 32, 32, 34, 34, 34, 
	34, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 41 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 29 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 25 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 27 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 28 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 30 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 37 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 38 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 
	10, 10, 10, 92, 92, 
	9, 122, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 39, 39, 1, 1, 1, 1, 
	114, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1233, 1348, 1381, 1496, 1611, 1671, 1708, 1745, 
	1860, 1975, 2012, 2052, 2092, 2094, 2096, 2098, 
	2100, 2215, 2217, 2332, 2408, 2522, 2524, 2584, 
	2586, 2588, 2703, 2818, 2878, 2880, 2882, 2996, 
	3110, 3186, 3301, 3334, 3449, 3564, 3624, 3661, 
	3698, 3813, 3928, 3965, 3967, 4082, 4158, 4273, 
	4306, 4421, 4536, 4596, 4633, 4670, 4785, 4900, 
	4937, 4939, 4941, 5056, 5151, 5269, 5308, 5310, 
	5312, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 
	5321
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 0, 
	0, 0, 0, 0, 0, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 0, 0, 0, 38, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 39, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	39, 0, 0, 0, 0, 0, 0, 0, 
	40, 0, 0, 0, 0, 0, 0, 0, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 0, 0, 0, 0, 0, 0, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 0, 0, 0, 41, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 42, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 42, 6, 6, 6, 6, 
	6, 6, 6, 43, 6, 44, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 44, 8, 45, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 8, 8, 
	8, 8, 8, 8, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	8, 8, 8, 46, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	44, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 44, 
	12, 45, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 12, 12, 12, 12, 12, 12, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 12, 12, 12, 47, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 49, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 50, 48, 51, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 51, 17, 
	17, 17, 17, 17, 17, 17, 17, 52, 
	17, 17, 53, 17, 54, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 54, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 55, 
	6, 55, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	55, 8, 45, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 8, 8, 8, 8, 8, 8, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 8, 8, 8, 46, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 57, 58, 23, 23, 59, 
	23, 23, 23, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 61, 23, 23, 
	23, 23, 23, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 23, 
	23, 23, 60, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 54, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 54, 30, 
	30, 30, 30, 30, 30, 30, 30, 62, 
	30, 30, 55, 30, 63, 64, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 63, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 65, 30, 66, 67, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 66, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 6, 6, 70, 
	72, 71, 50, 48, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 23, 58, 23, 23, 59, 
	23, 23, 23, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 23, 23, 23, 
	23, 23, 23, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 23, 
	23, 23, 73, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 23, 23, 23, 23, 23, 23, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 23, 23, 23, 74, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 75, 75, 
	75, 75, 75, 75, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 76, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	77, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	75, 75, 75, 75, 75, 75, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 75, 75, 75, 78, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 80, 79, 82, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 83, 81, 
	84, 79, 83, 81, 85, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 85, 8, 86, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 8, 8, 8, 
	8, 8, 8, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 8, 
	8, 8, 87, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 85, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 85, 12, 
	86, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	12, 12, 12, 12, 12, 12, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 12, 12, 12, 88, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 90, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 89, 93, 92, 
	91, 89, 94, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 0, 0, 0, 0, 0, 0, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 0, 0, 0, 95, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 94, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 97, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	0, 0, 0, 0, 0, 0, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 0, 0, 0, 98, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 99, 0, 0, 0, 0, 0, 0, 
	0, 100, 0, 0, 0, 0, 0, 0, 
	0, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 0, 0, 0, 0, 0, 
	0, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 0, 0, 0, 
	101, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 102, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 102, 6, 6, 6, 
	6, 6, 6, 6, 103, 6, 104, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 8, 105, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 8, 
	8, 8, 8, 8, 8, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 8, 8, 8, 106, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 104, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	104, 12, 105, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 12, 12, 12, 12, 12, 12, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 12, 12, 12, 107, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 109, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 110, 108, 
	111, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	112, 17, 17, 113, 17, 114, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 114, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	115, 6, 115, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 115, 8, 105, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 8, 8, 8, 8, 8, 
	8, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 8, 8, 8, 
	106, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 116, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 116, 23, 23, 23, 
	23, 23, 23, 23, 117, 118, 23, 23, 
	119, 23, 23, 23, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 121, 23, 
	23, 23, 23, 23, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	23, 23, 23, 120, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	114, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 114, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	122, 30, 30, 115, 30, 110, 108, 116, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 116, 23, 
	23, 23, 23, 23, 23, 23, 23, 118, 
	23, 23, 119, 23, 23, 23, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	23, 23, 23, 23, 23, 23, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 23, 23, 23, 123, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 0, 0, 0, 0, 
	0, 0, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 0, 0, 
	0, 124, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 125, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 125, 0, 0, 
	0, 0, 0, 0, 0, 126, 0, 0, 
	0, 0, 0, 0, 0, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 0, 
	0, 0, 0, 0, 0, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 0, 0, 0, 127, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 128, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	128, 6, 6, 6, 6, 6, 6, 6, 
	129, 6, 130, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 130, 8, 131, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 8, 8, 8, 8, 8, 
	8, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 8, 8, 8, 
	132, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 130, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 130, 12, 131, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 12, 12, 
	12, 12, 12, 12, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	12, 12, 12, 133, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	135, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 136, 134, 137, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 137, 17, 17, 17, 17, 
	17, 17, 17, 17, 138, 17, 17, 139, 
	17, 140, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	140, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 141, 6, 141, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 141, 8, 131, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 8, 
	8, 8, 8, 8, 8, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 8, 8, 8, 132, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 142, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	142, 23, 23, 23, 23, 23, 23, 23, 
	143, 144, 23, 23, 145, 23, 23, 23, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 23, 23, 23, 23, 23, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 23, 23, 23, 146, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 140, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 140, 30, 30, 30, 30, 
	30, 30, 30, 30, 148, 30, 30, 141, 
	30, 149, 30, 136, 134, 142, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 142, 23, 23, 23, 
	23, 23, 23, 23, 23, 144, 23, 23, 
	145, 23, 23, 23, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 23, 23, 
	23, 23, 23, 23, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	23, 23, 23, 150, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 6, 152, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 6, 154, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 155, 6, 156, 6, 6, 157, 
	159, 158, 6, 6, 6, 6, 30, 30, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 34, 6, 7, 
	33, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	18, 16, 17, 18, 19, 20, 24, 32, 
	20, 21, 31, 22, 26, 23, 22, 23, 
	22, 25, 26, 23, 24, 19, 26, 27, 
	81, 28, 27, 81, 28, 29, 30, 30, 
	81, 32, 34, 0, 36, 82, 36, 0, 
	38, 38, 39, 40, 83, 42, 43, 47, 
	46, 43, 44, 45, 0, 84, 84, 46, 
	47, 42, 49, 50, 51, 49, 50, 51, 
	52, 53, 57, 60, 53, 54, 59, 55, 
	85, 56, 55, 56, 55, 58, 85, 56, 
	57, 52, 85, 60, 62, 63, 64, 62, 
	63, 64, 65, 66, 70, 74, 66, 67, 
	73, 68, 72, 69, 68, 69, 68, 71, 
	72, 69, 70, 65, 72, 86, 74, 76, 
	87, 76, 88, 78, 79, 80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 2, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 15, 15, 0, 0, 
	17, 18, 17, 17, 5, 19, 0, 25, 
	26, 25, 0, 27, 0, 0, 28, 29, 
	30, 31, 31, 32, 11, 33, 31, 34, 
	8, 13, 13, 13, 35, 0, 8, 11, 
	11, 13, 13, 13, 12, 36, 37, 31, 
	31, 19, 38, 3, 4, 5, 0, 6, 
	0, 8, 9, 11, 13, 13, 13, 15, 
	39, 15, 0, 0, 17, 18, 40, 17, 
	5, 19, 41, 31, 2, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 42, 31, 22, 
	43, 24, 44, 0, 0, 28, 29, 45
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 0, 0, 12, 
	16, 12, 16, 32, 32, 34, 34, 34, 
	34, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 41 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 29 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 25 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 27 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 28 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 30 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 37 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 38 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module SimpleStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 
	10, 10, 10, 92, 92, 
	9, 122, 92, 92, 9, 122, 
	48, 122, 10, 122, 34, 
	34, 34, 92, 10, 10, 
	92, 92, 9, 122, 9, 122, 
	34, 92, 10, 10, 92, 
	92, 10, 122, 10, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	92, 92, 9, 122, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	10, 10, 92, 92, 9, 122, 
	33, 126, 10, 126, 10, 
	47, 47, 47, 10, 10, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	114, 32, 114, 114, 59, 36, 36, 114, 
	114, 36, 39, 39, 1, 1, 1, 1, 
	114, 1, 114, 75, 113, 1, 59, 1, 
	1, 114, 114, 59, 1, 1, 113, 113, 
	75, 114, 32, 114, 114, 59, 36, 36, 
	114, 114, 36, 1, 114, 75, 114, 32, 
	114, 114, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 94, 117, 38, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	551, 588, 703, 818, 855, 880, 999, 1118, 
	1233, 1348, 1381, 1496, 1611, 1671, 1708, 1745, 
	1860, 1975, 2012, 2052, 2092, 2094, 2096, 2098, 
	2100, 2215, 2217, 2332, 2408, 2522, 2524, 2584, 
	2586, 2588, 2703, 2818, 2878, 2880, 2882, 2996, 
	3110, 3186, 3301, 3334, 3449, 3564, 3624, 3661, 
	3698, 3813, 3928, 3965, 3967, 4082, 4158, 4273, 
	4306, 4421, 4536, 4596, 4633, 4670, 4785, 4900, 
	4937, 4939, 4941, 5056, 5151, 5269, 5308, 5310, 
	5312, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 
	5321
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 4, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 7, 6, 
	9, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 9, 
	8, 10, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 8, 8, 8, 8, 8, 8, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 8, 8, 8, 11, 8, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 8, 9, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 9, 12, 10, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 12, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 12, 12, 
	12, 13, 12, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 12, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	16, 14, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 18, 17, 17, 17, 17, 17, 17, 
	17, 17, 19, 17, 17, 20, 17, 21, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 21, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 22, 6, 22, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 22, 8, 10, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 8, 8, 8, 
	8, 8, 8, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 8, 
	8, 8, 11, 8, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 8, 24, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 24, 23, 
	23, 23, 23, 23, 23, 23, 25, 26, 
	23, 23, 27, 23, 23, 23, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 23, 23, 23, 23, 23, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 23, 23, 23, 28, 23, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 23, 21, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 21, 30, 30, 30, 30, 30, 30, 
	30, 30, 31, 30, 30, 22, 30, 32, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 32, 30, 
	33, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 33, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 6, 35, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 35, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 6, 37, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 0, 
	0, 0, 0, 0, 0, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 0, 0, 0, 38, 0, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	0, 39, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	39, 0, 0, 0, 0, 0, 0, 0, 
	40, 0, 0, 0, 0, 0, 0, 0, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 0, 0, 0, 0, 0, 0, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 0, 0, 0, 41, 
	0, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 0, 42, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 42, 6, 6, 6, 6, 
	6, 6, 6, 43, 6, 44, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 44, 8, 45, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 8, 8, 
	8, 8, 8, 8, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	8, 8, 8, 46, 8, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 8, 
	44, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 44, 
	12, 45, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 12, 12, 12, 12, 12, 12, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 12, 12, 12, 47, 12, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 12, 49, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 50, 48, 51, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 51, 17, 
	17, 17, 17, 17, 17, 17, 17, 52, 
	17, 17, 53, 17, 54, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 54, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 55, 
	6, 55, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	55, 8, 45, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 8, 8, 8, 8, 8, 8, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 8, 8, 8, 46, 
	8, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 46, 46, 46, 46, 46, 
	46, 46, 46, 8, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 57, 58, 23, 23, 59, 
	23, 23, 23, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 61, 23, 23, 
	23, 23, 23, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 23, 
	23, 23, 60, 23, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 23, 54, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 54, 30, 
	30, 30, 30, 30, 30, 30, 30, 62, 
	30, 30, 55, 30, 63, 64, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 63, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 65, 30, 66, 67, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 66, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 68, 6, 69, 6, 6, 70, 
	72, 71, 50, 48, 56, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 56, 23, 23, 23, 23, 
	23, 23, 23, 23, 58, 23, 23, 59, 
	23, 23, 23, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 23, 23, 23, 
	23, 23, 23, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 23, 
	23, 23, 73, 23, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 23, 16, 
	14, 24, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	24, 23, 23, 23, 23, 23, 23, 23, 
	23, 26, 23, 23, 27, 23, 23, 23, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 23, 23, 23, 23, 23, 23, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 23, 23, 23, 74, 
	23, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 23, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 75, 75, 
	75, 75, 75, 75, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 76, 75, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	77, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	75, 75, 75, 75, 75, 75, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 75, 75, 75, 78, 75, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 75, 80, 79, 82, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 83, 81, 
	84, 79, 83, 81, 85, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 85, 8, 86, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 8, 8, 8, 
	8, 8, 8, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 8, 
	8, 8, 87, 8, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 8, 85, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 85, 12, 
	86, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	12, 12, 12, 12, 12, 12, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 12, 12, 12, 88, 12, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 12, 90, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 89, 93, 92, 
	91, 89, 94, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 0, 0, 0, 0, 0, 0, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 0, 0, 0, 95, 
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 0, 94, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 97, 0, 0, 0, 
	0, 0, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 0, 0, 
	0, 96, 0, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 0, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	0, 0, 0, 0, 0, 0, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 0, 0, 0, 98, 0, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 0, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 99, 0, 0, 0, 0, 0, 0, 
	0, 100, 0, 0, 0, 0, 0, 0, 
	0, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 0, 0, 0, 0, 0, 
	0, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 0, 0, 0, 
	101, 0, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 0, 102, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 102, 6, 6, 6, 
	6, 6, 6, 6, 103, 6, 104, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 104, 8, 105, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 8, 
	8, 8, 8, 8, 8, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 8, 8, 8, 106, 8, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	8, 104, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	104, 12, 105, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 12, 12, 12, 12, 12, 12, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 12, 12, 12, 107, 
	12, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 12, 109, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 110, 108, 
	111, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	112, 17, 17, 113, 17, 114, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 114, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	115, 6, 115, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 115, 8, 105, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 8, 8, 8, 8, 8, 
	8, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 8, 8, 8, 
	106, 8, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 8, 116, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 116, 23, 23, 23, 
	23, 23, 23, 23, 117, 118, 23, 23, 
	119, 23, 23, 23, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 121, 23, 
	23, 23, 23, 23, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	23, 23, 23, 120, 23, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 23, 
	114, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 114, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	122, 30, 30, 115, 30, 110, 108, 116, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 116, 23, 
	23, 23, 23, 23, 23, 23, 23, 118, 
	23, 23, 119, 23, 23, 23, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	23, 23, 23, 23, 23, 23, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 23, 23, 23, 123, 23, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 23, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 0, 0, 0, 0, 
	0, 0, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 0, 0, 
	0, 124, 0, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 125, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 125, 0, 0, 
	0, 0, 0, 0, 0, 126, 0, 0, 
	0, 0, 0, 0, 0, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 0, 
	0, 0, 0, 0, 0, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 0, 0, 0, 127, 0, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	127, 127, 127, 127, 127, 127, 127, 127, 
	0, 128, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	128, 6, 6, 6, 6, 6, 6, 6, 
	129, 6, 130, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 130, 8, 131, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 8, 8, 8, 8, 8, 
	8, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 8, 8, 8, 
	132, 8, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 8, 130, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 130, 12, 131, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 12, 12, 
	12, 12, 12, 12, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	12, 12, 12, 133, 12, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 133, 133, 12, 
	135, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 134, 134, 134, 134, 134, 134, 
	134, 134, 136, 134, 137, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 137, 17, 17, 17, 17, 
	17, 17, 17, 17, 138, 17, 17, 139, 
	17, 140, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	140, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 141, 6, 141, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 141, 8, 131, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 8, 
	8, 8, 8, 8, 8, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 8, 8, 8, 132, 8, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	8, 142, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	142, 23, 23, 23, 23, 23, 23, 23, 
	143, 144, 23, 23, 145, 23, 23, 23, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 147, 23, 23, 23, 23, 23, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 23, 23, 23, 146, 
	23, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 23, 140, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 140, 30, 30, 30, 30, 
	30, 30, 30, 30, 148, 30, 30, 141, 
	30, 149, 30, 136, 134, 142, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 142, 23, 23, 23, 
	23, 23, 23, 23, 23, 144, 23, 23, 
	145, 23, 23, 23, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 23, 23, 
	23, 23, 23, 23, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	23, 23, 23, 150, 23, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 23, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 151, 151, 
	151, 151, 151, 151, 151, 151, 6, 152, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 6, 154, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 155, 6, 156, 6, 6, 157, 
	159, 158, 6, 6, 6, 6, 30, 30, 
	6, 6, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 4, 2, 3, 0, 4, 
	0, 5, 6, 10, 0, 34, 6, 7, 
	33, 0, 8, 12, 9, 8, 9, 0, 
	8, 11, 12, 9, 10, 5, 0, 12, 
	13, 13, 14, 15, 14, 15, 16, 17, 
	18, 16, 17, 18, 19, 20, 24, 32, 
	20, 21, 31, 22, 26, 23, 22, 23, 
	22, 25, 26, 23, 24, 19, 26, 27, 
	81, 28, 27, 81, 28, 29, 30, 30, 
	81, 32, 34, 0, 36, 82, 36, 0, 
	38, 38, 39, 40, 83, 42, 43, 47, 
	46, 43, 44, 45, 0, 84, 84, 46, 
	47, 42, 49, 50, 51, 49, 50, 51, 
	52, 53, 57, 60, 53, 54, 59, 55, 
	85, 56, 55, 56, 55, 58, 85, 56, 
	57, 52, 85, 60, 62, 63, 64, 62, 
	63, 64, 65, 66, 70, 74, 66, 67, 
	73, 68, 72, 69, 68, 69, 68, 71, 
	72, 69, 70, 65, 72, 86, 74, 76, 
	87, 76, 88, 78, 79, 80, 80, 88
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 2, 3, 4, 5, 0, 0, 6, 
	7, 0, 8, 9, 10, 11, 13, 13, 
	13, 14, 15, 15, 15, 0, 0, 16, 
	17, 18, 17, 17, 5, 19, 20, 0, 
	21, 0, 22, 23, 24, 0, 2, 3, 
	4, 5, 0, 6, 0, 8, 9, 11, 
	13, 13, 13, 15, 15, 15, 0, 0, 
	17, 18, 17, 17, 5, 19, 0, 25, 
	26, 25, 0, 27, 0, 0, 28, 29, 
	30, 31, 31, 32, 11, 33, 31, 34, 
	8, 13, 13, 13, 35, 0, 8, 11, 
	11, 13, 13, 13, 12, 36, 37, 31, 
	31, 19, 38, 3, 4, 5, 0, 6, 
	0, 8, 9, 11, 13, 13, 13, 15, 
	39, 15, 0, 0, 17, 18, 40, 17, 
	5, 19, 41, 31, 2, 3, 4, 5, 
	0, 6, 0, 8, 9, 11, 13, 13, 
	13, 15, 15, 15, 0, 0, 17, 18, 
	17, 17, 5, 19, 0, 42, 31, 22, 
	43, 24, 44, 0, 0, 28, 29, 45
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 7, 10, 12, 14, 
	0, 7, 16, 20, 20, 0, 0, 1, 
	1, 0, 7, 10, 12, 14, 0, 7, 
	16, 20, 20, 0, 0, 0, 0, 12, 
	16, 12, 16, 32, 32, 34, 34, 34, 
	34, 7, 10, 12, 12, 12, 1, 1, 
	1, 1, 0, 7, 10, 12, 14, 0, 
	7, 16, 20, 12, 16, 1, 1, 0, 
	7, 10, 12, 14, 0, 7, 16, 20, 
	20, 12, 16, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 81;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 35;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 37;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 41;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 48;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 61;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 75;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 77;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 1;


      # end: ragel        
          end

          def each
            @buffers = {}
            stack    = []
            data     = @content.unpack('C*')
            p        = 0
            pe       = data.length
            eof      = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 31 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 13 then
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 41 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 42 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 24 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 23 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 29 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 44 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 21 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 25 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 27 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 11 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
	when 5 then
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 33 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    yield @buffers[:ident]
  		end
	when 19 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 3 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
	when 18 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    p -= @buffers[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 48
		_goto_level = _again
		next
	end

  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 8 then
		begin

    @buffers[:string] = []
  		end
		begin

    (@buffers[:string] ||= []) << data[p].ord
  		end
	when 35 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    yield @buffers[:string]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 22 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 43 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 28 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 30 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 37 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 17 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 4 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:function] = identifier(utf8_string(@buffers[:function]))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 36 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
	when 9 then
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:ident] = identifier(utf8_string(@buffers[:ident]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 39 then
		begin

    @buffers[:string] = string(utf8_string(@buffers[:string]))
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    puts 'before', @buffers
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    #t = @buffers[:term_stack][-1]
    #t << argument(@buffers[:parameter])
    puts 'after', @buffers
    #@buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	when 38 then
		begin

    t = term([], complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @buffers[:function] = []
  		end
		begin

    @buffers[:ident] = []
  		end
		begin

    (@buffers[:ident] ||= []) << data[p].ord
  		end
		begin

    @buffers[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 12 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 20 then
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 32 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:ident] ||= []
    yield @buffers[:ident]
  		end
	when 7 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
	when 16 then
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    unless @buffers[:ident].is_a?(::AST::Node)
      @buffers[:ident] ||= []
      @buffers[:ident]   = identifier(utf8_string(@buffers[:ident]).sub(/\n$/, ''))
    end
  		end
	when 34 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    @buffers[:string] ||= []
    yield @buffers[:string]
  		end
	when 14 then
		begin

    @buffers[:string] ||= []
    @buffers[:string] = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
  		end
		begin

    # $ all states; error_term
    puts 'error_term'
    yield @buffers[:term_stack][-1]
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::SimpleStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
