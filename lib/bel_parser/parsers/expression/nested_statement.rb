
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	32, 9, 126, 9, 126, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 9, 122, 
	0, 0, 9, 122, 9, 122, 
	34, 92, 34, 92, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 0, 0, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	10, 122, 10, 34, 0, 
	0, 10, 92, 10, 92, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 24, 118, 118, 
	32, 1, 39, 1, 1, 1, 0, 114, 
	0, 114, 114, 59, 59, 1, 0, 113, 
	113, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 0, 114, 75, 
	114, 32, 114, 114, 59, 59, 36, 36, 
	114, 114, 36, 1, 0, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	114, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 59, 36, 36, 114, 114, 36, 39, 
	39, 1, 1, 1, 0, 114, 0, 114, 
	75, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	1, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 0, 114, 0, 114, 
	0, 113, 0, 113, 25, 0, 83, 83, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	574, 611, 648, 763, 878, 915, 940, 1059, 
	1178, 1211, 1213, 1253, 1255, 1257, 1259, 1260, 
	1375, 1376, 1491, 1606, 1666, 1726, 1728, 1729, 
	1843, 1957, 2033, 2148, 2181, 2296, 2411, 2471, 
	2531, 2568, 2605, 2720, 2835, 2872, 2873, 2988, 
	3064, 3179, 3212, 3327, 3442, 3502, 3562, 3599, 
	3636, 3751, 3866, 3903, 3905, 3906, 4021, 4116, 
	4234, 4273, 4275, 4277, 4279, 4355, 4470, 4503, 
	4618, 4733, 4793, 4853, 4890, 4927, 5042, 5157, 
	5194, 5219, 5338, 5457, 5572, 5687, 5720, 5835, 
	5950, 6010, 6070, 6107, 6144, 6259, 6374, 6411, 
	6451, 6491, 6493, 6495, 6497, 6498, 6613, 6614, 
	6729, 6805, 6920, 6953, 7068, 7183, 7243, 7303, 
	7340, 7377, 7492, 7607, 7644, 7669, 7788, 7907, 
	8022, 8024, 8139, 8172, 8287, 8402, 8462, 8522, 
	8559, 8596, 8711, 8826, 8863, 8864, 8979, 8980, 
	9095, 9096, 9210, 9211, 9325, 9351, 9352, 9436, 
	9520, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 
	9529
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 1, 
	1, 1, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 1, 1, 
	1, 10, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 12, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	13, 11, 15, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 16, 14, 18, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 19, 17, 
	17, 20, 17, 21, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 21, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 22, 1, 
	22, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 22, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 23, 17, 17, 17, 17, 17, 
	17, 17, 24, 25, 17, 17, 26, 17, 
	17, 17, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 28, 17, 17, 17, 
	17, 17, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 17, 17, 
	17, 27, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 21, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 21, 17, 17, 
	17, 17, 17, 17, 17, 17, 29, 17, 
	17, 22, 17, 30, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 30, 17, 31, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 31, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 1, 33, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 33, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 1, 1, 1, 1, 1, 
	1, 36, 1, 37, 1, 37, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 40, 1, 1, 
	41, 43, 42, 14, 23, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 25, 17, 17, 26, 
	17, 17, 17, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 17, 17, 17, 
	17, 17, 17, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 17, 
	17, 17, 44, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 45, 
	46, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 1, 1, 1, 1, 1, 1, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 48, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 46, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 46, 1, 47, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 1, 1, 1, 1, 
	1, 1, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 1, 1, 
	1, 49, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 51, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	52, 50, 54, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 55, 53, 56, 1, 
	53, 57, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 1, 1, 1, 1, 1, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 1, 1, 58, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 57, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 60, 1, 1, 1, 1, 
	1, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 1, 1, 1, 
	59, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 1, 
	1, 1, 1, 1, 1, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 1, 1, 1, 61, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 62, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	62, 1, 1, 1, 1, 1, 1, 1, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 1, 1, 1, 1, 1, 1, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 1, 1, 1, 64, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 65, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 65, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 67, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 67, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	67, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	1, 68, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 1, 1, 1, 1, 1, 1, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 1, 1, 1, 70, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 72, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 73, 71, 75, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 74, 77, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 77, 17, 17, 17, 17, 17, 
	17, 17, 17, 78, 17, 17, 79, 17, 
	80, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 80, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 81, 1, 81, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 81, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 82, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	84, 17, 17, 85, 17, 17, 17, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 87, 17, 17, 17, 17, 17, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 17, 17, 17, 86, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 80, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 80, 17, 17, 17, 17, 17, 
	17, 17, 17, 88, 17, 17, 81, 17, 
	74, 82, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 84, 17, 17, 85, 17, 17, 17, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 17, 17, 17, 17, 17, 17, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 17, 17, 17, 89, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 1, 1, 
	1, 1, 1, 1, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	1, 1, 1, 90, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	91, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 91, 
	1, 1, 1, 1, 1, 1, 1, 92, 
	1, 1, 1, 1, 1, 1, 1, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 1, 1, 1, 93, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 94, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 94, 1, 1, 1, 1, 1, 
	1, 1, 95, 1, 96, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 96, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 96, 1, 
	97, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 101, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 102, 100, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	105, 103, 106, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 106, 17, 17, 17, 17, 17, 17, 
	17, 17, 107, 17, 17, 108, 17, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 109, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 110, 1, 110, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 111, 17, 
	17, 17, 17, 17, 17, 17, 112, 113, 
	17, 17, 114, 17, 17, 17, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	116, 17, 17, 17, 17, 17, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 17, 17, 17, 115, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 109, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 109, 17, 17, 17, 17, 17, 17, 
	17, 17, 117, 17, 17, 110, 17, 118, 
	17, 103, 111, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 111, 17, 17, 17, 17, 17, 17, 
	17, 17, 113, 17, 17, 114, 17, 17, 
	17, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 17, 17, 17, 17, 17, 
	17, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 17, 17, 17, 
	119, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 1, 123, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	1, 125, 1, 1, 126, 128, 127, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 1, 1, 1, 1, 1, 1, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 129, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 131, 1, 1, 1, 1, 1, 
	1, 1, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 132, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 1, 1, 
	1, 1, 1, 1, 1, 134, 1, 135, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 135, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 135, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 135, 1, 136, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 1, 1, 1, 1, 1, 
	1, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 1, 1, 1, 
	138, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 140, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 141, 
	139, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 145, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 146, 17, 17, 
	147, 17, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 149, 1, 149, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 149, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 150, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 150, 17, 17, 17, 17, 17, 17, 
	17, 151, 152, 17, 17, 153, 17, 17, 
	17, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 155, 17, 17, 17, 17, 
	17, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 17, 17, 17, 
	154, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 148, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 148, 17, 17, 17, 
	17, 17, 17, 17, 17, 156, 17, 17, 
	149, 17, 157, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 157, 17, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 158, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 1, 160, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 160, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	162, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 1, 1, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 1, 1, 1, 163, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 164, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 164, 1, 1, 1, 1, 
	1, 1, 1, 165, 1, 1, 1, 1, 
	1, 1, 1, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 1, 1, 1, 
	1, 1, 1, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 1, 
	1, 1, 166, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 167, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 167, 1, 
	1, 1, 1, 1, 1, 1, 168, 1, 
	169, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 169, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 1, 1, 1, 1, 
	1, 1, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 1, 1, 
	1, 172, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 174, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	175, 173, 177, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 178, 176, 179, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 179, 17, 17, 
	17, 17, 17, 17, 17, 17, 180, 17, 
	17, 181, 17, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 183, 1, 
	183, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 183, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 184, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 184, 17, 17, 17, 17, 17, 
	17, 17, 185, 186, 17, 17, 187, 17, 
	17, 17, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 189, 17, 17, 17, 
	17, 17, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 17, 17, 
	17, 188, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 182, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 182, 17, 17, 
	17, 17, 17, 17, 17, 17, 190, 17, 
	17, 183, 17, 191, 192, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 191, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 193, 17, 194, 195, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 194, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 196, 1, 197, 1, 1, 198, 200, 
	199, 176, 184, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 184, 17, 17, 17, 17, 17, 17, 
	17, 17, 186, 17, 17, 187, 17, 17, 
	17, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 17, 17, 17, 17, 17, 
	17, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 17, 17, 17, 
	201, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 142, 150, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 150, 17, 17, 
	17, 17, 17, 17, 17, 17, 152, 17, 
	17, 153, 17, 17, 17, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 17, 
	17, 17, 17, 17, 17, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 17, 17, 17, 202, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 1, 1, 1, 1, 1, 
	1, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 1, 1, 1, 
	203, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 204, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 204, 1, 1, 1, 
	1, 1, 1, 1, 205, 1, 1, 1, 
	1, 1, 1, 1, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 1, 1, 
	1, 1, 1, 1, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	1, 1, 1, 206, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	207, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 207, 
	1, 1, 1, 1, 1, 1, 1, 208, 
	1, 209, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 209, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 1, 1, 1, 
	1, 1, 1, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 1, 
	1, 1, 212, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 214, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 215, 213, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 219, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 219, 17, 
	17, 17, 17, 17, 17, 17, 17, 220, 
	17, 17, 221, 17, 222, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 222, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 223, 
	1, 223, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	223, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 225, 226, 17, 17, 227, 
	17, 17, 17, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 229, 17, 17, 
	17, 17, 17, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 17, 
	17, 17, 228, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 222, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 222, 17, 
	17, 17, 17, 17, 17, 17, 17, 230, 
	17, 17, 223, 17, 231, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 231, 17, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 234, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 236, 1, 1, 1, 1, 1, 
	1, 1, 237, 1, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	1, 1, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 1, 1, 
	1, 238, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 239, 1, 
	240, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 240, 
	1, 1, 1, 1, 1, 1, 1, 241, 
	1, 1, 1, 1, 1, 1, 1, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 1, 1, 1, 1, 1, 1, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 1, 1, 1, 242, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 243, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 243, 1, 1, 1, 1, 1, 
	1, 1, 244, 1, 245, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 245, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 245, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	1, 1, 1, 1, 1, 1, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 1, 1, 1, 248, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 250, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 251, 249, 253, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	254, 252, 255, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 255, 17, 17, 17, 17, 17, 17, 
	17, 17, 256, 17, 17, 257, 17, 258, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 258, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 259, 1, 259, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 260, 17, 
	17, 17, 17, 17, 17, 17, 261, 262, 
	17, 17, 263, 17, 17, 17, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	265, 17, 17, 17, 17, 17, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 17, 17, 17, 264, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 258, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 258, 17, 17, 17, 17, 17, 17, 
	17, 17, 266, 17, 17, 259, 17, 252, 
	260, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	262, 17, 17, 263, 17, 17, 17, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 17, 17, 17, 17, 17, 17, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 17, 17, 17, 267, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 216, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 17, 226, 17, 17, 227, 
	17, 17, 17, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 17, 17, 17, 
	17, 17, 17, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 17, 
	17, 17, 268, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 1, 
	269, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	1, 1, 1, 1, 1, 1, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 1, 1, 270, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 269, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 1, 1, 1, 1, 1, 
	1, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 1, 1, 1, 
	271, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 273, 1, 1, 
	275, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	276, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 277, 274, 278, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 279, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 280, 45, 
	281, 1, 1, 17, 17, 1, 1, 1, 
	1, 17, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 11, 23, 7, 8, 22, 7, 8, 
	22, 0, 9, 13, 10, 9, 10, 9, 
	12, 13, 10, 11, 5, 13, 14, 14, 
	15, 16, 15, 16, 17, 18, 136, 19, 
	20, 21, 21, 136, 23, 143, 26, 27, 
	32, 31, 28, 29, 30, 28, 29, 30, 
	145, 145, 31, 32, 26, 34, 35, 36, 
	34, 35, 36, 37, 38, 43, 46, 39, 
	40, 45, 39, 40, 45, 41, 146, 42, 
	41, 42, 41, 44, 146, 42, 43, 37, 
	146, 46, 48, 49, 50, 48, 49, 50, 
	51, 52, 57, 61, 53, 54, 60, 53, 
	54, 60, 55, 59, 56, 55, 56, 55, 
	58, 59, 56, 57, 51, 59, 147, 61, 
	63, 148, 63, 149, 65, 66, 67, 67, 
	149, 69, 70, 71, 69, 70, 71, 72, 
	73, 78, 103, 74, 75, 102, 74, 75, 
	102, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 72, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 93, 101, 89, 90, 100, 
	89, 90, 100, 91, 95, 92, 91, 92, 
	91, 94, 95, 92, 93, 87, 95, 96, 
	150, 97, 96, 150, 97, 98, 99, 99, 
	150, 101, 103, 105, 106, 107, 105, 106, 
	107, 108, 109, 114, 135, 110, 111, 134, 
	110, 111, 134, 112, 116, 113, 112, 113, 
	112, 115, 116, 113, 114, 108, 116, 117, 
	117, 118, 119, 118, 119, 120, 121, 151, 
	122, 123, 121, 122, 123, 124, 125, 130, 
	133, 126, 127, 132, 126, 127, 132, 128, 
	152, 129, 128, 129, 128, 131, 152, 129, 
	130, 124, 152, 133, 135, 138, 139, 139, 
	141, 142, 143, 143, 144, 24, 143, 144, 
	24, 141
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 10, 0, 0, 
	7, 7, 8, 9, 8, 10, 11, 10, 
	28, 29, 27, 27, 17, 30, 2, 3, 
	4, 0, 5, 0, 0, 6, 7, 8, 
	9, 8, 10, 11, 10, 14, 31, 14, 
	0, 0, 15, 16, 32, 15, 4, 17, 
	33, 27, 34, 2, 3, 4, 0, 5, 
	0, 0, 6, 7, 8, 9, 8, 10, 
	11, 10, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 35, 27, 
	19, 36, 21, 37, 0, 0, 24, 25, 
	38, 34, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 14, 14, 14, 0, 0, 15, 16, 
	15, 15, 4, 17, 0, 39, 0, 19, 
	40, 21, 0, 34, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 41, 
	42, 41, 0, 43, 0, 0, 24, 25, 
	44, 27, 27, 45, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 18, 
	0, 19, 20, 21, 0, 22, 34, 46, 
	2, 3, 4, 0, 5, 0, 0, 6, 
	7, 8, 9, 8, 10, 11, 10, 14, 
	47, 14, 0, 0, 15, 16, 48, 15, 
	4, 17, 49, 27, 27, 50, 7, 27, 
	52, 0, 8, 54, 53, 8, 55, 0, 
	10, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 0, 12, 0, 
	0, 0, 0, 0, 0, 0, 12, 0, 
	0, 12, 12, 12, 0, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 12, 0, 0, 12, 12, 
	12, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 0, 12, 12, 12, 
	0, 0, 0, 0, 0, 12, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 0, 12, 0, 12, 
	0, 0, 0, 51, 0, 0, 53, 0, 
	56, 0, 58, 58, 0, 0, 0, 0, 
	58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 136;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_id_ast
end
self.bel_en_id_ast = 137;
class << self
	attr_accessor :bel_en_str_ast
end
self.bel_en_str_ast = 140;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 33;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 47;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 62;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 64;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 68;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 104;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 10 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 11 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 33 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 39 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 104
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 7 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 33
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 9 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 44 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 57 then
		begin

    @closed = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 28 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 31 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 34 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 56 then
		begin

    @closed = true
  		end
	when 58 then
		begin

  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	32, 9, 126, 9, 126, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 9, 122, 
	0, 0, 9, 122, 9, 122, 
	34, 92, 34, 92, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 0, 0, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	10, 122, 10, 34, 0, 
	0, 10, 92, 10, 92, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 24, 118, 118, 
	32, 1, 39, 1, 1, 1, 0, 114, 
	0, 114, 114, 59, 59, 1, 0, 113, 
	113, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 0, 114, 75, 
	114, 32, 114, 114, 59, 59, 36, 36, 
	114, 114, 36, 1, 0, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	114, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 59, 36, 36, 114, 114, 36, 39, 
	39, 1, 1, 1, 0, 114, 0, 114, 
	75, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	1, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 0, 114, 0, 114, 
	0, 113, 0, 113, 25, 0, 83, 83, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	574, 611, 648, 763, 878, 915, 940, 1059, 
	1178, 1211, 1213, 1253, 1255, 1257, 1259, 1260, 
	1375, 1376, 1491, 1606, 1666, 1726, 1728, 1729, 
	1843, 1957, 2033, 2148, 2181, 2296, 2411, 2471, 
	2531, 2568, 2605, 2720, 2835, 2872, 2873, 2988, 
	3064, 3179, 3212, 3327, 3442, 3502, 3562, 3599, 
	3636, 3751, 3866, 3903, 3905, 3906, 4021, 4116, 
	4234, 4273, 4275, 4277, 4279, 4355, 4470, 4503, 
	4618, 4733, 4793, 4853, 4890, 4927, 5042, 5157, 
	5194, 5219, 5338, 5457, 5572, 5687, 5720, 5835, 
	5950, 6010, 6070, 6107, 6144, 6259, 6374, 6411, 
	6451, 6491, 6493, 6495, 6497, 6498, 6613, 6614, 
	6729, 6805, 6920, 6953, 7068, 7183, 7243, 7303, 
	7340, 7377, 7492, 7607, 7644, 7669, 7788, 7907, 
	8022, 8024, 8139, 8172, 8287, 8402, 8462, 8522, 
	8559, 8596, 8711, 8826, 8863, 8864, 8979, 8980, 
	9095, 9096, 9210, 9211, 9325, 9351, 9352, 9436, 
	9520, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 
	9529
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 1, 
	1, 1, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 1, 1, 
	1, 10, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 12, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	13, 11, 15, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 16, 14, 18, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 19, 17, 
	17, 20, 17, 21, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 21, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 22, 1, 
	22, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 22, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 23, 17, 17, 17, 17, 17, 
	17, 17, 24, 25, 17, 17, 26, 17, 
	17, 17, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 28, 17, 17, 17, 
	17, 17, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 17, 17, 
	17, 27, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 21, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 21, 17, 17, 
	17, 17, 17, 17, 17, 17, 29, 17, 
	17, 22, 17, 30, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 30, 17, 31, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 31, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 1, 33, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 33, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 1, 1, 1, 1, 1, 
	1, 36, 1, 37, 1, 37, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 40, 1, 1, 
	41, 43, 42, 14, 23, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 25, 17, 17, 26, 
	17, 17, 17, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 17, 17, 17, 
	17, 17, 17, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 17, 
	17, 17, 44, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 45, 
	46, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 1, 1, 1, 1, 1, 1, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 48, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 46, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 46, 1, 47, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 1, 1, 1, 1, 
	1, 1, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 1, 1, 
	1, 49, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 51, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	52, 50, 54, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 55, 53, 56, 1, 
	53, 57, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 1, 1, 1, 1, 1, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 1, 1, 58, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 57, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 60, 1, 1, 1, 1, 
	1, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 1, 1, 1, 
	59, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 1, 
	1, 1, 1, 1, 1, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 1, 1, 1, 61, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 62, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	62, 1, 1, 1, 1, 1, 1, 1, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 1, 1, 1, 1, 1, 1, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 1, 1, 1, 64, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 65, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 65, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 67, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 67, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	67, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	1, 68, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 1, 1, 1, 1, 1, 1, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 1, 1, 1, 70, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 72, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 73, 71, 75, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 74, 77, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 77, 17, 17, 17, 17, 17, 
	17, 17, 17, 78, 17, 17, 79, 17, 
	80, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 80, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 81, 1, 81, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 81, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 82, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	84, 17, 17, 85, 17, 17, 17, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 87, 17, 17, 17, 17, 17, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 17, 17, 17, 86, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 80, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 80, 17, 17, 17, 17, 17, 
	17, 17, 17, 88, 17, 17, 81, 17, 
	74, 82, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 84, 17, 17, 85, 17, 17, 17, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 17, 17, 17, 17, 17, 17, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 17, 17, 17, 89, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 1, 1, 
	1, 1, 1, 1, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	1, 1, 1, 90, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	91, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 91, 
	1, 1, 1, 1, 1, 1, 1, 92, 
	1, 1, 1, 1, 1, 1, 1, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 1, 1, 1, 93, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 94, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 94, 1, 1, 1, 1, 1, 
	1, 1, 95, 1, 96, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 96, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 96, 1, 
	97, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 101, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 102, 100, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	105, 103, 106, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 106, 17, 17, 17, 17, 17, 17, 
	17, 17, 107, 17, 17, 108, 17, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 109, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 110, 1, 110, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 111, 17, 
	17, 17, 17, 17, 17, 17, 112, 113, 
	17, 17, 114, 17, 17, 17, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	116, 17, 17, 17, 17, 17, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 17, 17, 17, 115, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 109, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 109, 17, 17, 17, 17, 17, 17, 
	17, 17, 117, 17, 17, 110, 17, 118, 
	17, 103, 111, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 111, 17, 17, 17, 17, 17, 17, 
	17, 17, 113, 17, 17, 114, 17, 17, 
	17, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 17, 17, 17, 17, 17, 
	17, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 17, 17, 17, 
	119, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 1, 123, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	1, 125, 1, 1, 126, 128, 127, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 1, 1, 1, 1, 1, 1, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 129, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 131, 1, 1, 1, 1, 1, 
	1, 1, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 132, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 1, 1, 
	1, 1, 1, 1, 1, 134, 1, 135, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 135, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 135, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 135, 1, 136, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 1, 1, 1, 1, 1, 
	1, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 1, 1, 1, 
	138, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 140, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 141, 
	139, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 145, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 146, 17, 17, 
	147, 17, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 149, 1, 149, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 149, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 150, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 150, 17, 17, 17, 17, 17, 17, 
	17, 151, 152, 17, 17, 153, 17, 17, 
	17, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 155, 17, 17, 17, 17, 
	17, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 17, 17, 17, 
	154, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 148, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 148, 17, 17, 17, 
	17, 17, 17, 17, 17, 156, 17, 17, 
	149, 17, 157, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 157, 17, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 158, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 1, 160, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 160, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	162, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 1, 1, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 1, 1, 1, 163, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 164, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 164, 1, 1, 1, 1, 
	1, 1, 1, 165, 1, 1, 1, 1, 
	1, 1, 1, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 1, 1, 1, 
	1, 1, 1, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 1, 
	1, 1, 166, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 167, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 167, 1, 
	1, 1, 1, 1, 1, 1, 168, 1, 
	169, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 169, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 1, 1, 1, 1, 
	1, 1, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 1, 1, 
	1, 172, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 174, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	175, 173, 177, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 178, 176, 179, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 179, 17, 17, 
	17, 17, 17, 17, 17, 17, 180, 17, 
	17, 181, 17, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 183, 1, 
	183, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 183, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 184, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 184, 17, 17, 17, 17, 17, 
	17, 17, 185, 186, 17, 17, 187, 17, 
	17, 17, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 189, 17, 17, 17, 
	17, 17, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 17, 17, 
	17, 188, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 182, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 182, 17, 17, 
	17, 17, 17, 17, 17, 17, 190, 17, 
	17, 183, 17, 191, 192, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 191, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 193, 17, 194, 195, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 194, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 196, 1, 197, 1, 1, 198, 200, 
	199, 176, 184, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 184, 17, 17, 17, 17, 17, 17, 
	17, 17, 186, 17, 17, 187, 17, 17, 
	17, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 17, 17, 17, 17, 17, 
	17, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 17, 17, 17, 
	201, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 142, 150, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 150, 17, 17, 
	17, 17, 17, 17, 17, 17, 152, 17, 
	17, 153, 17, 17, 17, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 17, 
	17, 17, 17, 17, 17, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 17, 17, 17, 202, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 1, 1, 1, 1, 1, 
	1, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 1, 1, 1, 
	203, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 204, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 204, 1, 1, 1, 
	1, 1, 1, 1, 205, 1, 1, 1, 
	1, 1, 1, 1, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 1, 1, 
	1, 1, 1, 1, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	1, 1, 1, 206, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	207, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 207, 
	1, 1, 1, 1, 1, 1, 1, 208, 
	1, 209, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 209, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 1, 1, 1, 
	1, 1, 1, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 1, 
	1, 1, 212, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 214, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 215, 213, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 219, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 219, 17, 
	17, 17, 17, 17, 17, 17, 17, 220, 
	17, 17, 221, 17, 222, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 222, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 223, 
	1, 223, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	223, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 225, 226, 17, 17, 227, 
	17, 17, 17, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 229, 17, 17, 
	17, 17, 17, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 17, 
	17, 17, 228, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 222, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 222, 17, 
	17, 17, 17, 17, 17, 17, 17, 230, 
	17, 17, 223, 17, 231, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 231, 17, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 234, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 236, 1, 1, 1, 1, 1, 
	1, 1, 237, 1, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	1, 1, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 1, 1, 
	1, 238, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 239, 1, 
	240, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 240, 
	1, 1, 1, 1, 1, 1, 1, 241, 
	1, 1, 1, 1, 1, 1, 1, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 1, 1, 1, 1, 1, 1, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 1, 1, 1, 242, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 243, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 243, 1, 1, 1, 1, 1, 
	1, 1, 244, 1, 245, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 245, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 245, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	1, 1, 1, 1, 1, 1, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 1, 1, 1, 248, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 250, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 251, 249, 253, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	254, 252, 255, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 255, 17, 17, 17, 17, 17, 17, 
	17, 17, 256, 17, 17, 257, 17, 258, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 258, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 259, 1, 259, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 260, 17, 
	17, 17, 17, 17, 17, 17, 261, 262, 
	17, 17, 263, 17, 17, 17, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	265, 17, 17, 17, 17, 17, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 17, 17, 17, 264, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 258, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 258, 17, 17, 17, 17, 17, 17, 
	17, 17, 266, 17, 17, 259, 17, 252, 
	260, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	262, 17, 17, 263, 17, 17, 17, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 17, 17, 17, 17, 17, 17, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 17, 17, 17, 267, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 216, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 17, 226, 17, 17, 227, 
	17, 17, 17, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 17, 17, 17, 
	17, 17, 17, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 17, 
	17, 17, 268, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 1, 
	269, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	1, 1, 1, 1, 1, 1, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 1, 1, 270, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 269, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 1, 1, 1, 1, 1, 
	1, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 1, 1, 1, 
	271, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 273, 1, 1, 
	275, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	276, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 277, 274, 278, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 279, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 280, 45, 
	281, 1, 1, 17, 17, 1, 1, 1, 
	1, 17, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 11, 23, 7, 8, 22, 7, 8, 
	22, 0, 9, 13, 10, 9, 10, 9, 
	12, 13, 10, 11, 5, 13, 14, 14, 
	15, 16, 15, 16, 17, 18, 136, 19, 
	20, 21, 21, 136, 23, 143, 26, 27, 
	32, 31, 28, 29, 30, 28, 29, 30, 
	145, 145, 31, 32, 26, 34, 35, 36, 
	34, 35, 36, 37, 38, 43, 46, 39, 
	40, 45, 39, 40, 45, 41, 146, 42, 
	41, 42, 41, 44, 146, 42, 43, 37, 
	146, 46, 48, 49, 50, 48, 49, 50, 
	51, 52, 57, 61, 53, 54, 60, 53, 
	54, 60, 55, 59, 56, 55, 56, 55, 
	58, 59, 56, 57, 51, 59, 147, 61, 
	63, 148, 63, 149, 65, 66, 67, 67, 
	149, 69, 70, 71, 69, 70, 71, 72, 
	73, 78, 103, 74, 75, 102, 74, 75, 
	102, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 72, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 93, 101, 89, 90, 100, 
	89, 90, 100, 91, 95, 92, 91, 92, 
	91, 94, 95, 92, 93, 87, 95, 96, 
	150, 97, 96, 150, 97, 98, 99, 99, 
	150, 101, 103, 105, 106, 107, 105, 106, 
	107, 108, 109, 114, 135, 110, 111, 134, 
	110, 111, 134, 112, 116, 113, 112, 113, 
	112, 115, 116, 113, 114, 108, 116, 117, 
	117, 118, 119, 118, 119, 120, 121, 151, 
	122, 123, 121, 122, 123, 124, 125, 130, 
	133, 126, 127, 132, 126, 127, 132, 128, 
	152, 129, 128, 129, 128, 131, 152, 129, 
	130, 124, 152, 133, 135, 138, 139, 139, 
	141, 142, 143, 143, 144, 24, 143, 144, 
	24, 141
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 10, 0, 0, 
	7, 7, 8, 9, 8, 10, 11, 10, 
	28, 29, 27, 27, 17, 30, 2, 3, 
	4, 0, 5, 0, 0, 6, 7, 8, 
	9, 8, 10, 11, 10, 14, 31, 14, 
	0, 0, 15, 16, 32, 15, 4, 17, 
	33, 27, 34, 2, 3, 4, 0, 5, 
	0, 0, 6, 7, 8, 9, 8, 10, 
	11, 10, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 35, 27, 
	19, 36, 21, 37, 0, 0, 24, 25, 
	38, 34, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 14, 14, 14, 0, 0, 15, 16, 
	15, 15, 4, 17, 0, 39, 0, 19, 
	40, 21, 0, 34, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 41, 
	42, 41, 0, 43, 0, 0, 24, 25, 
	44, 27, 27, 45, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 18, 
	0, 19, 20, 21, 0, 22, 34, 46, 
	2, 3, 4, 0, 5, 0, 0, 6, 
	7, 8, 9, 8, 10, 11, 10, 14, 
	47, 14, 0, 0, 15, 16, 48, 15, 
	4, 17, 49, 27, 27, 50, 7, 27, 
	52, 0, 8, 54, 53, 8, 55, 0, 
	10, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 0, 12, 0, 
	0, 0, 0, 0, 0, 0, 12, 0, 
	0, 12, 12, 12, 0, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 12, 0, 0, 12, 12, 
	12, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 0, 12, 12, 12, 
	0, 0, 0, 0, 0, 12, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 0, 12, 0, 12, 
	0, 0, 0, 51, 0, 0, 53, 0, 
	56, 0, 58, 58, 0, 0, 0, 0, 
	58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 136;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_id_ast
end
self.bel_en_id_ast = 137;
class << self
	attr_accessor :bel_en_str_ast
end
self.bel_en_str_ast = 140;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 33;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 47;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 62;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 64;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 68;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 104;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 10 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 11 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 33 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 39 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 104
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 7 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 33
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 9 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 44 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 57 then
		begin

    @closed = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 28 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 31 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 34 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 56 then
		begin

    @closed = true
  		end
	when 58 then
		begin

  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	32, 9, 126, 9, 126, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 9, 122, 
	0, 0, 9, 122, 9, 122, 
	34, 92, 34, 92, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 0, 0, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	10, 122, 10, 34, 0, 
	0, 10, 92, 10, 92, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 24, 118, 118, 
	32, 1, 39, 1, 1, 1, 0, 114, 
	0, 114, 114, 59, 59, 1, 0, 113, 
	113, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 0, 114, 75, 
	114, 32, 114, 114, 59, 59, 36, 36, 
	114, 114, 36, 1, 0, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	114, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 59, 36, 36, 114, 114, 36, 39, 
	39, 1, 1, 1, 0, 114, 0, 114, 
	75, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	1, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 0, 114, 0, 114, 
	0, 113, 0, 113, 25, 0, 83, 83, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	574, 611, 648, 763, 878, 915, 940, 1059, 
	1178, 1211, 1213, 1253, 1255, 1257, 1259, 1260, 
	1375, 1376, 1491, 1606, 1666, 1726, 1728, 1729, 
	1843, 1957, 2033, 2148, 2181, 2296, 2411, 2471, 
	2531, 2568, 2605, 2720, 2835, 2872, 2873, 2988, 
	3064, 3179, 3212, 3327, 3442, 3502, 3562, 3599, 
	3636, 3751, 3866, 3903, 3905, 3906, 4021, 4116, 
	4234, 4273, 4275, 4277, 4279, 4355, 4470, 4503, 
	4618, 4733, 4793, 4853, 4890, 4927, 5042, 5157, 
	5194, 5219, 5338, 5457, 5572, 5687, 5720, 5835, 
	5950, 6010, 6070, 6107, 6144, 6259, 6374, 6411, 
	6451, 6491, 6493, 6495, 6497, 6498, 6613, 6614, 
	6729, 6805, 6920, 6953, 7068, 7183, 7243, 7303, 
	7340, 7377, 7492, 7607, 7644, 7669, 7788, 7907, 
	8022, 8024, 8139, 8172, 8287, 8402, 8462, 8522, 
	8559, 8596, 8711, 8826, 8863, 8864, 8979, 8980, 
	9095, 9096, 9210, 9211, 9325, 9351, 9352, 9436, 
	9520, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 
	9529
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 1, 
	1, 1, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 1, 1, 
	1, 10, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 12, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	13, 11, 15, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 16, 14, 18, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 19, 17, 
	17, 20, 17, 21, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 21, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 22, 1, 
	22, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 22, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 23, 17, 17, 17, 17, 17, 
	17, 17, 24, 25, 17, 17, 26, 17, 
	17, 17, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 28, 17, 17, 17, 
	17, 17, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 17, 17, 
	17, 27, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 21, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 21, 17, 17, 
	17, 17, 17, 17, 17, 17, 29, 17, 
	17, 22, 17, 30, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 30, 17, 31, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 31, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 1, 33, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 33, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 1, 1, 1, 1, 1, 
	1, 36, 1, 37, 1, 37, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 40, 1, 1, 
	41, 43, 42, 14, 23, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 25, 17, 17, 26, 
	17, 17, 17, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 17, 17, 17, 
	17, 17, 17, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 17, 
	17, 17, 44, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 45, 
	46, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 1, 1, 1, 1, 1, 1, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 48, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 46, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 46, 1, 47, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 1, 1, 1, 1, 
	1, 1, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 1, 1, 
	1, 49, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 51, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	52, 50, 54, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 55, 53, 56, 1, 
	53, 57, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 1, 1, 1, 1, 1, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 1, 1, 58, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 57, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 60, 1, 1, 1, 1, 
	1, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 1, 1, 1, 
	59, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 1, 
	1, 1, 1, 1, 1, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 1, 1, 1, 61, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 62, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	62, 1, 1, 1, 1, 1, 1, 1, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 1, 1, 1, 1, 1, 1, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 1, 1, 1, 64, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 65, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 65, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 67, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 67, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	67, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	1, 68, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 1, 1, 1, 1, 1, 1, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 1, 1, 1, 70, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 72, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 73, 71, 75, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 74, 77, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 77, 17, 17, 17, 17, 17, 
	17, 17, 17, 78, 17, 17, 79, 17, 
	80, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 80, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 81, 1, 81, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 81, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 82, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	84, 17, 17, 85, 17, 17, 17, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 87, 17, 17, 17, 17, 17, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 17, 17, 17, 86, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 80, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 80, 17, 17, 17, 17, 17, 
	17, 17, 17, 88, 17, 17, 81, 17, 
	74, 82, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 84, 17, 17, 85, 17, 17, 17, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 17, 17, 17, 17, 17, 17, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 17, 17, 17, 89, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 1, 1, 
	1, 1, 1, 1, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	1, 1, 1, 90, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	91, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 91, 
	1, 1, 1, 1, 1, 1, 1, 92, 
	1, 1, 1, 1, 1, 1, 1, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 1, 1, 1, 93, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 94, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 94, 1, 1, 1, 1, 1, 
	1, 1, 95, 1, 96, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 96, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 96, 1, 
	97, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 101, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 102, 100, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	105, 103, 106, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 106, 17, 17, 17, 17, 17, 17, 
	17, 17, 107, 17, 17, 108, 17, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 109, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 110, 1, 110, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 111, 17, 
	17, 17, 17, 17, 17, 17, 112, 113, 
	17, 17, 114, 17, 17, 17, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	116, 17, 17, 17, 17, 17, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 17, 17, 17, 115, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 109, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 109, 17, 17, 17, 17, 17, 17, 
	17, 17, 117, 17, 17, 110, 17, 118, 
	17, 103, 111, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 111, 17, 17, 17, 17, 17, 17, 
	17, 17, 113, 17, 17, 114, 17, 17, 
	17, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 17, 17, 17, 17, 17, 
	17, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 17, 17, 17, 
	119, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 1, 123, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	1, 125, 1, 1, 126, 128, 127, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 1, 1, 1, 1, 1, 1, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 129, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 131, 1, 1, 1, 1, 1, 
	1, 1, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 132, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 1, 1, 
	1, 1, 1, 1, 1, 134, 1, 135, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 135, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 135, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 135, 1, 136, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 1, 1, 1, 1, 1, 
	1, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 1, 1, 1, 
	138, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 140, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 141, 
	139, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 145, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 146, 17, 17, 
	147, 17, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 149, 1, 149, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 149, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 150, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 150, 17, 17, 17, 17, 17, 17, 
	17, 151, 152, 17, 17, 153, 17, 17, 
	17, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 155, 17, 17, 17, 17, 
	17, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 17, 17, 17, 
	154, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 148, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 148, 17, 17, 17, 
	17, 17, 17, 17, 17, 156, 17, 17, 
	149, 17, 157, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 157, 17, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 158, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 1, 160, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 160, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	162, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 1, 1, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 1, 1, 1, 163, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 164, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 164, 1, 1, 1, 1, 
	1, 1, 1, 165, 1, 1, 1, 1, 
	1, 1, 1, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 1, 1, 1, 
	1, 1, 1, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 1, 
	1, 1, 166, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 167, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 167, 1, 
	1, 1, 1, 1, 1, 1, 168, 1, 
	169, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 169, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 1, 1, 1, 1, 
	1, 1, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 1, 1, 
	1, 172, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 174, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	175, 173, 177, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 178, 176, 179, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 179, 17, 17, 
	17, 17, 17, 17, 17, 17, 180, 17, 
	17, 181, 17, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 183, 1, 
	183, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 183, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 184, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 184, 17, 17, 17, 17, 17, 
	17, 17, 185, 186, 17, 17, 187, 17, 
	17, 17, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 189, 17, 17, 17, 
	17, 17, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 17, 17, 
	17, 188, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 182, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 182, 17, 17, 
	17, 17, 17, 17, 17, 17, 190, 17, 
	17, 183, 17, 191, 192, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 191, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 193, 17, 194, 195, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 194, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 196, 1, 197, 1, 1, 198, 200, 
	199, 176, 184, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 184, 17, 17, 17, 17, 17, 17, 
	17, 17, 186, 17, 17, 187, 17, 17, 
	17, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 17, 17, 17, 17, 17, 
	17, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 17, 17, 17, 
	201, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 142, 150, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 150, 17, 17, 
	17, 17, 17, 17, 17, 17, 152, 17, 
	17, 153, 17, 17, 17, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 17, 
	17, 17, 17, 17, 17, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 17, 17, 17, 202, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 1, 1, 1, 1, 1, 
	1, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 1, 1, 1, 
	203, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 204, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 204, 1, 1, 1, 
	1, 1, 1, 1, 205, 1, 1, 1, 
	1, 1, 1, 1, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 1, 1, 
	1, 1, 1, 1, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	1, 1, 1, 206, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	207, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 207, 
	1, 1, 1, 1, 1, 1, 1, 208, 
	1, 209, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 209, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 1, 1, 1, 
	1, 1, 1, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 1, 
	1, 1, 212, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 214, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 215, 213, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 219, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 219, 17, 
	17, 17, 17, 17, 17, 17, 17, 220, 
	17, 17, 221, 17, 222, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 222, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 223, 
	1, 223, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	223, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 225, 226, 17, 17, 227, 
	17, 17, 17, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 229, 17, 17, 
	17, 17, 17, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 17, 
	17, 17, 228, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 222, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 222, 17, 
	17, 17, 17, 17, 17, 17, 17, 230, 
	17, 17, 223, 17, 231, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 231, 17, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 234, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 236, 1, 1, 1, 1, 1, 
	1, 1, 237, 1, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	1, 1, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 1, 1, 
	1, 238, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 239, 1, 
	240, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 240, 
	1, 1, 1, 1, 1, 1, 1, 241, 
	1, 1, 1, 1, 1, 1, 1, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 1, 1, 1, 1, 1, 1, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 1, 1, 1, 242, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 243, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 243, 1, 1, 1, 1, 1, 
	1, 1, 244, 1, 245, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 245, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 245, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	1, 1, 1, 1, 1, 1, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 1, 1, 1, 248, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 250, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 251, 249, 253, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	254, 252, 255, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 255, 17, 17, 17, 17, 17, 17, 
	17, 17, 256, 17, 17, 257, 17, 258, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 258, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 259, 1, 259, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 260, 17, 
	17, 17, 17, 17, 17, 17, 261, 262, 
	17, 17, 263, 17, 17, 17, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	265, 17, 17, 17, 17, 17, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 17, 17, 17, 264, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 258, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 258, 17, 17, 17, 17, 17, 17, 
	17, 17, 266, 17, 17, 259, 17, 252, 
	260, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	262, 17, 17, 263, 17, 17, 17, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 17, 17, 17, 17, 17, 17, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 17, 17, 17, 267, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 216, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 17, 226, 17, 17, 227, 
	17, 17, 17, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 17, 17, 17, 
	17, 17, 17, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 17, 
	17, 17, 268, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 1, 
	269, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	1, 1, 1, 1, 1, 1, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 1, 1, 270, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 269, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 1, 1, 1, 1, 1, 
	1, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 1, 1, 1, 
	271, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 273, 1, 1, 
	275, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	276, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 277, 274, 278, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 279, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 280, 45, 
	281, 1, 1, 17, 17, 1, 1, 1, 
	1, 17, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 11, 23, 7, 8, 22, 7, 8, 
	22, 0, 9, 13, 10, 9, 10, 9, 
	12, 13, 10, 11, 5, 13, 14, 14, 
	15, 16, 15, 16, 17, 18, 136, 19, 
	20, 21, 21, 136, 23, 143, 26, 27, 
	32, 31, 28, 29, 30, 28, 29, 30, 
	145, 145, 31, 32, 26, 34, 35, 36, 
	34, 35, 36, 37, 38, 43, 46, 39, 
	40, 45, 39, 40, 45, 41, 146, 42, 
	41, 42, 41, 44, 146, 42, 43, 37, 
	146, 46, 48, 49, 50, 48, 49, 50, 
	51, 52, 57, 61, 53, 54, 60, 53, 
	54, 60, 55, 59, 56, 55, 56, 55, 
	58, 59, 56, 57, 51, 59, 147, 61, 
	63, 148, 63, 149, 65, 66, 67, 67, 
	149, 69, 70, 71, 69, 70, 71, 72, 
	73, 78, 103, 74, 75, 102, 74, 75, 
	102, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 72, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 93, 101, 89, 90, 100, 
	89, 90, 100, 91, 95, 92, 91, 92, 
	91, 94, 95, 92, 93, 87, 95, 96, 
	150, 97, 96, 150, 97, 98, 99, 99, 
	150, 101, 103, 105, 106, 107, 105, 106, 
	107, 108, 109, 114, 135, 110, 111, 134, 
	110, 111, 134, 112, 116, 113, 112, 113, 
	112, 115, 116, 113, 114, 108, 116, 117, 
	117, 118, 119, 118, 119, 120, 121, 151, 
	122, 123, 121, 122, 123, 124, 125, 130, 
	133, 126, 127, 132, 126, 127, 132, 128, 
	152, 129, 128, 129, 128, 131, 152, 129, 
	130, 124, 152, 133, 135, 138, 139, 139, 
	141, 142, 143, 143, 144, 24, 143, 144, 
	24, 141
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 10, 0, 0, 
	7, 7, 8, 9, 8, 10, 11, 10, 
	28, 29, 27, 27, 17, 30, 2, 3, 
	4, 0, 5, 0, 0, 6, 7, 8, 
	9, 8, 10, 11, 10, 14, 31, 14, 
	0, 0, 15, 16, 32, 15, 4, 17, 
	33, 27, 34, 2, 3, 4, 0, 5, 
	0, 0, 6, 7, 8, 9, 8, 10, 
	11, 10, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 35, 27, 
	19, 36, 21, 37, 0, 0, 24, 25, 
	38, 34, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 14, 14, 14, 0, 0, 15, 16, 
	15, 15, 4, 17, 0, 39, 0, 19, 
	40, 21, 0, 34, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 41, 
	42, 41, 0, 43, 0, 0, 24, 25, 
	44, 27, 27, 45, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 18, 
	0, 19, 20, 21, 0, 22, 34, 46, 
	2, 3, 4, 0, 5, 0, 0, 6, 
	7, 8, 9, 8, 10, 11, 10, 14, 
	47, 14, 0, 0, 15, 16, 48, 15, 
	4, 17, 49, 27, 27, 50, 7, 27, 
	52, 0, 8, 54, 53, 8, 55, 0, 
	10, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 0, 12, 0, 
	0, 0, 0, 0, 0, 0, 12, 0, 
	0, 12, 12, 12, 0, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 12, 0, 0, 12, 12, 
	12, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 0, 12, 12, 12, 
	0, 0, 0, 0, 0, 12, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 0, 12, 0, 12, 
	0, 0, 0, 51, 0, 0, 53, 0, 
	56, 0, 58, 58, 0, 0, 0, 0, 
	58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 136;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_id_ast
end
self.bel_en_id_ast = 137;
class << self
	attr_accessor :bel_en_str_ast
end
self.bel_en_str_ast = 140;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 33;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 47;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 62;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 64;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 68;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 104;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 10 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 11 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 33 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 39 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 104
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 7 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 33
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 9 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 44 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 57 then
		begin

    @closed = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 28 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 31 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 34 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 56 then
		begin

    @closed = true
  		end
	when 58 then
		begin

  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	32, 9, 126, 9, 126, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 9, 122, 
	0, 0, 9, 122, 9, 122, 
	34, 92, 34, 92, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 0, 0, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	10, 122, 10, 34, 0, 
	0, 10, 92, 10, 92, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 24, 118, 118, 
	32, 1, 39, 1, 1, 1, 0, 114, 
	0, 114, 114, 59, 59, 1, 0, 113, 
	113, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 0, 114, 75, 
	114, 32, 114, 114, 59, 59, 36, 36, 
	114, 114, 36, 1, 0, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	114, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 59, 36, 36, 114, 114, 36, 39, 
	39, 1, 1, 1, 0, 114, 0, 114, 
	75, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	1, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 0, 114, 0, 114, 
	0, 113, 0, 113, 25, 0, 83, 83, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	574, 611, 648, 763, 878, 915, 940, 1059, 
	1178, 1211, 1213, 1253, 1255, 1257, 1259, 1260, 
	1375, 1376, 1491, 1606, 1666, 1726, 1728, 1729, 
	1843, 1957, 2033, 2148, 2181, 2296, 2411, 2471, 
	2531, 2568, 2605, 2720, 2835, 2872, 2873, 2988, 
	3064, 3179, 3212, 3327, 3442, 3502, 3562, 3599, 
	3636, 3751, 3866, 3903, 3905, 3906, 4021, 4116, 
	4234, 4273, 4275, 4277, 4279, 4355, 4470, 4503, 
	4618, 4733, 4793, 4853, 4890, 4927, 5042, 5157, 
	5194, 5219, 5338, 5457, 5572, 5687, 5720, 5835, 
	5950, 6010, 6070, 6107, 6144, 6259, 6374, 6411, 
	6451, 6491, 6493, 6495, 6497, 6498, 6613, 6614, 
	6729, 6805, 6920, 6953, 7068, 7183, 7243, 7303, 
	7340, 7377, 7492, 7607, 7644, 7669, 7788, 7907, 
	8022, 8024, 8139, 8172, 8287, 8402, 8462, 8522, 
	8559, 8596, 8711, 8826, 8863, 8864, 8979, 8980, 
	9095, 9096, 9210, 9211, 9325, 9351, 9352, 9436, 
	9520, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 
	9529
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 1, 
	1, 1, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 1, 1, 
	1, 10, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 12, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	13, 11, 15, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 16, 14, 18, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 19, 17, 
	17, 20, 17, 21, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 21, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 22, 1, 
	22, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 22, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 23, 17, 17, 17, 17, 17, 
	17, 17, 24, 25, 17, 17, 26, 17, 
	17, 17, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 28, 17, 17, 17, 
	17, 17, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 17, 17, 
	17, 27, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 21, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 21, 17, 17, 
	17, 17, 17, 17, 17, 17, 29, 17, 
	17, 22, 17, 30, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 30, 17, 31, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 31, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 1, 33, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 33, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 1, 1, 1, 1, 1, 
	1, 36, 1, 37, 1, 37, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 40, 1, 1, 
	41, 43, 42, 14, 23, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 25, 17, 17, 26, 
	17, 17, 17, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 17, 17, 17, 
	17, 17, 17, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 17, 
	17, 17, 44, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 45, 
	46, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 1, 1, 1, 1, 1, 1, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 48, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 46, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 46, 1, 47, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 1, 1, 1, 1, 
	1, 1, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 1, 1, 
	1, 49, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 51, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	52, 50, 54, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 55, 53, 56, 1, 
	53, 57, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 1, 1, 1, 1, 1, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 1, 1, 58, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 57, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 60, 1, 1, 1, 1, 
	1, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 1, 1, 1, 
	59, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 1, 
	1, 1, 1, 1, 1, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 1, 1, 1, 61, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 62, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	62, 1, 1, 1, 1, 1, 1, 1, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 1, 1, 1, 1, 1, 1, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 1, 1, 1, 64, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 65, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 65, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 67, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 67, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	67, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	1, 68, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 1, 1, 1, 1, 1, 1, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 1, 1, 1, 70, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 72, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 73, 71, 75, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 74, 77, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 77, 17, 17, 17, 17, 17, 
	17, 17, 17, 78, 17, 17, 79, 17, 
	80, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 80, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 81, 1, 81, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 81, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 82, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	84, 17, 17, 85, 17, 17, 17, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 87, 17, 17, 17, 17, 17, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 17, 17, 17, 86, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 80, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 80, 17, 17, 17, 17, 17, 
	17, 17, 17, 88, 17, 17, 81, 17, 
	74, 82, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 84, 17, 17, 85, 17, 17, 17, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 17, 17, 17, 17, 17, 17, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 17, 17, 17, 89, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 1, 1, 
	1, 1, 1, 1, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	1, 1, 1, 90, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	91, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 91, 
	1, 1, 1, 1, 1, 1, 1, 92, 
	1, 1, 1, 1, 1, 1, 1, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 1, 1, 1, 93, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 94, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 94, 1, 1, 1, 1, 1, 
	1, 1, 95, 1, 96, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 96, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 96, 1, 
	97, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 101, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 102, 100, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	105, 103, 106, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 106, 17, 17, 17, 17, 17, 17, 
	17, 17, 107, 17, 17, 108, 17, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 109, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 110, 1, 110, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 111, 17, 
	17, 17, 17, 17, 17, 17, 112, 113, 
	17, 17, 114, 17, 17, 17, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	116, 17, 17, 17, 17, 17, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 17, 17, 17, 115, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 109, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 109, 17, 17, 17, 17, 17, 17, 
	17, 17, 117, 17, 17, 110, 17, 118, 
	17, 103, 111, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 111, 17, 17, 17, 17, 17, 17, 
	17, 17, 113, 17, 17, 114, 17, 17, 
	17, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 17, 17, 17, 17, 17, 
	17, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 17, 17, 17, 
	119, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 1, 123, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	1, 125, 1, 1, 126, 128, 127, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 1, 1, 1, 1, 1, 1, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 129, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 131, 1, 1, 1, 1, 1, 
	1, 1, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 132, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 1, 1, 
	1, 1, 1, 1, 1, 134, 1, 135, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 135, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 135, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 135, 1, 136, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 1, 1, 1, 1, 1, 
	1, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 1, 1, 1, 
	138, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 140, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 141, 
	139, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 145, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 146, 17, 17, 
	147, 17, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 149, 1, 149, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 149, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 150, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 150, 17, 17, 17, 17, 17, 17, 
	17, 151, 152, 17, 17, 153, 17, 17, 
	17, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 155, 17, 17, 17, 17, 
	17, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 17, 17, 17, 
	154, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 148, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 148, 17, 17, 17, 
	17, 17, 17, 17, 17, 156, 17, 17, 
	149, 17, 157, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 157, 17, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 158, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 1, 160, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 160, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	162, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 1, 1, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 1, 1, 1, 163, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 164, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 164, 1, 1, 1, 1, 
	1, 1, 1, 165, 1, 1, 1, 1, 
	1, 1, 1, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 1, 1, 1, 
	1, 1, 1, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 1, 
	1, 1, 166, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 167, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 167, 1, 
	1, 1, 1, 1, 1, 1, 168, 1, 
	169, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 169, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 1, 1, 1, 1, 
	1, 1, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 1, 1, 
	1, 172, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 174, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	175, 173, 177, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 178, 176, 179, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 179, 17, 17, 
	17, 17, 17, 17, 17, 17, 180, 17, 
	17, 181, 17, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 183, 1, 
	183, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 183, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 184, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 184, 17, 17, 17, 17, 17, 
	17, 17, 185, 186, 17, 17, 187, 17, 
	17, 17, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 189, 17, 17, 17, 
	17, 17, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 17, 17, 
	17, 188, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 182, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 182, 17, 17, 
	17, 17, 17, 17, 17, 17, 190, 17, 
	17, 183, 17, 191, 192, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 191, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 193, 17, 194, 195, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 194, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 196, 1, 197, 1, 1, 198, 200, 
	199, 176, 184, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 184, 17, 17, 17, 17, 17, 17, 
	17, 17, 186, 17, 17, 187, 17, 17, 
	17, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 17, 17, 17, 17, 17, 
	17, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 17, 17, 17, 
	201, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 142, 150, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 150, 17, 17, 
	17, 17, 17, 17, 17, 17, 152, 17, 
	17, 153, 17, 17, 17, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 17, 
	17, 17, 17, 17, 17, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 17, 17, 17, 202, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 1, 1, 1, 1, 1, 
	1, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 1, 1, 1, 
	203, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 204, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 204, 1, 1, 1, 
	1, 1, 1, 1, 205, 1, 1, 1, 
	1, 1, 1, 1, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 1, 1, 
	1, 1, 1, 1, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	1, 1, 1, 206, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	207, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 207, 
	1, 1, 1, 1, 1, 1, 1, 208, 
	1, 209, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 209, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 1, 1, 1, 
	1, 1, 1, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 1, 
	1, 1, 212, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 214, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 215, 213, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 219, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 219, 17, 
	17, 17, 17, 17, 17, 17, 17, 220, 
	17, 17, 221, 17, 222, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 222, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 223, 
	1, 223, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	223, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 225, 226, 17, 17, 227, 
	17, 17, 17, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 229, 17, 17, 
	17, 17, 17, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 17, 
	17, 17, 228, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 222, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 222, 17, 
	17, 17, 17, 17, 17, 17, 17, 230, 
	17, 17, 223, 17, 231, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 231, 17, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 234, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 236, 1, 1, 1, 1, 1, 
	1, 1, 237, 1, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	1, 1, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 1, 1, 
	1, 238, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 239, 1, 
	240, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 240, 
	1, 1, 1, 1, 1, 1, 1, 241, 
	1, 1, 1, 1, 1, 1, 1, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 1, 1, 1, 1, 1, 1, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 1, 1, 1, 242, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 243, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 243, 1, 1, 1, 1, 1, 
	1, 1, 244, 1, 245, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 245, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 245, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	1, 1, 1, 1, 1, 1, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 1, 1, 1, 248, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 250, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 251, 249, 253, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	254, 252, 255, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 255, 17, 17, 17, 17, 17, 17, 
	17, 17, 256, 17, 17, 257, 17, 258, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 258, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 259, 1, 259, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 260, 17, 
	17, 17, 17, 17, 17, 17, 261, 262, 
	17, 17, 263, 17, 17, 17, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	265, 17, 17, 17, 17, 17, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 17, 17, 17, 264, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 258, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 258, 17, 17, 17, 17, 17, 17, 
	17, 17, 266, 17, 17, 259, 17, 252, 
	260, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	262, 17, 17, 263, 17, 17, 17, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 17, 17, 17, 17, 17, 17, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 17, 17, 17, 267, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 216, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 17, 226, 17, 17, 227, 
	17, 17, 17, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 17, 17, 17, 
	17, 17, 17, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 17, 
	17, 17, 268, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 1, 
	269, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	1, 1, 1, 1, 1, 1, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 1, 1, 270, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 269, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 1, 1, 1, 1, 1, 
	1, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 1, 1, 1, 
	271, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 273, 1, 1, 
	275, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	276, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 277, 274, 278, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 279, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 280, 45, 
	281, 1, 1, 17, 17, 1, 1, 1, 
	1, 17, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 11, 23, 7, 8, 22, 7, 8, 
	22, 0, 9, 13, 10, 9, 10, 9, 
	12, 13, 10, 11, 5, 13, 14, 14, 
	15, 16, 15, 16, 17, 18, 136, 19, 
	20, 21, 21, 136, 23, 143, 26, 27, 
	32, 31, 28, 29, 30, 28, 29, 30, 
	145, 145, 31, 32, 26, 34, 35, 36, 
	34, 35, 36, 37, 38, 43, 46, 39, 
	40, 45, 39, 40, 45, 41, 146, 42, 
	41, 42, 41, 44, 146, 42, 43, 37, 
	146, 46, 48, 49, 50, 48, 49, 50, 
	51, 52, 57, 61, 53, 54, 60, 53, 
	54, 60, 55, 59, 56, 55, 56, 55, 
	58, 59, 56, 57, 51, 59, 147, 61, 
	63, 148, 63, 149, 65, 66, 67, 67, 
	149, 69, 70, 71, 69, 70, 71, 72, 
	73, 78, 103, 74, 75, 102, 74, 75, 
	102, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 72, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 93, 101, 89, 90, 100, 
	89, 90, 100, 91, 95, 92, 91, 92, 
	91, 94, 95, 92, 93, 87, 95, 96, 
	150, 97, 96, 150, 97, 98, 99, 99, 
	150, 101, 103, 105, 106, 107, 105, 106, 
	107, 108, 109, 114, 135, 110, 111, 134, 
	110, 111, 134, 112, 116, 113, 112, 113, 
	112, 115, 116, 113, 114, 108, 116, 117, 
	117, 118, 119, 118, 119, 120, 121, 151, 
	122, 123, 121, 122, 123, 124, 125, 130, 
	133, 126, 127, 132, 126, 127, 132, 128, 
	152, 129, 128, 129, 128, 131, 152, 129, 
	130, 124, 152, 133, 135, 138, 139, 139, 
	141, 142, 143, 143, 144, 24, 143, 144, 
	24, 141
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 10, 0, 0, 
	7, 7, 8, 9, 8, 10, 11, 10, 
	28, 29, 27, 27, 17, 30, 2, 3, 
	4, 0, 5, 0, 0, 6, 7, 8, 
	9, 8, 10, 11, 10, 14, 31, 14, 
	0, 0, 15, 16, 32, 15, 4, 17, 
	33, 27, 34, 2, 3, 4, 0, 5, 
	0, 0, 6, 7, 8, 9, 8, 10, 
	11, 10, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 35, 27, 
	19, 36, 21, 37, 0, 0, 24, 25, 
	38, 34, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 14, 14, 14, 0, 0, 15, 16, 
	15, 15, 4, 17, 0, 39, 0, 19, 
	40, 21, 0, 34, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 41, 
	42, 41, 0, 43, 0, 0, 24, 25, 
	44, 27, 27, 45, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 18, 
	0, 19, 20, 21, 0, 22, 34, 46, 
	2, 3, 4, 0, 5, 0, 0, 6, 
	7, 8, 9, 8, 10, 11, 10, 14, 
	47, 14, 0, 0, 15, 16, 48, 15, 
	4, 17, 49, 27, 27, 50, 7, 27, 
	52, 0, 8, 54, 53, 8, 55, 0, 
	10, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 0, 12, 0, 
	0, 0, 0, 0, 0, 0, 12, 0, 
	0, 12, 12, 12, 0, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 12, 0, 0, 12, 12, 
	12, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 0, 12, 12, 12, 
	0, 0, 0, 0, 0, 12, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 0, 12, 0, 12, 
	0, 0, 0, 51, 0, 0, 53, 0, 
	56, 0, 58, 58, 0, 0, 0, 0, 
	58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 136;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_id_ast
end
self.bel_en_id_ast = 137;
class << self
	attr_accessor :bel_en_str_ast
end
self.bel_en_str_ast = 140;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 33;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 47;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 62;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 64;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 68;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 104;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 10 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 11 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 33 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 39 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 104
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 7 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 33
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 9 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 44 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 57 then
		begin

    @closed = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 28 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 31 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 34 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 56 then
		begin

    @closed = true
  		end
	when 58 then
		begin

  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	32, 9, 126, 9, 126, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 9, 122, 
	0, 0, 9, 122, 9, 122, 
	34, 92, 34, 92, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 0, 0, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	10, 122, 10, 34, 0, 
	0, 10, 92, 10, 92, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 24, 118, 118, 
	32, 1, 39, 1, 1, 1, 0, 114, 
	0, 114, 114, 59, 59, 1, 0, 113, 
	113, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 0, 114, 75, 
	114, 32, 114, 114, 59, 59, 36, 36, 
	114, 114, 36, 1, 0, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	114, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 59, 36, 36, 114, 114, 36, 39, 
	39, 1, 1, 1, 0, 114, 0, 114, 
	75, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	1, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 0, 114, 0, 114, 
	0, 113, 0, 113, 25, 0, 83, 83, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	574, 611, 648, 763, 878, 915, 940, 1059, 
	1178, 1211, 1213, 1253, 1255, 1257, 1259, 1260, 
	1375, 1376, 1491, 1606, 1666, 1726, 1728, 1729, 
	1843, 1957, 2033, 2148, 2181, 2296, 2411, 2471, 
	2531, 2568, 2605, 2720, 2835, 2872, 2873, 2988, 
	3064, 3179, 3212, 3327, 3442, 3502, 3562, 3599, 
	3636, 3751, 3866, 3903, 3905, 3906, 4021, 4116, 
	4234, 4273, 4275, 4277, 4279, 4355, 4470, 4503, 
	4618, 4733, 4793, 4853, 4890, 4927, 5042, 5157, 
	5194, 5219, 5338, 5457, 5572, 5687, 5720, 5835, 
	5950, 6010, 6070, 6107, 6144, 6259, 6374, 6411, 
	6451, 6491, 6493, 6495, 6497, 6498, 6613, 6614, 
	6729, 6805, 6920, 6953, 7068, 7183, 7243, 7303, 
	7340, 7377, 7492, 7607, 7644, 7669, 7788, 7907, 
	8022, 8024, 8139, 8172, 8287, 8402, 8462, 8522, 
	8559, 8596, 8711, 8826, 8863, 8864, 8979, 8980, 
	9095, 9096, 9210, 9211, 9325, 9351, 9352, 9436, 
	9520, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 
	9529
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 1, 
	1, 1, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 1, 1, 
	1, 10, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 12, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	13, 11, 15, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 16, 14, 18, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 19, 17, 
	17, 20, 17, 21, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 21, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 22, 1, 
	22, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 22, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 23, 17, 17, 17, 17, 17, 
	17, 17, 24, 25, 17, 17, 26, 17, 
	17, 17, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 28, 17, 17, 17, 
	17, 17, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 17, 17, 
	17, 27, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 21, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 21, 17, 17, 
	17, 17, 17, 17, 17, 17, 29, 17, 
	17, 22, 17, 30, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 30, 17, 31, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 31, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 1, 33, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 33, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 1, 1, 1, 1, 1, 
	1, 36, 1, 37, 1, 37, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 40, 1, 1, 
	41, 43, 42, 14, 23, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 25, 17, 17, 26, 
	17, 17, 17, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 17, 17, 17, 
	17, 17, 17, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 17, 
	17, 17, 44, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 45, 
	46, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 1, 1, 1, 1, 1, 1, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 48, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 46, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 46, 1, 47, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 1, 1, 1, 1, 
	1, 1, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 1, 1, 
	1, 49, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 51, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	52, 50, 54, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 55, 53, 56, 1, 
	53, 57, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 1, 1, 1, 1, 1, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 1, 1, 58, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 57, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 60, 1, 1, 1, 1, 
	1, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 1, 1, 1, 
	59, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 1, 
	1, 1, 1, 1, 1, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 1, 1, 1, 61, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 62, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	62, 1, 1, 1, 1, 1, 1, 1, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 1, 1, 1, 1, 1, 1, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 1, 1, 1, 64, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 65, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 65, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 67, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 67, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	67, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	1, 68, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 1, 1, 1, 1, 1, 1, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 1, 1, 1, 70, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 72, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 73, 71, 75, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 74, 77, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 77, 17, 17, 17, 17, 17, 
	17, 17, 17, 78, 17, 17, 79, 17, 
	80, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 80, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 81, 1, 81, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 81, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 82, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	84, 17, 17, 85, 17, 17, 17, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 87, 17, 17, 17, 17, 17, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 17, 17, 17, 86, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 80, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 80, 17, 17, 17, 17, 17, 
	17, 17, 17, 88, 17, 17, 81, 17, 
	74, 82, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 84, 17, 17, 85, 17, 17, 17, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 17, 17, 17, 17, 17, 17, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 17, 17, 17, 89, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 1, 1, 
	1, 1, 1, 1, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	1, 1, 1, 90, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	91, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 91, 
	1, 1, 1, 1, 1, 1, 1, 92, 
	1, 1, 1, 1, 1, 1, 1, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 1, 1, 1, 93, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 94, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 94, 1, 1, 1, 1, 1, 
	1, 1, 95, 1, 96, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 96, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 96, 1, 
	97, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 101, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 102, 100, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	105, 103, 106, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 106, 17, 17, 17, 17, 17, 17, 
	17, 17, 107, 17, 17, 108, 17, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 109, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 110, 1, 110, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 111, 17, 
	17, 17, 17, 17, 17, 17, 112, 113, 
	17, 17, 114, 17, 17, 17, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	116, 17, 17, 17, 17, 17, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 17, 17, 17, 115, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 109, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 109, 17, 17, 17, 17, 17, 17, 
	17, 17, 117, 17, 17, 110, 17, 118, 
	17, 103, 111, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 111, 17, 17, 17, 17, 17, 17, 
	17, 17, 113, 17, 17, 114, 17, 17, 
	17, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 17, 17, 17, 17, 17, 
	17, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 17, 17, 17, 
	119, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 1, 123, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	1, 125, 1, 1, 126, 128, 127, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 1, 1, 1, 1, 1, 1, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 129, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 131, 1, 1, 1, 1, 1, 
	1, 1, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 132, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 1, 1, 
	1, 1, 1, 1, 1, 134, 1, 135, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 135, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 135, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 135, 1, 136, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 1, 1, 1, 1, 1, 
	1, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 1, 1, 1, 
	138, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 140, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 141, 
	139, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 145, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 146, 17, 17, 
	147, 17, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 149, 1, 149, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 149, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 150, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 150, 17, 17, 17, 17, 17, 17, 
	17, 151, 152, 17, 17, 153, 17, 17, 
	17, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 155, 17, 17, 17, 17, 
	17, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 17, 17, 17, 
	154, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 148, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 148, 17, 17, 17, 
	17, 17, 17, 17, 17, 156, 17, 17, 
	149, 17, 157, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 157, 17, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 158, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 1, 160, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 160, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	162, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 1, 1, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 1, 1, 1, 163, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 164, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 164, 1, 1, 1, 1, 
	1, 1, 1, 165, 1, 1, 1, 1, 
	1, 1, 1, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 1, 1, 1, 
	1, 1, 1, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 1, 
	1, 1, 166, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 167, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 167, 1, 
	1, 1, 1, 1, 1, 1, 168, 1, 
	169, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 169, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 1, 1, 1, 1, 
	1, 1, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 1, 1, 
	1, 172, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 174, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	175, 173, 177, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 178, 176, 179, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 179, 17, 17, 
	17, 17, 17, 17, 17, 17, 180, 17, 
	17, 181, 17, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 183, 1, 
	183, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 183, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 184, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 184, 17, 17, 17, 17, 17, 
	17, 17, 185, 186, 17, 17, 187, 17, 
	17, 17, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 189, 17, 17, 17, 
	17, 17, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 17, 17, 
	17, 188, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 182, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 182, 17, 17, 
	17, 17, 17, 17, 17, 17, 190, 17, 
	17, 183, 17, 191, 192, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 191, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 193, 17, 194, 195, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 194, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 196, 1, 197, 1, 1, 198, 200, 
	199, 176, 184, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 184, 17, 17, 17, 17, 17, 17, 
	17, 17, 186, 17, 17, 187, 17, 17, 
	17, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 17, 17, 17, 17, 17, 
	17, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 17, 17, 17, 
	201, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 142, 150, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 150, 17, 17, 
	17, 17, 17, 17, 17, 17, 152, 17, 
	17, 153, 17, 17, 17, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 17, 
	17, 17, 17, 17, 17, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 17, 17, 17, 202, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 1, 1, 1, 1, 1, 
	1, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 1, 1, 1, 
	203, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 204, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 204, 1, 1, 1, 
	1, 1, 1, 1, 205, 1, 1, 1, 
	1, 1, 1, 1, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 1, 1, 
	1, 1, 1, 1, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	1, 1, 1, 206, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	207, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 207, 
	1, 1, 1, 1, 1, 1, 1, 208, 
	1, 209, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 209, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 1, 1, 1, 
	1, 1, 1, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 1, 
	1, 1, 212, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 214, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 215, 213, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 219, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 219, 17, 
	17, 17, 17, 17, 17, 17, 17, 220, 
	17, 17, 221, 17, 222, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 222, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 223, 
	1, 223, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	223, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 225, 226, 17, 17, 227, 
	17, 17, 17, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 229, 17, 17, 
	17, 17, 17, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 17, 
	17, 17, 228, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 222, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 222, 17, 
	17, 17, 17, 17, 17, 17, 17, 230, 
	17, 17, 223, 17, 231, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 231, 17, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 234, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 236, 1, 1, 1, 1, 1, 
	1, 1, 237, 1, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	1, 1, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 1, 1, 
	1, 238, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 239, 1, 
	240, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 240, 
	1, 1, 1, 1, 1, 1, 1, 241, 
	1, 1, 1, 1, 1, 1, 1, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 1, 1, 1, 1, 1, 1, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 1, 1, 1, 242, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 243, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 243, 1, 1, 1, 1, 1, 
	1, 1, 244, 1, 245, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 245, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 245, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	1, 1, 1, 1, 1, 1, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 1, 1, 1, 248, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 250, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 251, 249, 253, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	254, 252, 255, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 255, 17, 17, 17, 17, 17, 17, 
	17, 17, 256, 17, 17, 257, 17, 258, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 258, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 259, 1, 259, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 260, 17, 
	17, 17, 17, 17, 17, 17, 261, 262, 
	17, 17, 263, 17, 17, 17, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	265, 17, 17, 17, 17, 17, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 17, 17, 17, 264, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 258, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 258, 17, 17, 17, 17, 17, 17, 
	17, 17, 266, 17, 17, 259, 17, 252, 
	260, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	262, 17, 17, 263, 17, 17, 17, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 17, 17, 17, 17, 17, 17, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 17, 17, 17, 267, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 216, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 17, 226, 17, 17, 227, 
	17, 17, 17, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 17, 17, 17, 
	17, 17, 17, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 17, 
	17, 17, 268, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 1, 
	269, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	1, 1, 1, 1, 1, 1, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 1, 1, 270, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 269, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 1, 1, 1, 1, 1, 
	1, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 1, 1, 1, 
	271, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 273, 1, 1, 
	275, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	276, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 277, 274, 278, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 279, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 280, 45, 
	281, 1, 1, 17, 17, 1, 1, 1, 
	1, 17, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 11, 23, 7, 8, 22, 7, 8, 
	22, 0, 9, 13, 10, 9, 10, 9, 
	12, 13, 10, 11, 5, 13, 14, 14, 
	15, 16, 15, 16, 17, 18, 136, 19, 
	20, 21, 21, 136, 23, 143, 26, 27, 
	32, 31, 28, 29, 30, 28, 29, 30, 
	145, 145, 31, 32, 26, 34, 35, 36, 
	34, 35, 36, 37, 38, 43, 46, 39, 
	40, 45, 39, 40, 45, 41, 146, 42, 
	41, 42, 41, 44, 146, 42, 43, 37, 
	146, 46, 48, 49, 50, 48, 49, 50, 
	51, 52, 57, 61, 53, 54, 60, 53, 
	54, 60, 55, 59, 56, 55, 56, 55, 
	58, 59, 56, 57, 51, 59, 147, 61, 
	63, 148, 63, 149, 65, 66, 67, 67, 
	149, 69, 70, 71, 69, 70, 71, 72, 
	73, 78, 103, 74, 75, 102, 74, 75, 
	102, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 72, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 93, 101, 89, 90, 100, 
	89, 90, 100, 91, 95, 92, 91, 92, 
	91, 94, 95, 92, 93, 87, 95, 96, 
	150, 97, 96, 150, 97, 98, 99, 99, 
	150, 101, 103, 105, 106, 107, 105, 106, 
	107, 108, 109, 114, 135, 110, 111, 134, 
	110, 111, 134, 112, 116, 113, 112, 113, 
	112, 115, 116, 113, 114, 108, 116, 117, 
	117, 118, 119, 118, 119, 120, 121, 151, 
	122, 123, 121, 122, 123, 124, 125, 130, 
	133, 126, 127, 132, 126, 127, 132, 128, 
	152, 129, 128, 129, 128, 131, 152, 129, 
	130, 124, 152, 133, 135, 138, 139, 139, 
	141, 142, 143, 143, 144, 24, 143, 144, 
	24, 141
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 10, 0, 0, 
	7, 7, 8, 9, 8, 10, 11, 10, 
	28, 29, 27, 27, 17, 30, 2, 3, 
	4, 0, 5, 0, 0, 6, 7, 8, 
	9, 8, 10, 11, 10, 14, 31, 14, 
	0, 0, 15, 16, 32, 15, 4, 17, 
	33, 27, 34, 2, 3, 4, 0, 5, 
	0, 0, 6, 7, 8, 9, 8, 10, 
	11, 10, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 35, 27, 
	19, 36, 21, 37, 0, 0, 24, 25, 
	38, 34, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 14, 14, 14, 0, 0, 15, 16, 
	15, 15, 4, 17, 0, 39, 0, 19, 
	40, 21, 0, 34, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 41, 
	42, 41, 0, 43, 0, 0, 24, 25, 
	44, 27, 27, 45, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 18, 
	0, 19, 20, 21, 0, 22, 34, 46, 
	2, 3, 4, 0, 5, 0, 0, 6, 
	7, 8, 9, 8, 10, 11, 10, 14, 
	47, 14, 0, 0, 15, 16, 48, 15, 
	4, 17, 49, 27, 27, 50, 7, 27, 
	52, 0, 8, 54, 53, 8, 55, 0, 
	10, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 0, 12, 0, 
	0, 0, 0, 0, 0, 0, 12, 0, 
	0, 12, 12, 12, 0, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 12, 0, 0, 12, 12, 
	12, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 0, 12, 12, 12, 
	0, 0, 0, 0, 0, 12, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 0, 12, 0, 12, 
	0, 0, 0, 51, 0, 0, 53, 0, 
	56, 0, 58, 58, 0, 0, 0, 0, 
	58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 136;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_id_ast
end
self.bel_en_id_ast = 137;
class << self
	attr_accessor :bel_en_str_ast
end
self.bel_en_str_ast = 140;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 33;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 47;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 62;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 64;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 68;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 104;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 10 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 11 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 33 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 39 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 104
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 7 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 33
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 9 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 44 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 57 then
		begin

    @closed = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 28 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 31 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 34 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 56 then
		begin

    @closed = true
  		end
	when 58 then
		begin

  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	32, 9, 126, 9, 126, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 9, 122, 
	0, 0, 9, 122, 9, 122, 
	34, 92, 34, 92, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 0, 0, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	10, 122, 10, 34, 0, 
	0, 10, 92, 10, 92, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 24, 118, 118, 
	32, 1, 39, 1, 1, 1, 0, 114, 
	0, 114, 114, 59, 59, 1, 0, 113, 
	113, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 0, 114, 75, 
	114, 32, 114, 114, 59, 59, 36, 36, 
	114, 114, 36, 1, 0, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	114, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 59, 36, 36, 114, 114, 36, 39, 
	39, 1, 1, 1, 0, 114, 0, 114, 
	75, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	1, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 0, 114, 0, 114, 
	0, 113, 0, 113, 25, 0, 83, 83, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	574, 611, 648, 763, 878, 915, 940, 1059, 
	1178, 1211, 1213, 1253, 1255, 1257, 1259, 1260, 
	1375, 1376, 1491, 1606, 1666, 1726, 1728, 1729, 
	1843, 1957, 2033, 2148, 2181, 2296, 2411, 2471, 
	2531, 2568, 2605, 2720, 2835, 2872, 2873, 2988, 
	3064, 3179, 3212, 3327, 3442, 3502, 3562, 3599, 
	3636, 3751, 3866, 3903, 3905, 3906, 4021, 4116, 
	4234, 4273, 4275, 4277, 4279, 4355, 4470, 4503, 
	4618, 4733, 4793, 4853, 4890, 4927, 5042, 5157, 
	5194, 5219, 5338, 5457, 5572, 5687, 5720, 5835, 
	5950, 6010, 6070, 6107, 6144, 6259, 6374, 6411, 
	6451, 6491, 6493, 6495, 6497, 6498, 6613, 6614, 
	6729, 6805, 6920, 6953, 7068, 7183, 7243, 7303, 
	7340, 7377, 7492, 7607, 7644, 7669, 7788, 7907, 
	8022, 8024, 8139, 8172, 8287, 8402, 8462, 8522, 
	8559, 8596, 8711, 8826, 8863, 8864, 8979, 8980, 
	9095, 9096, 9210, 9211, 9325, 9351, 9352, 9436, 
	9520, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 
	9529
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 1, 
	1, 1, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 1, 1, 
	1, 10, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 12, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	13, 11, 15, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 16, 14, 18, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 19, 17, 
	17, 20, 17, 21, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 21, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 22, 1, 
	22, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 22, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 23, 17, 17, 17, 17, 17, 
	17, 17, 24, 25, 17, 17, 26, 17, 
	17, 17, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 28, 17, 17, 17, 
	17, 17, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 17, 17, 
	17, 27, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 21, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 21, 17, 17, 
	17, 17, 17, 17, 17, 17, 29, 17, 
	17, 22, 17, 30, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 30, 17, 31, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 31, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 1, 33, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 33, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 1, 1, 1, 1, 1, 
	1, 36, 1, 37, 1, 37, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 40, 1, 1, 
	41, 43, 42, 14, 23, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 25, 17, 17, 26, 
	17, 17, 17, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 17, 17, 17, 
	17, 17, 17, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 17, 
	17, 17, 44, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 45, 
	46, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 1, 1, 1, 1, 1, 1, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 48, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 46, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 46, 1, 47, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 1, 1, 1, 1, 
	1, 1, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 1, 1, 
	1, 49, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 51, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	52, 50, 54, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 55, 53, 56, 1, 
	53, 57, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 1, 1, 1, 1, 1, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 1, 1, 58, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 57, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 60, 1, 1, 1, 1, 
	1, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 1, 1, 1, 
	59, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 1, 
	1, 1, 1, 1, 1, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 1, 1, 1, 61, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 62, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	62, 1, 1, 1, 1, 1, 1, 1, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 1, 1, 1, 1, 1, 1, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 1, 1, 1, 64, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 65, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 65, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 67, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 67, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	67, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	1, 68, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 1, 1, 1, 1, 1, 1, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 1, 1, 1, 70, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 72, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 73, 71, 75, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 74, 77, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 77, 17, 17, 17, 17, 17, 
	17, 17, 17, 78, 17, 17, 79, 17, 
	80, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 80, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 81, 1, 81, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 81, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 82, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	84, 17, 17, 85, 17, 17, 17, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 87, 17, 17, 17, 17, 17, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 17, 17, 17, 86, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 80, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 80, 17, 17, 17, 17, 17, 
	17, 17, 17, 88, 17, 17, 81, 17, 
	74, 82, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 84, 17, 17, 85, 17, 17, 17, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 17, 17, 17, 17, 17, 17, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 17, 17, 17, 89, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 1, 1, 
	1, 1, 1, 1, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	1, 1, 1, 90, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	91, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 91, 
	1, 1, 1, 1, 1, 1, 1, 92, 
	1, 1, 1, 1, 1, 1, 1, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 1, 1, 1, 93, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 94, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 94, 1, 1, 1, 1, 1, 
	1, 1, 95, 1, 96, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 96, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 96, 1, 
	97, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 101, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 102, 100, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	105, 103, 106, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 106, 17, 17, 17, 17, 17, 17, 
	17, 17, 107, 17, 17, 108, 17, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 109, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 110, 1, 110, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 111, 17, 
	17, 17, 17, 17, 17, 17, 112, 113, 
	17, 17, 114, 17, 17, 17, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	116, 17, 17, 17, 17, 17, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 17, 17, 17, 115, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 109, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 109, 17, 17, 17, 17, 17, 17, 
	17, 17, 117, 17, 17, 110, 17, 118, 
	17, 103, 111, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 111, 17, 17, 17, 17, 17, 17, 
	17, 17, 113, 17, 17, 114, 17, 17, 
	17, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 17, 17, 17, 17, 17, 
	17, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 17, 17, 17, 
	119, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 1, 123, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	1, 125, 1, 1, 126, 128, 127, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 1, 1, 1, 1, 1, 1, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 129, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 131, 1, 1, 1, 1, 1, 
	1, 1, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 132, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 1, 1, 
	1, 1, 1, 1, 1, 134, 1, 135, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 135, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 135, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 135, 1, 136, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 1, 1, 1, 1, 1, 
	1, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 1, 1, 1, 
	138, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 140, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 141, 
	139, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 145, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 146, 17, 17, 
	147, 17, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 149, 1, 149, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 149, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 150, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 150, 17, 17, 17, 17, 17, 17, 
	17, 151, 152, 17, 17, 153, 17, 17, 
	17, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 155, 17, 17, 17, 17, 
	17, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 17, 17, 17, 
	154, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 148, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 148, 17, 17, 17, 
	17, 17, 17, 17, 17, 156, 17, 17, 
	149, 17, 157, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 157, 17, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 158, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 1, 160, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 160, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	162, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 1, 1, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 1, 1, 1, 163, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 164, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 164, 1, 1, 1, 1, 
	1, 1, 1, 165, 1, 1, 1, 1, 
	1, 1, 1, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 1, 1, 1, 
	1, 1, 1, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 1, 
	1, 1, 166, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 167, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 167, 1, 
	1, 1, 1, 1, 1, 1, 168, 1, 
	169, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 169, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 1, 1, 1, 1, 
	1, 1, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 1, 1, 
	1, 172, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 174, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	175, 173, 177, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 178, 176, 179, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 179, 17, 17, 
	17, 17, 17, 17, 17, 17, 180, 17, 
	17, 181, 17, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 183, 1, 
	183, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 183, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 184, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 184, 17, 17, 17, 17, 17, 
	17, 17, 185, 186, 17, 17, 187, 17, 
	17, 17, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 189, 17, 17, 17, 
	17, 17, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 17, 17, 
	17, 188, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 182, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 182, 17, 17, 
	17, 17, 17, 17, 17, 17, 190, 17, 
	17, 183, 17, 191, 192, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 191, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 193, 17, 194, 195, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 194, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 196, 1, 197, 1, 1, 198, 200, 
	199, 176, 184, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 184, 17, 17, 17, 17, 17, 17, 
	17, 17, 186, 17, 17, 187, 17, 17, 
	17, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 17, 17, 17, 17, 17, 
	17, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 17, 17, 17, 
	201, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 142, 150, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 150, 17, 17, 
	17, 17, 17, 17, 17, 17, 152, 17, 
	17, 153, 17, 17, 17, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 17, 
	17, 17, 17, 17, 17, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 17, 17, 17, 202, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 1, 1, 1, 1, 1, 
	1, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 1, 1, 1, 
	203, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 204, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 204, 1, 1, 1, 
	1, 1, 1, 1, 205, 1, 1, 1, 
	1, 1, 1, 1, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 1, 1, 
	1, 1, 1, 1, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	1, 1, 1, 206, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	207, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 207, 
	1, 1, 1, 1, 1, 1, 1, 208, 
	1, 209, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 209, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 1, 1, 1, 
	1, 1, 1, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 1, 
	1, 1, 212, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 214, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 215, 213, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 219, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 219, 17, 
	17, 17, 17, 17, 17, 17, 17, 220, 
	17, 17, 221, 17, 222, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 222, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 223, 
	1, 223, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	223, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 225, 226, 17, 17, 227, 
	17, 17, 17, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 229, 17, 17, 
	17, 17, 17, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 17, 
	17, 17, 228, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 222, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 222, 17, 
	17, 17, 17, 17, 17, 17, 17, 230, 
	17, 17, 223, 17, 231, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 231, 17, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 234, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 236, 1, 1, 1, 1, 1, 
	1, 1, 237, 1, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	1, 1, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 1, 1, 
	1, 238, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 239, 1, 
	240, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 240, 
	1, 1, 1, 1, 1, 1, 1, 241, 
	1, 1, 1, 1, 1, 1, 1, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 1, 1, 1, 1, 1, 1, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 1, 1, 1, 242, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 243, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 243, 1, 1, 1, 1, 1, 
	1, 1, 244, 1, 245, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 245, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 245, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	1, 1, 1, 1, 1, 1, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 1, 1, 1, 248, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 250, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 251, 249, 253, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	254, 252, 255, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 255, 17, 17, 17, 17, 17, 17, 
	17, 17, 256, 17, 17, 257, 17, 258, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 258, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 259, 1, 259, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 260, 17, 
	17, 17, 17, 17, 17, 17, 261, 262, 
	17, 17, 263, 17, 17, 17, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	265, 17, 17, 17, 17, 17, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 17, 17, 17, 264, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 258, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 258, 17, 17, 17, 17, 17, 17, 
	17, 17, 266, 17, 17, 259, 17, 252, 
	260, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	262, 17, 17, 263, 17, 17, 17, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 17, 17, 17, 17, 17, 17, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 17, 17, 17, 267, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 216, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 17, 226, 17, 17, 227, 
	17, 17, 17, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 17, 17, 17, 
	17, 17, 17, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 17, 
	17, 17, 268, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 1, 
	269, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	1, 1, 1, 1, 1, 1, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 1, 1, 270, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 269, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 1, 1, 1, 1, 1, 
	1, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 1, 1, 1, 
	271, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 273, 1, 1, 
	275, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	276, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 277, 274, 278, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 279, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 280, 45, 
	281, 1, 1, 17, 17, 1, 1, 1, 
	1, 17, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 11, 23, 7, 8, 22, 7, 8, 
	22, 0, 9, 13, 10, 9, 10, 9, 
	12, 13, 10, 11, 5, 13, 14, 14, 
	15, 16, 15, 16, 17, 18, 136, 19, 
	20, 21, 21, 136, 23, 143, 26, 27, 
	32, 31, 28, 29, 30, 28, 29, 30, 
	145, 145, 31, 32, 26, 34, 35, 36, 
	34, 35, 36, 37, 38, 43, 46, 39, 
	40, 45, 39, 40, 45, 41, 146, 42, 
	41, 42, 41, 44, 146, 42, 43, 37, 
	146, 46, 48, 49, 50, 48, 49, 50, 
	51, 52, 57, 61, 53, 54, 60, 53, 
	54, 60, 55, 59, 56, 55, 56, 55, 
	58, 59, 56, 57, 51, 59, 147, 61, 
	63, 148, 63, 149, 65, 66, 67, 67, 
	149, 69, 70, 71, 69, 70, 71, 72, 
	73, 78, 103, 74, 75, 102, 74, 75, 
	102, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 72, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 93, 101, 89, 90, 100, 
	89, 90, 100, 91, 95, 92, 91, 92, 
	91, 94, 95, 92, 93, 87, 95, 96, 
	150, 97, 96, 150, 97, 98, 99, 99, 
	150, 101, 103, 105, 106, 107, 105, 106, 
	107, 108, 109, 114, 135, 110, 111, 134, 
	110, 111, 134, 112, 116, 113, 112, 113, 
	112, 115, 116, 113, 114, 108, 116, 117, 
	117, 118, 119, 118, 119, 120, 121, 151, 
	122, 123, 121, 122, 123, 124, 125, 130, 
	133, 126, 127, 132, 126, 127, 132, 128, 
	152, 129, 128, 129, 128, 131, 152, 129, 
	130, 124, 152, 133, 135, 138, 139, 139, 
	141, 142, 143, 143, 144, 24, 143, 144, 
	24, 141
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 10, 0, 0, 
	7, 7, 8, 9, 8, 10, 11, 10, 
	28, 29, 27, 27, 17, 30, 2, 3, 
	4, 0, 5, 0, 0, 6, 7, 8, 
	9, 8, 10, 11, 10, 14, 31, 14, 
	0, 0, 15, 16, 32, 15, 4, 17, 
	33, 27, 34, 2, 3, 4, 0, 5, 
	0, 0, 6, 7, 8, 9, 8, 10, 
	11, 10, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 35, 27, 
	19, 36, 21, 37, 0, 0, 24, 25, 
	38, 34, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 14, 14, 14, 0, 0, 15, 16, 
	15, 15, 4, 17, 0, 39, 0, 19, 
	40, 21, 0, 34, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 41, 
	42, 41, 0, 43, 0, 0, 24, 25, 
	44, 27, 27, 45, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 18, 
	0, 19, 20, 21, 0, 22, 34, 46, 
	2, 3, 4, 0, 5, 0, 0, 6, 
	7, 8, 9, 8, 10, 11, 10, 14, 
	47, 14, 0, 0, 15, 16, 48, 15, 
	4, 17, 49, 27, 27, 50, 7, 27, 
	52, 0, 8, 54, 53, 8, 55, 0, 
	10, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 0, 12, 0, 
	0, 0, 0, 0, 0, 0, 12, 0, 
	0, 12, 12, 12, 0, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 12, 0, 0, 12, 12, 
	12, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 0, 12, 12, 12, 
	0, 0, 0, 0, 0, 12, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 0, 12, 0, 12, 
	0, 0, 0, 51, 0, 0, 53, 0, 
	56, 0, 58, 58, 0, 0, 0, 0, 
	58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 136;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_id_ast
end
self.bel_en_id_ast = 137;
class << self
	attr_accessor :bel_en_str_ast
end
self.bel_en_str_ast = 140;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 33;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 47;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 62;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 64;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 68;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 104;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 10 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 11 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 33 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 39 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 104
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 7 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 33
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 9 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 44 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 57 then
		begin

    @closed = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 28 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 31 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 34 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 56 then
		begin

    @closed = true
  		end
	when 58 then
		begin

  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	32, 9, 126, 9, 126, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 9, 122, 
	0, 0, 9, 122, 9, 122, 
	34, 92, 34, 92, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 0, 0, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	10, 122, 10, 34, 0, 
	0, 10, 92, 10, 92, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 24, 118, 118, 
	32, 1, 39, 1, 1, 1, 0, 114, 
	0, 114, 114, 59, 59, 1, 0, 113, 
	113, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 0, 114, 75, 
	114, 32, 114, 114, 59, 59, 36, 36, 
	114, 114, 36, 1, 0, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	114, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 59, 36, 36, 114, 114, 36, 39, 
	39, 1, 1, 1, 0, 114, 0, 114, 
	75, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	1, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 0, 114, 0, 114, 
	0, 113, 0, 113, 25, 0, 83, 83, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	574, 611, 648, 763, 878, 915, 940, 1059, 
	1178, 1211, 1213, 1253, 1255, 1257, 1259, 1260, 
	1375, 1376, 1491, 1606, 1666, 1726, 1728, 1729, 
	1843, 1957, 2033, 2148, 2181, 2296, 2411, 2471, 
	2531, 2568, 2605, 2720, 2835, 2872, 2873, 2988, 
	3064, 3179, 3212, 3327, 3442, 3502, 3562, 3599, 
	3636, 3751, 3866, 3903, 3905, 3906, 4021, 4116, 
	4234, 4273, 4275, 4277, 4279, 4355, 4470, 4503, 
	4618, 4733, 4793, 4853, 4890, 4927, 5042, 5157, 
	5194, 5219, 5338, 5457, 5572, 5687, 5720, 5835, 
	5950, 6010, 6070, 6107, 6144, 6259, 6374, 6411, 
	6451, 6491, 6493, 6495, 6497, 6498, 6613, 6614, 
	6729, 6805, 6920, 6953, 7068, 7183, 7243, 7303, 
	7340, 7377, 7492, 7607, 7644, 7669, 7788, 7907, 
	8022, 8024, 8139, 8172, 8287, 8402, 8462, 8522, 
	8559, 8596, 8711, 8826, 8863, 8864, 8979, 8980, 
	9095, 9096, 9210, 9211, 9325, 9351, 9352, 9436, 
	9520, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 
	9529
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 1, 
	1, 1, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 1, 1, 
	1, 10, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 12, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	13, 11, 15, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 16, 14, 18, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 19, 17, 
	17, 20, 17, 21, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 21, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 22, 1, 
	22, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 22, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 23, 17, 17, 17, 17, 17, 
	17, 17, 24, 25, 17, 17, 26, 17, 
	17, 17, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 28, 17, 17, 17, 
	17, 17, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 17, 17, 
	17, 27, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 21, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 21, 17, 17, 
	17, 17, 17, 17, 17, 17, 29, 17, 
	17, 22, 17, 30, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 30, 17, 31, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 31, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 1, 33, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 33, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 1, 1, 1, 1, 1, 
	1, 36, 1, 37, 1, 37, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 40, 1, 1, 
	41, 43, 42, 14, 23, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 25, 17, 17, 26, 
	17, 17, 17, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 17, 17, 17, 
	17, 17, 17, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 17, 
	17, 17, 44, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 45, 
	46, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 1, 1, 1, 1, 1, 1, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 48, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 46, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 46, 1, 47, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 1, 1, 1, 1, 
	1, 1, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 1, 1, 
	1, 49, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 51, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	52, 50, 54, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 55, 53, 56, 1, 
	53, 57, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 1, 1, 1, 1, 1, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 1, 1, 58, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 57, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 60, 1, 1, 1, 1, 
	1, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 1, 1, 1, 
	59, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 1, 
	1, 1, 1, 1, 1, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 1, 1, 1, 61, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 62, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	62, 1, 1, 1, 1, 1, 1, 1, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 1, 1, 1, 1, 1, 1, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 1, 1, 1, 64, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 65, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 65, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 67, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 67, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	67, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	1, 68, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 1, 1, 1, 1, 1, 1, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 1, 1, 1, 70, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 72, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 73, 71, 75, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 74, 77, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 77, 17, 17, 17, 17, 17, 
	17, 17, 17, 78, 17, 17, 79, 17, 
	80, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 80, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 81, 1, 81, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 81, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 82, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	84, 17, 17, 85, 17, 17, 17, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 87, 17, 17, 17, 17, 17, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 17, 17, 17, 86, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 80, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 80, 17, 17, 17, 17, 17, 
	17, 17, 17, 88, 17, 17, 81, 17, 
	74, 82, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 84, 17, 17, 85, 17, 17, 17, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 17, 17, 17, 17, 17, 17, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 17, 17, 17, 89, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 1, 1, 
	1, 1, 1, 1, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	1, 1, 1, 90, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	91, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 91, 
	1, 1, 1, 1, 1, 1, 1, 92, 
	1, 1, 1, 1, 1, 1, 1, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 1, 1, 1, 93, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 94, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 94, 1, 1, 1, 1, 1, 
	1, 1, 95, 1, 96, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 96, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 96, 1, 
	97, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 101, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 102, 100, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	105, 103, 106, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 106, 17, 17, 17, 17, 17, 17, 
	17, 17, 107, 17, 17, 108, 17, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 109, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 110, 1, 110, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 111, 17, 
	17, 17, 17, 17, 17, 17, 112, 113, 
	17, 17, 114, 17, 17, 17, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	116, 17, 17, 17, 17, 17, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 17, 17, 17, 115, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 109, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 109, 17, 17, 17, 17, 17, 17, 
	17, 17, 117, 17, 17, 110, 17, 118, 
	17, 103, 111, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 111, 17, 17, 17, 17, 17, 17, 
	17, 17, 113, 17, 17, 114, 17, 17, 
	17, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 17, 17, 17, 17, 17, 
	17, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 17, 17, 17, 
	119, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 1, 123, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	1, 125, 1, 1, 126, 128, 127, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 1, 1, 1, 1, 1, 1, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 129, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 131, 1, 1, 1, 1, 1, 
	1, 1, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 132, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 1, 1, 
	1, 1, 1, 1, 1, 134, 1, 135, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 135, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 135, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 135, 1, 136, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 1, 1, 1, 1, 1, 
	1, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 1, 1, 1, 
	138, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 140, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 141, 
	139, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 145, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 146, 17, 17, 
	147, 17, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 149, 1, 149, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 149, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 150, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 150, 17, 17, 17, 17, 17, 17, 
	17, 151, 152, 17, 17, 153, 17, 17, 
	17, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 155, 17, 17, 17, 17, 
	17, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 17, 17, 17, 
	154, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 148, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 148, 17, 17, 17, 
	17, 17, 17, 17, 17, 156, 17, 17, 
	149, 17, 157, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 157, 17, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 158, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 1, 160, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 160, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	162, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 1, 1, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 1, 1, 1, 163, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 164, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 164, 1, 1, 1, 1, 
	1, 1, 1, 165, 1, 1, 1, 1, 
	1, 1, 1, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 1, 1, 1, 
	1, 1, 1, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 1, 
	1, 1, 166, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 167, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 167, 1, 
	1, 1, 1, 1, 1, 1, 168, 1, 
	169, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 169, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 1, 1, 1, 1, 
	1, 1, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 1, 1, 
	1, 172, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 174, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	175, 173, 177, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 178, 176, 179, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 179, 17, 17, 
	17, 17, 17, 17, 17, 17, 180, 17, 
	17, 181, 17, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 183, 1, 
	183, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 183, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 184, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 184, 17, 17, 17, 17, 17, 
	17, 17, 185, 186, 17, 17, 187, 17, 
	17, 17, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 189, 17, 17, 17, 
	17, 17, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 17, 17, 
	17, 188, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 182, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 182, 17, 17, 
	17, 17, 17, 17, 17, 17, 190, 17, 
	17, 183, 17, 191, 192, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 191, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 193, 17, 194, 195, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 194, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 196, 1, 197, 1, 1, 198, 200, 
	199, 176, 184, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 184, 17, 17, 17, 17, 17, 17, 
	17, 17, 186, 17, 17, 187, 17, 17, 
	17, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 17, 17, 17, 17, 17, 
	17, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 17, 17, 17, 
	201, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 142, 150, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 150, 17, 17, 
	17, 17, 17, 17, 17, 17, 152, 17, 
	17, 153, 17, 17, 17, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 17, 
	17, 17, 17, 17, 17, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 17, 17, 17, 202, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 1, 1, 1, 1, 1, 
	1, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 1, 1, 1, 
	203, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 204, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 204, 1, 1, 1, 
	1, 1, 1, 1, 205, 1, 1, 1, 
	1, 1, 1, 1, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 1, 1, 
	1, 1, 1, 1, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	1, 1, 1, 206, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	207, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 207, 
	1, 1, 1, 1, 1, 1, 1, 208, 
	1, 209, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 209, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 1, 1, 1, 
	1, 1, 1, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 1, 
	1, 1, 212, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 214, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 215, 213, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 219, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 219, 17, 
	17, 17, 17, 17, 17, 17, 17, 220, 
	17, 17, 221, 17, 222, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 222, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 223, 
	1, 223, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	223, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 225, 226, 17, 17, 227, 
	17, 17, 17, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 229, 17, 17, 
	17, 17, 17, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 17, 
	17, 17, 228, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 222, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 222, 17, 
	17, 17, 17, 17, 17, 17, 17, 230, 
	17, 17, 223, 17, 231, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 231, 17, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 234, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 236, 1, 1, 1, 1, 1, 
	1, 1, 237, 1, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	1, 1, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 1, 1, 
	1, 238, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 239, 1, 
	240, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 240, 
	1, 1, 1, 1, 1, 1, 1, 241, 
	1, 1, 1, 1, 1, 1, 1, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 1, 1, 1, 1, 1, 1, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 1, 1, 1, 242, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 243, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 243, 1, 1, 1, 1, 1, 
	1, 1, 244, 1, 245, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 245, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 245, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	1, 1, 1, 1, 1, 1, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 1, 1, 1, 248, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 250, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 251, 249, 253, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	254, 252, 255, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 255, 17, 17, 17, 17, 17, 17, 
	17, 17, 256, 17, 17, 257, 17, 258, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 258, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 259, 1, 259, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 260, 17, 
	17, 17, 17, 17, 17, 17, 261, 262, 
	17, 17, 263, 17, 17, 17, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	265, 17, 17, 17, 17, 17, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 17, 17, 17, 264, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 258, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 258, 17, 17, 17, 17, 17, 17, 
	17, 17, 266, 17, 17, 259, 17, 252, 
	260, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	262, 17, 17, 263, 17, 17, 17, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 17, 17, 17, 17, 17, 17, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 17, 17, 17, 267, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 216, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 17, 226, 17, 17, 227, 
	17, 17, 17, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 17, 17, 17, 
	17, 17, 17, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 17, 
	17, 17, 268, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 1, 
	269, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	1, 1, 1, 1, 1, 1, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 1, 1, 270, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 269, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 1, 1, 1, 1, 1, 
	1, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 1, 1, 1, 
	271, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 273, 1, 1, 
	275, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	276, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 277, 274, 278, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 279, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 280, 45, 
	281, 1, 1, 17, 17, 1, 1, 1, 
	1, 17, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 11, 23, 7, 8, 22, 7, 8, 
	22, 0, 9, 13, 10, 9, 10, 9, 
	12, 13, 10, 11, 5, 13, 14, 14, 
	15, 16, 15, 16, 17, 18, 136, 19, 
	20, 21, 21, 136, 23, 143, 26, 27, 
	32, 31, 28, 29, 30, 28, 29, 30, 
	145, 145, 31, 32, 26, 34, 35, 36, 
	34, 35, 36, 37, 38, 43, 46, 39, 
	40, 45, 39, 40, 45, 41, 146, 42, 
	41, 42, 41, 44, 146, 42, 43, 37, 
	146, 46, 48, 49, 50, 48, 49, 50, 
	51, 52, 57, 61, 53, 54, 60, 53, 
	54, 60, 55, 59, 56, 55, 56, 55, 
	58, 59, 56, 57, 51, 59, 147, 61, 
	63, 148, 63, 149, 65, 66, 67, 67, 
	149, 69, 70, 71, 69, 70, 71, 72, 
	73, 78, 103, 74, 75, 102, 74, 75, 
	102, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 72, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 93, 101, 89, 90, 100, 
	89, 90, 100, 91, 95, 92, 91, 92, 
	91, 94, 95, 92, 93, 87, 95, 96, 
	150, 97, 96, 150, 97, 98, 99, 99, 
	150, 101, 103, 105, 106, 107, 105, 106, 
	107, 108, 109, 114, 135, 110, 111, 134, 
	110, 111, 134, 112, 116, 113, 112, 113, 
	112, 115, 116, 113, 114, 108, 116, 117, 
	117, 118, 119, 118, 119, 120, 121, 151, 
	122, 123, 121, 122, 123, 124, 125, 130, 
	133, 126, 127, 132, 126, 127, 132, 128, 
	152, 129, 128, 129, 128, 131, 152, 129, 
	130, 124, 152, 133, 135, 138, 139, 139, 
	141, 142, 143, 143, 144, 24, 143, 144, 
	24, 141
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 10, 0, 0, 
	7, 7, 8, 9, 8, 10, 11, 10, 
	28, 29, 27, 27, 17, 30, 2, 3, 
	4, 0, 5, 0, 0, 6, 7, 8, 
	9, 8, 10, 11, 10, 14, 31, 14, 
	0, 0, 15, 16, 32, 15, 4, 17, 
	33, 27, 34, 2, 3, 4, 0, 5, 
	0, 0, 6, 7, 8, 9, 8, 10, 
	11, 10, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 35, 27, 
	19, 36, 21, 37, 0, 0, 24, 25, 
	38, 34, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 14, 14, 14, 0, 0, 15, 16, 
	15, 15, 4, 17, 0, 39, 0, 19, 
	40, 21, 0, 34, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 41, 
	42, 41, 0, 43, 0, 0, 24, 25, 
	44, 27, 27, 45, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 18, 
	0, 19, 20, 21, 0, 22, 34, 46, 
	2, 3, 4, 0, 5, 0, 0, 6, 
	7, 8, 9, 8, 10, 11, 10, 14, 
	47, 14, 0, 0, 15, 16, 48, 15, 
	4, 17, 49, 27, 27, 50, 7, 27, 
	52, 0, 8, 54, 53, 8, 55, 0, 
	10, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 0, 12, 0, 
	0, 0, 0, 0, 0, 0, 12, 0, 
	0, 12, 12, 12, 0, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 12, 0, 0, 12, 12, 
	12, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 0, 12, 12, 12, 
	0, 0, 0, 0, 0, 12, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 0, 12, 0, 12, 
	0, 0, 0, 51, 0, 0, 53, 0, 
	56, 0, 58, 58, 0, 0, 0, 0, 
	58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 136;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_id_ast
end
self.bel_en_id_ast = 137;
class << self
	attr_accessor :bel_en_str_ast
end
self.bel_en_str_ast = 140;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 33;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 47;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 62;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 64;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 68;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 104;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 10 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 11 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 33 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 39 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 104
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 7 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 33
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 9 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 44 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 57 then
		begin

    @closed = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 28 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 31 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 34 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 56 then
		begin

    @closed = true
  		end
	when 58 then
		begin

  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module NestedStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 
	32, 9, 126, 9, 126, 
	9, 40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 0, 0, 9, 122, 
	0, 0, 9, 122, 9, 122, 
	34, 92, 34, 92, 10, 
	10, 0, 0, 10, 122, 
	10, 122, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 122, 
	9, 122, 9, 44, 0, 
	0, 9, 122, 48, 122, 
	9, 122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	10, 10, 0, 0, 9, 
	122, 33, 126, 10, 126, 
	10, 47, 47, 47, 10, 10, 
	10, 10, 48, 122, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 47, 
	9, 47, 47, 47, 10, 10, 
	10, 10, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	48, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 9, 32, 9, 
	126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 122, 
	9, 44, 0, 0, 9, 
	122, 0, 0, 9, 122, 
	0, 0, 10, 122, 0, 0, 
	10, 122, 10, 34, 0, 
	0, 10, 92, 10, 92, 
	10, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 24, 118, 118, 
	32, 1, 39, 1, 1, 1, 0, 114, 
	0, 114, 114, 59, 59, 1, 0, 113, 
	113, 75, 114, 32, 114, 114, 59, 59, 
	36, 36, 114, 114, 36, 0, 114, 75, 
	114, 32, 114, 114, 59, 59, 36, 36, 
	114, 114, 36, 1, 0, 114, 94, 117, 
	38, 1, 1, 1, 75, 114, 32, 114, 
	114, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	59, 59, 36, 36, 114, 114, 36, 39, 
	39, 1, 1, 1, 0, 114, 0, 114, 
	75, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 24, 118, 118, 114, 
	1, 114, 32, 114, 114, 59, 59, 36, 
	36, 114, 114, 36, 0, 114, 0, 114, 
	0, 113, 0, 113, 25, 0, 83, 83, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 514, 
	574, 611, 648, 763, 878, 915, 940, 1059, 
	1178, 1211, 1213, 1253, 1255, 1257, 1259, 1260, 
	1375, 1376, 1491, 1606, 1666, 1726, 1728, 1729, 
	1843, 1957, 2033, 2148, 2181, 2296, 2411, 2471, 
	2531, 2568, 2605, 2720, 2835, 2872, 2873, 2988, 
	3064, 3179, 3212, 3327, 3442, 3502, 3562, 3599, 
	3636, 3751, 3866, 3903, 3905, 3906, 4021, 4116, 
	4234, 4273, 4275, 4277, 4279, 4355, 4470, 4503, 
	4618, 4733, 4793, 4853, 4890, 4927, 5042, 5157, 
	5194, 5219, 5338, 5457, 5572, 5687, 5720, 5835, 
	5950, 6010, 6070, 6107, 6144, 6259, 6374, 6411, 
	6451, 6491, 6493, 6495, 6497, 6498, 6613, 6614, 
	6729, 6805, 6920, 6953, 7068, 7183, 7243, 7303, 
	7340, 7377, 7492, 7607, 7644, 7669, 7788, 7907, 
	8022, 8024, 8139, 8172, 8287, 8402, 8462, 8522, 
	8559, 8596, 8711, 8826, 8863, 8864, 8979, 8980, 
	9095, 9096, 9210, 9211, 9325, 9351, 9352, 9436, 
	9520, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 
	9529
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 1, 
	1, 1, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 1, 1, 
	1, 10, 1, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 12, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	13, 11, 15, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 16, 14, 18, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 19, 17, 
	17, 20, 17, 21, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 21, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 22, 1, 
	22, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 22, 
	1, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 1, 1, 1, 9, 1, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 1, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 23, 17, 17, 17, 17, 17, 
	17, 17, 24, 25, 17, 17, 26, 17, 
	17, 17, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 28, 17, 17, 17, 
	17, 17, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 17, 17, 
	17, 27, 17, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 17, 21, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 21, 17, 17, 
	17, 17, 17, 17, 17, 17, 29, 17, 
	17, 22, 17, 30, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 30, 17, 31, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 31, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 1, 33, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 33, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 1, 35, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 35, 1, 1, 1, 1, 1, 1, 
	1, 36, 1, 37, 1, 37, 38, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 39, 1, 40, 1, 1, 
	41, 43, 42, 14, 23, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 23, 17, 17, 17, 17, 
	17, 17, 17, 17, 25, 17, 17, 26, 
	17, 17, 17, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 17, 17, 17, 
	17, 17, 17, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 17, 
	17, 17, 44, 17, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 17, 45, 
	46, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 46, 
	1, 47, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 1, 1, 1, 1, 1, 1, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 1, 1, 1, 48, 1, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 1, 46, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 46, 1, 47, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 1, 1, 1, 1, 
	1, 1, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 1, 1, 
	1, 49, 1, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 51, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	52, 50, 54, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 55, 53, 56, 1, 
	53, 57, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 1, 1, 1, 1, 1, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 1, 1, 1, 58, 1, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 1, 57, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 60, 1, 1, 1, 1, 
	1, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 1, 1, 1, 
	59, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 1, 
	1, 1, 1, 1, 1, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 1, 1, 1, 61, 1, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	1, 62, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	62, 1, 1, 1, 1, 1, 1, 1, 
	63, 1, 1, 1, 1, 1, 1, 1, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 1, 1, 1, 1, 1, 1, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 1, 1, 1, 64, 
	1, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 1, 65, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 65, 1, 1, 1, 1, 
	1, 1, 1, 66, 1, 67, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 67, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	67, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 67, 
	1, 68, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 1, 1, 1, 1, 1, 1, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 1, 1, 1, 70, 1, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 1, 72, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 73, 71, 75, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 74, 77, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 77, 17, 17, 17, 17, 17, 
	17, 17, 17, 78, 17, 17, 79, 17, 
	80, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 80, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 81, 1, 81, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 81, 1, 68, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 1, 1, 
	1, 1, 1, 1, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	1, 1, 1, 69, 1, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 1, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 82, 
	17, 17, 17, 17, 17, 17, 17, 83, 
	84, 17, 17, 85, 17, 17, 17, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 87, 17, 17, 17, 17, 17, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 17, 17, 17, 86, 17, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 17, 80, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 80, 17, 17, 17, 17, 17, 
	17, 17, 17, 88, 17, 17, 81, 17, 
	74, 82, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	82, 17, 17, 17, 17, 17, 17, 17, 
	17, 84, 17, 17, 85, 17, 17, 17, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 17, 17, 17, 17, 17, 17, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 17, 17, 17, 89, 
	17, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 17, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 1, 1, 
	1, 1, 1, 1, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	1, 1, 1, 90, 1, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 1, 
	91, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 91, 
	1, 1, 1, 1, 1, 1, 1, 92, 
	1, 1, 1, 1, 1, 1, 1, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 1, 1, 1, 1, 1, 1, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 1, 1, 1, 93, 1, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 1, 94, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 94, 1, 1, 1, 1, 1, 
	1, 1, 95, 1, 96, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 96, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 96, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 96, 1, 
	97, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	1, 1, 1, 1, 1, 1, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 1, 1, 1, 99, 1, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 1, 101, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 102, 100, 104, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	105, 103, 106, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 106, 17, 17, 17, 17, 17, 17, 
	17, 17, 107, 17, 17, 108, 17, 109, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 109, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 110, 1, 110, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 110, 1, 97, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 1, 1, 1, 
	1, 1, 1, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 1, 
	1, 1, 98, 1, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 1, 111, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 111, 17, 
	17, 17, 17, 17, 17, 17, 112, 113, 
	17, 17, 114, 17, 17, 17, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	116, 17, 17, 17, 17, 17, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 17, 17, 17, 115, 17, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 115, 115, 115, 115, 115, 115, 115, 
	115, 17, 109, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 109, 17, 17, 17, 17, 17, 17, 
	17, 17, 117, 17, 17, 110, 17, 118, 
	17, 103, 111, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 111, 17, 17, 17, 17, 17, 17, 
	17, 17, 113, 17, 17, 114, 17, 17, 
	17, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 17, 17, 17, 17, 17, 
	17, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 17, 17, 17, 
	119, 17, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 17, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 120, 120, 120, 120, 120, 
	120, 120, 120, 1, 121, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 1, 123, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 124, 
	1, 125, 1, 1, 126, 128, 127, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 1, 1, 1, 1, 1, 1, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 1, 1, 1, 129, 1, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 129, 129, 129, 129, 129, 129, 
	129, 129, 1, 130, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 130, 1, 1, 1, 1, 1, 
	1, 1, 131, 1, 1, 1, 1, 1, 
	1, 1, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 1, 1, 1, 1, 
	1, 1, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 1, 1, 
	1, 132, 1, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 132, 1, 133, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 133, 1, 1, 
	1, 1, 1, 1, 1, 134, 1, 135, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 135, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 135, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 135, 1, 136, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 1, 1, 1, 1, 1, 
	1, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 1, 1, 1, 
	138, 1, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 1, 140, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 141, 
	139, 143, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 144, 142, 145, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 145, 17, 17, 17, 
	17, 17, 17, 17, 17, 146, 17, 17, 
	147, 17, 148, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 148, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 149, 1, 149, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 149, 1, 
	136, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	1, 1, 1, 1, 1, 1, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 1, 1, 1, 137, 1, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 137, 137, 137, 137, 
	137, 1, 150, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 150, 17, 17, 17, 17, 17, 17, 
	17, 151, 152, 17, 17, 153, 17, 17, 
	17, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 155, 17, 17, 17, 17, 
	17, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 17, 17, 17, 
	154, 17, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 17, 148, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 148, 17, 17, 17, 
	17, 17, 17, 17, 17, 156, 17, 17, 
	149, 17, 157, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 157, 17, 158, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 158, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 1, 160, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 160, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	1, 162, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	162, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 1, 1, 1, 1, 1, 1, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 1, 1, 1, 163, 
	1, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 1, 164, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 164, 1, 1, 1, 1, 
	1, 1, 1, 165, 1, 1, 1, 1, 
	1, 1, 1, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 1, 1, 1, 
	1, 1, 1, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 1, 
	1, 1, 166, 1, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 1, 167, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 167, 1, 
	1, 1, 1, 1, 1, 1, 168, 1, 
	169, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 169, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 169, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 169, 1, 170, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 1, 1, 1, 1, 
	1, 1, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 1, 1, 
	1, 172, 1, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 1, 174, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	173, 173, 173, 173, 173, 173, 173, 173, 
	175, 173, 177, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 176, 176, 176, 176, 
	176, 176, 176, 176, 178, 176, 179, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 179, 17, 17, 
	17, 17, 17, 17, 17, 17, 180, 17, 
	17, 181, 17, 182, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 182, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 183, 1, 
	183, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 183, 
	1, 170, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 1, 1, 1, 1, 1, 1, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 1, 1, 1, 171, 1, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 1, 184, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 184, 17, 17, 17, 17, 17, 
	17, 17, 185, 186, 17, 17, 187, 17, 
	17, 17, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 189, 17, 17, 17, 
	17, 17, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 17, 17, 
	17, 188, 17, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 17, 182, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 182, 17, 17, 
	17, 17, 17, 17, 17, 17, 190, 17, 
	17, 183, 17, 191, 192, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 191, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 193, 17, 194, 195, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 194, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 196, 1, 197, 1, 1, 198, 200, 
	199, 176, 184, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 184, 17, 17, 17, 17, 17, 17, 
	17, 17, 186, 17, 17, 187, 17, 17, 
	17, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 17, 17, 17, 17, 17, 
	17, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 17, 17, 17, 
	201, 17, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 17, 142, 150, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 150, 17, 17, 
	17, 17, 17, 17, 17, 17, 152, 17, 
	17, 153, 17, 17, 17, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 17, 
	17, 17, 17, 17, 17, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 17, 17, 17, 202, 17, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	17, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 1, 1, 1, 1, 1, 
	1, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 1, 1, 1, 
	203, 1, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 1, 204, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 204, 1, 1, 1, 
	1, 1, 1, 1, 205, 1, 1, 1, 
	1, 1, 1, 1, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 1, 1, 
	1, 1, 1, 1, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	1, 1, 1, 206, 1, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 1, 
	207, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 207, 
	1, 1, 1, 1, 1, 1, 1, 208, 
	1, 209, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	209, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 209, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 209, 1, 210, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 1, 1, 1, 
	1, 1, 1, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 1, 
	1, 1, 212, 1, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 1, 214, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 215, 213, 217, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 218, 216, 219, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 219, 17, 
	17, 17, 17, 17, 17, 17, 17, 220, 
	17, 17, 221, 17, 222, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 222, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 223, 
	1, 223, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	223, 1, 210, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 1, 1, 1, 1, 1, 1, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 1, 1, 1, 211, 
	1, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 1, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 225, 226, 17, 17, 227, 
	17, 17, 17, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 229, 17, 17, 
	17, 17, 17, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 17, 
	17, 17, 228, 17, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 17, 222, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 222, 17, 
	17, 17, 17, 17, 17, 17, 17, 230, 
	17, 17, 223, 17, 231, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 231, 17, 232, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 232, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 1, 234, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 234, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 1, 236, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 236, 1, 1, 1, 1, 1, 
	1, 1, 237, 1, 1, 1, 1, 1, 
	1, 1, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 1, 1, 1, 1, 
	1, 1, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 1, 1, 
	1, 238, 1, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 1, 239, 1, 
	240, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 240, 
	1, 1, 1, 1, 1, 1, 1, 241, 
	1, 1, 1, 1, 1, 1, 1, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 1, 1, 1, 1, 1, 1, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 1, 1, 1, 242, 1, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 1, 243, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 243, 1, 1, 1, 1, 1, 
	1, 1, 244, 1, 245, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 245, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 245, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 245, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	1, 1, 1, 1, 1, 1, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 1, 1, 1, 248, 1, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 1, 250, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 251, 249, 253, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	254, 252, 255, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 255, 17, 17, 17, 17, 17, 17, 
	17, 17, 256, 17, 17, 257, 17, 258, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 258, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 259, 1, 259, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 259, 1, 246, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 1, 1, 1, 
	1, 1, 1, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 1, 
	1, 1, 247, 1, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 1, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 260, 17, 
	17, 17, 17, 17, 17, 17, 261, 262, 
	17, 17, 263, 17, 17, 17, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	265, 17, 17, 17, 17, 17, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 17, 17, 17, 264, 17, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 17, 258, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 258, 17, 17, 17, 17, 17, 17, 
	17, 17, 266, 17, 17, 259, 17, 252, 
	260, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 260, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	262, 17, 17, 263, 17, 17, 17, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 17, 17, 17, 17, 17, 17, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 17, 17, 17, 267, 17, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 17, 216, 224, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 224, 17, 17, 17, 17, 
	17, 17, 17, 17, 226, 17, 17, 227, 
	17, 17, 17, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 17, 17, 17, 
	17, 17, 17, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 17, 
	17, 17, 268, 17, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 17, 1, 
	269, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	1, 1, 1, 1, 1, 1, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 1, 1, 270, 1, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 1, 1, 269, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 1, 1, 1, 1, 1, 
	1, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 1, 1, 1, 
	271, 1, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 1, 272, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 273, 1, 1, 
	275, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	276, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 277, 274, 278, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 279, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 280, 45, 
	281, 1, 1, 17, 17, 1, 1, 1, 
	1, 17, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 5, 
	6, 11, 23, 7, 8, 22, 7, 8, 
	22, 0, 9, 13, 10, 9, 10, 9, 
	12, 13, 10, 11, 5, 13, 14, 14, 
	15, 16, 15, 16, 17, 18, 136, 19, 
	20, 21, 21, 136, 23, 143, 26, 27, 
	32, 31, 28, 29, 30, 28, 29, 30, 
	145, 145, 31, 32, 26, 34, 35, 36, 
	34, 35, 36, 37, 38, 43, 46, 39, 
	40, 45, 39, 40, 45, 41, 146, 42, 
	41, 42, 41, 44, 146, 42, 43, 37, 
	146, 46, 48, 49, 50, 48, 49, 50, 
	51, 52, 57, 61, 53, 54, 60, 53, 
	54, 60, 55, 59, 56, 55, 56, 55, 
	58, 59, 56, 57, 51, 59, 147, 61, 
	63, 148, 63, 149, 65, 66, 67, 67, 
	149, 69, 70, 71, 69, 70, 71, 72, 
	73, 78, 103, 74, 75, 102, 74, 75, 
	102, 76, 80, 77, 76, 77, 76, 79, 
	80, 77, 78, 72, 80, 81, 81, 82, 
	83, 82, 83, 84, 85, 86, 84, 85, 
	86, 87, 88, 93, 101, 89, 90, 100, 
	89, 90, 100, 91, 95, 92, 91, 92, 
	91, 94, 95, 92, 93, 87, 95, 96, 
	150, 97, 96, 150, 97, 98, 99, 99, 
	150, 101, 103, 105, 106, 107, 105, 106, 
	107, 108, 109, 114, 135, 110, 111, 134, 
	110, 111, 134, 112, 116, 113, 112, 113, 
	112, 115, 116, 113, 114, 108, 116, 117, 
	117, 118, 119, 118, 119, 120, 121, 151, 
	122, 123, 121, 122, 123, 124, 125, 130, 
	133, 126, 127, 132, 126, 127, 132, 128, 
	152, 129, 128, 129, 128, 131, 152, 129, 
	130, 124, 152, 133, 135, 138, 139, 139, 
	141, 142, 143, 143, 144, 24, 143, 144, 
	24, 141
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	1, 0, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 13, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 18, 0, 
	19, 20, 21, 0, 22, 0, 23, 0, 
	0, 24, 25, 26, 27, 10, 0, 0, 
	7, 7, 8, 9, 8, 10, 11, 10, 
	28, 29, 27, 27, 17, 30, 2, 3, 
	4, 0, 5, 0, 0, 6, 7, 8, 
	9, 8, 10, 11, 10, 14, 31, 14, 
	0, 0, 15, 16, 32, 15, 4, 17, 
	33, 27, 34, 2, 3, 4, 0, 5, 
	0, 0, 6, 7, 8, 9, 8, 10, 
	11, 10, 14, 14, 14, 0, 0, 15, 
	16, 15, 15, 4, 17, 0, 35, 27, 
	19, 36, 21, 37, 0, 0, 24, 25, 
	38, 34, 2, 3, 4, 0, 5, 0, 
	0, 6, 7, 8, 9, 8, 10, 11, 
	10, 14, 14, 14, 0, 0, 15, 16, 
	15, 15, 4, 17, 0, 39, 0, 19, 
	40, 21, 0, 34, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 41, 
	42, 41, 0, 43, 0, 0, 24, 25, 
	44, 27, 27, 45, 2, 3, 4, 0, 
	5, 0, 0, 6, 7, 8, 9, 8, 
	10, 11, 10, 14, 14, 14, 0, 0, 
	15, 16, 15, 15, 4, 17, 0, 18, 
	0, 19, 20, 21, 0, 22, 34, 46, 
	2, 3, 4, 0, 5, 0, 0, 6, 
	7, 8, 9, 8, 10, 11, 10, 14, 
	47, 14, 0, 0, 15, 16, 48, 15, 
	4, 17, 49, 27, 27, 50, 7, 27, 
	52, 0, 8, 54, 53, 8, 55, 0, 
	10, 57
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	12, 0, 0, 12, 12, 0, 12, 0, 
	0, 0, 0, 0, 0, 0, 12, 0, 
	0, 12, 12, 12, 0, 12, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 12, 0, 0, 12, 12, 
	12, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 0, 12, 12, 12, 
	0, 0, 0, 0, 0, 12, 0, 12, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 12, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	0, 0, 12, 12, 0, 12, 0, 12, 
	0, 0, 0, 51, 0, 0, 53, 0, 
	56, 0, 58, 58, 0, 0, 0, 0, 
	58
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 136;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_id_ast
end
self.bel_en_id_ast = 137;
class << self
	attr_accessor :bel_en_str_ast
end
self.bel_en_str_ast = 140;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 25;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 33;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 47;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 62;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 64;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 68;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 104;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


      # end: ragel        
          end

          def each
            @buffers    = {}
            @incomplete = {}
            eof         = :ignored
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 27 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 10 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 11 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 5 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 33 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 35 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 13 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 21 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 40 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 25 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 37 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 39 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 41 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 43 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 22 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 104
		_goto_level = _again
		next
	end

  		end
	when 46 then
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 23 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 7 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 4 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 50 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 17 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 16 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 33
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 9 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 19 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 36 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 20 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 24 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 38 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 44 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 26 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 18 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 42 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 29 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 15 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 3 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 57 then
		begin

    @closed = true
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 28 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 14 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 49 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 6 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 32 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = @opened && @closed
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
  		end
		begin

    yield @buffers[:string]
  		end
	when 31 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 34 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 30 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 47 then
		begin

    @closed = true
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 1 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 45 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 51 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 53 then
		begin

    @incomplete[:string] = []
    @opened = true
  		end
	when 56 then
		begin

    @closed = true
  		end
	when 58 then
		begin

  		end
	when 12 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::NestedStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
