
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 41, 
	47, 47, 10, 10, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 48, 122, 48, 122, 
	9, 34, 34, 92, 34, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 33, 126, 
	47, 47, 47, 47, 9, 32, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	47, 47, 10, 10, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	9, 47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 
	122, 0, 0, 0, 0, 
	10, 10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 
	122, 9, 34, 0, 0, 
	10, 10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 
	32, 9, 47, 9, 47, 
	0, 0, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 26, 59, 
	59, 36, 36, 114, 114, 36, 24, 118, 
	118, 32, 1, 1, 1, 114, 114, 114, 
	0, 75, 75, 26, 59, 59, 0, 114, 
	114, 26, 59, 59, 0, 75, 114, 32, 
	114, 114, 26, 59, 59, 36, 36, 114, 
	114, 36, 114, 114, 114, 0, 75, 114, 
	32, 114, 114, 26, 59, 59, 36, 36, 
	114, 114, 36, 114, 114, 114, 0, 94, 
	1, 1, 24, 75, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 114, 114, 0, 114, 114, 
	114, 0, 75, 114, 32, 114, 114, 26, 
	59, 59, 36, 36, 114, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	114, 114, 114, 0, 114, 114, 114, 0, 
	39, 0, 1, 113, 0, 113, 0, 0, 
	1, 0, 113, 113, 114, 114, 26, 0, 
	1, 0, 94, 1, 0, 24, 39, 39, 
	0, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 481, 
	541, 601, 638, 675, 790, 905, 942, 967, 
	1086, 1205, 1238, 1240, 1242, 1244, 1359, 1474, 
	1589, 1590, 1666, 1742, 1769, 1829, 1889, 1890, 
	2005, 2120, 2147, 2207, 2267, 2268, 2344, 2459, 
	2492, 2607, 2722, 2749, 2809, 2869, 2906, 2943, 
	3058, 3173, 3210, 3325, 3440, 3555, 3556, 3632, 
	3747, 3780, 3895, 4010, 4037, 4097, 4157, 4194, 
	4231, 4346, 4461, 4498, 4613, 4728, 4843, 4844, 
	4939, 4941, 4943, 4968, 5044, 5159, 5192, 5307, 
	5422, 5449, 5509, 5569, 5606, 5643, 5758, 5873, 
	5910, 5935, 6054, 6173, 6288, 6403, 6436, 6551, 
	6666, 6693, 6753, 6813, 6850, 6887, 7002, 7117, 
	7154, 7156, 7158, 7273, 7388, 7503, 7504, 7619, 
	7734, 7849, 7850, 7926, 8041, 8074, 8189, 8304, 
	8331, 8391, 8451, 8488, 8525, 8640, 8755, 8792, 
	8817, 8936, 9055, 9170, 9172, 9287, 9320, 9435, 
	9550, 9577, 9637, 9697, 9734, 9771, 9886, 10001, 
	10038, 10153, 10268, 10383, 10384, 10499, 10614, 10729, 
	10730, 10770, 10771, 10773, 10887, 10888, 11002, 11003, 
	11004, 11006, 11007, 11121, 11235, 11350, 11465, 11492, 
	11493, 11495, 11496, 11591, 11593, 11594, 11619, 11659, 
	11699, 11700, 11702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 7, 7, 7, 7, 7, 7, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 7, 7, 7, 11, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 7, 7, 7, 7, 
	7, 7, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 7, 7, 
	7, 12, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 9, 9, 
	9, 9, 9, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 9, 13, 10, 
	13, 15, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 16, 14, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 19, 
	17, 20, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	20, 13, 13, 13, 13, 13, 13, 13, 
	13, 21, 13, 13, 22, 13, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 24, 1, 24, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 24, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 7, 7, 7, 7, 
	7, 7, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 7, 7, 
	7, 11, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 27, 28, 25, 
	25, 29, 25, 25, 25, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 31, 
	25, 25, 25, 25, 25, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 25, 25, 25, 30, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 23, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	23, 1, 1, 1, 1, 1, 1, 1, 
	1, 32, 1, 1, 24, 1, 33, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 33, 1, 34, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 1, 36, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 36, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 1, 37, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 39, 1, 
	40, 1, 1, 41, 42, 43, 43, 43, 
	43, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 42, 7, 44, 7, 7, 
	7, 7, 7, 7, 45, 7, 7, 46, 
	7, 7, 7, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 7, 7, 7, 
	7, 7, 7, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 7, 
	7, 7, 47, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 48, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 48, 7, 
	10, 7, 7, 7, 7, 7, 7, 49, 
	7, 7, 50, 7, 7, 7, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 12, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 28, 25, 25, 29, 25, 25, 
	25, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 25, 25, 25, 25, 25, 
	25, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 25, 25, 25, 
	51, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 17, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	52, 52, 52, 52, 52, 52, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 52, 52, 52, 53, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 1, 1, 1, 1, 
	1, 1, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 1, 1, 
	1, 54, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 56, 56, 
	56, 56, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 56, 55, 57, 
	55, 59, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 60, 58, 62, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 63, 
	61, 61, 64, 65, 65, 65, 65, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 64, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 7, 7, 7, 7, 7, 
	7, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 7, 7, 7, 
	67, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 64, 65, 65, 
	65, 65, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 64, 7, 66, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 68, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	65, 65, 65, 65, 65, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 65, 
	13, 66, 13, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 72, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 1, 1, 
	1, 1, 1, 1, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	1, 1, 1, 75, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	76, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 76, 
	1, 1, 1, 1, 1, 1, 1, 77, 
	1, 1, 1, 1, 1, 1, 1, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 1, 1, 1, 1, 1, 1, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 1, 1, 1, 78, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 79, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 79, 1, 1, 1, 1, 1, 
	1, 1, 80, 1, 81, 82, 82, 82, 
	82, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 7, 83, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 7, 7, 7, 
	7, 7, 7, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 7, 
	7, 7, 84, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 81, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 81, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	7, 7, 7, 7, 7, 7, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 7, 7, 7, 85, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 82, 82, 82, 82, 82, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 82, 13, 83, 13, 87, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 88, 
	86, 90, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 89, 92, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 92, 13, 13, 13, 
	13, 13, 13, 13, 13, 93, 13, 13, 
	94, 13, 95, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 95, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 1, 96, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 96, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 7, 7, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 7, 7, 7, 84, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 97, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 97, 25, 25, 25, 25, 25, 25, 
	25, 98, 99, 25, 25, 100, 25, 25, 
	25, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 102, 25, 25, 25, 25, 
	25, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 25, 25, 25, 
	101, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 95, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 103, 1, 1, 
	96, 1, 104, 105, 105, 105, 105, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 104, 7, 106, 7, 7, 7, 7, 
	7, 7, 107, 7, 7, 108, 7, 7, 
	7, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 7, 7, 7, 7, 7, 
	7, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 7, 7, 7, 
	109, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 110, 82, 82, 
	82, 82, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 7, 83, 7, 
	7, 7, 7, 7, 7, 111, 7, 7, 
	112, 7, 7, 7, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 7, 7, 
	7, 7, 7, 7, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	7, 7, 7, 85, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 97, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	99, 25, 25, 100, 25, 25, 25, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 25, 25, 25, 25, 25, 25, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 25, 25, 25, 113, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 89, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 1, 1, 
	1, 1, 1, 1, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	1, 1, 1, 114, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	115, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 115, 
	1, 1, 1, 1, 1, 1, 1, 116, 
	1, 1, 1, 1, 1, 1, 1, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 1, 1, 1, 1, 1, 1, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 1, 1, 1, 117, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 118, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 118, 1, 1, 1, 1, 1, 
	1, 1, 119, 1, 120, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 120, 7, 122, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 7, 7, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 7, 
	7, 7, 123, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 120, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 120, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	7, 7, 7, 7, 7, 7, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 7, 7, 7, 124, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 121, 121, 121, 121, 121, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 121, 13, 122, 13, 126, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 127, 
	125, 129, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 130, 128, 131, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 131, 13, 13, 13, 
	13, 13, 13, 13, 13, 132, 13, 13, 
	133, 13, 134, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 134, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 135, 1, 135, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 135, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	7, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 136, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 136, 25, 25, 25, 25, 25, 25, 
	25, 137, 138, 25, 25, 139, 25, 25, 
	25, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 141, 25, 25, 25, 25, 
	25, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 25, 25, 25, 
	140, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 134, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 142, 1, 1, 
	135, 1, 143, 144, 144, 144, 144, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 143, 7, 145, 7, 7, 7, 7, 
	7, 7, 146, 7, 7, 147, 7, 7, 
	7, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 7, 7, 7, 7, 7, 
	7, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 7, 7, 7, 
	148, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 149, 121, 121, 
	121, 121, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 149, 7, 122, 7, 
	7, 7, 7, 7, 7, 150, 7, 7, 
	151, 7, 7, 7, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 7, 7, 
	7, 7, 7, 7, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	7, 7, 7, 124, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	136, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 136, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	138, 25, 25, 139, 25, 25, 25, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 25, 25, 25, 25, 25, 25, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 25, 25, 25, 152, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 128, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 1, 154, 1, 155, 1, 157, 
	1, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 1, 1, 1, 1, 1, 1, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 1, 1, 1, 158, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 159, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 159, 1, 1, 1, 1, 
	1, 1, 1, 160, 1, 1, 1, 1, 
	1, 1, 1, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 1, 1, 1, 
	1, 1, 1, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 1, 
	1, 1, 161, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 162, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 162, 1, 
	1, 1, 1, 1, 1, 1, 163, 1, 
	164, 165, 165, 165, 165, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 164, 
	7, 166, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 7, 7, 7, 7, 7, 7, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 7, 7, 7, 167, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 164, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 164, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 165, 165, 
	165, 165, 165, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 165, 13, 166, 
	13, 170, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 171, 169, 173, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 174, 
	172, 175, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	175, 13, 13, 13, 13, 13, 13, 13, 
	13, 176, 13, 13, 177, 13, 178, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 178, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 179, 1, 179, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 179, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 7, 7, 7, 7, 
	7, 7, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 7, 7, 
	7, 167, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 181, 182, 25, 
	25, 183, 25, 25, 25, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 185, 
	25, 25, 25, 25, 25, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 25, 25, 25, 184, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 178, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 1, 179, 1, 187, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 187, 1, 188, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 188, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 1, 190, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 190, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 1, 190, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 190, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 1, 1, 
	1, 1, 1, 1, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	1, 1, 1, 191, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 192, 
	1, 1, 1, 1, 1, 1, 1, 193, 
	1, 1, 1, 1, 1, 1, 1, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 1, 1, 1, 1, 1, 1, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 1, 1, 1, 194, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 195, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 195, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 197, 198, 198, 198, 
	198, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 197, 7, 199, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 7, 7, 7, 
	7, 7, 7, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 7, 
	7, 7, 200, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 197, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 197, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	7, 7, 7, 7, 7, 7, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 7, 7, 7, 201, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 198, 198, 198, 198, 198, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 198, 13, 199, 13, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 204, 
	202, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 207, 205, 208, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 208, 13, 13, 13, 
	13, 13, 13, 13, 13, 209, 13, 13, 
	210, 13, 211, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 212, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 212, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	7, 7, 7, 7, 7, 7, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 7, 7, 7, 200, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 213, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 213, 25, 25, 25, 25, 25, 25, 
	25, 214, 215, 25, 25, 216, 25, 25, 
	25, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 218, 25, 25, 25, 25, 
	25, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 25, 25, 25, 
	217, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 211, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 219, 1, 1, 
	212, 1, 220, 1, 1, 221, 222, 223, 
	223, 223, 223, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 222, 7, 224, 
	7, 7, 7, 7, 7, 7, 225, 7, 
	7, 226, 7, 7, 7, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 7, 
	7, 7, 7, 7, 7, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 7, 7, 7, 227, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 228, 198, 198, 198, 198, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	228, 7, 199, 7, 7, 7, 7, 7, 
	7, 229, 7, 7, 230, 7, 7, 7, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 7, 7, 7, 7, 7, 7, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 7, 7, 7, 201, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 213, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 213, 25, 25, 25, 25, 
	25, 25, 25, 25, 215, 25, 25, 216, 
	25, 25, 25, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 25, 25, 25, 
	25, 25, 25, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 25, 
	25, 25, 231, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 205, 
	232, 233, 233, 233, 233, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 232, 
	7, 234, 7, 7, 7, 7, 7, 7, 
	235, 7, 7, 236, 7, 7, 7, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 7, 7, 7, 7, 7, 7, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 7, 7, 7, 237, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 238, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 238, 7, 166, 7, 7, 7, 
	7, 7, 7, 239, 7, 7, 240, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 25, 182, 25, 
	25, 183, 25, 25, 25, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 25, 
	25, 25, 25, 25, 25, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 25, 25, 25, 241, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 172, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 1, 1, 1, 1, 
	1, 1, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 1, 1, 
	1, 242, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 243, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 244, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 1, 1, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 1, 1, 1, 245, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 246, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	247, 1, 248, 249, 249, 249, 249, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 248, 7, 250, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 7, 7, 7, 7, 7, 
	7, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 7, 7, 7, 
	251, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 248, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 7, 7, 
	7, 7, 7, 7, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	7, 7, 7, 252, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	249, 249, 249, 249, 249, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 249, 
	13, 250, 13, 254, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 255, 253, 257, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 258, 256, 259, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 259, 13, 13, 13, 13, 13, 
	13, 13, 13, 260, 13, 13, 261, 13, 
	262, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 262, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 263, 1, 263, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 263, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 7, 7, 
	7, 7, 7, 7, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	7, 7, 7, 251, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	264, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 264, 
	25, 25, 25, 25, 25, 25, 25, 265, 
	266, 25, 25, 267, 25, 25, 25, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 269, 25, 25, 25, 25, 25, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 25, 25, 25, 268, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 262, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 262, 1, 1, 1, 1, 1, 
	1, 1, 1, 270, 1, 1, 263, 1, 
	271, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	1, 272, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	272, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 1, 
	274, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 274, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 1, 275, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 275, 1, 
	1, 1, 1, 1, 1, 1, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 1, 279, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 279, 1, 1, 1, 1, 
	1, 1, 1, 280, 1, 1, 1, 1, 
	1, 1, 1, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 1, 1, 1, 
	1, 1, 1, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 1, 
	1, 1, 281, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 282, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 1, 1, 1, 1, 283, 1, 
	284, 285, 285, 285, 285, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 284, 
	7, 286, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 7, 7, 7, 7, 7, 7, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 7, 7, 7, 287, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 284, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 284, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 7, 7, 7, 7, 
	7, 7, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 7, 7, 
	7, 288, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 285, 285, 
	285, 285, 285, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 285, 13, 286, 
	13, 290, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 291, 289, 293, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 294, 
	292, 295, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	295, 13, 13, 13, 13, 13, 13, 13, 
	13, 296, 13, 13, 297, 13, 298, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 298, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 299, 1, 299, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 299, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 7, 7, 7, 7, 
	7, 7, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 7, 7, 
	7, 287, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 300, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 300, 25, 25, 
	25, 25, 25, 25, 25, 301, 302, 25, 
	25, 303, 25, 25, 25, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 305, 
	25, 25, 25, 25, 25, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 25, 25, 25, 304, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	1, 306, 1, 1, 299, 1, 307, 308, 
	308, 308, 308, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 307, 7, 309, 
	7, 7, 7, 7, 7, 7, 310, 7, 
	7, 311, 7, 7, 7, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 7, 
	7, 7, 7, 7, 7, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 7, 7, 7, 312, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 313, 285, 285, 285, 285, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	313, 7, 286, 7, 7, 7, 7, 7, 
	7, 314, 7, 7, 315, 7, 7, 7, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 7, 7, 7, 7, 7, 7, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 7, 7, 7, 288, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 300, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 300, 25, 25, 25, 25, 
	25, 25, 25, 25, 302, 25, 25, 303, 
	25, 25, 25, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 25, 25, 25, 
	25, 25, 25, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 25, 
	25, 25, 316, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 292, 
	317, 318, 318, 318, 318, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 317, 
	7, 319, 7, 7, 7, 7, 7, 7, 
	320, 7, 7, 321, 7, 7, 7, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 7, 7, 7, 7, 7, 7, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 7, 7, 7, 322, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 323, 249, 249, 249, 249, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 323, 7, 250, 7, 7, 7, 
	7, 7, 7, 324, 7, 7, 325, 7, 
	7, 7, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 7, 7, 7, 7, 
	7, 7, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 7, 7, 
	7, 252, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 264, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 264, 25, 25, 
	25, 25, 25, 25, 25, 25, 266, 25, 
	25, 267, 25, 25, 25, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 25, 
	25, 25, 25, 25, 25, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 25, 25, 25, 326, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 256, 39, 327, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 330, 329, 331, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 52, 52, 52, 
	52, 52, 52, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 52, 
	52, 52, 332, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 1, 
	334, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	333, 333, 333, 333, 333, 333, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 333, 333, 335, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 55, 336, 13, 1, 337, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 25, 
	25, 25, 25, 25, 25, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 25, 25, 25, 338, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 337, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 340, 25, 25, 25, 25, 25, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 25, 25, 25, 339, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 341, 342, 343, 343, 343, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 341, 7, 344, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 7, 7, 7, 7, 
	7, 7, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 7, 7, 
	7, 345, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 346, 347, 
	65, 65, 65, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 346, 7, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 7, 7, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 7, 7, 7, 68, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 65, 65, 65, 65, 65, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	65, 13, 66, 13, 1, 348, 1, 1, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 1, 351, 
	350, 1, 157, 351, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 352, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 352, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 355, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 355, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 356, 1, 1, 358, 357, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 23, 0, 8, 9, 
	24, 8, 9, 24, 10, 14, 11, 10, 
	11, 0, 10, 13, 14, 11, 12, 21, 
	14, 15, 15, 16, 17, 17, 18, 152, 
	20, 154, 22, 6, 7, 14, 11, 23, 
	22, 14, 11, 23, 0, 155, 157, 0, 
	27, 28, 29, 159, 30, 29, 159, 30, 
	32, 33, 34, 163, 162, 35, 160, 36, 
	35, 160, 36, 38, 39, 40, 38, 39, 
	40, 41, 42, 43, 48, 52, 44, 45, 
	53, 44, 45, 53, 46, 167, 47, 46, 
	47, 46, 49, 167, 47, 48, 50, 167, 
	51, 42, 43, 167, 47, 52, 51, 167, 
	47, 52, 55, 56, 57, 55, 56, 57, 
	58, 59, 60, 65, 69, 61, 62, 70, 
	61, 62, 70, 63, 168, 64, 63, 64, 
	63, 66, 168, 64, 65, 67, 168, 68, 
	59, 60, 168, 64, 69, 68, 168, 64, 
	69, 170, 73, 74, 171, 173, 76, 77, 
	78, 76, 77, 78, 79, 80, 81, 86, 
	112, 82, 83, 113, 82, 83, 113, 84, 
	88, 85, 84, 85, 84, 87, 88, 85, 
	86, 110, 88, 89, 89, 90, 91, 92, 
	93, 94, 92, 93, 94, 95, 96, 97, 
	102, 108, 98, 99, 109, 98, 99, 109, 
	100, 174, 101, 100, 101, 100, 103, 174, 
	101, 102, 106, 174, 105, 177, 107, 96, 
	97, 174, 101, 108, 107, 174, 101, 108, 
	111, 80, 81, 88, 85, 112, 111, 88, 
	85, 112, 115, 116, 117, 115, 116, 117, 
	118, 119, 120, 125, 150, 121, 122, 151, 
	121, 122, 151, 123, 127, 124, 123, 124, 
	123, 126, 127, 124, 125, 148, 127, 128, 
	128, 129, 130, 130, 131, 132, 178, 133, 
	134, 132, 133, 134, 135, 136, 137, 142, 
	146, 138, 139, 147, 138, 139, 147, 140, 
	178, 141, 140, 141, 140, 143, 178, 141, 
	142, 144, 178, 145, 136, 137, 178, 141, 
	146, 145, 178, 141, 146, 149, 119, 120, 
	127, 124, 150, 149, 127, 124, 150, 153, 
	19, 154, 153, 156, 155, 0, 158, 157, 
	161, 161, 162, 163, 164, 165, 166, 33, 
	34, 162, 165, 166, 169, 170, 171, 172, 
	175, 176, 104, 175, 104, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 8, 10, 12, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 20, 21, 22, 21, 21, 0, 23, 
	0, 24, 0, 0, 25, 0, 26, 0, 
	0, 27, 29, 30, 30, 29, 29, 31, 
	32, 32, 32, 0, 34, 35, 10, 37, 
	0, 0, 14, 39, 14, 0, 40, 0, 
	0, 0, 0, 10, 10, 14, 15, 14, 
	0, 16, 0, 44, 3, 4, 0, 0, 
	5, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 51, 18, 0, 
	0, 21, 22, 54, 21, 0, 23, 55, 
	29, 30, 30, 57, 29, 31, 32, 58, 
	32, 0, 60, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 29, 
	30, 30, 29, 29, 31, 32, 32, 32, 
	0, 61, 0, 0, 27, 27, 60, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	18, 18, 0, 0, 21, 22, 21, 21, 
	0, 23, 0, 62, 0, 0, 0, 60, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	8, 10, 14, 15, 14, 0, 16, 0, 
	18, 18, 18, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 27, 29, 30, 
	30, 29, 29, 31, 32, 32, 32, 0, 
	29, 30, 30, 29, 29, 31, 32, 32, 
	32, 0, 63, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 24, 
	0, 0, 25, 0, 26, 60, 64, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	65, 18, 0, 0, 21, 22, 66, 21, 
	0, 23, 67, 29, 30, 30, 68, 29, 
	31, 32, 69, 32, 0, 29, 30, 30, 
	29, 29, 31, 32, 32, 32, 0, 70, 
	0, 0, 71, 3, 0, 75, 23, 0, 
	77, 79, 0, 0, 23, 30, 82, 30, 
	30, 31, 0, 84, 86, 0, 0, 88, 
	90, 89, 90, 0, 0, 0, 91
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 28, 28, 33, 
	13, 34, 0, 36, 38, 38, 38, 41, 
	41, 42, 43, 43, 43, 1, 45, 46, 
	47, 48, 49, 50, 50, 12, 0, 52, 
	53, 0, 56, 56, 59, 50, 1, 1, 
	0, 6, 9, 11, 13, 13, 17, 0, 
	6, 19, 0, 28, 28, 33, 13, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 28, 28, 33, 13, 28, 28, 
	33, 13, 1, 1, 0, 6, 9, 11, 
	13, 13, 17, 0, 6, 19, 0, 0, 
	0, 0, 1, 0, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	28, 28, 33, 13, 28, 28, 33, 13, 
	70, 0, 71, 72, 73, 74, 76, 0, 
	77, 0, 78, 80, 81, 83, 85, 0, 
	86, 0, 87, 88, 0, 88, 89, 89, 
	0, 91, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 152;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 25;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 26;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 27;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 37;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 54;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 72;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 75;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 114;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 35 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 37 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 55 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 61 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 27 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 62 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 25 then
		begin

    $stderr.puts 'NESTED_STATEMENT ast_relationship'
    rel_node = @buffers[:relationship]
    stmt = @buffers[:statement_stack][-1] << rel_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 26 then
		begin

    $stderr.puts 'NESTED_STATEMENT call_nested_statement'
    	begin
		stack[top] = cs
		top+= 1
		cs = 114
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 37
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 84 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 60 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_subject'
    subject_node = @buffers[:subject]
    stmt = @buffers[:statement_stack][-1] << subject_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 67 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'NESTED_STATEMENT statement_init'
    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 63 then
		begin

    $stderr.puts 'NESTED_STATEMENT inner_statement_init'
    @buffers[:statement_stack] << statement()
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 79 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 39 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 69 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 68 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 73 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 76 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 85 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 46 then
		begin
 $stderr.puts "EOF!" 		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 72 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 45 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 74 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 42 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 36 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 87 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 28 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 78 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 80 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 47 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 41, 
	47, 47, 10, 10, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 48, 122, 48, 122, 
	9, 34, 34, 92, 34, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 33, 126, 
	47, 47, 47, 47, 9, 32, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	47, 47, 10, 10, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	9, 47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 
	122, 0, 0, 0, 0, 
	10, 10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 
	122, 9, 34, 0, 0, 
	10, 10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 
	32, 9, 47, 9, 47, 
	0, 0, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 26, 59, 
	59, 36, 36, 114, 114, 36, 24, 118, 
	118, 32, 1, 1, 1, 114, 114, 114, 
	0, 75, 75, 26, 59, 59, 0, 114, 
	114, 26, 59, 59, 0, 75, 114, 32, 
	114, 114, 26, 59, 59, 36, 36, 114, 
	114, 36, 114, 114, 114, 0, 75, 114, 
	32, 114, 114, 26, 59, 59, 36, 36, 
	114, 114, 36, 114, 114, 114, 0, 94, 
	1, 1, 24, 75, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 114, 114, 0, 114, 114, 
	114, 0, 75, 114, 32, 114, 114, 26, 
	59, 59, 36, 36, 114, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	114, 114, 114, 0, 114, 114, 114, 0, 
	39, 0, 1, 113, 0, 113, 0, 0, 
	1, 0, 113, 113, 114, 114, 26, 0, 
	1, 0, 94, 1, 0, 24, 39, 39, 
	0, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 481, 
	541, 601, 638, 675, 790, 905, 942, 967, 
	1086, 1205, 1238, 1240, 1242, 1244, 1359, 1474, 
	1589, 1590, 1666, 1742, 1769, 1829, 1889, 1890, 
	2005, 2120, 2147, 2207, 2267, 2268, 2344, 2459, 
	2492, 2607, 2722, 2749, 2809, 2869, 2906, 2943, 
	3058, 3173, 3210, 3325, 3440, 3555, 3556, 3632, 
	3747, 3780, 3895, 4010, 4037, 4097, 4157, 4194, 
	4231, 4346, 4461, 4498, 4613, 4728, 4843, 4844, 
	4939, 4941, 4943, 4968, 5044, 5159, 5192, 5307, 
	5422, 5449, 5509, 5569, 5606, 5643, 5758, 5873, 
	5910, 5935, 6054, 6173, 6288, 6403, 6436, 6551, 
	6666, 6693, 6753, 6813, 6850, 6887, 7002, 7117, 
	7154, 7156, 7158, 7273, 7388, 7503, 7504, 7619, 
	7734, 7849, 7850, 7926, 8041, 8074, 8189, 8304, 
	8331, 8391, 8451, 8488, 8525, 8640, 8755, 8792, 
	8817, 8936, 9055, 9170, 9172, 9287, 9320, 9435, 
	9550, 9577, 9637, 9697, 9734, 9771, 9886, 10001, 
	10038, 10153, 10268, 10383, 10384, 10499, 10614, 10729, 
	10730, 10770, 10771, 10773, 10887, 10888, 11002, 11003, 
	11004, 11006, 11007, 11121, 11235, 11350, 11465, 11492, 
	11493, 11495, 11496, 11591, 11593, 11594, 11619, 11659, 
	11699, 11700, 11702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 7, 7, 7, 7, 7, 7, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 7, 7, 7, 11, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 7, 7, 7, 7, 
	7, 7, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 7, 7, 
	7, 12, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 9, 9, 
	9, 9, 9, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 9, 13, 10, 
	13, 15, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 16, 14, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 19, 
	17, 20, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	20, 13, 13, 13, 13, 13, 13, 13, 
	13, 21, 13, 13, 22, 13, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 24, 1, 24, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 24, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 7, 7, 7, 7, 
	7, 7, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 7, 7, 
	7, 11, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 27, 28, 25, 
	25, 29, 25, 25, 25, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 31, 
	25, 25, 25, 25, 25, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 25, 25, 25, 30, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 23, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	23, 1, 1, 1, 1, 1, 1, 1, 
	1, 32, 1, 1, 24, 1, 33, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 33, 1, 34, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 1, 36, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 36, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 1, 37, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 39, 1, 
	40, 1, 1, 41, 42, 43, 43, 43, 
	43, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 42, 7, 44, 7, 7, 
	7, 7, 7, 7, 45, 7, 7, 46, 
	7, 7, 7, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 7, 7, 7, 
	7, 7, 7, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 7, 
	7, 7, 47, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 48, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 48, 7, 
	10, 7, 7, 7, 7, 7, 7, 49, 
	7, 7, 50, 7, 7, 7, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 12, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 28, 25, 25, 29, 25, 25, 
	25, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 25, 25, 25, 25, 25, 
	25, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 25, 25, 25, 
	51, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 17, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	52, 52, 52, 52, 52, 52, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 52, 52, 52, 53, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 1, 1, 1, 1, 
	1, 1, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 1, 1, 
	1, 54, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 56, 56, 
	56, 56, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 56, 55, 57, 
	55, 59, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 60, 58, 62, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 63, 
	61, 61, 64, 65, 65, 65, 65, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 64, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 7, 7, 7, 7, 7, 
	7, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 7, 7, 7, 
	67, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 64, 65, 65, 
	65, 65, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 64, 7, 66, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 68, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	65, 65, 65, 65, 65, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 65, 
	13, 66, 13, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 72, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 1, 1, 
	1, 1, 1, 1, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	1, 1, 1, 75, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	76, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 76, 
	1, 1, 1, 1, 1, 1, 1, 77, 
	1, 1, 1, 1, 1, 1, 1, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 1, 1, 1, 1, 1, 1, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 1, 1, 1, 78, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 79, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 79, 1, 1, 1, 1, 1, 
	1, 1, 80, 1, 81, 82, 82, 82, 
	82, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 7, 83, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 7, 7, 7, 
	7, 7, 7, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 7, 
	7, 7, 84, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 81, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 81, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	7, 7, 7, 7, 7, 7, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 7, 7, 7, 85, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 82, 82, 82, 82, 82, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 82, 13, 83, 13, 87, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 88, 
	86, 90, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 89, 92, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 92, 13, 13, 13, 
	13, 13, 13, 13, 13, 93, 13, 13, 
	94, 13, 95, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 95, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 1, 96, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 96, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 7, 7, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 7, 7, 7, 84, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 97, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 97, 25, 25, 25, 25, 25, 25, 
	25, 98, 99, 25, 25, 100, 25, 25, 
	25, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 102, 25, 25, 25, 25, 
	25, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 25, 25, 25, 
	101, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 95, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 103, 1, 1, 
	96, 1, 104, 105, 105, 105, 105, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 104, 7, 106, 7, 7, 7, 7, 
	7, 7, 107, 7, 7, 108, 7, 7, 
	7, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 7, 7, 7, 7, 7, 
	7, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 7, 7, 7, 
	109, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 110, 82, 82, 
	82, 82, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 7, 83, 7, 
	7, 7, 7, 7, 7, 111, 7, 7, 
	112, 7, 7, 7, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 7, 7, 
	7, 7, 7, 7, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	7, 7, 7, 85, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 97, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	99, 25, 25, 100, 25, 25, 25, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 25, 25, 25, 25, 25, 25, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 25, 25, 25, 113, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 89, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 1, 1, 
	1, 1, 1, 1, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	1, 1, 1, 114, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	115, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 115, 
	1, 1, 1, 1, 1, 1, 1, 116, 
	1, 1, 1, 1, 1, 1, 1, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 1, 1, 1, 1, 1, 1, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 1, 1, 1, 117, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 118, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 118, 1, 1, 1, 1, 1, 
	1, 1, 119, 1, 120, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 120, 7, 122, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 7, 7, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 7, 
	7, 7, 123, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 120, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 120, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	7, 7, 7, 7, 7, 7, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 7, 7, 7, 124, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 121, 121, 121, 121, 121, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 121, 13, 122, 13, 126, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 127, 
	125, 129, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 130, 128, 131, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 131, 13, 13, 13, 
	13, 13, 13, 13, 13, 132, 13, 13, 
	133, 13, 134, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 134, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 135, 1, 135, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 135, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	7, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 136, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 136, 25, 25, 25, 25, 25, 25, 
	25, 137, 138, 25, 25, 139, 25, 25, 
	25, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 141, 25, 25, 25, 25, 
	25, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 25, 25, 25, 
	140, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 134, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 142, 1, 1, 
	135, 1, 143, 144, 144, 144, 144, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 143, 7, 145, 7, 7, 7, 7, 
	7, 7, 146, 7, 7, 147, 7, 7, 
	7, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 7, 7, 7, 7, 7, 
	7, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 7, 7, 7, 
	148, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 149, 121, 121, 
	121, 121, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 149, 7, 122, 7, 
	7, 7, 7, 7, 7, 150, 7, 7, 
	151, 7, 7, 7, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 7, 7, 
	7, 7, 7, 7, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	7, 7, 7, 124, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	136, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 136, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	138, 25, 25, 139, 25, 25, 25, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 25, 25, 25, 25, 25, 25, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 25, 25, 25, 152, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 128, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 1, 154, 1, 155, 1, 157, 
	1, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 1, 1, 1, 1, 1, 1, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 1, 1, 1, 158, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 159, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 159, 1, 1, 1, 1, 
	1, 1, 1, 160, 1, 1, 1, 1, 
	1, 1, 1, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 1, 1, 1, 
	1, 1, 1, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 1, 
	1, 1, 161, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 162, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 162, 1, 
	1, 1, 1, 1, 1, 1, 163, 1, 
	164, 165, 165, 165, 165, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 164, 
	7, 166, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 7, 7, 7, 7, 7, 7, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 7, 7, 7, 167, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 164, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 164, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 165, 165, 
	165, 165, 165, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 165, 13, 166, 
	13, 170, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 171, 169, 173, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 174, 
	172, 175, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	175, 13, 13, 13, 13, 13, 13, 13, 
	13, 176, 13, 13, 177, 13, 178, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 178, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 179, 1, 179, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 179, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 7, 7, 7, 7, 
	7, 7, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 7, 7, 
	7, 167, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 181, 182, 25, 
	25, 183, 25, 25, 25, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 185, 
	25, 25, 25, 25, 25, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 25, 25, 25, 184, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 178, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 1, 179, 1, 187, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 187, 1, 188, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 188, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 1, 190, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 190, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 1, 190, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 190, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 1, 1, 
	1, 1, 1, 1, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	1, 1, 1, 191, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 192, 
	1, 1, 1, 1, 1, 1, 1, 193, 
	1, 1, 1, 1, 1, 1, 1, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 1, 1, 1, 1, 1, 1, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 1, 1, 1, 194, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 195, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 195, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 197, 198, 198, 198, 
	198, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 197, 7, 199, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 7, 7, 7, 
	7, 7, 7, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 7, 
	7, 7, 200, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 197, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 197, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	7, 7, 7, 7, 7, 7, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 7, 7, 7, 201, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 198, 198, 198, 198, 198, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 198, 13, 199, 13, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 204, 
	202, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 207, 205, 208, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 208, 13, 13, 13, 
	13, 13, 13, 13, 13, 209, 13, 13, 
	210, 13, 211, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 212, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 212, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	7, 7, 7, 7, 7, 7, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 7, 7, 7, 200, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 213, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 213, 25, 25, 25, 25, 25, 25, 
	25, 214, 215, 25, 25, 216, 25, 25, 
	25, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 218, 25, 25, 25, 25, 
	25, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 25, 25, 25, 
	217, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 211, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 219, 1, 1, 
	212, 1, 220, 1, 1, 221, 222, 223, 
	223, 223, 223, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 222, 7, 224, 
	7, 7, 7, 7, 7, 7, 225, 7, 
	7, 226, 7, 7, 7, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 7, 
	7, 7, 7, 7, 7, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 7, 7, 7, 227, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 228, 198, 198, 198, 198, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	228, 7, 199, 7, 7, 7, 7, 7, 
	7, 229, 7, 7, 230, 7, 7, 7, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 7, 7, 7, 7, 7, 7, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 7, 7, 7, 201, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 213, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 213, 25, 25, 25, 25, 
	25, 25, 25, 25, 215, 25, 25, 216, 
	25, 25, 25, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 25, 25, 25, 
	25, 25, 25, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 25, 
	25, 25, 231, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 205, 
	232, 233, 233, 233, 233, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 232, 
	7, 234, 7, 7, 7, 7, 7, 7, 
	235, 7, 7, 236, 7, 7, 7, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 7, 7, 7, 7, 7, 7, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 7, 7, 7, 237, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 238, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 238, 7, 166, 7, 7, 7, 
	7, 7, 7, 239, 7, 7, 240, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 25, 182, 25, 
	25, 183, 25, 25, 25, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 25, 
	25, 25, 25, 25, 25, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 25, 25, 25, 241, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 172, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 1, 1, 1, 1, 
	1, 1, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 1, 1, 
	1, 242, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 243, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 244, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 1, 1, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 1, 1, 1, 245, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 246, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	247, 1, 248, 249, 249, 249, 249, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 248, 7, 250, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 7, 7, 7, 7, 7, 
	7, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 7, 7, 7, 
	251, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 248, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 7, 7, 
	7, 7, 7, 7, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	7, 7, 7, 252, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	249, 249, 249, 249, 249, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 249, 
	13, 250, 13, 254, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 255, 253, 257, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 258, 256, 259, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 259, 13, 13, 13, 13, 13, 
	13, 13, 13, 260, 13, 13, 261, 13, 
	262, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 262, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 263, 1, 263, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 263, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 7, 7, 
	7, 7, 7, 7, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	7, 7, 7, 251, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	264, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 264, 
	25, 25, 25, 25, 25, 25, 25, 265, 
	266, 25, 25, 267, 25, 25, 25, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 269, 25, 25, 25, 25, 25, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 25, 25, 25, 268, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 262, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 262, 1, 1, 1, 1, 1, 
	1, 1, 1, 270, 1, 1, 263, 1, 
	271, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	1, 272, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	272, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 1, 
	274, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 274, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 1, 275, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 275, 1, 
	1, 1, 1, 1, 1, 1, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 1, 279, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 279, 1, 1, 1, 1, 
	1, 1, 1, 280, 1, 1, 1, 1, 
	1, 1, 1, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 1, 1, 1, 
	1, 1, 1, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 1, 
	1, 1, 281, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 282, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 1, 1, 1, 1, 283, 1, 
	284, 285, 285, 285, 285, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 284, 
	7, 286, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 7, 7, 7, 7, 7, 7, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 7, 7, 7, 287, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 284, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 284, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 7, 7, 7, 7, 
	7, 7, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 7, 7, 
	7, 288, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 285, 285, 
	285, 285, 285, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 285, 13, 286, 
	13, 290, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 291, 289, 293, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 294, 
	292, 295, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	295, 13, 13, 13, 13, 13, 13, 13, 
	13, 296, 13, 13, 297, 13, 298, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 298, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 299, 1, 299, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 299, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 7, 7, 7, 7, 
	7, 7, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 7, 7, 
	7, 287, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 300, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 300, 25, 25, 
	25, 25, 25, 25, 25, 301, 302, 25, 
	25, 303, 25, 25, 25, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 305, 
	25, 25, 25, 25, 25, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 25, 25, 25, 304, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	1, 306, 1, 1, 299, 1, 307, 308, 
	308, 308, 308, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 307, 7, 309, 
	7, 7, 7, 7, 7, 7, 310, 7, 
	7, 311, 7, 7, 7, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 7, 
	7, 7, 7, 7, 7, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 7, 7, 7, 312, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 313, 285, 285, 285, 285, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	313, 7, 286, 7, 7, 7, 7, 7, 
	7, 314, 7, 7, 315, 7, 7, 7, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 7, 7, 7, 7, 7, 7, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 7, 7, 7, 288, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 300, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 300, 25, 25, 25, 25, 
	25, 25, 25, 25, 302, 25, 25, 303, 
	25, 25, 25, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 25, 25, 25, 
	25, 25, 25, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 25, 
	25, 25, 316, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 292, 
	317, 318, 318, 318, 318, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 317, 
	7, 319, 7, 7, 7, 7, 7, 7, 
	320, 7, 7, 321, 7, 7, 7, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 7, 7, 7, 7, 7, 7, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 7, 7, 7, 322, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 323, 249, 249, 249, 249, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 323, 7, 250, 7, 7, 7, 
	7, 7, 7, 324, 7, 7, 325, 7, 
	7, 7, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 7, 7, 7, 7, 
	7, 7, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 7, 7, 
	7, 252, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 264, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 264, 25, 25, 
	25, 25, 25, 25, 25, 25, 266, 25, 
	25, 267, 25, 25, 25, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 25, 
	25, 25, 25, 25, 25, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 25, 25, 25, 326, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 256, 39, 327, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 330, 329, 331, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 52, 52, 52, 
	52, 52, 52, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 52, 
	52, 52, 332, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 1, 
	334, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	333, 333, 333, 333, 333, 333, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 333, 333, 335, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 55, 336, 13, 1, 337, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 25, 
	25, 25, 25, 25, 25, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 25, 25, 25, 338, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 337, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 340, 25, 25, 25, 25, 25, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 25, 25, 25, 339, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 341, 342, 343, 343, 343, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 341, 7, 344, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 7, 7, 7, 7, 
	7, 7, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 7, 7, 
	7, 345, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 346, 347, 
	65, 65, 65, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 346, 7, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 7, 7, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 7, 7, 7, 68, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 65, 65, 65, 65, 65, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	65, 13, 66, 13, 1, 348, 1, 1, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 1, 351, 
	350, 1, 157, 351, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 352, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 352, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 355, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 355, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 356, 1, 1, 358, 357, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 23, 0, 8, 9, 
	24, 8, 9, 24, 10, 14, 11, 10, 
	11, 0, 10, 13, 14, 11, 12, 21, 
	14, 15, 15, 16, 17, 17, 18, 152, 
	20, 154, 22, 6, 7, 14, 11, 23, 
	22, 14, 11, 23, 0, 155, 157, 0, 
	27, 28, 29, 159, 30, 29, 159, 30, 
	32, 33, 34, 163, 162, 35, 160, 36, 
	35, 160, 36, 38, 39, 40, 38, 39, 
	40, 41, 42, 43, 48, 52, 44, 45, 
	53, 44, 45, 53, 46, 167, 47, 46, 
	47, 46, 49, 167, 47, 48, 50, 167, 
	51, 42, 43, 167, 47, 52, 51, 167, 
	47, 52, 55, 56, 57, 55, 56, 57, 
	58, 59, 60, 65, 69, 61, 62, 70, 
	61, 62, 70, 63, 168, 64, 63, 64, 
	63, 66, 168, 64, 65, 67, 168, 68, 
	59, 60, 168, 64, 69, 68, 168, 64, 
	69, 170, 73, 74, 171, 173, 76, 77, 
	78, 76, 77, 78, 79, 80, 81, 86, 
	112, 82, 83, 113, 82, 83, 113, 84, 
	88, 85, 84, 85, 84, 87, 88, 85, 
	86, 110, 88, 89, 89, 90, 91, 92, 
	93, 94, 92, 93, 94, 95, 96, 97, 
	102, 108, 98, 99, 109, 98, 99, 109, 
	100, 174, 101, 100, 101, 100, 103, 174, 
	101, 102, 106, 174, 105, 177, 107, 96, 
	97, 174, 101, 108, 107, 174, 101, 108, 
	111, 80, 81, 88, 85, 112, 111, 88, 
	85, 112, 115, 116, 117, 115, 116, 117, 
	118, 119, 120, 125, 150, 121, 122, 151, 
	121, 122, 151, 123, 127, 124, 123, 124, 
	123, 126, 127, 124, 125, 148, 127, 128, 
	128, 129, 130, 130, 131, 132, 178, 133, 
	134, 132, 133, 134, 135, 136, 137, 142, 
	146, 138, 139, 147, 138, 139, 147, 140, 
	178, 141, 140, 141, 140, 143, 178, 141, 
	142, 144, 178, 145, 136, 137, 178, 141, 
	146, 145, 178, 141, 146, 149, 119, 120, 
	127, 124, 150, 149, 127, 124, 150, 153, 
	19, 154, 153, 156, 155, 0, 158, 157, 
	161, 161, 162, 163, 164, 165, 166, 33, 
	34, 162, 165, 166, 169, 170, 171, 172, 
	175, 176, 104, 175, 104, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 8, 10, 12, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 20, 21, 22, 21, 21, 0, 23, 
	0, 24, 0, 0, 25, 0, 26, 0, 
	0, 27, 29, 30, 30, 29, 29, 31, 
	32, 32, 32, 0, 34, 35, 10, 37, 
	0, 0, 14, 39, 14, 0, 40, 0, 
	0, 0, 0, 10, 10, 14, 15, 14, 
	0, 16, 0, 44, 3, 4, 0, 0, 
	5, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 51, 18, 0, 
	0, 21, 22, 54, 21, 0, 23, 55, 
	29, 30, 30, 57, 29, 31, 32, 58, 
	32, 0, 60, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 29, 
	30, 30, 29, 29, 31, 32, 32, 32, 
	0, 61, 0, 0, 27, 27, 60, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	18, 18, 0, 0, 21, 22, 21, 21, 
	0, 23, 0, 62, 0, 0, 0, 60, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	8, 10, 14, 15, 14, 0, 16, 0, 
	18, 18, 18, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 27, 29, 30, 
	30, 29, 29, 31, 32, 32, 32, 0, 
	29, 30, 30, 29, 29, 31, 32, 32, 
	32, 0, 63, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 24, 
	0, 0, 25, 0, 26, 60, 64, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	65, 18, 0, 0, 21, 22, 66, 21, 
	0, 23, 67, 29, 30, 30, 68, 29, 
	31, 32, 69, 32, 0, 29, 30, 30, 
	29, 29, 31, 32, 32, 32, 0, 70, 
	0, 0, 71, 3, 0, 75, 23, 0, 
	77, 79, 0, 0, 23, 30, 82, 30, 
	30, 31, 0, 84, 86, 0, 0, 88, 
	90, 89, 90, 0, 0, 0, 91
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 28, 28, 33, 
	13, 34, 0, 36, 38, 38, 38, 41, 
	41, 42, 43, 43, 43, 1, 45, 46, 
	47, 48, 49, 50, 50, 12, 0, 52, 
	53, 0, 56, 56, 59, 50, 1, 1, 
	0, 6, 9, 11, 13, 13, 17, 0, 
	6, 19, 0, 28, 28, 33, 13, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 28, 28, 33, 13, 28, 28, 
	33, 13, 1, 1, 0, 6, 9, 11, 
	13, 13, 17, 0, 6, 19, 0, 0, 
	0, 0, 1, 0, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	28, 28, 33, 13, 28, 28, 33, 13, 
	70, 0, 71, 72, 73, 74, 76, 0, 
	77, 0, 78, 80, 81, 83, 85, 0, 
	86, 0, 87, 88, 0, 88, 89, 89, 
	0, 91, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 152;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 25;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 26;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 27;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 37;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 54;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 72;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 75;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 114;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 35 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 37 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 55 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 61 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 27 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 62 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 25 then
		begin

    $stderr.puts 'NESTED_STATEMENT ast_relationship'
    rel_node = @buffers[:relationship]
    stmt = @buffers[:statement_stack][-1] << rel_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 26 then
		begin

    $stderr.puts 'NESTED_STATEMENT call_nested_statement'
    	begin
		stack[top] = cs
		top+= 1
		cs = 114
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 37
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 84 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 60 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_subject'
    subject_node = @buffers[:subject]
    stmt = @buffers[:statement_stack][-1] << subject_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 67 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'NESTED_STATEMENT statement_init'
    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 63 then
		begin

    $stderr.puts 'NESTED_STATEMENT inner_statement_init'
    @buffers[:statement_stack] << statement()
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 79 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 39 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 69 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 68 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 73 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 76 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 85 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 46 then
		begin
 $stderr.puts "EOF!" 		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 72 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 45 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 74 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 42 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 36 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 87 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 28 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 78 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 80 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 47 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 41, 
	47, 47, 10, 10, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 48, 122, 48, 122, 
	9, 34, 34, 92, 34, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 33, 126, 
	47, 47, 47, 47, 9, 32, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	47, 47, 10, 10, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	9, 47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 
	122, 0, 0, 0, 0, 
	10, 10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 
	122, 9, 34, 0, 0, 
	10, 10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 
	32, 9, 47, 9, 47, 
	0, 0, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 26, 59, 
	59, 36, 36, 114, 114, 36, 24, 118, 
	118, 32, 1, 1, 1, 114, 114, 114, 
	0, 75, 75, 26, 59, 59, 0, 114, 
	114, 26, 59, 59, 0, 75, 114, 32, 
	114, 114, 26, 59, 59, 36, 36, 114, 
	114, 36, 114, 114, 114, 0, 75, 114, 
	32, 114, 114, 26, 59, 59, 36, 36, 
	114, 114, 36, 114, 114, 114, 0, 94, 
	1, 1, 24, 75, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 114, 114, 0, 114, 114, 
	114, 0, 75, 114, 32, 114, 114, 26, 
	59, 59, 36, 36, 114, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	114, 114, 114, 0, 114, 114, 114, 0, 
	39, 0, 1, 113, 0, 113, 0, 0, 
	1, 0, 113, 113, 114, 114, 26, 0, 
	1, 0, 94, 1, 0, 24, 39, 39, 
	0, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 481, 
	541, 601, 638, 675, 790, 905, 942, 967, 
	1086, 1205, 1238, 1240, 1242, 1244, 1359, 1474, 
	1589, 1590, 1666, 1742, 1769, 1829, 1889, 1890, 
	2005, 2120, 2147, 2207, 2267, 2268, 2344, 2459, 
	2492, 2607, 2722, 2749, 2809, 2869, 2906, 2943, 
	3058, 3173, 3210, 3325, 3440, 3555, 3556, 3632, 
	3747, 3780, 3895, 4010, 4037, 4097, 4157, 4194, 
	4231, 4346, 4461, 4498, 4613, 4728, 4843, 4844, 
	4939, 4941, 4943, 4968, 5044, 5159, 5192, 5307, 
	5422, 5449, 5509, 5569, 5606, 5643, 5758, 5873, 
	5910, 5935, 6054, 6173, 6288, 6403, 6436, 6551, 
	6666, 6693, 6753, 6813, 6850, 6887, 7002, 7117, 
	7154, 7156, 7158, 7273, 7388, 7503, 7504, 7619, 
	7734, 7849, 7850, 7926, 8041, 8074, 8189, 8304, 
	8331, 8391, 8451, 8488, 8525, 8640, 8755, 8792, 
	8817, 8936, 9055, 9170, 9172, 9287, 9320, 9435, 
	9550, 9577, 9637, 9697, 9734, 9771, 9886, 10001, 
	10038, 10153, 10268, 10383, 10384, 10499, 10614, 10729, 
	10730, 10770, 10771, 10773, 10887, 10888, 11002, 11003, 
	11004, 11006, 11007, 11121, 11235, 11350, 11465, 11492, 
	11493, 11495, 11496, 11591, 11593, 11594, 11619, 11659, 
	11699, 11700, 11702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 7, 7, 7, 7, 7, 7, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 7, 7, 7, 11, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 7, 7, 7, 7, 
	7, 7, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 7, 7, 
	7, 12, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 9, 9, 
	9, 9, 9, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 9, 13, 10, 
	13, 15, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 16, 14, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 19, 
	17, 20, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	20, 13, 13, 13, 13, 13, 13, 13, 
	13, 21, 13, 13, 22, 13, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 24, 1, 24, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 24, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 7, 7, 7, 7, 
	7, 7, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 7, 7, 
	7, 11, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 27, 28, 25, 
	25, 29, 25, 25, 25, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 31, 
	25, 25, 25, 25, 25, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 25, 25, 25, 30, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 23, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	23, 1, 1, 1, 1, 1, 1, 1, 
	1, 32, 1, 1, 24, 1, 33, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 33, 1, 34, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 1, 36, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 36, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 1, 37, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 39, 1, 
	40, 1, 1, 41, 42, 43, 43, 43, 
	43, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 42, 7, 44, 7, 7, 
	7, 7, 7, 7, 45, 7, 7, 46, 
	7, 7, 7, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 7, 7, 7, 
	7, 7, 7, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 7, 
	7, 7, 47, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 48, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 48, 7, 
	10, 7, 7, 7, 7, 7, 7, 49, 
	7, 7, 50, 7, 7, 7, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 12, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 28, 25, 25, 29, 25, 25, 
	25, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 25, 25, 25, 25, 25, 
	25, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 25, 25, 25, 
	51, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 17, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	52, 52, 52, 52, 52, 52, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 52, 52, 52, 53, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 1, 1, 1, 1, 
	1, 1, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 1, 1, 
	1, 54, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 56, 56, 
	56, 56, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 56, 55, 57, 
	55, 59, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 60, 58, 62, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 63, 
	61, 61, 64, 65, 65, 65, 65, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 64, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 7, 7, 7, 7, 7, 
	7, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 7, 7, 7, 
	67, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 64, 65, 65, 
	65, 65, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 64, 7, 66, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 68, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	65, 65, 65, 65, 65, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 65, 
	13, 66, 13, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 72, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 1, 1, 
	1, 1, 1, 1, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	1, 1, 1, 75, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	76, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 76, 
	1, 1, 1, 1, 1, 1, 1, 77, 
	1, 1, 1, 1, 1, 1, 1, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 1, 1, 1, 1, 1, 1, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 1, 1, 1, 78, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 79, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 79, 1, 1, 1, 1, 1, 
	1, 1, 80, 1, 81, 82, 82, 82, 
	82, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 7, 83, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 7, 7, 7, 
	7, 7, 7, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 7, 
	7, 7, 84, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 81, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 81, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	7, 7, 7, 7, 7, 7, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 7, 7, 7, 85, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 82, 82, 82, 82, 82, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 82, 13, 83, 13, 87, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 88, 
	86, 90, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 89, 92, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 92, 13, 13, 13, 
	13, 13, 13, 13, 13, 93, 13, 13, 
	94, 13, 95, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 95, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 1, 96, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 96, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 7, 7, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 7, 7, 7, 84, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 97, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 97, 25, 25, 25, 25, 25, 25, 
	25, 98, 99, 25, 25, 100, 25, 25, 
	25, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 102, 25, 25, 25, 25, 
	25, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 25, 25, 25, 
	101, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 95, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 103, 1, 1, 
	96, 1, 104, 105, 105, 105, 105, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 104, 7, 106, 7, 7, 7, 7, 
	7, 7, 107, 7, 7, 108, 7, 7, 
	7, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 7, 7, 7, 7, 7, 
	7, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 7, 7, 7, 
	109, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 110, 82, 82, 
	82, 82, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 7, 83, 7, 
	7, 7, 7, 7, 7, 111, 7, 7, 
	112, 7, 7, 7, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 7, 7, 
	7, 7, 7, 7, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	7, 7, 7, 85, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 97, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	99, 25, 25, 100, 25, 25, 25, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 25, 25, 25, 25, 25, 25, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 25, 25, 25, 113, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 89, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 1, 1, 
	1, 1, 1, 1, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	1, 1, 1, 114, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	115, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 115, 
	1, 1, 1, 1, 1, 1, 1, 116, 
	1, 1, 1, 1, 1, 1, 1, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 1, 1, 1, 1, 1, 1, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 1, 1, 1, 117, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 118, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 118, 1, 1, 1, 1, 1, 
	1, 1, 119, 1, 120, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 120, 7, 122, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 7, 7, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 7, 
	7, 7, 123, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 120, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 120, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	7, 7, 7, 7, 7, 7, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 7, 7, 7, 124, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 121, 121, 121, 121, 121, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 121, 13, 122, 13, 126, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 127, 
	125, 129, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 130, 128, 131, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 131, 13, 13, 13, 
	13, 13, 13, 13, 13, 132, 13, 13, 
	133, 13, 134, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 134, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 135, 1, 135, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 135, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	7, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 136, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 136, 25, 25, 25, 25, 25, 25, 
	25, 137, 138, 25, 25, 139, 25, 25, 
	25, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 141, 25, 25, 25, 25, 
	25, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 25, 25, 25, 
	140, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 134, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 142, 1, 1, 
	135, 1, 143, 144, 144, 144, 144, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 143, 7, 145, 7, 7, 7, 7, 
	7, 7, 146, 7, 7, 147, 7, 7, 
	7, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 7, 7, 7, 7, 7, 
	7, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 7, 7, 7, 
	148, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 149, 121, 121, 
	121, 121, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 149, 7, 122, 7, 
	7, 7, 7, 7, 7, 150, 7, 7, 
	151, 7, 7, 7, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 7, 7, 
	7, 7, 7, 7, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	7, 7, 7, 124, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	136, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 136, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	138, 25, 25, 139, 25, 25, 25, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 25, 25, 25, 25, 25, 25, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 25, 25, 25, 152, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 128, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 1, 154, 1, 155, 1, 157, 
	1, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 1, 1, 1, 1, 1, 1, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 1, 1, 1, 158, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 159, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 159, 1, 1, 1, 1, 
	1, 1, 1, 160, 1, 1, 1, 1, 
	1, 1, 1, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 1, 1, 1, 
	1, 1, 1, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 1, 
	1, 1, 161, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 162, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 162, 1, 
	1, 1, 1, 1, 1, 1, 163, 1, 
	164, 165, 165, 165, 165, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 164, 
	7, 166, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 7, 7, 7, 7, 7, 7, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 7, 7, 7, 167, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 164, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 164, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 165, 165, 
	165, 165, 165, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 165, 13, 166, 
	13, 170, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 171, 169, 173, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 174, 
	172, 175, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	175, 13, 13, 13, 13, 13, 13, 13, 
	13, 176, 13, 13, 177, 13, 178, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 178, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 179, 1, 179, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 179, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 7, 7, 7, 7, 
	7, 7, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 7, 7, 
	7, 167, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 181, 182, 25, 
	25, 183, 25, 25, 25, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 185, 
	25, 25, 25, 25, 25, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 25, 25, 25, 184, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 178, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 1, 179, 1, 187, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 187, 1, 188, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 188, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 1, 190, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 190, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 1, 190, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 190, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 1, 1, 
	1, 1, 1, 1, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	1, 1, 1, 191, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 192, 
	1, 1, 1, 1, 1, 1, 1, 193, 
	1, 1, 1, 1, 1, 1, 1, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 1, 1, 1, 1, 1, 1, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 1, 1, 1, 194, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 195, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 195, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 197, 198, 198, 198, 
	198, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 197, 7, 199, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 7, 7, 7, 
	7, 7, 7, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 7, 
	7, 7, 200, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 197, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 197, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	7, 7, 7, 7, 7, 7, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 7, 7, 7, 201, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 198, 198, 198, 198, 198, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 198, 13, 199, 13, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 204, 
	202, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 207, 205, 208, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 208, 13, 13, 13, 
	13, 13, 13, 13, 13, 209, 13, 13, 
	210, 13, 211, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 212, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 212, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	7, 7, 7, 7, 7, 7, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 7, 7, 7, 200, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 213, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 213, 25, 25, 25, 25, 25, 25, 
	25, 214, 215, 25, 25, 216, 25, 25, 
	25, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 218, 25, 25, 25, 25, 
	25, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 25, 25, 25, 
	217, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 211, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 219, 1, 1, 
	212, 1, 220, 1, 1, 221, 222, 223, 
	223, 223, 223, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 222, 7, 224, 
	7, 7, 7, 7, 7, 7, 225, 7, 
	7, 226, 7, 7, 7, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 7, 
	7, 7, 7, 7, 7, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 7, 7, 7, 227, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 228, 198, 198, 198, 198, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	228, 7, 199, 7, 7, 7, 7, 7, 
	7, 229, 7, 7, 230, 7, 7, 7, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 7, 7, 7, 7, 7, 7, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 7, 7, 7, 201, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 213, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 213, 25, 25, 25, 25, 
	25, 25, 25, 25, 215, 25, 25, 216, 
	25, 25, 25, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 25, 25, 25, 
	25, 25, 25, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 25, 
	25, 25, 231, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 205, 
	232, 233, 233, 233, 233, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 232, 
	7, 234, 7, 7, 7, 7, 7, 7, 
	235, 7, 7, 236, 7, 7, 7, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 7, 7, 7, 7, 7, 7, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 7, 7, 7, 237, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 238, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 238, 7, 166, 7, 7, 7, 
	7, 7, 7, 239, 7, 7, 240, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 25, 182, 25, 
	25, 183, 25, 25, 25, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 25, 
	25, 25, 25, 25, 25, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 25, 25, 25, 241, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 172, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 1, 1, 1, 1, 
	1, 1, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 1, 1, 
	1, 242, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 243, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 244, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 1, 1, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 1, 1, 1, 245, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 246, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	247, 1, 248, 249, 249, 249, 249, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 248, 7, 250, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 7, 7, 7, 7, 7, 
	7, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 7, 7, 7, 
	251, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 248, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 7, 7, 
	7, 7, 7, 7, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	7, 7, 7, 252, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	249, 249, 249, 249, 249, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 249, 
	13, 250, 13, 254, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 255, 253, 257, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 258, 256, 259, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 259, 13, 13, 13, 13, 13, 
	13, 13, 13, 260, 13, 13, 261, 13, 
	262, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 262, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 263, 1, 263, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 263, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 7, 7, 
	7, 7, 7, 7, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	7, 7, 7, 251, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	264, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 264, 
	25, 25, 25, 25, 25, 25, 25, 265, 
	266, 25, 25, 267, 25, 25, 25, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 269, 25, 25, 25, 25, 25, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 25, 25, 25, 268, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 262, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 262, 1, 1, 1, 1, 1, 
	1, 1, 1, 270, 1, 1, 263, 1, 
	271, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	1, 272, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	272, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 1, 
	274, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 274, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 1, 275, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 275, 1, 
	1, 1, 1, 1, 1, 1, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 1, 279, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 279, 1, 1, 1, 1, 
	1, 1, 1, 280, 1, 1, 1, 1, 
	1, 1, 1, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 1, 1, 1, 
	1, 1, 1, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 1, 
	1, 1, 281, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 282, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 1, 1, 1, 1, 283, 1, 
	284, 285, 285, 285, 285, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 284, 
	7, 286, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 7, 7, 7, 7, 7, 7, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 7, 7, 7, 287, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 284, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 284, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 7, 7, 7, 7, 
	7, 7, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 7, 7, 
	7, 288, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 285, 285, 
	285, 285, 285, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 285, 13, 286, 
	13, 290, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 291, 289, 293, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 294, 
	292, 295, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	295, 13, 13, 13, 13, 13, 13, 13, 
	13, 296, 13, 13, 297, 13, 298, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 298, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 299, 1, 299, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 299, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 7, 7, 7, 7, 
	7, 7, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 7, 7, 
	7, 287, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 300, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 300, 25, 25, 
	25, 25, 25, 25, 25, 301, 302, 25, 
	25, 303, 25, 25, 25, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 305, 
	25, 25, 25, 25, 25, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 25, 25, 25, 304, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	1, 306, 1, 1, 299, 1, 307, 308, 
	308, 308, 308, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 307, 7, 309, 
	7, 7, 7, 7, 7, 7, 310, 7, 
	7, 311, 7, 7, 7, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 7, 
	7, 7, 7, 7, 7, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 7, 7, 7, 312, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 313, 285, 285, 285, 285, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	313, 7, 286, 7, 7, 7, 7, 7, 
	7, 314, 7, 7, 315, 7, 7, 7, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 7, 7, 7, 7, 7, 7, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 7, 7, 7, 288, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 300, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 300, 25, 25, 25, 25, 
	25, 25, 25, 25, 302, 25, 25, 303, 
	25, 25, 25, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 25, 25, 25, 
	25, 25, 25, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 25, 
	25, 25, 316, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 292, 
	317, 318, 318, 318, 318, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 317, 
	7, 319, 7, 7, 7, 7, 7, 7, 
	320, 7, 7, 321, 7, 7, 7, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 7, 7, 7, 7, 7, 7, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 7, 7, 7, 322, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 323, 249, 249, 249, 249, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 323, 7, 250, 7, 7, 7, 
	7, 7, 7, 324, 7, 7, 325, 7, 
	7, 7, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 7, 7, 7, 7, 
	7, 7, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 7, 7, 
	7, 252, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 264, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 264, 25, 25, 
	25, 25, 25, 25, 25, 25, 266, 25, 
	25, 267, 25, 25, 25, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 25, 
	25, 25, 25, 25, 25, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 25, 25, 25, 326, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 256, 39, 327, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 330, 329, 331, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 52, 52, 52, 
	52, 52, 52, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 52, 
	52, 52, 332, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 1, 
	334, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	333, 333, 333, 333, 333, 333, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 333, 333, 335, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 55, 336, 13, 1, 337, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 25, 
	25, 25, 25, 25, 25, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 25, 25, 25, 338, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 337, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 340, 25, 25, 25, 25, 25, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 25, 25, 25, 339, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 341, 342, 343, 343, 343, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 341, 7, 344, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 7, 7, 7, 7, 
	7, 7, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 7, 7, 
	7, 345, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 346, 347, 
	65, 65, 65, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 346, 7, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 7, 7, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 7, 7, 7, 68, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 65, 65, 65, 65, 65, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	65, 13, 66, 13, 1, 348, 1, 1, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 1, 351, 
	350, 1, 157, 351, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 352, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 352, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 355, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 355, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 356, 1, 1, 358, 357, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 23, 0, 8, 9, 
	24, 8, 9, 24, 10, 14, 11, 10, 
	11, 0, 10, 13, 14, 11, 12, 21, 
	14, 15, 15, 16, 17, 17, 18, 152, 
	20, 154, 22, 6, 7, 14, 11, 23, 
	22, 14, 11, 23, 0, 155, 157, 0, 
	27, 28, 29, 159, 30, 29, 159, 30, 
	32, 33, 34, 163, 162, 35, 160, 36, 
	35, 160, 36, 38, 39, 40, 38, 39, 
	40, 41, 42, 43, 48, 52, 44, 45, 
	53, 44, 45, 53, 46, 167, 47, 46, 
	47, 46, 49, 167, 47, 48, 50, 167, 
	51, 42, 43, 167, 47, 52, 51, 167, 
	47, 52, 55, 56, 57, 55, 56, 57, 
	58, 59, 60, 65, 69, 61, 62, 70, 
	61, 62, 70, 63, 168, 64, 63, 64, 
	63, 66, 168, 64, 65, 67, 168, 68, 
	59, 60, 168, 64, 69, 68, 168, 64, 
	69, 170, 73, 74, 171, 173, 76, 77, 
	78, 76, 77, 78, 79, 80, 81, 86, 
	112, 82, 83, 113, 82, 83, 113, 84, 
	88, 85, 84, 85, 84, 87, 88, 85, 
	86, 110, 88, 89, 89, 90, 91, 92, 
	93, 94, 92, 93, 94, 95, 96, 97, 
	102, 108, 98, 99, 109, 98, 99, 109, 
	100, 174, 101, 100, 101, 100, 103, 174, 
	101, 102, 106, 174, 105, 177, 107, 96, 
	97, 174, 101, 108, 107, 174, 101, 108, 
	111, 80, 81, 88, 85, 112, 111, 88, 
	85, 112, 115, 116, 117, 115, 116, 117, 
	118, 119, 120, 125, 150, 121, 122, 151, 
	121, 122, 151, 123, 127, 124, 123, 124, 
	123, 126, 127, 124, 125, 148, 127, 128, 
	128, 129, 130, 130, 131, 132, 178, 133, 
	134, 132, 133, 134, 135, 136, 137, 142, 
	146, 138, 139, 147, 138, 139, 147, 140, 
	178, 141, 140, 141, 140, 143, 178, 141, 
	142, 144, 178, 145, 136, 137, 178, 141, 
	146, 145, 178, 141, 146, 149, 119, 120, 
	127, 124, 150, 149, 127, 124, 150, 153, 
	19, 154, 153, 156, 155, 0, 158, 157, 
	161, 161, 162, 163, 164, 165, 166, 33, 
	34, 162, 165, 166, 169, 170, 171, 172, 
	175, 176, 104, 175, 104, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 8, 10, 12, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 20, 21, 22, 21, 21, 0, 23, 
	0, 24, 0, 0, 25, 0, 26, 0, 
	0, 27, 29, 30, 30, 29, 29, 31, 
	32, 32, 32, 0, 34, 35, 10, 37, 
	0, 0, 14, 39, 14, 0, 40, 0, 
	0, 0, 0, 10, 10, 14, 15, 14, 
	0, 16, 0, 44, 3, 4, 0, 0, 
	5, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 51, 18, 0, 
	0, 21, 22, 54, 21, 0, 23, 55, 
	29, 30, 30, 57, 29, 31, 32, 58, 
	32, 0, 60, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 29, 
	30, 30, 29, 29, 31, 32, 32, 32, 
	0, 61, 0, 0, 27, 27, 60, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	18, 18, 0, 0, 21, 22, 21, 21, 
	0, 23, 0, 62, 0, 0, 0, 60, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	8, 10, 14, 15, 14, 0, 16, 0, 
	18, 18, 18, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 27, 29, 30, 
	30, 29, 29, 31, 32, 32, 32, 0, 
	29, 30, 30, 29, 29, 31, 32, 32, 
	32, 0, 63, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 24, 
	0, 0, 25, 0, 26, 60, 64, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	65, 18, 0, 0, 21, 22, 66, 21, 
	0, 23, 67, 29, 30, 30, 68, 29, 
	31, 32, 69, 32, 0, 29, 30, 30, 
	29, 29, 31, 32, 32, 32, 0, 70, 
	0, 0, 71, 3, 0, 75, 23, 0, 
	77, 79, 0, 0, 23, 30, 82, 30, 
	30, 31, 0, 84, 86, 0, 0, 88, 
	90, 89, 90, 0, 0, 0, 91
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 28, 28, 33, 
	13, 34, 0, 36, 38, 38, 38, 41, 
	41, 42, 43, 43, 43, 1, 45, 46, 
	47, 48, 49, 50, 50, 12, 0, 52, 
	53, 0, 56, 56, 59, 50, 1, 1, 
	0, 6, 9, 11, 13, 13, 17, 0, 
	6, 19, 0, 28, 28, 33, 13, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 28, 28, 33, 13, 28, 28, 
	33, 13, 1, 1, 0, 6, 9, 11, 
	13, 13, 17, 0, 6, 19, 0, 0, 
	0, 0, 1, 0, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	28, 28, 33, 13, 28, 28, 33, 13, 
	70, 0, 71, 72, 73, 74, 76, 0, 
	77, 0, 78, 80, 81, 83, 85, 0, 
	86, 0, 87, 88, 0, 88, 89, 89, 
	0, 91, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 152;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 25;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 26;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 27;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 37;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 54;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 72;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 75;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 114;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 35 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 37 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 55 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 61 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 27 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 62 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 25 then
		begin

    $stderr.puts 'NESTED_STATEMENT ast_relationship'
    rel_node = @buffers[:relationship]
    stmt = @buffers[:statement_stack][-1] << rel_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 26 then
		begin

    $stderr.puts 'NESTED_STATEMENT call_nested_statement'
    	begin
		stack[top] = cs
		top+= 1
		cs = 114
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 37
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 84 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 60 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_subject'
    subject_node = @buffers[:subject]
    stmt = @buffers[:statement_stack][-1] << subject_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 67 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'NESTED_STATEMENT statement_init'
    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 63 then
		begin

    $stderr.puts 'NESTED_STATEMENT inner_statement_init'
    @buffers[:statement_stack] << statement()
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 79 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 39 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 69 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 68 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 73 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 76 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 85 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 46 then
		begin
 $stderr.puts "EOF!" 		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 72 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 45 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 74 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 42 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 36 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 87 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 28 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 78 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 80 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 47 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 41, 
	47, 47, 10, 10, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 48, 122, 48, 122, 
	9, 34, 34, 92, 34, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 33, 126, 
	47, 47, 47, 47, 9, 32, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	47, 47, 10, 10, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	9, 47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 
	122, 0, 0, 0, 0, 
	10, 10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 
	122, 9, 34, 0, 0, 
	10, 10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 
	32, 9, 47, 9, 47, 
	0, 0, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 26, 59, 
	59, 36, 36, 114, 114, 36, 24, 118, 
	118, 32, 1, 1, 1, 114, 114, 114, 
	0, 75, 75, 26, 59, 59, 0, 114, 
	114, 26, 59, 59, 0, 75, 114, 32, 
	114, 114, 26, 59, 59, 36, 36, 114, 
	114, 36, 114, 114, 114, 0, 75, 114, 
	32, 114, 114, 26, 59, 59, 36, 36, 
	114, 114, 36, 114, 114, 114, 0, 94, 
	1, 1, 24, 75, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 114, 114, 0, 114, 114, 
	114, 0, 75, 114, 32, 114, 114, 26, 
	59, 59, 36, 36, 114, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	114, 114, 114, 0, 114, 114, 114, 0, 
	39, 0, 1, 113, 0, 113, 0, 0, 
	1, 0, 113, 113, 114, 114, 26, 0, 
	1, 0, 94, 1, 0, 24, 39, 39, 
	0, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 481, 
	541, 601, 638, 675, 790, 905, 942, 967, 
	1086, 1205, 1238, 1240, 1242, 1244, 1359, 1474, 
	1589, 1590, 1666, 1742, 1769, 1829, 1889, 1890, 
	2005, 2120, 2147, 2207, 2267, 2268, 2344, 2459, 
	2492, 2607, 2722, 2749, 2809, 2869, 2906, 2943, 
	3058, 3173, 3210, 3325, 3440, 3555, 3556, 3632, 
	3747, 3780, 3895, 4010, 4037, 4097, 4157, 4194, 
	4231, 4346, 4461, 4498, 4613, 4728, 4843, 4844, 
	4939, 4941, 4943, 4968, 5044, 5159, 5192, 5307, 
	5422, 5449, 5509, 5569, 5606, 5643, 5758, 5873, 
	5910, 5935, 6054, 6173, 6288, 6403, 6436, 6551, 
	6666, 6693, 6753, 6813, 6850, 6887, 7002, 7117, 
	7154, 7156, 7158, 7273, 7388, 7503, 7504, 7619, 
	7734, 7849, 7850, 7926, 8041, 8074, 8189, 8304, 
	8331, 8391, 8451, 8488, 8525, 8640, 8755, 8792, 
	8817, 8936, 9055, 9170, 9172, 9287, 9320, 9435, 
	9550, 9577, 9637, 9697, 9734, 9771, 9886, 10001, 
	10038, 10153, 10268, 10383, 10384, 10499, 10614, 10729, 
	10730, 10770, 10771, 10773, 10887, 10888, 11002, 11003, 
	11004, 11006, 11007, 11121, 11235, 11350, 11465, 11492, 
	11493, 11495, 11496, 11591, 11593, 11594, 11619, 11659, 
	11699, 11700, 11702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 7, 7, 7, 7, 7, 7, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 7, 7, 7, 11, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 7, 7, 7, 7, 
	7, 7, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 7, 7, 
	7, 12, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 9, 9, 
	9, 9, 9, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 9, 13, 10, 
	13, 15, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 16, 14, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 19, 
	17, 20, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	20, 13, 13, 13, 13, 13, 13, 13, 
	13, 21, 13, 13, 22, 13, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 24, 1, 24, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 24, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 7, 7, 7, 7, 
	7, 7, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 7, 7, 
	7, 11, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 27, 28, 25, 
	25, 29, 25, 25, 25, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 31, 
	25, 25, 25, 25, 25, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 25, 25, 25, 30, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 23, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	23, 1, 1, 1, 1, 1, 1, 1, 
	1, 32, 1, 1, 24, 1, 33, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 33, 1, 34, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 1, 36, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 36, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 1, 37, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 39, 1, 
	40, 1, 1, 41, 42, 43, 43, 43, 
	43, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 42, 7, 44, 7, 7, 
	7, 7, 7, 7, 45, 7, 7, 46, 
	7, 7, 7, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 7, 7, 7, 
	7, 7, 7, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 7, 
	7, 7, 47, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 48, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 48, 7, 
	10, 7, 7, 7, 7, 7, 7, 49, 
	7, 7, 50, 7, 7, 7, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 12, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 28, 25, 25, 29, 25, 25, 
	25, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 25, 25, 25, 25, 25, 
	25, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 25, 25, 25, 
	51, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 17, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	52, 52, 52, 52, 52, 52, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 52, 52, 52, 53, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 1, 1, 1, 1, 
	1, 1, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 1, 1, 
	1, 54, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 56, 56, 
	56, 56, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 56, 55, 57, 
	55, 59, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 60, 58, 62, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 63, 
	61, 61, 64, 65, 65, 65, 65, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 64, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 7, 7, 7, 7, 7, 
	7, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 7, 7, 7, 
	67, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 64, 65, 65, 
	65, 65, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 64, 7, 66, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 68, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	65, 65, 65, 65, 65, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 65, 
	13, 66, 13, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 72, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 1, 1, 
	1, 1, 1, 1, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	1, 1, 1, 75, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	76, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 76, 
	1, 1, 1, 1, 1, 1, 1, 77, 
	1, 1, 1, 1, 1, 1, 1, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 1, 1, 1, 1, 1, 1, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 1, 1, 1, 78, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 79, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 79, 1, 1, 1, 1, 1, 
	1, 1, 80, 1, 81, 82, 82, 82, 
	82, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 7, 83, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 7, 7, 7, 
	7, 7, 7, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 7, 
	7, 7, 84, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 81, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 81, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	7, 7, 7, 7, 7, 7, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 7, 7, 7, 85, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 82, 82, 82, 82, 82, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 82, 13, 83, 13, 87, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 88, 
	86, 90, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 89, 92, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 92, 13, 13, 13, 
	13, 13, 13, 13, 13, 93, 13, 13, 
	94, 13, 95, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 95, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 1, 96, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 96, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 7, 7, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 7, 7, 7, 84, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 97, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 97, 25, 25, 25, 25, 25, 25, 
	25, 98, 99, 25, 25, 100, 25, 25, 
	25, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 102, 25, 25, 25, 25, 
	25, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 25, 25, 25, 
	101, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 95, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 103, 1, 1, 
	96, 1, 104, 105, 105, 105, 105, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 104, 7, 106, 7, 7, 7, 7, 
	7, 7, 107, 7, 7, 108, 7, 7, 
	7, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 7, 7, 7, 7, 7, 
	7, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 7, 7, 7, 
	109, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 110, 82, 82, 
	82, 82, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 7, 83, 7, 
	7, 7, 7, 7, 7, 111, 7, 7, 
	112, 7, 7, 7, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 7, 7, 
	7, 7, 7, 7, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	7, 7, 7, 85, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 97, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	99, 25, 25, 100, 25, 25, 25, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 25, 25, 25, 25, 25, 25, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 25, 25, 25, 113, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 89, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 1, 1, 
	1, 1, 1, 1, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	1, 1, 1, 114, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	115, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 115, 
	1, 1, 1, 1, 1, 1, 1, 116, 
	1, 1, 1, 1, 1, 1, 1, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 1, 1, 1, 1, 1, 1, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 1, 1, 1, 117, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 118, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 118, 1, 1, 1, 1, 1, 
	1, 1, 119, 1, 120, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 120, 7, 122, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 7, 7, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 7, 
	7, 7, 123, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 120, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 120, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	7, 7, 7, 7, 7, 7, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 7, 7, 7, 124, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 121, 121, 121, 121, 121, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 121, 13, 122, 13, 126, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 127, 
	125, 129, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 130, 128, 131, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 131, 13, 13, 13, 
	13, 13, 13, 13, 13, 132, 13, 13, 
	133, 13, 134, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 134, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 135, 1, 135, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 135, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	7, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 136, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 136, 25, 25, 25, 25, 25, 25, 
	25, 137, 138, 25, 25, 139, 25, 25, 
	25, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 141, 25, 25, 25, 25, 
	25, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 25, 25, 25, 
	140, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 134, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 142, 1, 1, 
	135, 1, 143, 144, 144, 144, 144, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 143, 7, 145, 7, 7, 7, 7, 
	7, 7, 146, 7, 7, 147, 7, 7, 
	7, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 7, 7, 7, 7, 7, 
	7, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 7, 7, 7, 
	148, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 149, 121, 121, 
	121, 121, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 149, 7, 122, 7, 
	7, 7, 7, 7, 7, 150, 7, 7, 
	151, 7, 7, 7, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 7, 7, 
	7, 7, 7, 7, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	7, 7, 7, 124, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	136, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 136, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	138, 25, 25, 139, 25, 25, 25, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 25, 25, 25, 25, 25, 25, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 25, 25, 25, 152, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 128, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 1, 154, 1, 155, 1, 157, 
	1, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 1, 1, 1, 1, 1, 1, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 1, 1, 1, 158, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 159, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 159, 1, 1, 1, 1, 
	1, 1, 1, 160, 1, 1, 1, 1, 
	1, 1, 1, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 1, 1, 1, 
	1, 1, 1, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 1, 
	1, 1, 161, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 162, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 162, 1, 
	1, 1, 1, 1, 1, 1, 163, 1, 
	164, 165, 165, 165, 165, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 164, 
	7, 166, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 7, 7, 7, 7, 7, 7, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 7, 7, 7, 167, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 164, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 164, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 165, 165, 
	165, 165, 165, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 165, 13, 166, 
	13, 170, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 171, 169, 173, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 174, 
	172, 175, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	175, 13, 13, 13, 13, 13, 13, 13, 
	13, 176, 13, 13, 177, 13, 178, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 178, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 179, 1, 179, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 179, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 7, 7, 7, 7, 
	7, 7, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 7, 7, 
	7, 167, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 181, 182, 25, 
	25, 183, 25, 25, 25, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 185, 
	25, 25, 25, 25, 25, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 25, 25, 25, 184, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 178, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 1, 179, 1, 187, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 187, 1, 188, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 188, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 1, 190, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 190, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 1, 190, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 190, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 1, 1, 
	1, 1, 1, 1, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	1, 1, 1, 191, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 192, 
	1, 1, 1, 1, 1, 1, 1, 193, 
	1, 1, 1, 1, 1, 1, 1, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 1, 1, 1, 1, 1, 1, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 1, 1, 1, 194, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 195, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 195, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 197, 198, 198, 198, 
	198, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 197, 7, 199, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 7, 7, 7, 
	7, 7, 7, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 7, 
	7, 7, 200, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 197, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 197, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	7, 7, 7, 7, 7, 7, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 7, 7, 7, 201, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 198, 198, 198, 198, 198, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 198, 13, 199, 13, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 204, 
	202, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 207, 205, 208, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 208, 13, 13, 13, 
	13, 13, 13, 13, 13, 209, 13, 13, 
	210, 13, 211, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 212, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 212, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	7, 7, 7, 7, 7, 7, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 7, 7, 7, 200, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 213, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 213, 25, 25, 25, 25, 25, 25, 
	25, 214, 215, 25, 25, 216, 25, 25, 
	25, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 218, 25, 25, 25, 25, 
	25, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 25, 25, 25, 
	217, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 211, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 219, 1, 1, 
	212, 1, 220, 1, 1, 221, 222, 223, 
	223, 223, 223, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 222, 7, 224, 
	7, 7, 7, 7, 7, 7, 225, 7, 
	7, 226, 7, 7, 7, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 7, 
	7, 7, 7, 7, 7, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 7, 7, 7, 227, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 228, 198, 198, 198, 198, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	228, 7, 199, 7, 7, 7, 7, 7, 
	7, 229, 7, 7, 230, 7, 7, 7, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 7, 7, 7, 7, 7, 7, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 7, 7, 7, 201, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 213, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 213, 25, 25, 25, 25, 
	25, 25, 25, 25, 215, 25, 25, 216, 
	25, 25, 25, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 25, 25, 25, 
	25, 25, 25, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 25, 
	25, 25, 231, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 205, 
	232, 233, 233, 233, 233, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 232, 
	7, 234, 7, 7, 7, 7, 7, 7, 
	235, 7, 7, 236, 7, 7, 7, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 7, 7, 7, 7, 7, 7, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 7, 7, 7, 237, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 238, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 238, 7, 166, 7, 7, 7, 
	7, 7, 7, 239, 7, 7, 240, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 25, 182, 25, 
	25, 183, 25, 25, 25, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 25, 
	25, 25, 25, 25, 25, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 25, 25, 25, 241, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 172, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 1, 1, 1, 1, 
	1, 1, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 1, 1, 
	1, 242, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 243, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 244, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 1, 1, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 1, 1, 1, 245, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 246, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	247, 1, 248, 249, 249, 249, 249, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 248, 7, 250, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 7, 7, 7, 7, 7, 
	7, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 7, 7, 7, 
	251, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 248, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 7, 7, 
	7, 7, 7, 7, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	7, 7, 7, 252, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	249, 249, 249, 249, 249, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 249, 
	13, 250, 13, 254, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 255, 253, 257, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 258, 256, 259, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 259, 13, 13, 13, 13, 13, 
	13, 13, 13, 260, 13, 13, 261, 13, 
	262, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 262, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 263, 1, 263, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 263, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 7, 7, 
	7, 7, 7, 7, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	7, 7, 7, 251, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	264, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 264, 
	25, 25, 25, 25, 25, 25, 25, 265, 
	266, 25, 25, 267, 25, 25, 25, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 269, 25, 25, 25, 25, 25, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 25, 25, 25, 268, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 262, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 262, 1, 1, 1, 1, 1, 
	1, 1, 1, 270, 1, 1, 263, 1, 
	271, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	1, 272, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	272, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 1, 
	274, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 274, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 1, 275, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 275, 1, 
	1, 1, 1, 1, 1, 1, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 1, 279, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 279, 1, 1, 1, 1, 
	1, 1, 1, 280, 1, 1, 1, 1, 
	1, 1, 1, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 1, 1, 1, 
	1, 1, 1, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 1, 
	1, 1, 281, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 282, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 1, 1, 1, 1, 283, 1, 
	284, 285, 285, 285, 285, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 284, 
	7, 286, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 7, 7, 7, 7, 7, 7, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 7, 7, 7, 287, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 284, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 284, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 7, 7, 7, 7, 
	7, 7, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 7, 7, 
	7, 288, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 285, 285, 
	285, 285, 285, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 285, 13, 286, 
	13, 290, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 291, 289, 293, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 294, 
	292, 295, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	295, 13, 13, 13, 13, 13, 13, 13, 
	13, 296, 13, 13, 297, 13, 298, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 298, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 299, 1, 299, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 299, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 7, 7, 7, 7, 
	7, 7, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 7, 7, 
	7, 287, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 300, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 300, 25, 25, 
	25, 25, 25, 25, 25, 301, 302, 25, 
	25, 303, 25, 25, 25, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 305, 
	25, 25, 25, 25, 25, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 25, 25, 25, 304, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	1, 306, 1, 1, 299, 1, 307, 308, 
	308, 308, 308, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 307, 7, 309, 
	7, 7, 7, 7, 7, 7, 310, 7, 
	7, 311, 7, 7, 7, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 7, 
	7, 7, 7, 7, 7, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 7, 7, 7, 312, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 313, 285, 285, 285, 285, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	313, 7, 286, 7, 7, 7, 7, 7, 
	7, 314, 7, 7, 315, 7, 7, 7, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 7, 7, 7, 7, 7, 7, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 7, 7, 7, 288, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 300, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 300, 25, 25, 25, 25, 
	25, 25, 25, 25, 302, 25, 25, 303, 
	25, 25, 25, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 25, 25, 25, 
	25, 25, 25, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 25, 
	25, 25, 316, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 292, 
	317, 318, 318, 318, 318, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 317, 
	7, 319, 7, 7, 7, 7, 7, 7, 
	320, 7, 7, 321, 7, 7, 7, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 7, 7, 7, 7, 7, 7, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 7, 7, 7, 322, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 323, 249, 249, 249, 249, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 323, 7, 250, 7, 7, 7, 
	7, 7, 7, 324, 7, 7, 325, 7, 
	7, 7, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 7, 7, 7, 7, 
	7, 7, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 7, 7, 
	7, 252, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 264, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 264, 25, 25, 
	25, 25, 25, 25, 25, 25, 266, 25, 
	25, 267, 25, 25, 25, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 25, 
	25, 25, 25, 25, 25, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 25, 25, 25, 326, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 256, 39, 327, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 330, 329, 331, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 52, 52, 52, 
	52, 52, 52, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 52, 
	52, 52, 332, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 1, 
	334, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	333, 333, 333, 333, 333, 333, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 333, 333, 335, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 55, 336, 13, 1, 337, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 25, 
	25, 25, 25, 25, 25, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 25, 25, 25, 338, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 337, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 340, 25, 25, 25, 25, 25, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 25, 25, 25, 339, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 341, 342, 343, 343, 343, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 341, 7, 344, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 7, 7, 7, 7, 
	7, 7, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 7, 7, 
	7, 345, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 346, 347, 
	65, 65, 65, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 346, 7, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 7, 7, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 7, 7, 7, 68, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 65, 65, 65, 65, 65, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	65, 13, 66, 13, 1, 348, 1, 1, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 1, 351, 
	350, 1, 157, 351, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 352, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 352, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 355, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 355, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 356, 1, 1, 358, 357, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 23, 0, 8, 9, 
	24, 8, 9, 24, 10, 14, 11, 10, 
	11, 0, 10, 13, 14, 11, 12, 21, 
	14, 15, 15, 16, 17, 17, 18, 152, 
	20, 154, 22, 6, 7, 14, 11, 23, 
	22, 14, 11, 23, 0, 155, 157, 0, 
	27, 28, 29, 159, 30, 29, 159, 30, 
	32, 33, 34, 163, 162, 35, 160, 36, 
	35, 160, 36, 38, 39, 40, 38, 39, 
	40, 41, 42, 43, 48, 52, 44, 45, 
	53, 44, 45, 53, 46, 167, 47, 46, 
	47, 46, 49, 167, 47, 48, 50, 167, 
	51, 42, 43, 167, 47, 52, 51, 167, 
	47, 52, 55, 56, 57, 55, 56, 57, 
	58, 59, 60, 65, 69, 61, 62, 70, 
	61, 62, 70, 63, 168, 64, 63, 64, 
	63, 66, 168, 64, 65, 67, 168, 68, 
	59, 60, 168, 64, 69, 68, 168, 64, 
	69, 170, 73, 74, 171, 173, 76, 77, 
	78, 76, 77, 78, 79, 80, 81, 86, 
	112, 82, 83, 113, 82, 83, 113, 84, 
	88, 85, 84, 85, 84, 87, 88, 85, 
	86, 110, 88, 89, 89, 90, 91, 92, 
	93, 94, 92, 93, 94, 95, 96, 97, 
	102, 108, 98, 99, 109, 98, 99, 109, 
	100, 174, 101, 100, 101, 100, 103, 174, 
	101, 102, 106, 174, 105, 177, 107, 96, 
	97, 174, 101, 108, 107, 174, 101, 108, 
	111, 80, 81, 88, 85, 112, 111, 88, 
	85, 112, 115, 116, 117, 115, 116, 117, 
	118, 119, 120, 125, 150, 121, 122, 151, 
	121, 122, 151, 123, 127, 124, 123, 124, 
	123, 126, 127, 124, 125, 148, 127, 128, 
	128, 129, 130, 130, 131, 132, 178, 133, 
	134, 132, 133, 134, 135, 136, 137, 142, 
	146, 138, 139, 147, 138, 139, 147, 140, 
	178, 141, 140, 141, 140, 143, 178, 141, 
	142, 144, 178, 145, 136, 137, 178, 141, 
	146, 145, 178, 141, 146, 149, 119, 120, 
	127, 124, 150, 149, 127, 124, 150, 153, 
	19, 154, 153, 156, 155, 0, 158, 157, 
	161, 161, 162, 163, 164, 165, 166, 33, 
	34, 162, 165, 166, 169, 170, 171, 172, 
	175, 176, 104, 175, 104, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 8, 10, 12, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 20, 21, 22, 21, 21, 0, 23, 
	0, 24, 0, 0, 25, 0, 26, 0, 
	0, 27, 29, 30, 30, 29, 29, 31, 
	32, 32, 32, 0, 34, 35, 10, 37, 
	0, 0, 14, 39, 14, 0, 40, 0, 
	0, 0, 0, 10, 10, 14, 15, 14, 
	0, 16, 0, 44, 3, 4, 0, 0, 
	5, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 51, 18, 0, 
	0, 21, 22, 54, 21, 0, 23, 55, 
	29, 30, 30, 57, 29, 31, 32, 58, 
	32, 0, 60, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 29, 
	30, 30, 29, 29, 31, 32, 32, 32, 
	0, 61, 0, 0, 27, 27, 60, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	18, 18, 0, 0, 21, 22, 21, 21, 
	0, 23, 0, 62, 0, 0, 0, 60, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	8, 10, 14, 15, 14, 0, 16, 0, 
	18, 18, 18, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 27, 29, 30, 
	30, 29, 29, 31, 32, 32, 32, 0, 
	29, 30, 30, 29, 29, 31, 32, 32, 
	32, 0, 63, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 24, 
	0, 0, 25, 0, 26, 60, 64, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	65, 18, 0, 0, 21, 22, 66, 21, 
	0, 23, 67, 29, 30, 30, 68, 29, 
	31, 32, 69, 32, 0, 29, 30, 30, 
	29, 29, 31, 32, 32, 32, 0, 70, 
	0, 0, 71, 3, 0, 75, 23, 0, 
	77, 79, 0, 0, 23, 30, 82, 30, 
	30, 31, 0, 84, 86, 0, 0, 88, 
	90, 89, 90, 0, 0, 0, 91
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 28, 28, 33, 
	13, 34, 0, 36, 38, 38, 38, 41, 
	41, 42, 43, 43, 43, 1, 45, 46, 
	47, 48, 49, 50, 50, 12, 0, 52, 
	53, 0, 56, 56, 59, 50, 1, 1, 
	0, 6, 9, 11, 13, 13, 17, 0, 
	6, 19, 0, 28, 28, 33, 13, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 28, 28, 33, 13, 28, 28, 
	33, 13, 1, 1, 0, 6, 9, 11, 
	13, 13, 17, 0, 6, 19, 0, 0, 
	0, 0, 1, 0, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	28, 28, 33, 13, 28, 28, 33, 13, 
	70, 0, 71, 72, 73, 74, 76, 0, 
	77, 0, 78, 80, 81, 83, 85, 0, 
	86, 0, 87, 88, 0, 88, 89, 89, 
	0, 91, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 152;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 25;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 26;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 27;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 37;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 54;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 72;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 75;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 114;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 35 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 37 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 55 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 61 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 27 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 62 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 25 then
		begin

    $stderr.puts 'NESTED_STATEMENT ast_relationship'
    rel_node = @buffers[:relationship]
    stmt = @buffers[:statement_stack][-1] << rel_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 26 then
		begin

    $stderr.puts 'NESTED_STATEMENT call_nested_statement'
    	begin
		stack[top] = cs
		top+= 1
		cs = 114
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 37
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 84 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 60 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_subject'
    subject_node = @buffers[:subject]
    stmt = @buffers[:statement_stack][-1] << subject_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 67 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'NESTED_STATEMENT statement_init'
    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 63 then
		begin

    $stderr.puts 'NESTED_STATEMENT inner_statement_init'
    @buffers[:statement_stack] << statement()
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 79 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 39 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 69 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 68 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 73 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 76 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 85 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 46 then
		begin
 $stderr.puts "EOF!" 		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 72 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 45 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 74 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 42 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 36 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 87 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 28 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 78 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 80 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 47 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 41, 
	47, 47, 10, 10, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 48, 122, 48, 122, 
	9, 34, 34, 92, 34, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 33, 126, 
	47, 47, 47, 47, 9, 32, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	47, 47, 10, 10, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	9, 47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 
	122, 0, 0, 0, 0, 
	10, 10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 
	122, 9, 34, 0, 0, 
	10, 10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 
	32, 9, 47, 9, 47, 
	0, 0, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 26, 59, 
	59, 36, 36, 114, 114, 36, 24, 118, 
	118, 32, 1, 1, 1, 114, 114, 114, 
	0, 75, 75, 26, 59, 59, 0, 114, 
	114, 26, 59, 59, 0, 75, 114, 32, 
	114, 114, 26, 59, 59, 36, 36, 114, 
	114, 36, 114, 114, 114, 0, 75, 114, 
	32, 114, 114, 26, 59, 59, 36, 36, 
	114, 114, 36, 114, 114, 114, 0, 94, 
	1, 1, 24, 75, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 114, 114, 0, 114, 114, 
	114, 0, 75, 114, 32, 114, 114, 26, 
	59, 59, 36, 36, 114, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	114, 114, 114, 0, 114, 114, 114, 0, 
	39, 0, 1, 113, 0, 113, 0, 0, 
	1, 0, 113, 113, 114, 114, 26, 0, 
	1, 0, 94, 1, 0, 24, 39, 39, 
	0, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 481, 
	541, 601, 638, 675, 790, 905, 942, 967, 
	1086, 1205, 1238, 1240, 1242, 1244, 1359, 1474, 
	1589, 1590, 1666, 1742, 1769, 1829, 1889, 1890, 
	2005, 2120, 2147, 2207, 2267, 2268, 2344, 2459, 
	2492, 2607, 2722, 2749, 2809, 2869, 2906, 2943, 
	3058, 3173, 3210, 3325, 3440, 3555, 3556, 3632, 
	3747, 3780, 3895, 4010, 4037, 4097, 4157, 4194, 
	4231, 4346, 4461, 4498, 4613, 4728, 4843, 4844, 
	4939, 4941, 4943, 4968, 5044, 5159, 5192, 5307, 
	5422, 5449, 5509, 5569, 5606, 5643, 5758, 5873, 
	5910, 5935, 6054, 6173, 6288, 6403, 6436, 6551, 
	6666, 6693, 6753, 6813, 6850, 6887, 7002, 7117, 
	7154, 7156, 7158, 7273, 7388, 7503, 7504, 7619, 
	7734, 7849, 7850, 7926, 8041, 8074, 8189, 8304, 
	8331, 8391, 8451, 8488, 8525, 8640, 8755, 8792, 
	8817, 8936, 9055, 9170, 9172, 9287, 9320, 9435, 
	9550, 9577, 9637, 9697, 9734, 9771, 9886, 10001, 
	10038, 10153, 10268, 10383, 10384, 10499, 10614, 10729, 
	10730, 10770, 10771, 10773, 10887, 10888, 11002, 11003, 
	11004, 11006, 11007, 11121, 11235, 11350, 11465, 11492, 
	11493, 11495, 11496, 11591, 11593, 11594, 11619, 11659, 
	11699, 11700, 11702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 7, 7, 7, 7, 7, 7, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 7, 7, 7, 11, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 7, 7, 7, 7, 
	7, 7, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 7, 7, 
	7, 12, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 9, 9, 
	9, 9, 9, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 9, 13, 10, 
	13, 15, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 16, 14, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 19, 
	17, 20, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	20, 13, 13, 13, 13, 13, 13, 13, 
	13, 21, 13, 13, 22, 13, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 24, 1, 24, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 24, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 7, 7, 7, 7, 
	7, 7, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 7, 7, 
	7, 11, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 27, 28, 25, 
	25, 29, 25, 25, 25, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 31, 
	25, 25, 25, 25, 25, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 25, 25, 25, 30, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 23, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	23, 1, 1, 1, 1, 1, 1, 1, 
	1, 32, 1, 1, 24, 1, 33, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 33, 1, 34, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 1, 36, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 36, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 1, 37, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 39, 1, 
	40, 1, 1, 41, 42, 43, 43, 43, 
	43, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 42, 7, 44, 7, 7, 
	7, 7, 7, 7, 45, 7, 7, 46, 
	7, 7, 7, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 7, 7, 7, 
	7, 7, 7, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 7, 
	7, 7, 47, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 48, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 48, 7, 
	10, 7, 7, 7, 7, 7, 7, 49, 
	7, 7, 50, 7, 7, 7, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 12, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 28, 25, 25, 29, 25, 25, 
	25, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 25, 25, 25, 25, 25, 
	25, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 25, 25, 25, 
	51, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 17, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	52, 52, 52, 52, 52, 52, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 52, 52, 52, 53, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 1, 1, 1, 1, 
	1, 1, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 1, 1, 
	1, 54, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 56, 56, 
	56, 56, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 56, 55, 57, 
	55, 59, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 60, 58, 62, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 63, 
	61, 61, 64, 65, 65, 65, 65, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 64, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 7, 7, 7, 7, 7, 
	7, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 7, 7, 7, 
	67, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 64, 65, 65, 
	65, 65, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 64, 7, 66, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 68, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	65, 65, 65, 65, 65, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 65, 
	13, 66, 13, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 72, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 1, 1, 
	1, 1, 1, 1, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	1, 1, 1, 75, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	76, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 76, 
	1, 1, 1, 1, 1, 1, 1, 77, 
	1, 1, 1, 1, 1, 1, 1, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 1, 1, 1, 1, 1, 1, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 1, 1, 1, 78, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 79, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 79, 1, 1, 1, 1, 1, 
	1, 1, 80, 1, 81, 82, 82, 82, 
	82, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 7, 83, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 7, 7, 7, 
	7, 7, 7, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 7, 
	7, 7, 84, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 81, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 81, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	7, 7, 7, 7, 7, 7, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 7, 7, 7, 85, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 82, 82, 82, 82, 82, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 82, 13, 83, 13, 87, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 88, 
	86, 90, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 89, 92, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 92, 13, 13, 13, 
	13, 13, 13, 13, 13, 93, 13, 13, 
	94, 13, 95, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 95, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 1, 96, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 96, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 7, 7, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 7, 7, 7, 84, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 97, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 97, 25, 25, 25, 25, 25, 25, 
	25, 98, 99, 25, 25, 100, 25, 25, 
	25, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 102, 25, 25, 25, 25, 
	25, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 25, 25, 25, 
	101, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 95, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 103, 1, 1, 
	96, 1, 104, 105, 105, 105, 105, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 104, 7, 106, 7, 7, 7, 7, 
	7, 7, 107, 7, 7, 108, 7, 7, 
	7, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 7, 7, 7, 7, 7, 
	7, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 7, 7, 7, 
	109, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 110, 82, 82, 
	82, 82, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 7, 83, 7, 
	7, 7, 7, 7, 7, 111, 7, 7, 
	112, 7, 7, 7, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 7, 7, 
	7, 7, 7, 7, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	7, 7, 7, 85, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 97, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	99, 25, 25, 100, 25, 25, 25, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 25, 25, 25, 25, 25, 25, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 25, 25, 25, 113, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 89, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 1, 1, 
	1, 1, 1, 1, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	1, 1, 1, 114, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	115, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 115, 
	1, 1, 1, 1, 1, 1, 1, 116, 
	1, 1, 1, 1, 1, 1, 1, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 1, 1, 1, 1, 1, 1, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 1, 1, 1, 117, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 118, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 118, 1, 1, 1, 1, 1, 
	1, 1, 119, 1, 120, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 120, 7, 122, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 7, 7, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 7, 
	7, 7, 123, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 120, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 120, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	7, 7, 7, 7, 7, 7, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 7, 7, 7, 124, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 121, 121, 121, 121, 121, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 121, 13, 122, 13, 126, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 127, 
	125, 129, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 130, 128, 131, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 131, 13, 13, 13, 
	13, 13, 13, 13, 13, 132, 13, 13, 
	133, 13, 134, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 134, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 135, 1, 135, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 135, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	7, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 136, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 136, 25, 25, 25, 25, 25, 25, 
	25, 137, 138, 25, 25, 139, 25, 25, 
	25, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 141, 25, 25, 25, 25, 
	25, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 25, 25, 25, 
	140, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 134, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 142, 1, 1, 
	135, 1, 143, 144, 144, 144, 144, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 143, 7, 145, 7, 7, 7, 7, 
	7, 7, 146, 7, 7, 147, 7, 7, 
	7, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 7, 7, 7, 7, 7, 
	7, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 7, 7, 7, 
	148, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 149, 121, 121, 
	121, 121, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 149, 7, 122, 7, 
	7, 7, 7, 7, 7, 150, 7, 7, 
	151, 7, 7, 7, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 7, 7, 
	7, 7, 7, 7, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	7, 7, 7, 124, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	136, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 136, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	138, 25, 25, 139, 25, 25, 25, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 25, 25, 25, 25, 25, 25, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 25, 25, 25, 152, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 128, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 1, 154, 1, 155, 1, 157, 
	1, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 1, 1, 1, 1, 1, 1, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 1, 1, 1, 158, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 159, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 159, 1, 1, 1, 1, 
	1, 1, 1, 160, 1, 1, 1, 1, 
	1, 1, 1, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 1, 1, 1, 
	1, 1, 1, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 1, 
	1, 1, 161, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 162, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 162, 1, 
	1, 1, 1, 1, 1, 1, 163, 1, 
	164, 165, 165, 165, 165, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 164, 
	7, 166, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 7, 7, 7, 7, 7, 7, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 7, 7, 7, 167, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 164, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 164, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 165, 165, 
	165, 165, 165, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 165, 13, 166, 
	13, 170, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 171, 169, 173, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 174, 
	172, 175, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	175, 13, 13, 13, 13, 13, 13, 13, 
	13, 176, 13, 13, 177, 13, 178, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 178, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 179, 1, 179, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 179, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 7, 7, 7, 7, 
	7, 7, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 7, 7, 
	7, 167, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 181, 182, 25, 
	25, 183, 25, 25, 25, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 185, 
	25, 25, 25, 25, 25, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 25, 25, 25, 184, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 178, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 1, 179, 1, 187, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 187, 1, 188, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 188, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 1, 190, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 190, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 1, 190, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 190, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 1, 1, 
	1, 1, 1, 1, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	1, 1, 1, 191, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 192, 
	1, 1, 1, 1, 1, 1, 1, 193, 
	1, 1, 1, 1, 1, 1, 1, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 1, 1, 1, 1, 1, 1, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 1, 1, 1, 194, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 195, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 195, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 197, 198, 198, 198, 
	198, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 197, 7, 199, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 7, 7, 7, 
	7, 7, 7, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 7, 
	7, 7, 200, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 197, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 197, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	7, 7, 7, 7, 7, 7, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 7, 7, 7, 201, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 198, 198, 198, 198, 198, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 198, 13, 199, 13, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 204, 
	202, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 207, 205, 208, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 208, 13, 13, 13, 
	13, 13, 13, 13, 13, 209, 13, 13, 
	210, 13, 211, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 212, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 212, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	7, 7, 7, 7, 7, 7, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 7, 7, 7, 200, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 213, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 213, 25, 25, 25, 25, 25, 25, 
	25, 214, 215, 25, 25, 216, 25, 25, 
	25, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 218, 25, 25, 25, 25, 
	25, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 25, 25, 25, 
	217, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 211, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 219, 1, 1, 
	212, 1, 220, 1, 1, 221, 222, 223, 
	223, 223, 223, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 222, 7, 224, 
	7, 7, 7, 7, 7, 7, 225, 7, 
	7, 226, 7, 7, 7, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 7, 
	7, 7, 7, 7, 7, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 7, 7, 7, 227, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 228, 198, 198, 198, 198, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	228, 7, 199, 7, 7, 7, 7, 7, 
	7, 229, 7, 7, 230, 7, 7, 7, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 7, 7, 7, 7, 7, 7, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 7, 7, 7, 201, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 213, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 213, 25, 25, 25, 25, 
	25, 25, 25, 25, 215, 25, 25, 216, 
	25, 25, 25, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 25, 25, 25, 
	25, 25, 25, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 25, 
	25, 25, 231, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 205, 
	232, 233, 233, 233, 233, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 232, 
	7, 234, 7, 7, 7, 7, 7, 7, 
	235, 7, 7, 236, 7, 7, 7, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 7, 7, 7, 7, 7, 7, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 7, 7, 7, 237, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 238, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 238, 7, 166, 7, 7, 7, 
	7, 7, 7, 239, 7, 7, 240, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 25, 182, 25, 
	25, 183, 25, 25, 25, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 25, 
	25, 25, 25, 25, 25, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 25, 25, 25, 241, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 172, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 1, 1, 1, 1, 
	1, 1, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 1, 1, 
	1, 242, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 243, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 244, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 1, 1, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 1, 1, 1, 245, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 246, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	247, 1, 248, 249, 249, 249, 249, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 248, 7, 250, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 7, 7, 7, 7, 7, 
	7, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 7, 7, 7, 
	251, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 248, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 7, 7, 
	7, 7, 7, 7, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	7, 7, 7, 252, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	249, 249, 249, 249, 249, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 249, 
	13, 250, 13, 254, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 255, 253, 257, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 258, 256, 259, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 259, 13, 13, 13, 13, 13, 
	13, 13, 13, 260, 13, 13, 261, 13, 
	262, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 262, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 263, 1, 263, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 263, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 7, 7, 
	7, 7, 7, 7, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	7, 7, 7, 251, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	264, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 264, 
	25, 25, 25, 25, 25, 25, 25, 265, 
	266, 25, 25, 267, 25, 25, 25, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 269, 25, 25, 25, 25, 25, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 25, 25, 25, 268, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 262, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 262, 1, 1, 1, 1, 1, 
	1, 1, 1, 270, 1, 1, 263, 1, 
	271, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	1, 272, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	272, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 1, 
	274, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 274, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 1, 275, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 275, 1, 
	1, 1, 1, 1, 1, 1, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 1, 279, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 279, 1, 1, 1, 1, 
	1, 1, 1, 280, 1, 1, 1, 1, 
	1, 1, 1, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 1, 1, 1, 
	1, 1, 1, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 1, 
	1, 1, 281, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 282, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 1, 1, 1, 1, 283, 1, 
	284, 285, 285, 285, 285, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 284, 
	7, 286, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 7, 7, 7, 7, 7, 7, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 7, 7, 7, 287, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 284, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 284, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 7, 7, 7, 7, 
	7, 7, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 7, 7, 
	7, 288, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 285, 285, 
	285, 285, 285, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 285, 13, 286, 
	13, 290, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 291, 289, 293, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 294, 
	292, 295, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	295, 13, 13, 13, 13, 13, 13, 13, 
	13, 296, 13, 13, 297, 13, 298, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 298, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 299, 1, 299, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 299, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 7, 7, 7, 7, 
	7, 7, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 7, 7, 
	7, 287, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 300, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 300, 25, 25, 
	25, 25, 25, 25, 25, 301, 302, 25, 
	25, 303, 25, 25, 25, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 305, 
	25, 25, 25, 25, 25, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 25, 25, 25, 304, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	1, 306, 1, 1, 299, 1, 307, 308, 
	308, 308, 308, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 307, 7, 309, 
	7, 7, 7, 7, 7, 7, 310, 7, 
	7, 311, 7, 7, 7, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 7, 
	7, 7, 7, 7, 7, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 7, 7, 7, 312, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 313, 285, 285, 285, 285, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	313, 7, 286, 7, 7, 7, 7, 7, 
	7, 314, 7, 7, 315, 7, 7, 7, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 7, 7, 7, 7, 7, 7, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 7, 7, 7, 288, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 300, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 300, 25, 25, 25, 25, 
	25, 25, 25, 25, 302, 25, 25, 303, 
	25, 25, 25, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 25, 25, 25, 
	25, 25, 25, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 25, 
	25, 25, 316, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 292, 
	317, 318, 318, 318, 318, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 317, 
	7, 319, 7, 7, 7, 7, 7, 7, 
	320, 7, 7, 321, 7, 7, 7, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 7, 7, 7, 7, 7, 7, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 7, 7, 7, 322, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 323, 249, 249, 249, 249, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 323, 7, 250, 7, 7, 7, 
	7, 7, 7, 324, 7, 7, 325, 7, 
	7, 7, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 7, 7, 7, 7, 
	7, 7, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 7, 7, 
	7, 252, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 264, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 264, 25, 25, 
	25, 25, 25, 25, 25, 25, 266, 25, 
	25, 267, 25, 25, 25, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 25, 
	25, 25, 25, 25, 25, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 25, 25, 25, 326, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 256, 39, 327, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 330, 329, 331, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 52, 52, 52, 
	52, 52, 52, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 52, 
	52, 52, 332, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 1, 
	334, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	333, 333, 333, 333, 333, 333, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 333, 333, 335, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 55, 336, 13, 1, 337, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 25, 
	25, 25, 25, 25, 25, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 25, 25, 25, 338, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 337, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 340, 25, 25, 25, 25, 25, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 25, 25, 25, 339, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 341, 342, 343, 343, 343, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 341, 7, 344, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 7, 7, 7, 7, 
	7, 7, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 7, 7, 
	7, 345, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 346, 347, 
	65, 65, 65, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 346, 7, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 7, 7, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 7, 7, 7, 68, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 65, 65, 65, 65, 65, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	65, 13, 66, 13, 1, 348, 1, 1, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 1, 351, 
	350, 1, 157, 351, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 352, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 352, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 355, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 355, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 356, 1, 1, 358, 357, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 23, 0, 8, 9, 
	24, 8, 9, 24, 10, 14, 11, 10, 
	11, 0, 10, 13, 14, 11, 12, 21, 
	14, 15, 15, 16, 17, 17, 18, 152, 
	20, 154, 22, 6, 7, 14, 11, 23, 
	22, 14, 11, 23, 0, 155, 157, 0, 
	27, 28, 29, 159, 30, 29, 159, 30, 
	32, 33, 34, 163, 162, 35, 160, 36, 
	35, 160, 36, 38, 39, 40, 38, 39, 
	40, 41, 42, 43, 48, 52, 44, 45, 
	53, 44, 45, 53, 46, 167, 47, 46, 
	47, 46, 49, 167, 47, 48, 50, 167, 
	51, 42, 43, 167, 47, 52, 51, 167, 
	47, 52, 55, 56, 57, 55, 56, 57, 
	58, 59, 60, 65, 69, 61, 62, 70, 
	61, 62, 70, 63, 168, 64, 63, 64, 
	63, 66, 168, 64, 65, 67, 168, 68, 
	59, 60, 168, 64, 69, 68, 168, 64, 
	69, 170, 73, 74, 171, 173, 76, 77, 
	78, 76, 77, 78, 79, 80, 81, 86, 
	112, 82, 83, 113, 82, 83, 113, 84, 
	88, 85, 84, 85, 84, 87, 88, 85, 
	86, 110, 88, 89, 89, 90, 91, 92, 
	93, 94, 92, 93, 94, 95, 96, 97, 
	102, 108, 98, 99, 109, 98, 99, 109, 
	100, 174, 101, 100, 101, 100, 103, 174, 
	101, 102, 106, 174, 105, 177, 107, 96, 
	97, 174, 101, 108, 107, 174, 101, 108, 
	111, 80, 81, 88, 85, 112, 111, 88, 
	85, 112, 115, 116, 117, 115, 116, 117, 
	118, 119, 120, 125, 150, 121, 122, 151, 
	121, 122, 151, 123, 127, 124, 123, 124, 
	123, 126, 127, 124, 125, 148, 127, 128, 
	128, 129, 130, 130, 131, 132, 178, 133, 
	134, 132, 133, 134, 135, 136, 137, 142, 
	146, 138, 139, 147, 138, 139, 147, 140, 
	178, 141, 140, 141, 140, 143, 178, 141, 
	142, 144, 178, 145, 136, 137, 178, 141, 
	146, 145, 178, 141, 146, 149, 119, 120, 
	127, 124, 150, 149, 127, 124, 150, 153, 
	19, 154, 153, 156, 155, 0, 158, 157, 
	161, 161, 162, 163, 164, 165, 166, 33, 
	34, 162, 165, 166, 169, 170, 171, 172, 
	175, 176, 104, 175, 104, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 8, 10, 12, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 20, 21, 22, 21, 21, 0, 23, 
	0, 24, 0, 0, 25, 0, 26, 0, 
	0, 27, 29, 30, 30, 29, 29, 31, 
	32, 32, 32, 0, 34, 35, 10, 37, 
	0, 0, 14, 39, 14, 0, 40, 0, 
	0, 0, 0, 10, 10, 14, 15, 14, 
	0, 16, 0, 44, 3, 4, 0, 0, 
	5, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 51, 18, 0, 
	0, 21, 22, 54, 21, 0, 23, 55, 
	29, 30, 30, 57, 29, 31, 32, 58, 
	32, 0, 60, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 29, 
	30, 30, 29, 29, 31, 32, 32, 32, 
	0, 61, 0, 0, 27, 27, 60, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	18, 18, 0, 0, 21, 22, 21, 21, 
	0, 23, 0, 62, 0, 0, 0, 60, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	8, 10, 14, 15, 14, 0, 16, 0, 
	18, 18, 18, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 27, 29, 30, 
	30, 29, 29, 31, 32, 32, 32, 0, 
	29, 30, 30, 29, 29, 31, 32, 32, 
	32, 0, 63, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 24, 
	0, 0, 25, 0, 26, 60, 64, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	65, 18, 0, 0, 21, 22, 66, 21, 
	0, 23, 67, 29, 30, 30, 68, 29, 
	31, 32, 69, 32, 0, 29, 30, 30, 
	29, 29, 31, 32, 32, 32, 0, 70, 
	0, 0, 71, 3, 0, 75, 23, 0, 
	77, 79, 0, 0, 23, 30, 82, 30, 
	30, 31, 0, 84, 86, 0, 0, 88, 
	90, 89, 90, 0, 0, 0, 91
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 28, 28, 33, 
	13, 34, 0, 36, 38, 38, 38, 41, 
	41, 42, 43, 43, 43, 1, 45, 46, 
	47, 48, 49, 50, 50, 12, 0, 52, 
	53, 0, 56, 56, 59, 50, 1, 1, 
	0, 6, 9, 11, 13, 13, 17, 0, 
	6, 19, 0, 28, 28, 33, 13, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 28, 28, 33, 13, 28, 28, 
	33, 13, 1, 1, 0, 6, 9, 11, 
	13, 13, 17, 0, 6, 19, 0, 0, 
	0, 0, 1, 0, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	28, 28, 33, 13, 28, 28, 33, 13, 
	70, 0, 71, 72, 73, 74, 76, 0, 
	77, 0, 78, 80, 81, 83, 85, 0, 
	86, 0, 87, 88, 0, 88, 89, 89, 
	0, 91, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 152;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 25;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 26;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 27;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 37;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 54;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 72;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 75;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 114;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 35 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 37 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 55 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 61 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 27 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 62 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 25 then
		begin

    $stderr.puts 'NESTED_STATEMENT ast_relationship'
    rel_node = @buffers[:relationship]
    stmt = @buffers[:statement_stack][-1] << rel_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 26 then
		begin

    $stderr.puts 'NESTED_STATEMENT call_nested_statement'
    	begin
		stack[top] = cs
		top+= 1
		cs = 114
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 37
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 84 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 60 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_subject'
    subject_node = @buffers[:subject]
    stmt = @buffers[:statement_stack][-1] << subject_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 67 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'NESTED_STATEMENT statement_init'
    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 63 then
		begin

    $stderr.puts 'NESTED_STATEMENT inner_statement_init'
    @buffers[:statement_stack] << statement()
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 79 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 39 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 69 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 68 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 73 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 76 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 85 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 46 then
		begin
 $stderr.puts "EOF!" 		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 72 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 45 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 74 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 42 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 36 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 87 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 28 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 78 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 80 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 47 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 41, 
	47, 47, 10, 10, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 48, 122, 48, 122, 
	9, 34, 34, 92, 34, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 33, 126, 
	47, 47, 47, 47, 9, 32, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	47, 47, 10, 10, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	9, 47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 
	122, 0, 0, 0, 0, 
	10, 10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 
	122, 9, 34, 0, 0, 
	10, 10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 
	32, 9, 47, 9, 47, 
	0, 0, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 26, 59, 
	59, 36, 36, 114, 114, 36, 24, 118, 
	118, 32, 1, 1, 1, 114, 114, 114, 
	0, 75, 75, 26, 59, 59, 0, 114, 
	114, 26, 59, 59, 0, 75, 114, 32, 
	114, 114, 26, 59, 59, 36, 36, 114, 
	114, 36, 114, 114, 114, 0, 75, 114, 
	32, 114, 114, 26, 59, 59, 36, 36, 
	114, 114, 36, 114, 114, 114, 0, 94, 
	1, 1, 24, 75, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 114, 114, 0, 114, 114, 
	114, 0, 75, 114, 32, 114, 114, 26, 
	59, 59, 36, 36, 114, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	114, 114, 114, 0, 114, 114, 114, 0, 
	39, 0, 1, 113, 0, 113, 0, 0, 
	1, 0, 113, 113, 114, 114, 26, 0, 
	1, 0, 94, 1, 0, 24, 39, 39, 
	0, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 481, 
	541, 601, 638, 675, 790, 905, 942, 967, 
	1086, 1205, 1238, 1240, 1242, 1244, 1359, 1474, 
	1589, 1590, 1666, 1742, 1769, 1829, 1889, 1890, 
	2005, 2120, 2147, 2207, 2267, 2268, 2344, 2459, 
	2492, 2607, 2722, 2749, 2809, 2869, 2906, 2943, 
	3058, 3173, 3210, 3325, 3440, 3555, 3556, 3632, 
	3747, 3780, 3895, 4010, 4037, 4097, 4157, 4194, 
	4231, 4346, 4461, 4498, 4613, 4728, 4843, 4844, 
	4939, 4941, 4943, 4968, 5044, 5159, 5192, 5307, 
	5422, 5449, 5509, 5569, 5606, 5643, 5758, 5873, 
	5910, 5935, 6054, 6173, 6288, 6403, 6436, 6551, 
	6666, 6693, 6753, 6813, 6850, 6887, 7002, 7117, 
	7154, 7156, 7158, 7273, 7388, 7503, 7504, 7619, 
	7734, 7849, 7850, 7926, 8041, 8074, 8189, 8304, 
	8331, 8391, 8451, 8488, 8525, 8640, 8755, 8792, 
	8817, 8936, 9055, 9170, 9172, 9287, 9320, 9435, 
	9550, 9577, 9637, 9697, 9734, 9771, 9886, 10001, 
	10038, 10153, 10268, 10383, 10384, 10499, 10614, 10729, 
	10730, 10770, 10771, 10773, 10887, 10888, 11002, 11003, 
	11004, 11006, 11007, 11121, 11235, 11350, 11465, 11492, 
	11493, 11495, 11496, 11591, 11593, 11594, 11619, 11659, 
	11699, 11700, 11702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 7, 7, 7, 7, 7, 7, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 7, 7, 7, 11, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 7, 7, 7, 7, 
	7, 7, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 7, 7, 
	7, 12, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 9, 9, 
	9, 9, 9, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 9, 13, 10, 
	13, 15, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 16, 14, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 19, 
	17, 20, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	20, 13, 13, 13, 13, 13, 13, 13, 
	13, 21, 13, 13, 22, 13, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 24, 1, 24, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 24, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 7, 7, 7, 7, 
	7, 7, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 7, 7, 
	7, 11, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 27, 28, 25, 
	25, 29, 25, 25, 25, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 31, 
	25, 25, 25, 25, 25, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 25, 25, 25, 30, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 23, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	23, 1, 1, 1, 1, 1, 1, 1, 
	1, 32, 1, 1, 24, 1, 33, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 33, 1, 34, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 1, 36, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 36, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 1, 37, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 39, 1, 
	40, 1, 1, 41, 42, 43, 43, 43, 
	43, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 42, 7, 44, 7, 7, 
	7, 7, 7, 7, 45, 7, 7, 46, 
	7, 7, 7, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 7, 7, 7, 
	7, 7, 7, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 7, 
	7, 7, 47, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 48, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 48, 7, 
	10, 7, 7, 7, 7, 7, 7, 49, 
	7, 7, 50, 7, 7, 7, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 12, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 28, 25, 25, 29, 25, 25, 
	25, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 25, 25, 25, 25, 25, 
	25, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 25, 25, 25, 
	51, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 17, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	52, 52, 52, 52, 52, 52, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 52, 52, 52, 53, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 1, 1, 1, 1, 
	1, 1, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 1, 1, 
	1, 54, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 56, 56, 
	56, 56, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 56, 55, 57, 
	55, 59, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 60, 58, 62, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 63, 
	61, 61, 64, 65, 65, 65, 65, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 64, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 7, 7, 7, 7, 7, 
	7, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 7, 7, 7, 
	67, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 64, 65, 65, 
	65, 65, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 64, 7, 66, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 68, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	65, 65, 65, 65, 65, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 65, 
	13, 66, 13, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 72, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 1, 1, 
	1, 1, 1, 1, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	1, 1, 1, 75, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	76, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 76, 
	1, 1, 1, 1, 1, 1, 1, 77, 
	1, 1, 1, 1, 1, 1, 1, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 1, 1, 1, 1, 1, 1, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 1, 1, 1, 78, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 79, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 79, 1, 1, 1, 1, 1, 
	1, 1, 80, 1, 81, 82, 82, 82, 
	82, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 7, 83, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 7, 7, 7, 
	7, 7, 7, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 7, 
	7, 7, 84, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 81, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 81, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	7, 7, 7, 7, 7, 7, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 7, 7, 7, 85, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 82, 82, 82, 82, 82, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 82, 13, 83, 13, 87, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 88, 
	86, 90, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 89, 92, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 92, 13, 13, 13, 
	13, 13, 13, 13, 13, 93, 13, 13, 
	94, 13, 95, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 95, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 1, 96, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 96, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 7, 7, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 7, 7, 7, 84, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 97, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 97, 25, 25, 25, 25, 25, 25, 
	25, 98, 99, 25, 25, 100, 25, 25, 
	25, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 102, 25, 25, 25, 25, 
	25, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 25, 25, 25, 
	101, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 95, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 103, 1, 1, 
	96, 1, 104, 105, 105, 105, 105, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 104, 7, 106, 7, 7, 7, 7, 
	7, 7, 107, 7, 7, 108, 7, 7, 
	7, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 7, 7, 7, 7, 7, 
	7, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 7, 7, 7, 
	109, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 110, 82, 82, 
	82, 82, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 7, 83, 7, 
	7, 7, 7, 7, 7, 111, 7, 7, 
	112, 7, 7, 7, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 7, 7, 
	7, 7, 7, 7, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	7, 7, 7, 85, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 97, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	99, 25, 25, 100, 25, 25, 25, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 25, 25, 25, 25, 25, 25, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 25, 25, 25, 113, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 89, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 1, 1, 
	1, 1, 1, 1, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	1, 1, 1, 114, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	115, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 115, 
	1, 1, 1, 1, 1, 1, 1, 116, 
	1, 1, 1, 1, 1, 1, 1, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 1, 1, 1, 1, 1, 1, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 1, 1, 1, 117, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 118, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 118, 1, 1, 1, 1, 1, 
	1, 1, 119, 1, 120, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 120, 7, 122, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 7, 7, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 7, 
	7, 7, 123, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 120, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 120, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	7, 7, 7, 7, 7, 7, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 7, 7, 7, 124, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 121, 121, 121, 121, 121, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 121, 13, 122, 13, 126, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 127, 
	125, 129, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 130, 128, 131, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 131, 13, 13, 13, 
	13, 13, 13, 13, 13, 132, 13, 13, 
	133, 13, 134, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 134, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 135, 1, 135, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 135, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	7, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 136, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 136, 25, 25, 25, 25, 25, 25, 
	25, 137, 138, 25, 25, 139, 25, 25, 
	25, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 141, 25, 25, 25, 25, 
	25, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 25, 25, 25, 
	140, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 134, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 142, 1, 1, 
	135, 1, 143, 144, 144, 144, 144, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 143, 7, 145, 7, 7, 7, 7, 
	7, 7, 146, 7, 7, 147, 7, 7, 
	7, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 7, 7, 7, 7, 7, 
	7, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 7, 7, 7, 
	148, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 149, 121, 121, 
	121, 121, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 149, 7, 122, 7, 
	7, 7, 7, 7, 7, 150, 7, 7, 
	151, 7, 7, 7, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 7, 7, 
	7, 7, 7, 7, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	7, 7, 7, 124, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	136, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 136, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	138, 25, 25, 139, 25, 25, 25, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 25, 25, 25, 25, 25, 25, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 25, 25, 25, 152, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 128, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 1, 154, 1, 155, 1, 157, 
	1, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 1, 1, 1, 1, 1, 1, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 1, 1, 1, 158, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 159, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 159, 1, 1, 1, 1, 
	1, 1, 1, 160, 1, 1, 1, 1, 
	1, 1, 1, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 1, 1, 1, 
	1, 1, 1, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 1, 
	1, 1, 161, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 162, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 162, 1, 
	1, 1, 1, 1, 1, 1, 163, 1, 
	164, 165, 165, 165, 165, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 164, 
	7, 166, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 7, 7, 7, 7, 7, 7, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 7, 7, 7, 167, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 164, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 164, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 165, 165, 
	165, 165, 165, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 165, 13, 166, 
	13, 170, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 171, 169, 173, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 174, 
	172, 175, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	175, 13, 13, 13, 13, 13, 13, 13, 
	13, 176, 13, 13, 177, 13, 178, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 178, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 179, 1, 179, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 179, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 7, 7, 7, 7, 
	7, 7, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 7, 7, 
	7, 167, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 181, 182, 25, 
	25, 183, 25, 25, 25, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 185, 
	25, 25, 25, 25, 25, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 25, 25, 25, 184, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 178, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 1, 179, 1, 187, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 187, 1, 188, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 188, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 1, 190, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 190, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 1, 190, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 190, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 1, 1, 
	1, 1, 1, 1, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	1, 1, 1, 191, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 192, 
	1, 1, 1, 1, 1, 1, 1, 193, 
	1, 1, 1, 1, 1, 1, 1, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 1, 1, 1, 1, 1, 1, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 1, 1, 1, 194, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 195, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 195, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 197, 198, 198, 198, 
	198, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 197, 7, 199, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 7, 7, 7, 
	7, 7, 7, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 7, 
	7, 7, 200, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 197, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 197, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	7, 7, 7, 7, 7, 7, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 7, 7, 7, 201, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 198, 198, 198, 198, 198, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 198, 13, 199, 13, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 204, 
	202, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 207, 205, 208, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 208, 13, 13, 13, 
	13, 13, 13, 13, 13, 209, 13, 13, 
	210, 13, 211, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 212, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 212, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	7, 7, 7, 7, 7, 7, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 7, 7, 7, 200, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 213, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 213, 25, 25, 25, 25, 25, 25, 
	25, 214, 215, 25, 25, 216, 25, 25, 
	25, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 218, 25, 25, 25, 25, 
	25, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 25, 25, 25, 
	217, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 211, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 219, 1, 1, 
	212, 1, 220, 1, 1, 221, 222, 223, 
	223, 223, 223, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 222, 7, 224, 
	7, 7, 7, 7, 7, 7, 225, 7, 
	7, 226, 7, 7, 7, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 7, 
	7, 7, 7, 7, 7, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 7, 7, 7, 227, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 228, 198, 198, 198, 198, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	228, 7, 199, 7, 7, 7, 7, 7, 
	7, 229, 7, 7, 230, 7, 7, 7, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 7, 7, 7, 7, 7, 7, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 7, 7, 7, 201, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 213, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 213, 25, 25, 25, 25, 
	25, 25, 25, 25, 215, 25, 25, 216, 
	25, 25, 25, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 25, 25, 25, 
	25, 25, 25, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 25, 
	25, 25, 231, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 205, 
	232, 233, 233, 233, 233, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 232, 
	7, 234, 7, 7, 7, 7, 7, 7, 
	235, 7, 7, 236, 7, 7, 7, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 7, 7, 7, 7, 7, 7, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 7, 7, 7, 237, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 238, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 238, 7, 166, 7, 7, 7, 
	7, 7, 7, 239, 7, 7, 240, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 25, 182, 25, 
	25, 183, 25, 25, 25, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 25, 
	25, 25, 25, 25, 25, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 25, 25, 25, 241, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 172, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 1, 1, 1, 1, 
	1, 1, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 1, 1, 
	1, 242, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 243, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 244, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 1, 1, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 1, 1, 1, 245, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 246, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	247, 1, 248, 249, 249, 249, 249, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 248, 7, 250, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 7, 7, 7, 7, 7, 
	7, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 7, 7, 7, 
	251, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 248, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 7, 7, 
	7, 7, 7, 7, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	7, 7, 7, 252, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	249, 249, 249, 249, 249, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 249, 
	13, 250, 13, 254, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 255, 253, 257, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 258, 256, 259, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 259, 13, 13, 13, 13, 13, 
	13, 13, 13, 260, 13, 13, 261, 13, 
	262, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 262, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 263, 1, 263, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 263, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 7, 7, 
	7, 7, 7, 7, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	7, 7, 7, 251, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	264, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 264, 
	25, 25, 25, 25, 25, 25, 25, 265, 
	266, 25, 25, 267, 25, 25, 25, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 269, 25, 25, 25, 25, 25, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 25, 25, 25, 268, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 262, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 262, 1, 1, 1, 1, 1, 
	1, 1, 1, 270, 1, 1, 263, 1, 
	271, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	1, 272, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	272, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 1, 
	274, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 274, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 1, 275, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 275, 1, 
	1, 1, 1, 1, 1, 1, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 1, 279, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 279, 1, 1, 1, 1, 
	1, 1, 1, 280, 1, 1, 1, 1, 
	1, 1, 1, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 1, 1, 1, 
	1, 1, 1, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 1, 
	1, 1, 281, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 282, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 1, 1, 1, 1, 283, 1, 
	284, 285, 285, 285, 285, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 284, 
	7, 286, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 7, 7, 7, 7, 7, 7, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 7, 7, 7, 287, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 284, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 284, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 7, 7, 7, 7, 
	7, 7, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 7, 7, 
	7, 288, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 285, 285, 
	285, 285, 285, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 285, 13, 286, 
	13, 290, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 291, 289, 293, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 294, 
	292, 295, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	295, 13, 13, 13, 13, 13, 13, 13, 
	13, 296, 13, 13, 297, 13, 298, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 298, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 299, 1, 299, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 299, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 7, 7, 7, 7, 
	7, 7, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 7, 7, 
	7, 287, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 300, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 300, 25, 25, 
	25, 25, 25, 25, 25, 301, 302, 25, 
	25, 303, 25, 25, 25, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 305, 
	25, 25, 25, 25, 25, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 25, 25, 25, 304, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	1, 306, 1, 1, 299, 1, 307, 308, 
	308, 308, 308, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 307, 7, 309, 
	7, 7, 7, 7, 7, 7, 310, 7, 
	7, 311, 7, 7, 7, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 7, 
	7, 7, 7, 7, 7, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 7, 7, 7, 312, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 313, 285, 285, 285, 285, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	313, 7, 286, 7, 7, 7, 7, 7, 
	7, 314, 7, 7, 315, 7, 7, 7, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 7, 7, 7, 7, 7, 7, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 7, 7, 7, 288, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 300, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 300, 25, 25, 25, 25, 
	25, 25, 25, 25, 302, 25, 25, 303, 
	25, 25, 25, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 25, 25, 25, 
	25, 25, 25, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 25, 
	25, 25, 316, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 292, 
	317, 318, 318, 318, 318, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 317, 
	7, 319, 7, 7, 7, 7, 7, 7, 
	320, 7, 7, 321, 7, 7, 7, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 7, 7, 7, 7, 7, 7, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 7, 7, 7, 322, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 323, 249, 249, 249, 249, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 323, 7, 250, 7, 7, 7, 
	7, 7, 7, 324, 7, 7, 325, 7, 
	7, 7, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 7, 7, 7, 7, 
	7, 7, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 7, 7, 
	7, 252, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 264, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 264, 25, 25, 
	25, 25, 25, 25, 25, 25, 266, 25, 
	25, 267, 25, 25, 25, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 25, 
	25, 25, 25, 25, 25, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 25, 25, 25, 326, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 256, 39, 327, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 330, 329, 331, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 52, 52, 52, 
	52, 52, 52, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 52, 
	52, 52, 332, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 1, 
	334, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	333, 333, 333, 333, 333, 333, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 333, 333, 335, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 55, 336, 13, 1, 337, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 25, 
	25, 25, 25, 25, 25, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 25, 25, 25, 338, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 337, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 340, 25, 25, 25, 25, 25, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 25, 25, 25, 339, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 341, 342, 343, 343, 343, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 341, 7, 344, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 7, 7, 7, 7, 
	7, 7, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 7, 7, 
	7, 345, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 346, 347, 
	65, 65, 65, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 346, 7, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 7, 7, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 7, 7, 7, 68, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 65, 65, 65, 65, 65, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	65, 13, 66, 13, 1, 348, 1, 1, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 1, 351, 
	350, 1, 157, 351, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 352, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 352, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 355, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 355, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 356, 1, 1, 358, 357, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 23, 0, 8, 9, 
	24, 8, 9, 24, 10, 14, 11, 10, 
	11, 0, 10, 13, 14, 11, 12, 21, 
	14, 15, 15, 16, 17, 17, 18, 152, 
	20, 154, 22, 6, 7, 14, 11, 23, 
	22, 14, 11, 23, 0, 155, 157, 0, 
	27, 28, 29, 159, 30, 29, 159, 30, 
	32, 33, 34, 163, 162, 35, 160, 36, 
	35, 160, 36, 38, 39, 40, 38, 39, 
	40, 41, 42, 43, 48, 52, 44, 45, 
	53, 44, 45, 53, 46, 167, 47, 46, 
	47, 46, 49, 167, 47, 48, 50, 167, 
	51, 42, 43, 167, 47, 52, 51, 167, 
	47, 52, 55, 56, 57, 55, 56, 57, 
	58, 59, 60, 65, 69, 61, 62, 70, 
	61, 62, 70, 63, 168, 64, 63, 64, 
	63, 66, 168, 64, 65, 67, 168, 68, 
	59, 60, 168, 64, 69, 68, 168, 64, 
	69, 170, 73, 74, 171, 173, 76, 77, 
	78, 76, 77, 78, 79, 80, 81, 86, 
	112, 82, 83, 113, 82, 83, 113, 84, 
	88, 85, 84, 85, 84, 87, 88, 85, 
	86, 110, 88, 89, 89, 90, 91, 92, 
	93, 94, 92, 93, 94, 95, 96, 97, 
	102, 108, 98, 99, 109, 98, 99, 109, 
	100, 174, 101, 100, 101, 100, 103, 174, 
	101, 102, 106, 174, 105, 177, 107, 96, 
	97, 174, 101, 108, 107, 174, 101, 108, 
	111, 80, 81, 88, 85, 112, 111, 88, 
	85, 112, 115, 116, 117, 115, 116, 117, 
	118, 119, 120, 125, 150, 121, 122, 151, 
	121, 122, 151, 123, 127, 124, 123, 124, 
	123, 126, 127, 124, 125, 148, 127, 128, 
	128, 129, 130, 130, 131, 132, 178, 133, 
	134, 132, 133, 134, 135, 136, 137, 142, 
	146, 138, 139, 147, 138, 139, 147, 140, 
	178, 141, 140, 141, 140, 143, 178, 141, 
	142, 144, 178, 145, 136, 137, 178, 141, 
	146, 145, 178, 141, 146, 149, 119, 120, 
	127, 124, 150, 149, 127, 124, 150, 153, 
	19, 154, 153, 156, 155, 0, 158, 157, 
	161, 161, 162, 163, 164, 165, 166, 33, 
	34, 162, 165, 166, 169, 170, 171, 172, 
	175, 176, 104, 175, 104, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 8, 10, 12, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 20, 21, 22, 21, 21, 0, 23, 
	0, 24, 0, 0, 25, 0, 26, 0, 
	0, 27, 29, 30, 30, 29, 29, 31, 
	32, 32, 32, 0, 34, 35, 10, 37, 
	0, 0, 14, 39, 14, 0, 40, 0, 
	0, 0, 0, 10, 10, 14, 15, 14, 
	0, 16, 0, 44, 3, 4, 0, 0, 
	5, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 51, 18, 0, 
	0, 21, 22, 54, 21, 0, 23, 55, 
	29, 30, 30, 57, 29, 31, 32, 58, 
	32, 0, 60, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 29, 
	30, 30, 29, 29, 31, 32, 32, 32, 
	0, 61, 0, 0, 27, 27, 60, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	18, 18, 0, 0, 21, 22, 21, 21, 
	0, 23, 0, 62, 0, 0, 0, 60, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	8, 10, 14, 15, 14, 0, 16, 0, 
	18, 18, 18, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 27, 29, 30, 
	30, 29, 29, 31, 32, 32, 32, 0, 
	29, 30, 30, 29, 29, 31, 32, 32, 
	32, 0, 63, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 24, 
	0, 0, 25, 0, 26, 60, 64, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	65, 18, 0, 0, 21, 22, 66, 21, 
	0, 23, 67, 29, 30, 30, 68, 29, 
	31, 32, 69, 32, 0, 29, 30, 30, 
	29, 29, 31, 32, 32, 32, 0, 70, 
	0, 0, 71, 3, 0, 75, 23, 0, 
	77, 79, 0, 0, 23, 30, 82, 30, 
	30, 31, 0, 84, 86, 0, 0, 88, 
	90, 89, 90, 0, 0, 0, 91
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 28, 28, 33, 
	13, 34, 0, 36, 38, 38, 38, 41, 
	41, 42, 43, 43, 43, 1, 45, 46, 
	47, 48, 49, 50, 50, 12, 0, 52, 
	53, 0, 56, 56, 59, 50, 1, 1, 
	0, 6, 9, 11, 13, 13, 17, 0, 
	6, 19, 0, 28, 28, 33, 13, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 28, 28, 33, 13, 28, 28, 
	33, 13, 1, 1, 0, 6, 9, 11, 
	13, 13, 17, 0, 6, 19, 0, 0, 
	0, 0, 1, 0, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	28, 28, 33, 13, 28, 28, 33, 13, 
	70, 0, 71, 72, 73, 74, 76, 0, 
	77, 0, 78, 80, 81, 83, 85, 0, 
	86, 0, 87, 88, 0, 88, 89, 89, 
	0, 91, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 152;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 25;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 26;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 27;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 37;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 54;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 72;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 75;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 114;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 35 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 37 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 55 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 61 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 27 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 62 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 25 then
		begin

    $stderr.puts 'NESTED_STATEMENT ast_relationship'
    rel_node = @buffers[:relationship]
    stmt = @buffers[:statement_stack][-1] << rel_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 26 then
		begin

    $stderr.puts 'NESTED_STATEMENT call_nested_statement'
    	begin
		stack[top] = cs
		top+= 1
		cs = 114
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 37
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 84 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 60 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_subject'
    subject_node = @buffers[:subject]
    stmt = @buffers[:statement_stack][-1] << subject_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 67 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'NESTED_STATEMENT statement_init'
    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 63 then
		begin

    $stderr.puts 'NESTED_STATEMENT inner_statement_init'
    @buffers[:statement_stack] << statement()
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 79 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 39 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 69 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 68 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 73 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 76 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 85 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 46 then
		begin
 $stderr.puts "EOF!" 		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 72 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 45 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 74 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 42 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 36 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 87 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 28 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 78 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 80 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 47 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 41, 
	47, 47, 10, 10, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 48, 122, 48, 122, 
	9, 34, 34, 92, 34, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 33, 126, 
	47, 47, 47, 47, 9, 32, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	47, 47, 10, 10, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	9, 47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 
	122, 0, 0, 0, 0, 
	10, 10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 
	122, 9, 34, 0, 0, 
	10, 10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 
	32, 9, 47, 9, 47, 
	0, 0, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 26, 59, 
	59, 36, 36, 114, 114, 36, 24, 118, 
	118, 32, 1, 1, 1, 114, 114, 114, 
	0, 75, 75, 26, 59, 59, 0, 114, 
	114, 26, 59, 59, 0, 75, 114, 32, 
	114, 114, 26, 59, 59, 36, 36, 114, 
	114, 36, 114, 114, 114, 0, 75, 114, 
	32, 114, 114, 26, 59, 59, 36, 36, 
	114, 114, 36, 114, 114, 114, 0, 94, 
	1, 1, 24, 75, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 114, 114, 0, 114, 114, 
	114, 0, 75, 114, 32, 114, 114, 26, 
	59, 59, 36, 36, 114, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	114, 114, 114, 0, 114, 114, 114, 0, 
	39, 0, 1, 113, 0, 113, 0, 0, 
	1, 0, 113, 113, 114, 114, 26, 0, 
	1, 0, 94, 1, 0, 24, 39, 39, 
	0, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 481, 
	541, 601, 638, 675, 790, 905, 942, 967, 
	1086, 1205, 1238, 1240, 1242, 1244, 1359, 1474, 
	1589, 1590, 1666, 1742, 1769, 1829, 1889, 1890, 
	2005, 2120, 2147, 2207, 2267, 2268, 2344, 2459, 
	2492, 2607, 2722, 2749, 2809, 2869, 2906, 2943, 
	3058, 3173, 3210, 3325, 3440, 3555, 3556, 3632, 
	3747, 3780, 3895, 4010, 4037, 4097, 4157, 4194, 
	4231, 4346, 4461, 4498, 4613, 4728, 4843, 4844, 
	4939, 4941, 4943, 4968, 5044, 5159, 5192, 5307, 
	5422, 5449, 5509, 5569, 5606, 5643, 5758, 5873, 
	5910, 5935, 6054, 6173, 6288, 6403, 6436, 6551, 
	6666, 6693, 6753, 6813, 6850, 6887, 7002, 7117, 
	7154, 7156, 7158, 7273, 7388, 7503, 7504, 7619, 
	7734, 7849, 7850, 7926, 8041, 8074, 8189, 8304, 
	8331, 8391, 8451, 8488, 8525, 8640, 8755, 8792, 
	8817, 8936, 9055, 9170, 9172, 9287, 9320, 9435, 
	9550, 9577, 9637, 9697, 9734, 9771, 9886, 10001, 
	10038, 10153, 10268, 10383, 10384, 10499, 10614, 10729, 
	10730, 10770, 10771, 10773, 10887, 10888, 11002, 11003, 
	11004, 11006, 11007, 11121, 11235, 11350, 11465, 11492, 
	11493, 11495, 11496, 11591, 11593, 11594, 11619, 11659, 
	11699, 11700, 11702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 7, 7, 7, 7, 7, 7, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 7, 7, 7, 11, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 7, 7, 7, 7, 
	7, 7, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 7, 7, 
	7, 12, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 9, 9, 
	9, 9, 9, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 9, 13, 10, 
	13, 15, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 16, 14, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 19, 
	17, 20, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	20, 13, 13, 13, 13, 13, 13, 13, 
	13, 21, 13, 13, 22, 13, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 24, 1, 24, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 24, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 7, 7, 7, 7, 
	7, 7, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 7, 7, 
	7, 11, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 27, 28, 25, 
	25, 29, 25, 25, 25, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 31, 
	25, 25, 25, 25, 25, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 25, 25, 25, 30, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 23, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	23, 1, 1, 1, 1, 1, 1, 1, 
	1, 32, 1, 1, 24, 1, 33, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 33, 1, 34, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 1, 36, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 36, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 1, 37, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 39, 1, 
	40, 1, 1, 41, 42, 43, 43, 43, 
	43, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 42, 7, 44, 7, 7, 
	7, 7, 7, 7, 45, 7, 7, 46, 
	7, 7, 7, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 7, 7, 7, 
	7, 7, 7, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 7, 
	7, 7, 47, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 48, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 48, 7, 
	10, 7, 7, 7, 7, 7, 7, 49, 
	7, 7, 50, 7, 7, 7, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 12, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 28, 25, 25, 29, 25, 25, 
	25, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 25, 25, 25, 25, 25, 
	25, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 25, 25, 25, 
	51, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 17, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	52, 52, 52, 52, 52, 52, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 52, 52, 52, 53, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 1, 1, 1, 1, 
	1, 1, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 1, 1, 
	1, 54, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 56, 56, 
	56, 56, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 56, 55, 57, 
	55, 59, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 60, 58, 62, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 63, 
	61, 61, 64, 65, 65, 65, 65, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 64, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 7, 7, 7, 7, 7, 
	7, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 7, 7, 7, 
	67, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 64, 65, 65, 
	65, 65, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 64, 7, 66, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 68, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	65, 65, 65, 65, 65, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 65, 
	13, 66, 13, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 72, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 1, 1, 
	1, 1, 1, 1, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	1, 1, 1, 75, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	76, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 76, 
	1, 1, 1, 1, 1, 1, 1, 77, 
	1, 1, 1, 1, 1, 1, 1, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 1, 1, 1, 1, 1, 1, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 1, 1, 1, 78, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 79, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 79, 1, 1, 1, 1, 1, 
	1, 1, 80, 1, 81, 82, 82, 82, 
	82, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 7, 83, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 7, 7, 7, 
	7, 7, 7, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 7, 
	7, 7, 84, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 81, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 81, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	7, 7, 7, 7, 7, 7, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 7, 7, 7, 85, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 82, 82, 82, 82, 82, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 82, 13, 83, 13, 87, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 88, 
	86, 90, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 89, 92, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 92, 13, 13, 13, 
	13, 13, 13, 13, 13, 93, 13, 13, 
	94, 13, 95, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 95, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 1, 96, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 96, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 7, 7, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 7, 7, 7, 84, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 97, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 97, 25, 25, 25, 25, 25, 25, 
	25, 98, 99, 25, 25, 100, 25, 25, 
	25, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 102, 25, 25, 25, 25, 
	25, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 25, 25, 25, 
	101, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 95, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 103, 1, 1, 
	96, 1, 104, 105, 105, 105, 105, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 104, 7, 106, 7, 7, 7, 7, 
	7, 7, 107, 7, 7, 108, 7, 7, 
	7, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 7, 7, 7, 7, 7, 
	7, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 7, 7, 7, 
	109, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 110, 82, 82, 
	82, 82, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 7, 83, 7, 
	7, 7, 7, 7, 7, 111, 7, 7, 
	112, 7, 7, 7, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 7, 7, 
	7, 7, 7, 7, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	7, 7, 7, 85, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 97, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	99, 25, 25, 100, 25, 25, 25, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 25, 25, 25, 25, 25, 25, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 25, 25, 25, 113, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 89, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 1, 1, 
	1, 1, 1, 1, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	1, 1, 1, 114, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	115, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 115, 
	1, 1, 1, 1, 1, 1, 1, 116, 
	1, 1, 1, 1, 1, 1, 1, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 1, 1, 1, 1, 1, 1, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 1, 1, 1, 117, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 118, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 118, 1, 1, 1, 1, 1, 
	1, 1, 119, 1, 120, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 120, 7, 122, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 7, 7, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 7, 
	7, 7, 123, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 120, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 120, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	7, 7, 7, 7, 7, 7, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 7, 7, 7, 124, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 121, 121, 121, 121, 121, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 121, 13, 122, 13, 126, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 127, 
	125, 129, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 130, 128, 131, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 131, 13, 13, 13, 
	13, 13, 13, 13, 13, 132, 13, 13, 
	133, 13, 134, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 134, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 135, 1, 135, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 135, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	7, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 136, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 136, 25, 25, 25, 25, 25, 25, 
	25, 137, 138, 25, 25, 139, 25, 25, 
	25, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 141, 25, 25, 25, 25, 
	25, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 25, 25, 25, 
	140, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 134, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 142, 1, 1, 
	135, 1, 143, 144, 144, 144, 144, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 143, 7, 145, 7, 7, 7, 7, 
	7, 7, 146, 7, 7, 147, 7, 7, 
	7, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 7, 7, 7, 7, 7, 
	7, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 7, 7, 7, 
	148, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 149, 121, 121, 
	121, 121, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 149, 7, 122, 7, 
	7, 7, 7, 7, 7, 150, 7, 7, 
	151, 7, 7, 7, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 7, 7, 
	7, 7, 7, 7, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	7, 7, 7, 124, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	136, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 136, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	138, 25, 25, 139, 25, 25, 25, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 25, 25, 25, 25, 25, 25, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 25, 25, 25, 152, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 128, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 1, 154, 1, 155, 1, 157, 
	1, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 1, 1, 1, 1, 1, 1, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 1, 1, 1, 158, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 159, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 159, 1, 1, 1, 1, 
	1, 1, 1, 160, 1, 1, 1, 1, 
	1, 1, 1, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 1, 1, 1, 
	1, 1, 1, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 1, 
	1, 1, 161, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 162, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 162, 1, 
	1, 1, 1, 1, 1, 1, 163, 1, 
	164, 165, 165, 165, 165, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 164, 
	7, 166, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 7, 7, 7, 7, 7, 7, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 7, 7, 7, 167, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 164, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 164, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 165, 165, 
	165, 165, 165, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 165, 13, 166, 
	13, 170, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 171, 169, 173, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 174, 
	172, 175, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	175, 13, 13, 13, 13, 13, 13, 13, 
	13, 176, 13, 13, 177, 13, 178, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 178, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 179, 1, 179, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 179, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 7, 7, 7, 7, 
	7, 7, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 7, 7, 
	7, 167, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 181, 182, 25, 
	25, 183, 25, 25, 25, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 185, 
	25, 25, 25, 25, 25, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 25, 25, 25, 184, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 178, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 1, 179, 1, 187, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 187, 1, 188, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 188, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 1, 190, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 190, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 1, 190, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 190, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 1, 1, 
	1, 1, 1, 1, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	1, 1, 1, 191, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 192, 
	1, 1, 1, 1, 1, 1, 1, 193, 
	1, 1, 1, 1, 1, 1, 1, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 1, 1, 1, 1, 1, 1, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 1, 1, 1, 194, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 195, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 195, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 197, 198, 198, 198, 
	198, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 197, 7, 199, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 7, 7, 7, 
	7, 7, 7, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 7, 
	7, 7, 200, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 197, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 197, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	7, 7, 7, 7, 7, 7, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 7, 7, 7, 201, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 198, 198, 198, 198, 198, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 198, 13, 199, 13, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 204, 
	202, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 207, 205, 208, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 208, 13, 13, 13, 
	13, 13, 13, 13, 13, 209, 13, 13, 
	210, 13, 211, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 212, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 212, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	7, 7, 7, 7, 7, 7, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 7, 7, 7, 200, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 213, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 213, 25, 25, 25, 25, 25, 25, 
	25, 214, 215, 25, 25, 216, 25, 25, 
	25, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 218, 25, 25, 25, 25, 
	25, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 25, 25, 25, 
	217, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 211, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 219, 1, 1, 
	212, 1, 220, 1, 1, 221, 222, 223, 
	223, 223, 223, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 222, 7, 224, 
	7, 7, 7, 7, 7, 7, 225, 7, 
	7, 226, 7, 7, 7, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 7, 
	7, 7, 7, 7, 7, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 7, 7, 7, 227, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 228, 198, 198, 198, 198, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	228, 7, 199, 7, 7, 7, 7, 7, 
	7, 229, 7, 7, 230, 7, 7, 7, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 7, 7, 7, 7, 7, 7, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 7, 7, 7, 201, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 213, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 213, 25, 25, 25, 25, 
	25, 25, 25, 25, 215, 25, 25, 216, 
	25, 25, 25, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 25, 25, 25, 
	25, 25, 25, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 25, 
	25, 25, 231, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 205, 
	232, 233, 233, 233, 233, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 232, 
	7, 234, 7, 7, 7, 7, 7, 7, 
	235, 7, 7, 236, 7, 7, 7, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 7, 7, 7, 7, 7, 7, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 7, 7, 7, 237, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 238, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 238, 7, 166, 7, 7, 7, 
	7, 7, 7, 239, 7, 7, 240, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 25, 182, 25, 
	25, 183, 25, 25, 25, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 25, 
	25, 25, 25, 25, 25, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 25, 25, 25, 241, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 172, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 1, 1, 1, 1, 
	1, 1, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 1, 1, 
	1, 242, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 243, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 244, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 1, 1, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 1, 1, 1, 245, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 246, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	247, 1, 248, 249, 249, 249, 249, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 248, 7, 250, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 7, 7, 7, 7, 7, 
	7, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 7, 7, 7, 
	251, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 248, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 7, 7, 
	7, 7, 7, 7, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	7, 7, 7, 252, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	249, 249, 249, 249, 249, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 249, 
	13, 250, 13, 254, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 255, 253, 257, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 258, 256, 259, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 259, 13, 13, 13, 13, 13, 
	13, 13, 13, 260, 13, 13, 261, 13, 
	262, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 262, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 263, 1, 263, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 263, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 7, 7, 
	7, 7, 7, 7, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	7, 7, 7, 251, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	264, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 264, 
	25, 25, 25, 25, 25, 25, 25, 265, 
	266, 25, 25, 267, 25, 25, 25, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 269, 25, 25, 25, 25, 25, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 25, 25, 25, 268, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 262, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 262, 1, 1, 1, 1, 1, 
	1, 1, 1, 270, 1, 1, 263, 1, 
	271, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	1, 272, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	272, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 1, 
	274, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 274, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 1, 275, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 275, 1, 
	1, 1, 1, 1, 1, 1, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 1, 279, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 279, 1, 1, 1, 1, 
	1, 1, 1, 280, 1, 1, 1, 1, 
	1, 1, 1, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 1, 1, 1, 
	1, 1, 1, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 1, 
	1, 1, 281, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 282, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 1, 1, 1, 1, 283, 1, 
	284, 285, 285, 285, 285, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 284, 
	7, 286, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 7, 7, 7, 7, 7, 7, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 7, 7, 7, 287, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 284, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 284, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 7, 7, 7, 7, 
	7, 7, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 7, 7, 
	7, 288, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 285, 285, 
	285, 285, 285, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 285, 13, 286, 
	13, 290, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 291, 289, 293, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 294, 
	292, 295, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	295, 13, 13, 13, 13, 13, 13, 13, 
	13, 296, 13, 13, 297, 13, 298, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 298, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 299, 1, 299, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 299, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 7, 7, 7, 7, 
	7, 7, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 7, 7, 
	7, 287, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 300, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 300, 25, 25, 
	25, 25, 25, 25, 25, 301, 302, 25, 
	25, 303, 25, 25, 25, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 305, 
	25, 25, 25, 25, 25, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 25, 25, 25, 304, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	1, 306, 1, 1, 299, 1, 307, 308, 
	308, 308, 308, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 307, 7, 309, 
	7, 7, 7, 7, 7, 7, 310, 7, 
	7, 311, 7, 7, 7, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 7, 
	7, 7, 7, 7, 7, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 7, 7, 7, 312, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 313, 285, 285, 285, 285, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	313, 7, 286, 7, 7, 7, 7, 7, 
	7, 314, 7, 7, 315, 7, 7, 7, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 7, 7, 7, 7, 7, 7, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 7, 7, 7, 288, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 300, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 300, 25, 25, 25, 25, 
	25, 25, 25, 25, 302, 25, 25, 303, 
	25, 25, 25, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 25, 25, 25, 
	25, 25, 25, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 25, 
	25, 25, 316, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 292, 
	317, 318, 318, 318, 318, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 317, 
	7, 319, 7, 7, 7, 7, 7, 7, 
	320, 7, 7, 321, 7, 7, 7, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 7, 7, 7, 7, 7, 7, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 7, 7, 7, 322, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 323, 249, 249, 249, 249, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 323, 7, 250, 7, 7, 7, 
	7, 7, 7, 324, 7, 7, 325, 7, 
	7, 7, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 7, 7, 7, 7, 
	7, 7, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 7, 7, 
	7, 252, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 264, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 264, 25, 25, 
	25, 25, 25, 25, 25, 25, 266, 25, 
	25, 267, 25, 25, 25, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 25, 
	25, 25, 25, 25, 25, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 25, 25, 25, 326, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 256, 39, 327, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 330, 329, 331, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 52, 52, 52, 
	52, 52, 52, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 52, 
	52, 52, 332, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 1, 
	334, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	333, 333, 333, 333, 333, 333, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 333, 333, 335, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 55, 336, 13, 1, 337, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 25, 
	25, 25, 25, 25, 25, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 25, 25, 25, 338, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 337, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 340, 25, 25, 25, 25, 25, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 25, 25, 25, 339, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 341, 342, 343, 343, 343, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 341, 7, 344, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 7, 7, 7, 7, 
	7, 7, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 7, 7, 
	7, 345, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 346, 347, 
	65, 65, 65, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 346, 7, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 7, 7, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 7, 7, 7, 68, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 65, 65, 65, 65, 65, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	65, 13, 66, 13, 1, 348, 1, 1, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 1, 351, 
	350, 1, 157, 351, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 352, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 352, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 355, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 355, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 356, 1, 1, 358, 357, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 23, 0, 8, 9, 
	24, 8, 9, 24, 10, 14, 11, 10, 
	11, 0, 10, 13, 14, 11, 12, 21, 
	14, 15, 15, 16, 17, 17, 18, 152, 
	20, 154, 22, 6, 7, 14, 11, 23, 
	22, 14, 11, 23, 0, 155, 157, 0, 
	27, 28, 29, 159, 30, 29, 159, 30, 
	32, 33, 34, 163, 162, 35, 160, 36, 
	35, 160, 36, 38, 39, 40, 38, 39, 
	40, 41, 42, 43, 48, 52, 44, 45, 
	53, 44, 45, 53, 46, 167, 47, 46, 
	47, 46, 49, 167, 47, 48, 50, 167, 
	51, 42, 43, 167, 47, 52, 51, 167, 
	47, 52, 55, 56, 57, 55, 56, 57, 
	58, 59, 60, 65, 69, 61, 62, 70, 
	61, 62, 70, 63, 168, 64, 63, 64, 
	63, 66, 168, 64, 65, 67, 168, 68, 
	59, 60, 168, 64, 69, 68, 168, 64, 
	69, 170, 73, 74, 171, 173, 76, 77, 
	78, 76, 77, 78, 79, 80, 81, 86, 
	112, 82, 83, 113, 82, 83, 113, 84, 
	88, 85, 84, 85, 84, 87, 88, 85, 
	86, 110, 88, 89, 89, 90, 91, 92, 
	93, 94, 92, 93, 94, 95, 96, 97, 
	102, 108, 98, 99, 109, 98, 99, 109, 
	100, 174, 101, 100, 101, 100, 103, 174, 
	101, 102, 106, 174, 105, 177, 107, 96, 
	97, 174, 101, 108, 107, 174, 101, 108, 
	111, 80, 81, 88, 85, 112, 111, 88, 
	85, 112, 115, 116, 117, 115, 116, 117, 
	118, 119, 120, 125, 150, 121, 122, 151, 
	121, 122, 151, 123, 127, 124, 123, 124, 
	123, 126, 127, 124, 125, 148, 127, 128, 
	128, 129, 130, 130, 131, 132, 178, 133, 
	134, 132, 133, 134, 135, 136, 137, 142, 
	146, 138, 139, 147, 138, 139, 147, 140, 
	178, 141, 140, 141, 140, 143, 178, 141, 
	142, 144, 178, 145, 136, 137, 178, 141, 
	146, 145, 178, 141, 146, 149, 119, 120, 
	127, 124, 150, 149, 127, 124, 150, 153, 
	19, 154, 153, 156, 155, 0, 158, 157, 
	161, 161, 162, 163, 164, 165, 166, 33, 
	34, 162, 165, 166, 169, 170, 171, 172, 
	175, 176, 104, 175, 104, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 8, 10, 12, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 20, 21, 22, 21, 21, 0, 23, 
	0, 24, 0, 0, 25, 0, 26, 0, 
	0, 27, 29, 30, 30, 29, 29, 31, 
	32, 32, 32, 0, 34, 35, 10, 37, 
	0, 0, 14, 39, 14, 0, 40, 0, 
	0, 0, 0, 10, 10, 14, 15, 14, 
	0, 16, 0, 44, 3, 4, 0, 0, 
	5, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 51, 18, 0, 
	0, 21, 22, 54, 21, 0, 23, 55, 
	29, 30, 30, 57, 29, 31, 32, 58, 
	32, 0, 60, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 29, 
	30, 30, 29, 29, 31, 32, 32, 32, 
	0, 61, 0, 0, 27, 27, 60, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	18, 18, 0, 0, 21, 22, 21, 21, 
	0, 23, 0, 62, 0, 0, 0, 60, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	8, 10, 14, 15, 14, 0, 16, 0, 
	18, 18, 18, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 27, 29, 30, 
	30, 29, 29, 31, 32, 32, 32, 0, 
	29, 30, 30, 29, 29, 31, 32, 32, 
	32, 0, 63, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 24, 
	0, 0, 25, 0, 26, 60, 64, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	65, 18, 0, 0, 21, 22, 66, 21, 
	0, 23, 67, 29, 30, 30, 68, 29, 
	31, 32, 69, 32, 0, 29, 30, 30, 
	29, 29, 31, 32, 32, 32, 0, 70, 
	0, 0, 71, 3, 0, 75, 23, 0, 
	77, 79, 0, 0, 23, 30, 82, 30, 
	30, 31, 0, 84, 86, 0, 0, 88, 
	90, 89, 90, 0, 0, 0, 91
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 28, 28, 33, 
	13, 34, 0, 36, 38, 38, 38, 41, 
	41, 42, 43, 43, 43, 1, 45, 46, 
	47, 48, 49, 50, 50, 12, 0, 52, 
	53, 0, 56, 56, 59, 50, 1, 1, 
	0, 6, 9, 11, 13, 13, 17, 0, 
	6, 19, 0, 28, 28, 33, 13, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 28, 28, 33, 13, 28, 28, 
	33, 13, 1, 1, 0, 6, 9, 11, 
	13, 13, 17, 0, 6, 19, 0, 0, 
	0, 0, 1, 0, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	28, 28, 33, 13, 28, 28, 33, 13, 
	70, 0, 71, 72, 73, 74, 76, 0, 
	77, 0, 78, 80, 81, 83, 85, 0, 
	86, 0, 87, 88, 0, 88, 89, 89, 
	0, 91, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 152;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 25;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 26;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 27;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 37;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 54;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 72;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 75;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 114;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 35 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 37 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 55 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 61 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 27 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 62 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 25 then
		begin

    $stderr.puts 'NESTED_STATEMENT ast_relationship'
    rel_node = @buffers[:relationship]
    stmt = @buffers[:statement_stack][-1] << rel_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 26 then
		begin

    $stderr.puts 'NESTED_STATEMENT call_nested_statement'
    	begin
		stack[top] = cs
		top+= 1
		cs = 114
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 37
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 84 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 60 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_subject'
    subject_node = @buffers[:subject]
    stmt = @buffers[:statement_stack][-1] << subject_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 67 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'NESTED_STATEMENT statement_init'
    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 63 then
		begin

    $stderr.puts 'NESTED_STATEMENT inner_statement_init'
    @buffers[:statement_stack] << statement()
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 79 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 39 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 69 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 68 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 73 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 76 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 85 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 46 then
		begin
 $stderr.puts "EOF!" 		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 72 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 45 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 74 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 42 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 36 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 87 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 28 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 78 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 80 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 47 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 41, 
	47, 47, 10, 10, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 48, 122, 48, 122, 
	9, 34, 34, 92, 34, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 33, 126, 
	47, 47, 47, 47, 9, 32, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	47, 47, 10, 10, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	9, 47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 
	122, 0, 0, 0, 0, 
	10, 10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 
	122, 9, 34, 0, 0, 
	10, 10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 
	32, 9, 47, 9, 47, 
	0, 0, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 26, 59, 
	59, 36, 36, 114, 114, 36, 24, 118, 
	118, 32, 1, 1, 1, 114, 114, 114, 
	0, 75, 75, 26, 59, 59, 0, 114, 
	114, 26, 59, 59, 0, 75, 114, 32, 
	114, 114, 26, 59, 59, 36, 36, 114, 
	114, 36, 114, 114, 114, 0, 75, 114, 
	32, 114, 114, 26, 59, 59, 36, 36, 
	114, 114, 36, 114, 114, 114, 0, 94, 
	1, 1, 24, 75, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 114, 114, 0, 114, 114, 
	114, 0, 75, 114, 32, 114, 114, 26, 
	59, 59, 36, 36, 114, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	114, 114, 114, 0, 114, 114, 114, 0, 
	39, 0, 1, 113, 0, 113, 0, 0, 
	1, 0, 113, 113, 114, 114, 26, 0, 
	1, 0, 94, 1, 0, 24, 39, 39, 
	0, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 481, 
	541, 601, 638, 675, 790, 905, 942, 967, 
	1086, 1205, 1238, 1240, 1242, 1244, 1359, 1474, 
	1589, 1590, 1666, 1742, 1769, 1829, 1889, 1890, 
	2005, 2120, 2147, 2207, 2267, 2268, 2344, 2459, 
	2492, 2607, 2722, 2749, 2809, 2869, 2906, 2943, 
	3058, 3173, 3210, 3325, 3440, 3555, 3556, 3632, 
	3747, 3780, 3895, 4010, 4037, 4097, 4157, 4194, 
	4231, 4346, 4461, 4498, 4613, 4728, 4843, 4844, 
	4939, 4941, 4943, 4968, 5044, 5159, 5192, 5307, 
	5422, 5449, 5509, 5569, 5606, 5643, 5758, 5873, 
	5910, 5935, 6054, 6173, 6288, 6403, 6436, 6551, 
	6666, 6693, 6753, 6813, 6850, 6887, 7002, 7117, 
	7154, 7156, 7158, 7273, 7388, 7503, 7504, 7619, 
	7734, 7849, 7850, 7926, 8041, 8074, 8189, 8304, 
	8331, 8391, 8451, 8488, 8525, 8640, 8755, 8792, 
	8817, 8936, 9055, 9170, 9172, 9287, 9320, 9435, 
	9550, 9577, 9637, 9697, 9734, 9771, 9886, 10001, 
	10038, 10153, 10268, 10383, 10384, 10499, 10614, 10729, 
	10730, 10770, 10771, 10773, 10887, 10888, 11002, 11003, 
	11004, 11006, 11007, 11121, 11235, 11350, 11465, 11492, 
	11493, 11495, 11496, 11591, 11593, 11594, 11619, 11659, 
	11699, 11700, 11702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 7, 7, 7, 7, 7, 7, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 7, 7, 7, 11, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 7, 7, 7, 7, 
	7, 7, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 7, 7, 
	7, 12, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 9, 9, 
	9, 9, 9, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 9, 13, 10, 
	13, 15, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 16, 14, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 19, 
	17, 20, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	20, 13, 13, 13, 13, 13, 13, 13, 
	13, 21, 13, 13, 22, 13, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 24, 1, 24, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 24, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 7, 7, 7, 7, 
	7, 7, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 7, 7, 
	7, 11, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 27, 28, 25, 
	25, 29, 25, 25, 25, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 31, 
	25, 25, 25, 25, 25, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 25, 25, 25, 30, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 23, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	23, 1, 1, 1, 1, 1, 1, 1, 
	1, 32, 1, 1, 24, 1, 33, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 33, 1, 34, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 1, 36, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 36, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 1, 37, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 39, 1, 
	40, 1, 1, 41, 42, 43, 43, 43, 
	43, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 42, 7, 44, 7, 7, 
	7, 7, 7, 7, 45, 7, 7, 46, 
	7, 7, 7, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 7, 7, 7, 
	7, 7, 7, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 7, 
	7, 7, 47, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 48, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 48, 7, 
	10, 7, 7, 7, 7, 7, 7, 49, 
	7, 7, 50, 7, 7, 7, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 12, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 28, 25, 25, 29, 25, 25, 
	25, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 25, 25, 25, 25, 25, 
	25, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 25, 25, 25, 
	51, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 17, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	52, 52, 52, 52, 52, 52, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 52, 52, 52, 53, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 1, 1, 1, 1, 
	1, 1, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 1, 1, 
	1, 54, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 56, 56, 
	56, 56, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 56, 55, 57, 
	55, 59, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 60, 58, 62, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 63, 
	61, 61, 64, 65, 65, 65, 65, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 64, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 7, 7, 7, 7, 7, 
	7, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 7, 7, 7, 
	67, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 64, 65, 65, 
	65, 65, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 64, 7, 66, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 68, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	65, 65, 65, 65, 65, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 65, 
	13, 66, 13, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 72, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 1, 1, 
	1, 1, 1, 1, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	1, 1, 1, 75, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	76, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 76, 
	1, 1, 1, 1, 1, 1, 1, 77, 
	1, 1, 1, 1, 1, 1, 1, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 1, 1, 1, 1, 1, 1, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 1, 1, 1, 78, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 79, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 79, 1, 1, 1, 1, 1, 
	1, 1, 80, 1, 81, 82, 82, 82, 
	82, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 7, 83, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 7, 7, 7, 
	7, 7, 7, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 7, 
	7, 7, 84, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 81, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 81, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	7, 7, 7, 7, 7, 7, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 7, 7, 7, 85, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 82, 82, 82, 82, 82, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 82, 13, 83, 13, 87, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 88, 
	86, 90, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 89, 92, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 92, 13, 13, 13, 
	13, 13, 13, 13, 13, 93, 13, 13, 
	94, 13, 95, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 95, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 1, 96, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 96, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 7, 7, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 7, 7, 7, 84, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 97, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 97, 25, 25, 25, 25, 25, 25, 
	25, 98, 99, 25, 25, 100, 25, 25, 
	25, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 102, 25, 25, 25, 25, 
	25, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 25, 25, 25, 
	101, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 95, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 103, 1, 1, 
	96, 1, 104, 105, 105, 105, 105, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 104, 7, 106, 7, 7, 7, 7, 
	7, 7, 107, 7, 7, 108, 7, 7, 
	7, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 7, 7, 7, 7, 7, 
	7, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 7, 7, 7, 
	109, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 110, 82, 82, 
	82, 82, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 7, 83, 7, 
	7, 7, 7, 7, 7, 111, 7, 7, 
	112, 7, 7, 7, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 7, 7, 
	7, 7, 7, 7, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	7, 7, 7, 85, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 97, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	99, 25, 25, 100, 25, 25, 25, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 25, 25, 25, 25, 25, 25, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 25, 25, 25, 113, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 89, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 1, 1, 
	1, 1, 1, 1, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	1, 1, 1, 114, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	115, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 115, 
	1, 1, 1, 1, 1, 1, 1, 116, 
	1, 1, 1, 1, 1, 1, 1, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 1, 1, 1, 1, 1, 1, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 1, 1, 1, 117, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 118, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 118, 1, 1, 1, 1, 1, 
	1, 1, 119, 1, 120, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 120, 7, 122, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 7, 7, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 7, 
	7, 7, 123, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 120, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 120, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	7, 7, 7, 7, 7, 7, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 7, 7, 7, 124, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 121, 121, 121, 121, 121, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 121, 13, 122, 13, 126, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 127, 
	125, 129, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 130, 128, 131, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 131, 13, 13, 13, 
	13, 13, 13, 13, 13, 132, 13, 13, 
	133, 13, 134, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 134, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 135, 1, 135, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 135, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	7, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 136, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 136, 25, 25, 25, 25, 25, 25, 
	25, 137, 138, 25, 25, 139, 25, 25, 
	25, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 141, 25, 25, 25, 25, 
	25, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 25, 25, 25, 
	140, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 134, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 142, 1, 1, 
	135, 1, 143, 144, 144, 144, 144, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 143, 7, 145, 7, 7, 7, 7, 
	7, 7, 146, 7, 7, 147, 7, 7, 
	7, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 7, 7, 7, 7, 7, 
	7, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 7, 7, 7, 
	148, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 149, 121, 121, 
	121, 121, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 149, 7, 122, 7, 
	7, 7, 7, 7, 7, 150, 7, 7, 
	151, 7, 7, 7, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 7, 7, 
	7, 7, 7, 7, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	7, 7, 7, 124, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	136, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 136, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	138, 25, 25, 139, 25, 25, 25, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 25, 25, 25, 25, 25, 25, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 25, 25, 25, 152, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 128, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 1, 154, 1, 155, 1, 157, 
	1, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 1, 1, 1, 1, 1, 1, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 1, 1, 1, 158, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 159, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 159, 1, 1, 1, 1, 
	1, 1, 1, 160, 1, 1, 1, 1, 
	1, 1, 1, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 1, 1, 1, 
	1, 1, 1, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 1, 
	1, 1, 161, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 162, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 162, 1, 
	1, 1, 1, 1, 1, 1, 163, 1, 
	164, 165, 165, 165, 165, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 164, 
	7, 166, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 7, 7, 7, 7, 7, 7, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 7, 7, 7, 167, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 164, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 164, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 165, 165, 
	165, 165, 165, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 165, 13, 166, 
	13, 170, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 171, 169, 173, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 174, 
	172, 175, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	175, 13, 13, 13, 13, 13, 13, 13, 
	13, 176, 13, 13, 177, 13, 178, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 178, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 179, 1, 179, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 179, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 7, 7, 7, 7, 
	7, 7, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 7, 7, 
	7, 167, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 181, 182, 25, 
	25, 183, 25, 25, 25, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 185, 
	25, 25, 25, 25, 25, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 25, 25, 25, 184, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 178, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 1, 179, 1, 187, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 187, 1, 188, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 188, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 1, 190, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 190, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 1, 190, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 190, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 1, 1, 
	1, 1, 1, 1, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	1, 1, 1, 191, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 192, 
	1, 1, 1, 1, 1, 1, 1, 193, 
	1, 1, 1, 1, 1, 1, 1, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 1, 1, 1, 1, 1, 1, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 1, 1, 1, 194, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 195, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 195, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 197, 198, 198, 198, 
	198, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 197, 7, 199, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 7, 7, 7, 
	7, 7, 7, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 7, 
	7, 7, 200, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 197, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 197, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	7, 7, 7, 7, 7, 7, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 7, 7, 7, 201, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 198, 198, 198, 198, 198, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 198, 13, 199, 13, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 204, 
	202, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 207, 205, 208, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 208, 13, 13, 13, 
	13, 13, 13, 13, 13, 209, 13, 13, 
	210, 13, 211, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 212, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 212, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	7, 7, 7, 7, 7, 7, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 7, 7, 7, 200, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 213, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 213, 25, 25, 25, 25, 25, 25, 
	25, 214, 215, 25, 25, 216, 25, 25, 
	25, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 218, 25, 25, 25, 25, 
	25, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 25, 25, 25, 
	217, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 211, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 219, 1, 1, 
	212, 1, 220, 1, 1, 221, 222, 223, 
	223, 223, 223, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 222, 7, 224, 
	7, 7, 7, 7, 7, 7, 225, 7, 
	7, 226, 7, 7, 7, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 7, 
	7, 7, 7, 7, 7, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 7, 7, 7, 227, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 228, 198, 198, 198, 198, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	228, 7, 199, 7, 7, 7, 7, 7, 
	7, 229, 7, 7, 230, 7, 7, 7, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 7, 7, 7, 7, 7, 7, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 7, 7, 7, 201, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 213, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 213, 25, 25, 25, 25, 
	25, 25, 25, 25, 215, 25, 25, 216, 
	25, 25, 25, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 25, 25, 25, 
	25, 25, 25, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 25, 
	25, 25, 231, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 205, 
	232, 233, 233, 233, 233, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 232, 
	7, 234, 7, 7, 7, 7, 7, 7, 
	235, 7, 7, 236, 7, 7, 7, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 7, 7, 7, 7, 7, 7, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 7, 7, 7, 237, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 238, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 238, 7, 166, 7, 7, 7, 
	7, 7, 7, 239, 7, 7, 240, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 25, 182, 25, 
	25, 183, 25, 25, 25, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 25, 
	25, 25, 25, 25, 25, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 25, 25, 25, 241, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 172, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 1, 1, 1, 1, 
	1, 1, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 1, 1, 
	1, 242, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 243, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 244, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 1, 1, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 1, 1, 1, 245, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 246, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	247, 1, 248, 249, 249, 249, 249, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 248, 7, 250, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 7, 7, 7, 7, 7, 
	7, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 7, 7, 7, 
	251, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 248, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 7, 7, 
	7, 7, 7, 7, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	7, 7, 7, 252, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	249, 249, 249, 249, 249, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 249, 
	13, 250, 13, 254, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 255, 253, 257, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 258, 256, 259, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 259, 13, 13, 13, 13, 13, 
	13, 13, 13, 260, 13, 13, 261, 13, 
	262, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 262, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 263, 1, 263, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 263, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 7, 7, 
	7, 7, 7, 7, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	7, 7, 7, 251, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	264, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 264, 
	25, 25, 25, 25, 25, 25, 25, 265, 
	266, 25, 25, 267, 25, 25, 25, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 269, 25, 25, 25, 25, 25, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 25, 25, 25, 268, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 262, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 262, 1, 1, 1, 1, 1, 
	1, 1, 1, 270, 1, 1, 263, 1, 
	271, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	1, 272, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	272, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 1, 
	274, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 274, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 1, 275, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 275, 1, 
	1, 1, 1, 1, 1, 1, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 1, 279, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 279, 1, 1, 1, 1, 
	1, 1, 1, 280, 1, 1, 1, 1, 
	1, 1, 1, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 1, 1, 1, 
	1, 1, 1, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 1, 
	1, 1, 281, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 282, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 1, 1, 1, 1, 283, 1, 
	284, 285, 285, 285, 285, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 284, 
	7, 286, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 7, 7, 7, 7, 7, 7, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 7, 7, 7, 287, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 284, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 284, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 7, 7, 7, 7, 
	7, 7, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 7, 7, 
	7, 288, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 285, 285, 
	285, 285, 285, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 285, 13, 286, 
	13, 290, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 291, 289, 293, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 294, 
	292, 295, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	295, 13, 13, 13, 13, 13, 13, 13, 
	13, 296, 13, 13, 297, 13, 298, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 298, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 299, 1, 299, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 299, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 7, 7, 7, 7, 
	7, 7, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 7, 7, 
	7, 287, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 300, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 300, 25, 25, 
	25, 25, 25, 25, 25, 301, 302, 25, 
	25, 303, 25, 25, 25, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 305, 
	25, 25, 25, 25, 25, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 25, 25, 25, 304, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	1, 306, 1, 1, 299, 1, 307, 308, 
	308, 308, 308, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 307, 7, 309, 
	7, 7, 7, 7, 7, 7, 310, 7, 
	7, 311, 7, 7, 7, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 7, 
	7, 7, 7, 7, 7, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 7, 7, 7, 312, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 313, 285, 285, 285, 285, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	313, 7, 286, 7, 7, 7, 7, 7, 
	7, 314, 7, 7, 315, 7, 7, 7, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 7, 7, 7, 7, 7, 7, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 7, 7, 7, 288, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 300, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 300, 25, 25, 25, 25, 
	25, 25, 25, 25, 302, 25, 25, 303, 
	25, 25, 25, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 25, 25, 25, 
	25, 25, 25, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 25, 
	25, 25, 316, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 292, 
	317, 318, 318, 318, 318, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 317, 
	7, 319, 7, 7, 7, 7, 7, 7, 
	320, 7, 7, 321, 7, 7, 7, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 7, 7, 7, 7, 7, 7, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 7, 7, 7, 322, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 323, 249, 249, 249, 249, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 323, 7, 250, 7, 7, 7, 
	7, 7, 7, 324, 7, 7, 325, 7, 
	7, 7, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 7, 7, 7, 7, 
	7, 7, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 7, 7, 
	7, 252, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 264, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 264, 25, 25, 
	25, 25, 25, 25, 25, 25, 266, 25, 
	25, 267, 25, 25, 25, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 25, 
	25, 25, 25, 25, 25, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 25, 25, 25, 326, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 256, 39, 327, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 330, 329, 331, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 52, 52, 52, 
	52, 52, 52, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 52, 
	52, 52, 332, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 1, 
	334, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	333, 333, 333, 333, 333, 333, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 333, 333, 335, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 55, 336, 13, 1, 337, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 25, 
	25, 25, 25, 25, 25, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 25, 25, 25, 338, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 337, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 340, 25, 25, 25, 25, 25, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 25, 25, 25, 339, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 341, 342, 343, 343, 343, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 341, 7, 344, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 7, 7, 7, 7, 
	7, 7, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 7, 7, 
	7, 345, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 346, 347, 
	65, 65, 65, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 346, 7, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 7, 7, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 7, 7, 7, 68, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 65, 65, 65, 65, 65, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	65, 13, 66, 13, 1, 348, 1, 1, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 1, 351, 
	350, 1, 157, 351, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 352, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 352, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 355, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 355, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 356, 1, 1, 358, 357, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 23, 0, 8, 9, 
	24, 8, 9, 24, 10, 14, 11, 10, 
	11, 0, 10, 13, 14, 11, 12, 21, 
	14, 15, 15, 16, 17, 17, 18, 152, 
	20, 154, 22, 6, 7, 14, 11, 23, 
	22, 14, 11, 23, 0, 155, 157, 0, 
	27, 28, 29, 159, 30, 29, 159, 30, 
	32, 33, 34, 163, 162, 35, 160, 36, 
	35, 160, 36, 38, 39, 40, 38, 39, 
	40, 41, 42, 43, 48, 52, 44, 45, 
	53, 44, 45, 53, 46, 167, 47, 46, 
	47, 46, 49, 167, 47, 48, 50, 167, 
	51, 42, 43, 167, 47, 52, 51, 167, 
	47, 52, 55, 56, 57, 55, 56, 57, 
	58, 59, 60, 65, 69, 61, 62, 70, 
	61, 62, 70, 63, 168, 64, 63, 64, 
	63, 66, 168, 64, 65, 67, 168, 68, 
	59, 60, 168, 64, 69, 68, 168, 64, 
	69, 170, 73, 74, 171, 173, 76, 77, 
	78, 76, 77, 78, 79, 80, 81, 86, 
	112, 82, 83, 113, 82, 83, 113, 84, 
	88, 85, 84, 85, 84, 87, 88, 85, 
	86, 110, 88, 89, 89, 90, 91, 92, 
	93, 94, 92, 93, 94, 95, 96, 97, 
	102, 108, 98, 99, 109, 98, 99, 109, 
	100, 174, 101, 100, 101, 100, 103, 174, 
	101, 102, 106, 174, 105, 177, 107, 96, 
	97, 174, 101, 108, 107, 174, 101, 108, 
	111, 80, 81, 88, 85, 112, 111, 88, 
	85, 112, 115, 116, 117, 115, 116, 117, 
	118, 119, 120, 125, 150, 121, 122, 151, 
	121, 122, 151, 123, 127, 124, 123, 124, 
	123, 126, 127, 124, 125, 148, 127, 128, 
	128, 129, 130, 130, 131, 132, 178, 133, 
	134, 132, 133, 134, 135, 136, 137, 142, 
	146, 138, 139, 147, 138, 139, 147, 140, 
	178, 141, 140, 141, 140, 143, 178, 141, 
	142, 144, 178, 145, 136, 137, 178, 141, 
	146, 145, 178, 141, 146, 149, 119, 120, 
	127, 124, 150, 149, 127, 124, 150, 153, 
	19, 154, 153, 156, 155, 0, 158, 157, 
	161, 161, 162, 163, 164, 165, 166, 33, 
	34, 162, 165, 166, 169, 170, 171, 172, 
	175, 176, 104, 175, 104, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 8, 10, 12, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 20, 21, 22, 21, 21, 0, 23, 
	0, 24, 0, 0, 25, 0, 26, 0, 
	0, 27, 29, 30, 30, 29, 29, 31, 
	32, 32, 32, 0, 34, 35, 10, 37, 
	0, 0, 14, 39, 14, 0, 40, 0, 
	0, 0, 0, 10, 10, 14, 15, 14, 
	0, 16, 0, 44, 3, 4, 0, 0, 
	5, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 51, 18, 0, 
	0, 21, 22, 54, 21, 0, 23, 55, 
	29, 30, 30, 57, 29, 31, 32, 58, 
	32, 0, 60, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 29, 
	30, 30, 29, 29, 31, 32, 32, 32, 
	0, 61, 0, 0, 27, 27, 60, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	18, 18, 0, 0, 21, 22, 21, 21, 
	0, 23, 0, 62, 0, 0, 0, 60, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	8, 10, 14, 15, 14, 0, 16, 0, 
	18, 18, 18, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 27, 29, 30, 
	30, 29, 29, 31, 32, 32, 32, 0, 
	29, 30, 30, 29, 29, 31, 32, 32, 
	32, 0, 63, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 24, 
	0, 0, 25, 0, 26, 60, 64, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	65, 18, 0, 0, 21, 22, 66, 21, 
	0, 23, 67, 29, 30, 30, 68, 29, 
	31, 32, 69, 32, 0, 29, 30, 30, 
	29, 29, 31, 32, 32, 32, 0, 70, 
	0, 0, 71, 3, 0, 75, 23, 0, 
	77, 79, 0, 0, 23, 30, 82, 30, 
	30, 31, 0, 84, 86, 0, 0, 88, 
	90, 89, 90, 0, 0, 0, 91
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 28, 28, 33, 
	13, 34, 0, 36, 38, 38, 38, 41, 
	41, 42, 43, 43, 43, 1, 45, 46, 
	47, 48, 49, 50, 50, 12, 0, 52, 
	53, 0, 56, 56, 59, 50, 1, 1, 
	0, 6, 9, 11, 13, 13, 17, 0, 
	6, 19, 0, 28, 28, 33, 13, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 28, 28, 33, 13, 28, 28, 
	33, 13, 1, 1, 0, 6, 9, 11, 
	13, 13, 17, 0, 6, 19, 0, 0, 
	0, 0, 1, 0, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	28, 28, 33, 13, 28, 28, 33, 13, 
	70, 0, 71, 72, 73, 74, 76, 0, 
	77, 0, 78, 80, 81, 83, 85, 0, 
	86, 0, 87, 88, 0, 88, 89, 89, 
	0, 91, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 152;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 25;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 26;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 27;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 37;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 54;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 72;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 75;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 114;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 35 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 37 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 55 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 61 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 27 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 62 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 25 then
		begin

    $stderr.puts 'NESTED_STATEMENT ast_relationship'
    rel_node = @buffers[:relationship]
    stmt = @buffers[:statement_stack][-1] << rel_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 26 then
		begin

    $stderr.puts 'NESTED_STATEMENT call_nested_statement'
    	begin
		stack[top] = cs
		top+= 1
		cs = 114
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 37
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 84 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 60 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_subject'
    subject_node = @buffers[:subject]
    stmt = @buffers[:statement_stack][-1] << subject_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 67 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'NESTED_STATEMENT statement_init'
    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 63 then
		begin

    $stderr.puts 'NESTED_STATEMENT inner_statement_init'
    @buffers[:statement_stack] << statement()
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 79 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 39 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 69 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 68 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 73 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 76 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 85 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 46 then
		begin
 $stderr.puts "EOF!" 		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 72 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 45 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 74 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 42 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 36 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 87 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 28 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 78 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 80 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 47 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module NestedStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 
	122, 9, 34, 34, 92, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 40, 41, 41, 
	47, 47, 10, 10, 9, 
	122, 9, 122, 9, 122, 
	0, 0, 48, 122, 48, 122, 
	9, 34, 34, 92, 34, 
	92, 0, 0, 9, 122, 
	9, 122, 9, 34, 34, 92, 
	34, 92, 0, 0, 48, 
	122, 9, 122, 9, 40, 
	9, 122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 122, 9, 44, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 48, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 
	122, 0, 0, 33, 126, 
	47, 47, 47, 47, 9, 32, 
	48, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	47, 47, 10, 10, 9, 122, 
	9, 122, 9, 122, 0, 
	0, 9, 122, 9, 122, 
	9, 122, 0, 0, 48, 122, 
	9, 122, 9, 40, 9, 
	122, 9, 122, 9, 34, 
	34, 92, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 122, 
	41, 41, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	9, 34, 34, 92, 34, 92, 
	9, 44, 9, 44, 9, 
	122, 9, 122, 9, 44, 
	9, 122, 9, 122, 9, 122, 
	0, 0, 9, 122, 9, 
	122, 9, 122, 0, 0, 
	9, 47, 0, 0, 10, 10, 
	10, 122, 0, 0, 10, 
	122, 0, 0, 0, 0, 
	10, 10, 0, 0, 10, 122, 
	10, 122, 9, 122, 9, 
	122, 9, 34, 0, 0, 
	10, 10, 0, 0, 33, 126, 
	10, 10, 0, 0, 9, 
	32, 9, 47, 9, 47, 
	0, 0, 10, 10, 0, 0, 
	0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 75, 114, 32, 114, 114, 26, 59, 
	59, 36, 36, 114, 114, 36, 24, 118, 
	118, 32, 1, 1, 1, 114, 114, 114, 
	0, 75, 75, 26, 59, 59, 0, 114, 
	114, 26, 59, 59, 0, 75, 114, 32, 
	114, 114, 26, 59, 59, 36, 36, 114, 
	114, 36, 114, 114, 114, 0, 75, 114, 
	32, 114, 114, 26, 59, 59, 36, 36, 
	114, 114, 36, 114, 114, 114, 0, 94, 
	1, 1, 24, 75, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	24, 118, 118, 114, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	1, 1, 114, 114, 114, 0, 114, 114, 
	114, 0, 75, 114, 32, 114, 114, 26, 
	59, 59, 36, 36, 114, 114, 36, 24, 
	118, 118, 114, 1, 114, 32, 114, 114, 
	26, 59, 59, 36, 36, 114, 114, 36, 
	114, 114, 114, 0, 114, 114, 114, 0, 
	39, 0, 1, 113, 0, 113, 0, 0, 
	1, 0, 113, 113, 114, 114, 26, 0, 
	1, 0, 94, 1, 0, 24, 39, 39, 
	0, 1, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 76, 191, 224, 339, 454, 481, 
	541, 601, 638, 675, 790, 905, 942, 967, 
	1086, 1205, 1238, 1240, 1242, 1244, 1359, 1474, 
	1589, 1590, 1666, 1742, 1769, 1829, 1889, 1890, 
	2005, 2120, 2147, 2207, 2267, 2268, 2344, 2459, 
	2492, 2607, 2722, 2749, 2809, 2869, 2906, 2943, 
	3058, 3173, 3210, 3325, 3440, 3555, 3556, 3632, 
	3747, 3780, 3895, 4010, 4037, 4097, 4157, 4194, 
	4231, 4346, 4461, 4498, 4613, 4728, 4843, 4844, 
	4939, 4941, 4943, 4968, 5044, 5159, 5192, 5307, 
	5422, 5449, 5509, 5569, 5606, 5643, 5758, 5873, 
	5910, 5935, 6054, 6173, 6288, 6403, 6436, 6551, 
	6666, 6693, 6753, 6813, 6850, 6887, 7002, 7117, 
	7154, 7156, 7158, 7273, 7388, 7503, 7504, 7619, 
	7734, 7849, 7850, 7926, 8041, 8074, 8189, 8304, 
	8331, 8391, 8451, 8488, 8525, 8640, 8755, 8792, 
	8817, 8936, 9055, 9170, 9172, 9287, 9320, 9435, 
	9550, 9577, 9637, 9697, 9734, 9771, 9886, 10001, 
	10038, 10153, 10268, 10383, 10384, 10499, 10614, 10729, 
	10730, 10770, 10771, 10773, 10887, 10888, 11002, 11003, 
	11004, 11006, 11007, 11121, 11235, 11350, 11465, 11492, 
	11493, 11495, 11496, 11591, 11593, 11594, 11619, 11659, 
	11699, 11700, 11702
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 1, 1, 1, 1, 6, 1, 
	8, 9, 9, 9, 9, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 8, 
	7, 10, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 7, 7, 7, 7, 7, 7, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 7, 7, 7, 11, 7, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 7, 8, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 8, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 7, 7, 7, 7, 
	7, 7, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 7, 7, 
	7, 12, 7, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 7, 9, 9, 
	9, 9, 9, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 9, 13, 10, 
	13, 15, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 16, 14, 18, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 19, 
	17, 20, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	20, 13, 13, 13, 13, 13, 13, 13, 
	13, 21, 13, 13, 22, 13, 23, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 23, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 24, 1, 24, 9, 9, 9, 9, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 24, 7, 10, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 7, 7, 7, 7, 
	7, 7, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 7, 7, 
	7, 11, 7, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 7, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 27, 28, 25, 
	25, 29, 25, 25, 25, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 31, 
	25, 25, 25, 25, 25, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 25, 25, 25, 30, 25, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	25, 23, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	23, 1, 1, 1, 1, 1, 1, 1, 
	1, 32, 1, 1, 24, 1, 33, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 33, 1, 34, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 34, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 1, 36, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 36, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 1, 37, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 37, 1, 1, 1, 
	1, 1, 1, 1, 38, 1, 39, 1, 
	40, 1, 1, 41, 42, 43, 43, 43, 
	43, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 42, 7, 44, 7, 7, 
	7, 7, 7, 7, 45, 7, 7, 46, 
	7, 7, 7, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 7, 7, 7, 
	7, 7, 7, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 7, 
	7, 7, 47, 7, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 7, 48, 
	9, 9, 9, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 48, 7, 
	10, 7, 7, 7, 7, 7, 7, 49, 
	7, 7, 50, 7, 7, 7, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 7, 7, 7, 12, 7, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 7, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 28, 25, 25, 29, 25, 25, 
	25, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 25, 25, 25, 25, 25, 
	25, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 25, 25, 25, 
	51, 25, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 51, 
	51, 51, 51, 51, 25, 17, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	52, 52, 52, 52, 52, 52, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 52, 52, 52, 53, 52, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 52, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 1, 1, 1, 1, 
	1, 1, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 1, 1, 
	1, 54, 1, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 1, 56, 56, 
	56, 56, 56, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 56, 55, 57, 
	55, 59, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 60, 58, 62, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 63, 
	61, 61, 64, 65, 65, 65, 65, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 64, 7, 66, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 7, 7, 7, 7, 7, 
	7, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 7, 7, 7, 
	67, 7, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 7, 64, 65, 65, 
	65, 65, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 64, 7, 66, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 68, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	65, 65, 65, 65, 65, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 65, 
	13, 66, 13, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 72, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 1, 1, 
	1, 1, 1, 1, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	1, 1, 1, 75, 1, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 1, 
	76, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 76, 
	1, 1, 1, 1, 1, 1, 1, 77, 
	1, 1, 1, 1, 1, 1, 1, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 1, 1, 1, 1, 1, 1, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 1, 1, 1, 78, 1, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 1, 79, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 79, 1, 1, 1, 1, 1, 
	1, 1, 80, 1, 81, 82, 82, 82, 
	82, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 81, 7, 83, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 7, 7, 7, 
	7, 7, 7, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 7, 
	7, 7, 84, 7, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 7, 81, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 81, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	7, 7, 7, 7, 7, 7, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 7, 7, 7, 85, 7, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 7, 82, 82, 82, 82, 82, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 82, 13, 83, 13, 87, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 88, 
	86, 90, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 89, 92, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 92, 13, 13, 13, 
	13, 13, 13, 13, 13, 93, 13, 13, 
	94, 13, 95, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 95, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 96, 1, 96, 
	82, 82, 82, 82, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 96, 7, 
	83, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	7, 7, 7, 7, 7, 7, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 7, 7, 7, 84, 7, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 7, 97, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 97, 25, 25, 25, 25, 25, 25, 
	25, 98, 99, 25, 25, 100, 25, 25, 
	25, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 102, 25, 25, 25, 25, 
	25, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 25, 25, 25, 
	101, 25, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 25, 95, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 95, 1, 1, 1, 
	1, 1, 1, 1, 1, 103, 1, 1, 
	96, 1, 104, 105, 105, 105, 105, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 104, 7, 106, 7, 7, 7, 7, 
	7, 7, 107, 7, 7, 108, 7, 7, 
	7, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 7, 7, 7, 7, 7, 
	7, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 7, 7, 7, 
	109, 7, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 7, 110, 82, 82, 
	82, 82, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 110, 7, 83, 7, 
	7, 7, 7, 7, 7, 111, 7, 7, 
	112, 7, 7, 7, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 7, 7, 
	7, 7, 7, 7, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	7, 7, 7, 85, 7, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 7, 
	97, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 97, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	99, 25, 25, 100, 25, 25, 25, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 25, 25, 25, 25, 25, 25, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 25, 25, 25, 113, 25, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 25, 89, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 1, 1, 
	1, 1, 1, 1, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	1, 1, 1, 114, 1, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 1, 
	115, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 115, 
	1, 1, 1, 1, 1, 1, 1, 116, 
	1, 1, 1, 1, 1, 1, 1, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 1, 1, 1, 1, 1, 1, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 1, 1, 1, 117, 1, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 1, 118, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 118, 1, 1, 1, 1, 1, 
	1, 1, 119, 1, 120, 121, 121, 121, 
	121, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 120, 7, 122, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 7, 7, 7, 
	7, 7, 7, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 7, 
	7, 7, 123, 7, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 7, 120, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 120, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	7, 7, 7, 7, 7, 7, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 7, 7, 7, 124, 7, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 7, 121, 121, 121, 121, 121, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 121, 13, 122, 13, 126, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 127, 
	125, 129, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 130, 128, 131, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 131, 13, 13, 13, 
	13, 13, 13, 13, 13, 132, 13, 13, 
	133, 13, 134, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 134, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 135, 1, 135, 
	121, 121, 121, 121, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 135, 7, 
	122, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	7, 7, 7, 7, 7, 7, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 7, 7, 7, 123, 7, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 123, 123, 123, 123, 123, 123, 123, 
	123, 7, 136, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 136, 25, 25, 25, 25, 25, 25, 
	25, 137, 138, 25, 25, 139, 25, 25, 
	25, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 141, 25, 25, 25, 25, 
	25, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 25, 25, 25, 
	140, 25, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 140, 140, 140, 140, 
	140, 140, 140, 140, 25, 134, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 134, 1, 1, 1, 
	1, 1, 1, 1, 1, 142, 1, 1, 
	135, 1, 143, 144, 144, 144, 144, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 143, 7, 145, 7, 7, 7, 7, 
	7, 7, 146, 7, 7, 147, 7, 7, 
	7, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 7, 7, 7, 7, 7, 
	7, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 7, 7, 7, 
	148, 7, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 148, 148, 148, 148, 
	148, 148, 148, 148, 7, 149, 121, 121, 
	121, 121, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 149, 7, 122, 7, 
	7, 7, 7, 7, 7, 150, 7, 7, 
	151, 7, 7, 7, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 7, 7, 
	7, 7, 7, 7, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	7, 7, 7, 124, 7, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 7, 
	136, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 136, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	138, 25, 25, 139, 25, 25, 25, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 25, 25, 25, 25, 25, 25, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 25, 25, 25, 152, 25, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 152, 152, 152, 152, 152, 152, 
	152, 152, 25, 128, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 1, 154, 1, 155, 1, 157, 
	1, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 157, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 1, 1, 1, 1, 1, 1, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 1, 1, 1, 158, 
	1, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 1, 159, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 159, 1, 1, 1, 1, 
	1, 1, 1, 160, 1, 1, 1, 1, 
	1, 1, 1, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 1, 1, 1, 
	1, 1, 1, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 1, 
	1, 1, 161, 1, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 1, 162, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 162, 1, 
	1, 1, 1, 1, 1, 1, 163, 1, 
	164, 165, 165, 165, 165, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 164, 
	7, 166, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 7, 7, 7, 7, 7, 7, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 7, 7, 7, 167, 7, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 7, 164, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 164, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 165, 165, 
	165, 165, 165, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 165, 13, 166, 
	13, 170, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 171, 169, 173, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 174, 
	172, 175, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	175, 13, 13, 13, 13, 13, 13, 13, 
	13, 176, 13, 13, 177, 13, 178, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 178, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 179, 1, 179, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 179, 7, 166, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 7, 7, 7, 7, 
	7, 7, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 7, 7, 
	7, 167, 7, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 181, 182, 25, 
	25, 183, 25, 25, 25, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 185, 
	25, 25, 25, 25, 25, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 25, 25, 25, 184, 25, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	184, 184, 184, 184, 184, 184, 184, 184, 
	25, 178, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	178, 1, 1, 1, 1, 1, 1, 1, 
	1, 186, 1, 1, 179, 1, 187, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 187, 1, 188, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 188, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 1, 190, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 190, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 1, 190, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 190, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 1, 1, 
	1, 1, 1, 1, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	1, 1, 1, 191, 1, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 1, 
	192, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 192, 
	1, 1, 1, 1, 1, 1, 1, 193, 
	1, 1, 1, 1, 1, 1, 1, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 1, 1, 1, 1, 1, 1, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 1, 1, 1, 194, 1, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 1, 195, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 195, 1, 1, 1, 1, 1, 
	1, 1, 196, 1, 197, 198, 198, 198, 
	198, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 197, 7, 199, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 7, 7, 7, 
	7, 7, 7, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 7, 
	7, 7, 200, 7, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 7, 197, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 197, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	7, 7, 7, 7, 7, 7, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 7, 7, 7, 201, 7, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 7, 198, 198, 198, 198, 198, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 198, 13, 199, 13, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 204, 
	202, 206, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 207, 205, 208, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 208, 13, 13, 13, 
	13, 13, 13, 13, 13, 209, 13, 13, 
	210, 13, 211, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 211, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 212, 1, 212, 
	198, 198, 198, 198, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 212, 7, 
	199, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	7, 7, 7, 7, 7, 7, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 7, 7, 7, 200, 7, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 7, 213, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 213, 25, 25, 25, 25, 25, 25, 
	25, 214, 215, 25, 25, 216, 25, 25, 
	25, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 218, 25, 25, 25, 25, 
	25, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 25, 25, 25, 
	217, 25, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 25, 211, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 211, 1, 1, 1, 
	1, 1, 1, 1, 1, 219, 1, 1, 
	212, 1, 220, 1, 1, 221, 222, 223, 
	223, 223, 223, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 222, 7, 224, 
	7, 7, 7, 7, 7, 7, 225, 7, 
	7, 226, 7, 7, 7, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 7, 
	7, 7, 7, 7, 7, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 7, 7, 7, 227, 7, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	7, 228, 198, 198, 198, 198, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	228, 7, 199, 7, 7, 7, 7, 7, 
	7, 229, 7, 7, 230, 7, 7, 7, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 7, 7, 7, 7, 7, 7, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 7, 7, 7, 201, 
	7, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 7, 213, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 213, 25, 25, 25, 25, 
	25, 25, 25, 25, 215, 25, 25, 216, 
	25, 25, 25, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 25, 25, 25, 
	25, 25, 25, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 25, 
	25, 25, 231, 25, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 25, 205, 
	232, 233, 233, 233, 233, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 232, 
	7, 234, 7, 7, 7, 7, 7, 7, 
	235, 7, 7, 236, 7, 7, 7, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 7, 7, 7, 7, 7, 7, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 7, 7, 7, 237, 7, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 7, 238, 165, 165, 165, 165, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 238, 7, 166, 7, 7, 7, 
	7, 7, 7, 239, 7, 7, 240, 7, 
	7, 7, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 7, 7, 7, 7, 
	7, 7, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 7, 7, 
	7, 168, 7, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 168, 168, 168, 
	168, 168, 168, 168, 168, 7, 180, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 180, 25, 25, 
	25, 25, 25, 25, 25, 25, 182, 25, 
	25, 183, 25, 25, 25, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 25, 
	25, 25, 25, 25, 25, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 25, 25, 25, 241, 25, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	25, 172, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 1, 1, 1, 1, 
	1, 1, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 1, 1, 
	1, 242, 1, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 1, 243, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 243, 1, 1, 
	1, 1, 1, 1, 1, 244, 1, 1, 
	1, 1, 1, 1, 1, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 1, 
	1, 1, 1, 1, 1, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 1, 1, 1, 245, 1, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	1, 246, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	246, 1, 1, 1, 1, 1, 1, 1, 
	247, 1, 248, 249, 249, 249, 249, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 248, 7, 250, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 7, 7, 7, 7, 7, 
	7, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 7, 7, 7, 
	251, 7, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 7, 248, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 248, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 7, 7, 
	7, 7, 7, 7, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	7, 7, 7, 252, 7, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 7, 
	249, 249, 249, 249, 249, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 249, 
	13, 250, 13, 254, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 255, 253, 257, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 258, 256, 259, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 259, 13, 13, 13, 13, 13, 
	13, 13, 13, 260, 13, 13, 261, 13, 
	262, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 262, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 263, 1, 263, 249, 249, 
	249, 249, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 263, 7, 250, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 7, 7, 
	7, 7, 7, 7, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	7, 7, 7, 251, 7, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 7, 
	264, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 264, 
	25, 25, 25, 25, 25, 25, 25, 265, 
	266, 25, 25, 267, 25, 25, 25, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 269, 25, 25, 25, 25, 25, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 25, 25, 25, 268, 25, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 25, 262, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 262, 1, 1, 1, 1, 1, 
	1, 1, 1, 270, 1, 1, 263, 1, 
	271, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 271, 
	1, 272, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	272, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 1, 
	274, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 274, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 1, 275, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 275, 1, 
	1, 1, 1, 1, 1, 1, 276, 1, 
	1, 1, 1, 1, 1, 1, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	1, 1, 1, 1, 1, 1, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 1, 1, 1, 277, 1, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 1, 278, 1, 279, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 279, 1, 1, 1, 1, 
	1, 1, 1, 280, 1, 1, 1, 1, 
	1, 1, 1, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 1, 1, 1, 
	1, 1, 1, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 1, 
	1, 1, 281, 1, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 1, 282, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 282, 1, 
	1, 1, 1, 1, 1, 1, 283, 1, 
	284, 285, 285, 285, 285, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 284, 
	7, 286, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 7, 7, 7, 7, 7, 7, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 7, 7, 7, 287, 7, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 7, 284, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 284, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 7, 7, 7, 7, 
	7, 7, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 7, 7, 
	7, 288, 7, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 7, 285, 285, 
	285, 285, 285, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 285, 13, 286, 
	13, 290, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 291, 289, 293, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 294, 
	292, 295, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	295, 13, 13, 13, 13, 13, 13, 13, 
	13, 296, 13, 13, 297, 13, 298, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 298, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 299, 1, 299, 285, 285, 285, 285, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 299, 7, 286, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 7, 7, 7, 7, 
	7, 7, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 7, 7, 
	7, 287, 7, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 7, 300, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 300, 25, 25, 
	25, 25, 25, 25, 25, 301, 302, 25, 
	25, 303, 25, 25, 25, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 305, 
	25, 25, 25, 25, 25, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 25, 25, 25, 304, 25, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	25, 298, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	298, 1, 1, 1, 1, 1, 1, 1, 
	1, 306, 1, 1, 299, 1, 307, 308, 
	308, 308, 308, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 307, 7, 309, 
	7, 7, 7, 7, 7, 7, 310, 7, 
	7, 311, 7, 7, 7, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 7, 
	7, 7, 7, 7, 7, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 7, 7, 7, 312, 7, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	7, 313, 285, 285, 285, 285, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	313, 7, 286, 7, 7, 7, 7, 7, 
	7, 314, 7, 7, 315, 7, 7, 7, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 7, 7, 7, 7, 7, 7, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 7, 7, 7, 288, 
	7, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 7, 300, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 300, 25, 25, 25, 25, 
	25, 25, 25, 25, 302, 25, 25, 303, 
	25, 25, 25, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 25, 25, 25, 
	25, 25, 25, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 25, 
	25, 25, 316, 25, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 25, 292, 
	317, 318, 318, 318, 318, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 317, 
	7, 319, 7, 7, 7, 7, 7, 7, 
	320, 7, 7, 321, 7, 7, 7, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 7, 7, 7, 7, 7, 7, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 7, 7, 7, 322, 7, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 7, 323, 249, 249, 249, 249, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 323, 7, 250, 7, 7, 7, 
	7, 7, 7, 324, 7, 7, 325, 7, 
	7, 7, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 7, 7, 7, 7, 
	7, 7, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 7, 7, 
	7, 252, 7, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 7, 264, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 264, 25, 25, 
	25, 25, 25, 25, 25, 25, 266, 25, 
	25, 267, 25, 25, 25, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 25, 
	25, 25, 25, 25, 25, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 25, 25, 25, 326, 25, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	25, 256, 39, 327, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 39, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	328, 1, 1, 330, 329, 331, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 52, 52, 52, 
	52, 52, 52, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 52, 
	52, 52, 332, 52, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 52, 1, 
	334, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	333, 333, 333, 333, 333, 333, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 333, 333, 335, 333, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 333, 333, 55, 336, 13, 1, 337, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 25, 
	25, 25, 25, 25, 25, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 25, 25, 25, 338, 25, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	25, 337, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 340, 25, 25, 25, 25, 25, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 25, 25, 25, 339, 25, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 25, 341, 342, 343, 343, 343, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 341, 7, 344, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 7, 7, 7, 7, 
	7, 7, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 7, 7, 
	7, 345, 7, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 7, 346, 347, 
	65, 65, 65, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 346, 7, 66, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 7, 
	7, 7, 7, 7, 7, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 7, 7, 7, 68, 7, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	7, 65, 65, 65, 65, 65, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	65, 13, 66, 13, 1, 348, 1, 1, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 1, 351, 
	350, 1, 157, 351, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 157, 156, 352, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 352, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 354, 1, 355, 353, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 355, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 356, 1, 1, 358, 357, 1, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	2, 0, 3, 4, 2, 3, 4, 0, 
	5, 6, 7, 12, 23, 0, 8, 9, 
	24, 8, 9, 24, 10, 14, 11, 10, 
	11, 0, 10, 13, 14, 11, 12, 21, 
	14, 15, 15, 16, 17, 17, 18, 152, 
	20, 154, 22, 6, 7, 14, 11, 23, 
	22, 14, 11, 23, 0, 155, 157, 0, 
	27, 28, 29, 159, 30, 29, 159, 30, 
	32, 33, 34, 163, 162, 35, 160, 36, 
	35, 160, 36, 38, 39, 40, 38, 39, 
	40, 41, 42, 43, 48, 52, 44, 45, 
	53, 44, 45, 53, 46, 167, 47, 46, 
	47, 46, 49, 167, 47, 48, 50, 167, 
	51, 42, 43, 167, 47, 52, 51, 167, 
	47, 52, 55, 56, 57, 55, 56, 57, 
	58, 59, 60, 65, 69, 61, 62, 70, 
	61, 62, 70, 63, 168, 64, 63, 64, 
	63, 66, 168, 64, 65, 67, 168, 68, 
	59, 60, 168, 64, 69, 68, 168, 64, 
	69, 170, 73, 74, 171, 173, 76, 77, 
	78, 76, 77, 78, 79, 80, 81, 86, 
	112, 82, 83, 113, 82, 83, 113, 84, 
	88, 85, 84, 85, 84, 87, 88, 85, 
	86, 110, 88, 89, 89, 90, 91, 92, 
	93, 94, 92, 93, 94, 95, 96, 97, 
	102, 108, 98, 99, 109, 98, 99, 109, 
	100, 174, 101, 100, 101, 100, 103, 174, 
	101, 102, 106, 174, 105, 177, 107, 96, 
	97, 174, 101, 108, 107, 174, 101, 108, 
	111, 80, 81, 88, 85, 112, 111, 88, 
	85, 112, 115, 116, 117, 115, 116, 117, 
	118, 119, 120, 125, 150, 121, 122, 151, 
	121, 122, 151, 123, 127, 124, 123, 124, 
	123, 126, 127, 124, 125, 148, 127, 128, 
	128, 129, 130, 130, 131, 132, 178, 133, 
	134, 132, 133, 134, 135, 136, 137, 142, 
	146, 138, 139, 147, 138, 139, 147, 140, 
	178, 141, 140, 141, 140, 143, 178, 141, 
	142, 144, 178, 145, 136, 137, 178, 141, 
	146, 145, 178, 141, 146, 149, 119, 120, 
	127, 124, 150, 149, 127, 124, 150, 153, 
	19, 154, 153, 156, 155, 0, 158, 157, 
	161, 161, 162, 163, 164, 165, 166, 33, 
	34, 162, 165, 166, 169, 170, 171, 172, 
	175, 176, 104, 175, 104, 177, 176
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 0, 3, 4, 0, 0, 5, 7, 
	0, 0, 0, 8, 10, 12, 14, 15, 
	14, 0, 16, 0, 18, 18, 18, 0, 
	0, 20, 21, 22, 21, 21, 0, 23, 
	0, 24, 0, 0, 25, 0, 26, 0, 
	0, 27, 29, 30, 30, 29, 29, 31, 
	32, 32, 32, 0, 34, 35, 10, 37, 
	0, 0, 14, 39, 14, 0, 40, 0, 
	0, 0, 0, 10, 10, 14, 15, 14, 
	0, 16, 0, 44, 3, 4, 0, 0, 
	5, 0, 0, 0, 8, 10, 14, 15, 
	14, 0, 16, 0, 18, 51, 18, 0, 
	0, 21, 22, 54, 21, 0, 23, 55, 
	29, 30, 30, 57, 29, 31, 32, 58, 
	32, 0, 60, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 29, 
	30, 30, 29, 29, 31, 32, 32, 32, 
	0, 61, 0, 0, 27, 27, 60, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	18, 18, 0, 0, 21, 22, 21, 21, 
	0, 23, 0, 62, 0, 0, 0, 60, 
	3, 4, 0, 0, 5, 0, 0, 0, 
	8, 10, 14, 15, 14, 0, 16, 0, 
	18, 18, 18, 0, 0, 21, 22, 21, 
	21, 0, 23, 0, 0, 27, 29, 30, 
	30, 29, 29, 31, 32, 32, 32, 0, 
	29, 30, 30, 29, 29, 31, 32, 32, 
	32, 0, 63, 3, 4, 0, 0, 5, 
	0, 0, 0, 8, 10, 14, 15, 14, 
	0, 16, 0, 18, 18, 18, 0, 0, 
	21, 22, 21, 21, 0, 23, 0, 24, 
	0, 0, 25, 0, 26, 60, 64, 3, 
	4, 0, 0, 5, 0, 0, 0, 8, 
	10, 14, 15, 14, 0, 16, 0, 18, 
	65, 18, 0, 0, 21, 22, 66, 21, 
	0, 23, 67, 29, 30, 30, 68, 29, 
	31, 32, 69, 32, 0, 29, 30, 30, 
	29, 29, 31, 32, 32, 32, 0, 70, 
	0, 0, 71, 3, 0, 75, 23, 0, 
	77, 79, 0, 0, 23, 30, 82, 30, 
	30, 31, 0, 84, 86, 0, 0, 88, 
	90, 89, 90, 0, 0, 0, 91
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 1, 0, 6, 9, 11, 13, 
	13, 17, 0, 6, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 28, 28, 33, 
	13, 34, 0, 36, 38, 38, 38, 41, 
	41, 42, 43, 43, 43, 1, 45, 46, 
	47, 48, 49, 50, 50, 12, 0, 52, 
	53, 0, 56, 56, 59, 50, 1, 1, 
	0, 6, 9, 11, 13, 13, 17, 0, 
	6, 19, 0, 28, 28, 33, 13, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 0, 1, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	0, 0, 28, 28, 33, 13, 28, 28, 
	33, 13, 1, 1, 0, 6, 9, 11, 
	13, 13, 17, 0, 6, 19, 0, 0, 
	0, 0, 1, 0, 1, 0, 6, 9, 
	11, 13, 13, 17, 0, 6, 19, 0, 
	28, 28, 33, 13, 28, 28, 33, 13, 
	70, 0, 71, 72, 73, 74, 76, 0, 
	77, 0, 78, 80, 81, 83, 85, 0, 
	86, 0, 87, 88, 0, 88, 89, 89, 
	0, 91, 0
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 152;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_function_node
end
self.bel_en_function_node = 25;
class << self
	attr_accessor :bel_en_ident_node
end
self.bel_en_ident_node = 26;
class << self
	attr_accessor :bel_en_string_node
end
self.bel_en_string_node = 27;
class << self
	attr_accessor :bel_en_parameter_node
end
self.bel_en_parameter_node = 31;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 37;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 54;
class << self
	attr_accessor :bel_en_relationship_node
end
self.bel_en_relationship_node = 71;
class << self
	attr_accessor :bel_en_comment_node
end
self.bel_en_comment_node = 72;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 75;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 114;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


      # end: ragel
          end

          def each
            @buffers    = {}
            @incomplete = {}
            eof         = :ignored
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 35 then
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 3 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 10 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 23 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
	when 20 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 75 then
		begin

    $stderr.puts 'IDENTIFIER ident_node_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 14 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 37 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
	when 30 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
	when 5 then
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 55 then
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 61 then
		begin

    $stderr.puts 'RELATIONSHIP start_relationship'
    p_start = p;
  		end
	when 27 then
		begin

    $stderr.puts 'COMMENT start_comment'
    p_start = p;
  		end
	when 62 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 90 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
	when 25 then
		begin

    $stderr.puts 'NESTED_STATEMENT ast_relationship'
    rel_node = @buffers[:relationship]
    stmt = @buffers[:statement_stack][-1] << rel_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 26 then
		begin

    $stderr.puts 'NESTED_STATEMENT call_nested_statement'
    	begin
		stack[top] = cs
		top+= 1
		cs = 114
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 4 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM term_fx'
    new_term = @buffers[:term_stack][-1] << @buffers[:function]
    @buffers[:term_stack][-1] = new_term
  		end
	when 22 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'TERM fxbt'
    function_string = @buffers[:function].identifier.string_literal
    p -= function_string.length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 37
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 7 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 16 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 84 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 32 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 31 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts 'IDENTIFIER start_identifier'
    @identifier_started = true
    id_start = p;
  		end
	when 60 then
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 44 then
		begin

    $stderr.puts 'TERM inner_term_init'
    @buffers[:term_stack] << term()
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 24 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_subject'
    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_subject'
    subject_node = @buffers[:subject]
    stmt = @buffers[:statement_stack][-1] << subject_node
    @buffers[:statement_stack][-1] = stmt
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 15 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
	when 40 then
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 18 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 58 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 82 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 29 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 67 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 2 then
		begin

    $stderr.puts 'NESTED_STATEMENT statement_init'
    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 63 then
		begin

    $stderr.puts 'NESTED_STATEMENT inner_statement_init'
    @buffers[:statement_stack] << statement()
  		end
		begin

    $stderr.puts 'TERM term_init'
    @buffers[:term_stack] = [ term() ]
  		end
		begin

    $stderr.puts 'FUNCTION start_function'
    @function_started = true
    p_start = p;
  		end
	when 79 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
	when 39 then
		begin

    $stderr.puts 'STRING start_string'
    @string_opened = true
    p_start = p
  		end
		begin

    $stderr.puts 'STRING stop_string'
    @string_closed = true
    p_end = p
  		end
		begin

    $stderr.puts 'STRING string_end'
    completed = @string_opened && @string_closed
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: true)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING yield_string'
    yield @buffers[:string]
  		end
	when 51 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 57 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 54 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'TERM fxret'
    inner_term = @buffers[:term_stack].pop
    arg_node = argument(inner_term)
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 69 then
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 65 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 68 then
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 66 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM term_argument'
    arg_node = argument(@buffers[:parameter])
    new_term = @buffers[:term_stack][-1] << arg_node
    @buffers[:term_stack][-1] = new_term
    @buffers[:parameter] = nil
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT ast_object'
    object_node = object(@buffers[:object])
    stmt = @buffers[:statement_stack][-1] << object_node
    @buffers[:statement_stack][-1] = stmt
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT fret'
    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    obj_node = object(inner_statement)
    stmt = @buffers[:statement_stack][-1] << obj_node
    @buffers[:statement_stack][-1] = stmt
    nested_stmt = nested_statement(stmt)
    nested_stmt.complete = true
    @buffers[:nested_statement] = nested_stmt
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 1 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 34 then
		begin

    $stderr.puts 'FUNCTION function_node_err'
    if @function_started
      # hit invalid char, include it in the identifier that results
      p_end = p + 1
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: false)
      @buffers[:function] = fx_node
      yield @buffers[:function]
    end
  		end
	when 73 then
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 76 then
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 12 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 85 then
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 46 then
		begin
 $stderr.puts "EOF!" 		end
	when 70 then
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 72 then
		begin

    $stderr.puts 'FUNCTION end_function'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ident_node = identifier(utf8_string(chars), complete: completed)
    fx_node = function(ident_node, complete: ident_node.complete)
    @buffers[:function] = fx_node
  		end
		begin

    $stderr.puts 'FUNCTION yield_function'
    yield @buffers[:function]
  		end
	when 45 then
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
		begin
 $stderr.puts "EOF!" 		end
	when 74 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER yield_identifier'
    yield @buffers[:ident]
  		end
	when 59 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
	when 49 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 42 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 17 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 36 then
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 86 then
		begin

    $stderr.puts 'TERM outer_term_end'
    term_stack = @buffers[:term_stack]
    term_stack.each { |term| term.complete = true }
  		end
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 71 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'NESTED_STATEMENT yield_nested_statement'
    yield @buffers[:nested_statement]
  		end
	when 89 then
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 53 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 56 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
	when 33 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 83 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 50 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 43 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 38 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    yield ast_node
  		end
		begin

    $stderr.puts 'STRING string_node_eof'
    yield @buffers[:string]
  		end
	when 11 then
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 77 then
		begin

    $stderr.puts "PARAMETER add_string_param_value"
    string_node = @buffers.delete(:string)
    value_node = value(string_node, complete: string_node.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 87 then
		begin

    $stderr.puts 'RELATIONSHIP stop_relationship'
    # It's not you, it's me. You're a p and I'm a non-protein coding r. It
    # would never work, I just can't reach you.
    p_end = p;
  		end
		begin

    $stderr.puts 'RELATIONSHIP relationship_end'
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = relationship(utf8_string(chars), complete: completed)
    @buffers[:relationship] = ast_node
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 88 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'COMMENT comment_end'
    p_end = p
    chars = data[p_start...p_end]
    completed = !chars.empty?
    ast_node = comment(utf8_string(chars), complete: completed)
    @buffers[:comment] = ast_node
  		end
		begin

    $stderr.puts 'COMMENT yield_comment'
    yield @buffers[:comment] || comment(nil)
  		end
	when 91 then
		begin

    $stderr.puts 'COMMENT stop_comment'
    p_end = p;
  		end
		begin

    $stderr.puts 'SIMPLE_STATEMENT statement_object'
    term = @buffers[:term_stack][-1]
    @buffers[:object] = object(term)
    @buffers[:term_stack] = nil
    @buffers[:comment] ||= comment(nil)
    sub = @buffers[:subject]
    rel = @buffers[:relationship]
    obj = @buffers[:object]
    comment = @buffers[:comment]
    stmt = statement(sub, rel, obj, comment)
    simple_stmt = simple_statement(stmt)
    simple_stmt.complete = true
    @buffers[:simple_statement] = simple_stmt
  		end
		begin

    $stderr.puts 'YIELD_SIMPLE_STATEMENT'
    simple_stmt = @buffers.delete(:simple_statement)
    yield simple_stmt
  		end
	when 48 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
	when 41 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_node_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    yield param_node
  		end
	when 28 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 19 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 81 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_prefix"
    ident = @buffers.delete(:ident)
    prefix_node = prefix(ident, complete: ident.complete)
    @buffers[:param_prefix] = prefix_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 13 then
		begin

    $stderr.puts 'STRING eof_string'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 78 then
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 80 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER end_identifier'
    id_end = p
    chars = data[id_start...id_end]
    completed = !chars.empty?
    ast_node = identifier(utf8_string(chars), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER add_ident_param_value"
    ident = @buffers.delete(:ident)
    value_node = value(ident, complete: ident.complete)
    @buffers[:param_value] = value_node
  		end
		begin

    $stderr.puts "PARAMETER parameter_end"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        $stderr.puts "PN incomplete"
        completed = false
      end
    end

    value_node = @buffers.delete(:param_value)
    unless value_node.nil?
      param_node <<= value_node
      unless value_node.complete
        $stderr.puts "VN incomplete"
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts "PARAMETER yield_parameter"
    yield @buffers[:parameter]
  		end
	when 52 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 9 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
	when 6 then
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'TERM eof_parameter_argument'
    @buffers[:term_stack][-1].complete = false
    yield @buffers[:term_stack][-1]
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	when 47 then
		begin
 $stderr.puts "EOF!" 		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_eof'
    if @identifier_started
      id_end = p
      chars = data[id_start...id_end]
      completed = !chars.empty?
      ast_node = identifier(utf8_string(chars), complete: completed)
      @buffers[:ident] = ast_node
    end
  		end
		begin

    $stderr.puts 'IDENTIFIER an_ident_err'
    id_end = p
    chars = data[id_start...id_end]
    ast_node = identifier(utf8_string(chars), complete: false)
    @buffers[:ident] = ast_node
  		end
		begin

    $stderr.puts 'STRING a_string_err'
    p_end = p
    chars = data[p_start...p_end]
    ast_node = string(utf8_string(chars), complete: false)
    @buffers[:string] = ast_node
  		end
		begin

    $stderr.puts "PARAMETER a_parameter_eof"
    param_node = parameter()
    completed = true
    prefix_node = @buffers.delete(:param_prefix)
    unless prefix_node.nil?
      param_node <<= prefix_node
      unless prefix_node.complete
        completed = false
      end
    end

    string_value_node = @buffers.delete(:string)
    unless string_value_node.nil?
      param_node <<= string_value_node
      unless string_value_node.complete
        completed = false
      end
    else
      completed = false
    end

    param_node.complete = completed
    @buffers[:parameter] = param_node
  		end
		begin

    $stderr.puts 'FUNCTION a_function_eof'
    if @function_started
      p_end = p
      chars = data[p_start...p_end]
      completed = !chars.empty?
      ident_node = identifier(utf8_string(chars), complete: completed)
      fx_node = function(ident_node, complete: ident_node.complete)
      @buffers[:function] = fx_node
    end
  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::NestedStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
