
# begin: ragel
=begin

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 10, 122, 
	10, 122, 10, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	122, 92, 92, 9, 122, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 44, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 122, 
	9, 122, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 32, 1, 39, 
	1, 1, 1, 114, 1, 114, 114, 113, 
	113, 25, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 114, 32, 114, 114, 
	59, 36, 36, 114, 36, 114, 1, 114, 
	114, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 1, 114, 1, 114, 114, 94, 
	117, 38, 1, 1, 1, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 24, 118, 
	118, 114, 114, 114, 59, 36, 36, 114, 
	36, 39, 39, 1, 1, 1, 114, 1, 
	114, 114, 32, 114, 1, 114, 114, 114, 
	32, 114, 114, 59, 36, 36, 114, 36, 
	24, 118, 118, 114, 114, 114, 59, 36, 
	36, 114, 36, 114, 1, 114, 114, 32, 
	114, 1, 114, 114, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 960, 962, 
	1002, 1004, 1006, 1008, 1123, 1125, 1240, 1355, 
	1469, 1583, 1609, 1669, 1671, 1673, 1788, 1903, 
	1963, 1965, 1967, 2081, 2195, 2310, 2343, 2458, 
	2573, 2633, 2670, 2707, 2822, 2859, 2974, 2976, 
	3091, 3206, 3321, 3354, 3469, 3584, 3644, 3681, 
	3718, 3833, 3870, 3872, 3987, 3989, 4104, 4219, 
	4314, 4432, 4471, 4473, 4475, 4477, 4592, 4625, 
	4740, 4855, 4915, 4952, 4989, 5104, 5141, 5166, 
	5285, 5404, 5519, 5634, 5749, 5809, 5846, 5883, 
	5998, 6035, 6075, 6115, 6117, 6119, 6121, 6236, 
	6238, 6353, 6468, 6501, 6616, 6618, 6733, 6848, 
	6963, 6996, 7111, 7226, 7286, 7323, 7360, 7475, 
	7512, 7537, 7656, 7775, 7890, 8005, 8120, 8180, 
	8217, 8254, 8369, 8406, 8521, 8523, 8638, 8753, 
	8786, 8901, 8903, 9018, 9133, 9134, 9135, 9136, 
	9137, 9138, 9139, 9140, 9141, 9142
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 33, 5, 
	5, 5, 5, 5, 5, 5, 34, 5, 
	35, 5, 35, 36, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 35, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	37, 5, 38, 5, 5, 39, 41, 40, 
	43, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 43, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	45, 42, 42, 46, 42, 42, 42, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 48, 42, 42, 42, 42, 42, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 42, 42, 42, 47, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 19, 17, 43, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 43, 42, 42, 42, 
	42, 42, 42, 42, 42, 45, 42, 42, 
	46, 42, 42, 42, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 42, 42, 
	42, 42, 42, 42, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	42, 42, 42, 49, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	50, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 0, 0, 0, 0, 0, 0, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 0, 0, 0, 52, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 53, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 0, 0, 0, 0, 0, 
	0, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 0, 0, 0, 
	54, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 0, 0, 0, 
	0, 0, 0, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 0, 
	0, 0, 56, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 58, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 59, 
	57, 61, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 62, 60, 63, 57, 62, 
	60, 65, 66, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	65, 64, 67, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 69, 64, 64, 64, 64, 64, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 64, 64, 64, 68, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 65, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 65, 70, 67, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 70, 70, 70, 
	70, 70, 70, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 70, 
	70, 70, 71, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 75, 57, 74, 72, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 77, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 79, 0, 0, 0, 0, 0, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 0, 0, 0, 78, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 80, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 80, 0, 0, 0, 0, 0, 
	0, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 0, 0, 0, 0, 
	0, 0, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 0, 0, 
	0, 82, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 83, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 83, 5, 5, 
	5, 5, 5, 5, 5, 84, 5, 85, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 7, 
	86, 7, 7, 7, 7, 7, 87, 88, 
	7, 7, 89, 7, 7, 7, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	91, 7, 7, 7, 7, 7, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 7, 7, 7, 90, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 85, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 85, 15, 86, 15, 15, 15, 15, 
	15, 15, 88, 15, 15, 89, 15, 15, 
	15, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 15, 15, 15, 15, 15, 
	15, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 15, 15, 15, 
	92, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 94, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 95, 
	93, 96, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	96, 20, 20, 20, 20, 20, 20, 20, 
	20, 97, 20, 20, 98, 20, 99, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 99, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 100, 5, 89, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 89, 7, 86, 7, 7, 7, 
	7, 7, 87, 88, 7, 7, 89, 7, 
	7, 7, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 91, 7, 7, 7, 
	7, 7, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 7, 7, 
	7, 90, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 99, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 99, 26, 26, 
	26, 26, 26, 26, 26, 26, 101, 26, 
	26, 100, 26, 102, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 102, 42, 42, 42, 42, 42, 
	42, 42, 103, 104, 42, 42, 105, 42, 
	42, 42, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 107, 42, 42, 42, 
	42, 42, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 42, 42, 
	42, 106, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 95, 93, 
	102, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 102, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	104, 42, 42, 105, 42, 42, 42, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 42, 42, 42, 42, 42, 42, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 42, 42, 42, 108, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 109, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 109, 0, 0, 0, 0, 0, 
	0, 0, 110, 0, 0, 0, 0, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 112, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	0, 0, 0, 0, 0, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 0, 
	0, 0, 0, 0, 0, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 0, 0, 0, 114, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 115, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	115, 5, 5, 5, 5, 5, 5, 5, 
	116, 5, 117, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 118, 7, 7, 7, 7, 
	7, 119, 120, 7, 7, 121, 7, 7, 
	7, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 123, 7, 7, 7, 7, 
	7, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 7, 7, 7, 
	122, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 117, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 117, 15, 118, 15, 
	15, 15, 15, 15, 15, 120, 15, 15, 
	121, 15, 15, 15, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 15, 15, 
	15, 15, 15, 15, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	15, 15, 15, 124, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	126, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 127, 125, 128, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 128, 20, 20, 20, 20, 
	20, 20, 20, 20, 129, 20, 20, 130, 
	20, 131, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	131, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 132, 5, 121, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 121, 7, 118, 
	7, 7, 7, 7, 7, 119, 120, 7, 
	7, 121, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 123, 
	7, 7, 7, 7, 7, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 7, 7, 7, 122, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 131, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	131, 26, 26, 26, 26, 26, 26, 26, 
	26, 133, 26, 26, 132, 26, 134, 26, 
	135, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 135, 
	42, 42, 42, 42, 42, 42, 42, 136, 
	137, 42, 42, 138, 42, 42, 42, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 140, 42, 42, 42, 42, 42, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 42, 42, 42, 139, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 127, 125, 135, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 135, 42, 42, 42, 
	42, 42, 42, 42, 42, 137, 42, 42, 
	138, 42, 42, 42, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 42, 42, 
	42, 42, 42, 42, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	42, 42, 42, 141, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	142, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 142, 
	0, 0, 0, 0, 0, 0, 0, 143, 
	0, 0, 0, 0, 0, 0, 0, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 0, 0, 0, 0, 0, 0, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 0, 0, 0, 144, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 5, 146, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 149, 5, 150, 
	5, 5, 151, 153, 152, 154, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 154, 0, 0, 0, 
	0, 0, 0, 0, 155, 0, 0, 0, 
	0, 0, 0, 0, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 0, 0, 
	0, 0, 0, 0, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	0, 0, 0, 156, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	157, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 157, 
	5, 5, 5, 5, 5, 5, 5, 158, 
	5, 159, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	159, 7, 160, 7, 7, 7, 7, 7, 
	161, 162, 7, 7, 163, 7, 7, 7, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 165, 7, 7, 7, 7, 7, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 7, 7, 7, 164, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 159, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 159, 15, 160, 15, 15, 
	15, 15, 15, 15, 162, 15, 15, 163, 
	15, 15, 15, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 15, 15, 15, 
	15, 15, 15, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 15, 
	15, 15, 166, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 168, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 169, 167, 170, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 170, 20, 20, 20, 20, 20, 
	20, 20, 20, 171, 20, 20, 172, 20, 
	173, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 173, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 174, 5, 163, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 163, 7, 160, 7, 
	7, 7, 7, 7, 161, 162, 7, 7, 
	163, 7, 7, 7, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 165, 7, 
	7, 7, 7, 7, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	7, 7, 7, 164, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	173, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 173, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	175, 26, 26, 174, 26, 176, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 176, 26, 177, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 177, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 5, 179, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 179, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 5, 181, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 181, 0, 0, 0, 0, 
	0, 0, 0, 182, 0, 0, 0, 0, 
	0, 0, 0, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 0, 0, 0, 
	0, 0, 0, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 0, 
	0, 0, 183, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 184, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	185, 7, 7, 7, 7, 7, 186, 187, 
	7, 7, 188, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	190, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 184, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 184, 15, 185, 15, 15, 15, 15, 
	15, 15, 187, 15, 15, 188, 15, 15, 
	15, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 15, 15, 15, 15, 15, 
	15, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 15, 15, 15, 
	191, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 193, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 194, 
	192, 195, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	195, 20, 20, 20, 20, 20, 20, 20, 
	20, 196, 20, 20, 197, 20, 198, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 198, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 199, 5, 188, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 188, 7, 185, 7, 7, 7, 
	7, 7, 186, 187, 7, 7, 188, 7, 
	7, 7, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 190, 7, 7, 7, 
	7, 7, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 7, 7, 
	7, 189, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 198, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 198, 26, 26, 
	26, 26, 26, 26, 26, 26, 200, 26, 
	26, 199, 26, 201, 202, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 201, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 203, 26, 204, 205, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 204, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 206, 5, 207, 5, 5, 208, 210, 
	209, 211, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	211, 42, 42, 42, 42, 42, 42, 42, 
	212, 213, 42, 42, 214, 42, 42, 42, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 216, 42, 42, 42, 42, 42, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 42, 42, 42, 215, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 194, 192, 211, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 211, 42, 42, 
	42, 42, 42, 42, 42, 42, 213, 42, 
	42, 214, 42, 42, 42, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 42, 
	42, 42, 42, 42, 42, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 42, 42, 42, 217, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 218, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	218, 0, 0, 0, 0, 0, 0, 0, 
	219, 0, 0, 0, 0, 0, 0, 0, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 0, 0, 0, 0, 0, 0, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 0, 0, 0, 220, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 221, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 221, 5, 5, 5, 5, 
	5, 5, 5, 222, 5, 223, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 223, 42, 42, 42, 
	42, 42, 42, 42, 224, 225, 42, 42, 
	226, 42, 42, 42, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 228, 42, 
	42, 42, 42, 42, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	42, 42, 42, 227, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	169, 167, 223, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 223, 42, 42, 42, 42, 42, 42, 
	42, 42, 225, 42, 42, 226, 42, 42, 
	42, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 42, 42, 42, 42, 42, 
	42, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 42, 42, 42, 
	229, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 230, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 230, 0, 0, 0, 
	0, 0, 0, 0, 231, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 0, 0, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	0, 0, 0, 232, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	233, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 233, 
	0, 0, 0, 0, 0, 0, 0, 234, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 0, 0, 0, 235, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 236, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 236, 5, 5, 5, 5, 5, 
	5, 5, 237, 5, 238, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 238, 7, 239, 7, 7, 
	7, 7, 7, 240, 241, 7, 7, 242, 
	7, 7, 7, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 7, 7, 
	7, 7, 7, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 7, 
	7, 7, 243, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 238, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 238, 15, 
	239, 15, 15, 15, 15, 15, 15, 241, 
	15, 15, 242, 15, 15, 15, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	15, 15, 15, 15, 15, 15, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 15, 15, 15, 245, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 247, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 248, 246, 249, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 249, 20, 20, 
	20, 20, 20, 20, 20, 20, 250, 20, 
	20, 251, 20, 252, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 252, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 253, 5, 
	242, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 242, 
	7, 239, 7, 7, 7, 7, 7, 240, 
	241, 7, 7, 242, 7, 7, 7, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 244, 7, 7, 7, 7, 7, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 7, 7, 7, 243, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 252, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 252, 26, 26, 26, 26, 26, 
	26, 26, 26, 254, 26, 26, 253, 26, 
	255, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 255, 
	26, 256, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	256, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 5, 
	258, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 258, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 5, 260, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 260, 0, 
	0, 0, 0, 0, 0, 0, 261, 0, 
	0, 0, 0, 0, 0, 0, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	0, 0, 0, 0, 0, 0, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 0, 0, 0, 262, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 263, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 263, 7, 264, 7, 7, 7, 7, 
	7, 265, 266, 7, 7, 267, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 269, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 263, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 263, 15, 264, 15, 
	15, 15, 15, 15, 15, 266, 15, 15, 
	267, 15, 15, 15, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 15, 15, 
	15, 15, 15, 15, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	15, 15, 15, 270, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	272, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 273, 271, 274, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 274, 20, 20, 20, 20, 
	20, 20, 20, 20, 275, 20, 20, 276, 
	20, 277, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	277, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 278, 5, 267, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 267, 7, 264, 
	7, 7, 7, 7, 7, 265, 266, 7, 
	7, 267, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 269, 
	7, 7, 7, 7, 7, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 7, 7, 7, 268, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 277, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	277, 26, 26, 26, 26, 26, 26, 26, 
	26, 279, 26, 26, 278, 26, 280, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 280, 42, 42, 
	42, 42, 42, 42, 42, 281, 282, 42, 
	42, 283, 42, 42, 42, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 285, 
	42, 42, 42, 42, 42, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 42, 42, 42, 284, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 273, 271, 280, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 280, 42, 42, 42, 42, 42, 
	42, 42, 42, 282, 42, 42, 283, 42, 
	42, 42, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 42, 42, 42, 42, 
	42, 42, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 42, 42, 
	42, 286, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 287, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 287, 0, 0, 
	0, 0, 0, 0, 0, 288, 0, 0, 
	0, 0, 0, 0, 0, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 0, 
	0, 0, 0, 0, 0, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 0, 0, 0, 289, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 290, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	290, 5, 5, 5, 5, 5, 5, 5, 
	291, 5, 292, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 292, 42, 42, 42, 42, 42, 42, 
	42, 293, 294, 42, 42, 295, 42, 42, 
	42, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 297, 42, 42, 42, 42, 
	42, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 42, 42, 42, 
	296, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 248, 246, 292, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 292, 42, 
	42, 42, 42, 42, 42, 42, 42, 294, 
	42, 42, 295, 42, 42, 42, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	42, 42, 42, 42, 42, 42, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 42, 42, 42, 298, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 299, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 299, 0, 0, 0, 0, 0, 0, 
	0, 300, 0, 0, 0, 0, 0, 0, 
	0, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 0, 0, 0, 0, 0, 
	0, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 0, 0, 0, 
	301, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 5, 5, 5, 
	5, 26, 26, 5, 5, 5, 26, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 22, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 19, 4, 0, 
	21, 5, 6, 20, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 15, 132, 16, 17, 18, 
	18, 132, 0, 7, 9, 10, 8, 19, 
	4, 21, 2, 3, 22, 133, 24, 133, 
	24, 0, 134, 26, 26, 27, 28, 134, 
	0, 30, 135, 31, 35, 30, 0, 34, 
	31, 32, 33, 135, 135, 34, 35, 30, 
	37, 38, 48, 37, 38, 39, 40, 44, 
	136, 43, 45, 39, 47, 40, 41, 46, 
	42, 136, 43, 42, 43, 136, 42, 44, 
	136, 43, 45, 39, 47, 37, 38, 48, 
	50, 51, 62, 50, 51, 52, 53, 57, 
	58, 56, 59, 52, 61, 53, 54, 60, 
	55, 58, 56, 55, 56, 58, 137, 55, 
	57, 58, 56, 59, 52, 61, 50, 51, 
	62, 64, 138, 64, 139, 66, 67, 68, 
	68, 139, 70, 71, 102, 70, 71, 72, 
	73, 77, 78, 76, 99, 72, 101, 73, 
	74, 100, 75, 78, 76, 75, 76, 78, 
	79, 79, 80, 81, 80, 81, 82, 97, 
	83, 84, 88, 89, 87, 94, 83, 96, 
	84, 85, 95, 86, 89, 87, 86, 87, 
	89, 90, 140, 91, 90, 140, 91, 92, 
	93, 93, 140, 86, 88, 89, 87, 94, 
	83, 96, 98, 82, 97, 98, 82, 75, 
	77, 78, 76, 99, 72, 101, 70, 71, 
	102, 104, 105, 131, 104, 105, 106, 107, 
	111, 112, 110, 128, 106, 130, 107, 108, 
	129, 109, 112, 110, 109, 110, 112, 113, 
	113, 114, 115, 114, 115, 116, 126, 117, 
	118, 122, 141, 121, 123, 117, 125, 118, 
	119, 124, 120, 141, 121, 120, 121, 141, 
	120, 122, 141, 121, 123, 117, 125, 127, 
	116, 126, 127, 116, 109, 111, 112, 110, 
	128, 106, 130, 104, 105, 131
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 0, 28, 0, 29, 0, 0, 30, 
	31, 32, 34, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 42, 16, 43, 
	39, 44, 45, 10, 18, 18, 18, 46, 
	48, 0, 49, 10, 16, 13, 51, 16, 
	18, 18, 18, 52, 53, 39, 39, 38, 
	54, 55, 56, 0, 6, 9, 10, 11, 
	57, 9, 12, 13, 16, 18, 18, 18, 
	21, 58, 21, 0, 0, 59, 35, 36, 
	60, 35, 37, 38, 39, 40, 41, 37, 
	61, 62, 63, 0, 6, 9, 10, 11, 
	9, 9, 12, 13, 16, 18, 18, 18, 
	21, 21, 21, 0, 0, 0, 64, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 25, 65, 27, 66, 0, 0, 30, 
	31, 67, 61, 62, 63, 0, 6, 9, 
	10, 11, 9, 9, 12, 13, 16, 18, 
	18, 18, 21, 21, 21, 0, 0, 0, 
	68, 0, 25, 69, 27, 61, 62, 63, 
	9, 10, 11, 9, 9, 12, 13, 16, 
	18, 18, 18, 21, 21, 21, 0, 0, 
	0, 70, 71, 70, 0, 72, 0, 0, 
	30, 31, 73, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 0, 6, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 74, 75, 76, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 24, 
	0, 25, 26, 27, 61, 77, 63, 9, 
	10, 11, 78, 9, 12, 13, 16, 18, 
	18, 18, 21, 79, 21, 0, 0, 80, 
	35, 36, 81, 35, 37, 38, 39, 40, 
	41, 37, 0, 6, 35, 36, 35, 35, 
	37, 38, 39, 40, 41, 37
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 0, 0, 0, 
	0, 0, 0, 33, 17, 33, 1, 1, 
	1, 17, 17, 17, 17, 47, 50, 17, 
	17, 17, 1, 1, 1, 0, 7, 14, 
	17, 19, 0, 7, 22, 33, 17, 33, 
	1, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 33, 17, 33, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 0, 
	0, 1, 7, 14, 17, 19, 0, 7, 
	22, 22, 0, 0, 0, 0, 33, 17, 
	33, 1, 0, 33, 17, 33, 1, 1, 
	0, 7, 14, 17, 19, 0, 7, 22, 
	22, 0, 0, 1, 7, 14, 17, 19, 
	0, 7, 22, 33, 17, 33, 1, 0, 
	33, 17, 33, 1, 0, 0, 0, 0, 
	82, 82, 0, 0, 0, 82
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 132;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 44 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 59 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 31 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 66 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 68 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 70 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 72 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 28 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 37 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 43 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 46 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 51 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 30 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 73 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 32 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 71 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 42 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 38 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 45 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 80 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 53 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 60 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 63 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 61 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 54 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 5 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 81 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 79 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 3 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 74 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 4 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 75 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 49 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 57 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 82 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 47 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 33 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 50 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 10, 122, 
	10, 122, 10, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	122, 92, 92, 9, 122, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 44, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 122, 
	9, 122, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 32, 1, 39, 
	1, 1, 1, 114, 1, 114, 114, 113, 
	113, 25, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 114, 32, 114, 114, 
	59, 36, 36, 114, 36, 114, 1, 114, 
	114, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 1, 114, 1, 114, 114, 94, 
	117, 38, 1, 1, 1, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 24, 118, 
	118, 114, 114, 114, 59, 36, 36, 114, 
	36, 39, 39, 1, 1, 1, 114, 1, 
	114, 114, 32, 114, 1, 114, 114, 114, 
	32, 114, 114, 59, 36, 36, 114, 36, 
	24, 118, 118, 114, 114, 114, 59, 36, 
	36, 114, 36, 114, 1, 114, 114, 32, 
	114, 1, 114, 114, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 960, 962, 
	1002, 1004, 1006, 1008, 1123, 1125, 1240, 1355, 
	1469, 1583, 1609, 1669, 1671, 1673, 1788, 1903, 
	1963, 1965, 1967, 2081, 2195, 2310, 2343, 2458, 
	2573, 2633, 2670, 2707, 2822, 2859, 2974, 2976, 
	3091, 3206, 3321, 3354, 3469, 3584, 3644, 3681, 
	3718, 3833, 3870, 3872, 3987, 3989, 4104, 4219, 
	4314, 4432, 4471, 4473, 4475, 4477, 4592, 4625, 
	4740, 4855, 4915, 4952, 4989, 5104, 5141, 5166, 
	5285, 5404, 5519, 5634, 5749, 5809, 5846, 5883, 
	5998, 6035, 6075, 6115, 6117, 6119, 6121, 6236, 
	6238, 6353, 6468, 6501, 6616, 6618, 6733, 6848, 
	6963, 6996, 7111, 7226, 7286, 7323, 7360, 7475, 
	7512, 7537, 7656, 7775, 7890, 8005, 8120, 8180, 
	8217, 8254, 8369, 8406, 8521, 8523, 8638, 8753, 
	8786, 8901, 8903, 9018, 9133, 9134, 9135, 9136, 
	9137, 9138, 9139, 9140, 9141, 9142
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 33, 5, 
	5, 5, 5, 5, 5, 5, 34, 5, 
	35, 5, 35, 36, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 35, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	37, 5, 38, 5, 5, 39, 41, 40, 
	43, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 43, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	45, 42, 42, 46, 42, 42, 42, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 48, 42, 42, 42, 42, 42, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 42, 42, 42, 47, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 19, 17, 43, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 43, 42, 42, 42, 
	42, 42, 42, 42, 42, 45, 42, 42, 
	46, 42, 42, 42, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 42, 42, 
	42, 42, 42, 42, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	42, 42, 42, 49, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	50, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 0, 0, 0, 0, 0, 0, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 0, 0, 0, 52, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 53, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 0, 0, 0, 0, 0, 
	0, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 0, 0, 0, 
	54, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 0, 0, 0, 
	0, 0, 0, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 0, 
	0, 0, 56, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 58, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 59, 
	57, 61, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 62, 60, 63, 57, 62, 
	60, 65, 66, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	65, 64, 67, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 69, 64, 64, 64, 64, 64, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 64, 64, 64, 68, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 65, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 65, 70, 67, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 70, 70, 70, 
	70, 70, 70, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 70, 
	70, 70, 71, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 75, 57, 74, 72, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 77, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 79, 0, 0, 0, 0, 0, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 0, 0, 0, 78, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 80, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 80, 0, 0, 0, 0, 0, 
	0, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 0, 0, 0, 0, 
	0, 0, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 0, 0, 
	0, 82, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 83, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 83, 5, 5, 
	5, 5, 5, 5, 5, 84, 5, 85, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 7, 
	86, 7, 7, 7, 7, 7, 87, 88, 
	7, 7, 89, 7, 7, 7, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	91, 7, 7, 7, 7, 7, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 7, 7, 7, 90, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 85, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 85, 15, 86, 15, 15, 15, 15, 
	15, 15, 88, 15, 15, 89, 15, 15, 
	15, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 15, 15, 15, 15, 15, 
	15, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 15, 15, 15, 
	92, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 94, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 95, 
	93, 96, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	96, 20, 20, 20, 20, 20, 20, 20, 
	20, 97, 20, 20, 98, 20, 99, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 99, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 100, 5, 89, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 89, 7, 86, 7, 7, 7, 
	7, 7, 87, 88, 7, 7, 89, 7, 
	7, 7, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 91, 7, 7, 7, 
	7, 7, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 7, 7, 
	7, 90, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 99, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 99, 26, 26, 
	26, 26, 26, 26, 26, 26, 101, 26, 
	26, 100, 26, 102, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 102, 42, 42, 42, 42, 42, 
	42, 42, 103, 104, 42, 42, 105, 42, 
	42, 42, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 107, 42, 42, 42, 
	42, 42, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 42, 42, 
	42, 106, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 95, 93, 
	102, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 102, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	104, 42, 42, 105, 42, 42, 42, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 42, 42, 42, 42, 42, 42, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 42, 42, 42, 108, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 109, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 109, 0, 0, 0, 0, 0, 
	0, 0, 110, 0, 0, 0, 0, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 112, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	0, 0, 0, 0, 0, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 0, 
	0, 0, 0, 0, 0, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 0, 0, 0, 114, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 115, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	115, 5, 5, 5, 5, 5, 5, 5, 
	116, 5, 117, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 118, 7, 7, 7, 7, 
	7, 119, 120, 7, 7, 121, 7, 7, 
	7, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 123, 7, 7, 7, 7, 
	7, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 7, 7, 7, 
	122, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 117, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 117, 15, 118, 15, 
	15, 15, 15, 15, 15, 120, 15, 15, 
	121, 15, 15, 15, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 15, 15, 
	15, 15, 15, 15, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	15, 15, 15, 124, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	126, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 127, 125, 128, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 128, 20, 20, 20, 20, 
	20, 20, 20, 20, 129, 20, 20, 130, 
	20, 131, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	131, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 132, 5, 121, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 121, 7, 118, 
	7, 7, 7, 7, 7, 119, 120, 7, 
	7, 121, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 123, 
	7, 7, 7, 7, 7, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 7, 7, 7, 122, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 131, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	131, 26, 26, 26, 26, 26, 26, 26, 
	26, 133, 26, 26, 132, 26, 134, 26, 
	135, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 135, 
	42, 42, 42, 42, 42, 42, 42, 136, 
	137, 42, 42, 138, 42, 42, 42, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 140, 42, 42, 42, 42, 42, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 42, 42, 42, 139, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 127, 125, 135, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 135, 42, 42, 42, 
	42, 42, 42, 42, 42, 137, 42, 42, 
	138, 42, 42, 42, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 42, 42, 
	42, 42, 42, 42, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	42, 42, 42, 141, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	142, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 142, 
	0, 0, 0, 0, 0, 0, 0, 143, 
	0, 0, 0, 0, 0, 0, 0, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 0, 0, 0, 0, 0, 0, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 0, 0, 0, 144, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 5, 146, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 149, 5, 150, 
	5, 5, 151, 153, 152, 154, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 154, 0, 0, 0, 
	0, 0, 0, 0, 155, 0, 0, 0, 
	0, 0, 0, 0, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 0, 0, 
	0, 0, 0, 0, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	0, 0, 0, 156, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	157, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 157, 
	5, 5, 5, 5, 5, 5, 5, 158, 
	5, 159, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	159, 7, 160, 7, 7, 7, 7, 7, 
	161, 162, 7, 7, 163, 7, 7, 7, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 165, 7, 7, 7, 7, 7, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 7, 7, 7, 164, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 159, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 159, 15, 160, 15, 15, 
	15, 15, 15, 15, 162, 15, 15, 163, 
	15, 15, 15, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 15, 15, 15, 
	15, 15, 15, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 15, 
	15, 15, 166, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 168, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 169, 167, 170, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 170, 20, 20, 20, 20, 20, 
	20, 20, 20, 171, 20, 20, 172, 20, 
	173, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 173, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 174, 5, 163, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 163, 7, 160, 7, 
	7, 7, 7, 7, 161, 162, 7, 7, 
	163, 7, 7, 7, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 165, 7, 
	7, 7, 7, 7, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	7, 7, 7, 164, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	173, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 173, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	175, 26, 26, 174, 26, 176, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 176, 26, 177, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 177, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 5, 179, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 179, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 5, 181, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 181, 0, 0, 0, 0, 
	0, 0, 0, 182, 0, 0, 0, 0, 
	0, 0, 0, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 0, 0, 0, 
	0, 0, 0, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 0, 
	0, 0, 183, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 184, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	185, 7, 7, 7, 7, 7, 186, 187, 
	7, 7, 188, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	190, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 184, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 184, 15, 185, 15, 15, 15, 15, 
	15, 15, 187, 15, 15, 188, 15, 15, 
	15, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 15, 15, 15, 15, 15, 
	15, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 15, 15, 15, 
	191, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 193, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 194, 
	192, 195, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	195, 20, 20, 20, 20, 20, 20, 20, 
	20, 196, 20, 20, 197, 20, 198, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 198, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 199, 5, 188, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 188, 7, 185, 7, 7, 7, 
	7, 7, 186, 187, 7, 7, 188, 7, 
	7, 7, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 190, 7, 7, 7, 
	7, 7, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 7, 7, 
	7, 189, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 198, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 198, 26, 26, 
	26, 26, 26, 26, 26, 26, 200, 26, 
	26, 199, 26, 201, 202, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 201, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 203, 26, 204, 205, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 204, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 206, 5, 207, 5, 5, 208, 210, 
	209, 211, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	211, 42, 42, 42, 42, 42, 42, 42, 
	212, 213, 42, 42, 214, 42, 42, 42, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 216, 42, 42, 42, 42, 42, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 42, 42, 42, 215, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 194, 192, 211, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 211, 42, 42, 
	42, 42, 42, 42, 42, 42, 213, 42, 
	42, 214, 42, 42, 42, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 42, 
	42, 42, 42, 42, 42, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 42, 42, 42, 217, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 218, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	218, 0, 0, 0, 0, 0, 0, 0, 
	219, 0, 0, 0, 0, 0, 0, 0, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 0, 0, 0, 0, 0, 0, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 0, 0, 0, 220, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 221, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 221, 5, 5, 5, 5, 
	5, 5, 5, 222, 5, 223, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 223, 42, 42, 42, 
	42, 42, 42, 42, 224, 225, 42, 42, 
	226, 42, 42, 42, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 228, 42, 
	42, 42, 42, 42, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	42, 42, 42, 227, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	169, 167, 223, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 223, 42, 42, 42, 42, 42, 42, 
	42, 42, 225, 42, 42, 226, 42, 42, 
	42, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 42, 42, 42, 42, 42, 
	42, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 42, 42, 42, 
	229, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 230, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 230, 0, 0, 0, 
	0, 0, 0, 0, 231, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 0, 0, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	0, 0, 0, 232, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	233, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 233, 
	0, 0, 0, 0, 0, 0, 0, 234, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 0, 0, 0, 235, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 236, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 236, 5, 5, 5, 5, 5, 
	5, 5, 237, 5, 238, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 238, 7, 239, 7, 7, 
	7, 7, 7, 240, 241, 7, 7, 242, 
	7, 7, 7, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 7, 7, 
	7, 7, 7, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 7, 
	7, 7, 243, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 238, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 238, 15, 
	239, 15, 15, 15, 15, 15, 15, 241, 
	15, 15, 242, 15, 15, 15, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	15, 15, 15, 15, 15, 15, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 15, 15, 15, 245, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 247, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 248, 246, 249, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 249, 20, 20, 
	20, 20, 20, 20, 20, 20, 250, 20, 
	20, 251, 20, 252, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 252, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 253, 5, 
	242, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 242, 
	7, 239, 7, 7, 7, 7, 7, 240, 
	241, 7, 7, 242, 7, 7, 7, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 244, 7, 7, 7, 7, 7, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 7, 7, 7, 243, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 252, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 252, 26, 26, 26, 26, 26, 
	26, 26, 26, 254, 26, 26, 253, 26, 
	255, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 255, 
	26, 256, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	256, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 5, 
	258, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 258, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 5, 260, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 260, 0, 
	0, 0, 0, 0, 0, 0, 261, 0, 
	0, 0, 0, 0, 0, 0, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	0, 0, 0, 0, 0, 0, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 0, 0, 0, 262, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 263, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 263, 7, 264, 7, 7, 7, 7, 
	7, 265, 266, 7, 7, 267, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 269, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 263, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 263, 15, 264, 15, 
	15, 15, 15, 15, 15, 266, 15, 15, 
	267, 15, 15, 15, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 15, 15, 
	15, 15, 15, 15, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	15, 15, 15, 270, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	272, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 273, 271, 274, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 274, 20, 20, 20, 20, 
	20, 20, 20, 20, 275, 20, 20, 276, 
	20, 277, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	277, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 278, 5, 267, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 267, 7, 264, 
	7, 7, 7, 7, 7, 265, 266, 7, 
	7, 267, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 269, 
	7, 7, 7, 7, 7, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 7, 7, 7, 268, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 277, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	277, 26, 26, 26, 26, 26, 26, 26, 
	26, 279, 26, 26, 278, 26, 280, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 280, 42, 42, 
	42, 42, 42, 42, 42, 281, 282, 42, 
	42, 283, 42, 42, 42, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 285, 
	42, 42, 42, 42, 42, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 42, 42, 42, 284, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 273, 271, 280, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 280, 42, 42, 42, 42, 42, 
	42, 42, 42, 282, 42, 42, 283, 42, 
	42, 42, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 42, 42, 42, 42, 
	42, 42, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 42, 42, 
	42, 286, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 287, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 287, 0, 0, 
	0, 0, 0, 0, 0, 288, 0, 0, 
	0, 0, 0, 0, 0, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 0, 
	0, 0, 0, 0, 0, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 0, 0, 0, 289, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 290, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	290, 5, 5, 5, 5, 5, 5, 5, 
	291, 5, 292, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 292, 42, 42, 42, 42, 42, 42, 
	42, 293, 294, 42, 42, 295, 42, 42, 
	42, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 297, 42, 42, 42, 42, 
	42, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 42, 42, 42, 
	296, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 248, 246, 292, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 292, 42, 
	42, 42, 42, 42, 42, 42, 42, 294, 
	42, 42, 295, 42, 42, 42, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	42, 42, 42, 42, 42, 42, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 42, 42, 42, 298, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 299, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 299, 0, 0, 0, 0, 0, 0, 
	0, 300, 0, 0, 0, 0, 0, 0, 
	0, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 0, 0, 0, 0, 0, 
	0, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 0, 0, 0, 
	301, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 5, 5, 5, 
	5, 26, 26, 5, 5, 5, 26, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 22, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 19, 4, 0, 
	21, 5, 6, 20, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 15, 132, 16, 17, 18, 
	18, 132, 0, 7, 9, 10, 8, 19, 
	4, 21, 2, 3, 22, 133, 24, 133, 
	24, 0, 134, 26, 26, 27, 28, 134, 
	0, 30, 135, 31, 35, 30, 0, 34, 
	31, 32, 33, 135, 135, 34, 35, 30, 
	37, 38, 48, 37, 38, 39, 40, 44, 
	136, 43, 45, 39, 47, 40, 41, 46, 
	42, 136, 43, 42, 43, 136, 42, 44, 
	136, 43, 45, 39, 47, 37, 38, 48, 
	50, 51, 62, 50, 51, 52, 53, 57, 
	58, 56, 59, 52, 61, 53, 54, 60, 
	55, 58, 56, 55, 56, 58, 137, 55, 
	57, 58, 56, 59, 52, 61, 50, 51, 
	62, 64, 138, 64, 139, 66, 67, 68, 
	68, 139, 70, 71, 102, 70, 71, 72, 
	73, 77, 78, 76, 99, 72, 101, 73, 
	74, 100, 75, 78, 76, 75, 76, 78, 
	79, 79, 80, 81, 80, 81, 82, 97, 
	83, 84, 88, 89, 87, 94, 83, 96, 
	84, 85, 95, 86, 89, 87, 86, 87, 
	89, 90, 140, 91, 90, 140, 91, 92, 
	93, 93, 140, 86, 88, 89, 87, 94, 
	83, 96, 98, 82, 97, 98, 82, 75, 
	77, 78, 76, 99, 72, 101, 70, 71, 
	102, 104, 105, 131, 104, 105, 106, 107, 
	111, 112, 110, 128, 106, 130, 107, 108, 
	129, 109, 112, 110, 109, 110, 112, 113, 
	113, 114, 115, 114, 115, 116, 126, 117, 
	118, 122, 141, 121, 123, 117, 125, 118, 
	119, 124, 120, 141, 121, 120, 121, 141, 
	120, 122, 141, 121, 123, 117, 125, 127, 
	116, 126, 127, 116, 109, 111, 112, 110, 
	128, 106, 130, 104, 105, 131
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 0, 28, 0, 29, 0, 0, 30, 
	31, 32, 34, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 42, 16, 43, 
	39, 44, 45, 10, 18, 18, 18, 46, 
	48, 0, 49, 10, 16, 13, 51, 16, 
	18, 18, 18, 52, 53, 39, 39, 38, 
	54, 55, 56, 0, 6, 9, 10, 11, 
	57, 9, 12, 13, 16, 18, 18, 18, 
	21, 58, 21, 0, 0, 59, 35, 36, 
	60, 35, 37, 38, 39, 40, 41, 37, 
	61, 62, 63, 0, 6, 9, 10, 11, 
	9, 9, 12, 13, 16, 18, 18, 18, 
	21, 21, 21, 0, 0, 0, 64, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 25, 65, 27, 66, 0, 0, 30, 
	31, 67, 61, 62, 63, 0, 6, 9, 
	10, 11, 9, 9, 12, 13, 16, 18, 
	18, 18, 21, 21, 21, 0, 0, 0, 
	68, 0, 25, 69, 27, 61, 62, 63, 
	9, 10, 11, 9, 9, 12, 13, 16, 
	18, 18, 18, 21, 21, 21, 0, 0, 
	0, 70, 71, 70, 0, 72, 0, 0, 
	30, 31, 73, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 0, 6, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 74, 75, 76, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 24, 
	0, 25, 26, 27, 61, 77, 63, 9, 
	10, 11, 78, 9, 12, 13, 16, 18, 
	18, 18, 21, 79, 21, 0, 0, 80, 
	35, 36, 81, 35, 37, 38, 39, 40, 
	41, 37, 0, 6, 35, 36, 35, 35, 
	37, 38, 39, 40, 41, 37
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 0, 0, 0, 
	0, 0, 0, 33, 17, 33, 1, 1, 
	1, 17, 17, 17, 17, 47, 50, 17, 
	17, 17, 1, 1, 1, 0, 7, 14, 
	17, 19, 0, 7, 22, 33, 17, 33, 
	1, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 33, 17, 33, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 0, 
	0, 1, 7, 14, 17, 19, 0, 7, 
	22, 22, 0, 0, 0, 0, 33, 17, 
	33, 1, 0, 33, 17, 33, 1, 1, 
	0, 7, 14, 17, 19, 0, 7, 22, 
	22, 0, 0, 1, 7, 14, 17, 19, 
	0, 7, 22, 33, 17, 33, 1, 0, 
	33, 17, 33, 1, 0, 0, 0, 0, 
	82, 82, 0, 0, 0, 82
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 132;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 44 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 59 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 31 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 66 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 68 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 70 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 72 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 28 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 37 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 43 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 46 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 51 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 30 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 73 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 32 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 71 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 42 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 38 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 45 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 80 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 53 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 60 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 63 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 61 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 54 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 5 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 81 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 79 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 3 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 74 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 4 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 75 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 49 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 57 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 82 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 47 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 33 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 50 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 10, 122, 
	10, 122, 10, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	122, 92, 92, 9, 122, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 44, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 122, 
	9, 122, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 32, 1, 39, 
	1, 1, 1, 114, 1, 114, 114, 113, 
	113, 25, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 114, 32, 114, 114, 
	59, 36, 36, 114, 36, 114, 1, 114, 
	114, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 1, 114, 1, 114, 114, 94, 
	117, 38, 1, 1, 1, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 24, 118, 
	118, 114, 114, 114, 59, 36, 36, 114, 
	36, 39, 39, 1, 1, 1, 114, 1, 
	114, 114, 32, 114, 1, 114, 114, 114, 
	32, 114, 114, 59, 36, 36, 114, 36, 
	24, 118, 118, 114, 114, 114, 59, 36, 
	36, 114, 36, 114, 1, 114, 114, 32, 
	114, 1, 114, 114, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 960, 962, 
	1002, 1004, 1006, 1008, 1123, 1125, 1240, 1355, 
	1469, 1583, 1609, 1669, 1671, 1673, 1788, 1903, 
	1963, 1965, 1967, 2081, 2195, 2310, 2343, 2458, 
	2573, 2633, 2670, 2707, 2822, 2859, 2974, 2976, 
	3091, 3206, 3321, 3354, 3469, 3584, 3644, 3681, 
	3718, 3833, 3870, 3872, 3987, 3989, 4104, 4219, 
	4314, 4432, 4471, 4473, 4475, 4477, 4592, 4625, 
	4740, 4855, 4915, 4952, 4989, 5104, 5141, 5166, 
	5285, 5404, 5519, 5634, 5749, 5809, 5846, 5883, 
	5998, 6035, 6075, 6115, 6117, 6119, 6121, 6236, 
	6238, 6353, 6468, 6501, 6616, 6618, 6733, 6848, 
	6963, 6996, 7111, 7226, 7286, 7323, 7360, 7475, 
	7512, 7537, 7656, 7775, 7890, 8005, 8120, 8180, 
	8217, 8254, 8369, 8406, 8521, 8523, 8638, 8753, 
	8786, 8901, 8903, 9018, 9133, 9134, 9135, 9136, 
	9137, 9138, 9139, 9140, 9141, 9142
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 33, 5, 
	5, 5, 5, 5, 5, 5, 34, 5, 
	35, 5, 35, 36, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 35, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	37, 5, 38, 5, 5, 39, 41, 40, 
	43, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 43, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	45, 42, 42, 46, 42, 42, 42, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 48, 42, 42, 42, 42, 42, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 42, 42, 42, 47, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 19, 17, 43, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 43, 42, 42, 42, 
	42, 42, 42, 42, 42, 45, 42, 42, 
	46, 42, 42, 42, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 42, 42, 
	42, 42, 42, 42, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	42, 42, 42, 49, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	50, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 0, 0, 0, 0, 0, 0, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 0, 0, 0, 52, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 53, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 0, 0, 0, 0, 0, 
	0, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 0, 0, 0, 
	54, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 0, 0, 0, 
	0, 0, 0, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 0, 
	0, 0, 56, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 58, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 59, 
	57, 61, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 62, 60, 63, 57, 62, 
	60, 65, 66, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	65, 64, 67, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 69, 64, 64, 64, 64, 64, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 64, 64, 64, 68, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 65, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 65, 70, 67, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 70, 70, 70, 
	70, 70, 70, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 70, 
	70, 70, 71, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 75, 57, 74, 72, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 77, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 79, 0, 0, 0, 0, 0, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 0, 0, 0, 78, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 80, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 80, 0, 0, 0, 0, 0, 
	0, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 0, 0, 0, 0, 
	0, 0, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 0, 0, 
	0, 82, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 83, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 83, 5, 5, 
	5, 5, 5, 5, 5, 84, 5, 85, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 7, 
	86, 7, 7, 7, 7, 7, 87, 88, 
	7, 7, 89, 7, 7, 7, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	91, 7, 7, 7, 7, 7, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 7, 7, 7, 90, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 85, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 85, 15, 86, 15, 15, 15, 15, 
	15, 15, 88, 15, 15, 89, 15, 15, 
	15, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 15, 15, 15, 15, 15, 
	15, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 15, 15, 15, 
	92, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 94, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 95, 
	93, 96, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	96, 20, 20, 20, 20, 20, 20, 20, 
	20, 97, 20, 20, 98, 20, 99, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 99, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 100, 5, 89, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 89, 7, 86, 7, 7, 7, 
	7, 7, 87, 88, 7, 7, 89, 7, 
	7, 7, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 91, 7, 7, 7, 
	7, 7, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 7, 7, 
	7, 90, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 99, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 99, 26, 26, 
	26, 26, 26, 26, 26, 26, 101, 26, 
	26, 100, 26, 102, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 102, 42, 42, 42, 42, 42, 
	42, 42, 103, 104, 42, 42, 105, 42, 
	42, 42, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 107, 42, 42, 42, 
	42, 42, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 42, 42, 
	42, 106, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 95, 93, 
	102, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 102, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	104, 42, 42, 105, 42, 42, 42, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 42, 42, 42, 42, 42, 42, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 42, 42, 42, 108, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 109, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 109, 0, 0, 0, 0, 0, 
	0, 0, 110, 0, 0, 0, 0, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 112, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	0, 0, 0, 0, 0, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 0, 
	0, 0, 0, 0, 0, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 0, 0, 0, 114, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 115, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	115, 5, 5, 5, 5, 5, 5, 5, 
	116, 5, 117, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 118, 7, 7, 7, 7, 
	7, 119, 120, 7, 7, 121, 7, 7, 
	7, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 123, 7, 7, 7, 7, 
	7, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 7, 7, 7, 
	122, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 117, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 117, 15, 118, 15, 
	15, 15, 15, 15, 15, 120, 15, 15, 
	121, 15, 15, 15, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 15, 15, 
	15, 15, 15, 15, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	15, 15, 15, 124, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	126, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 127, 125, 128, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 128, 20, 20, 20, 20, 
	20, 20, 20, 20, 129, 20, 20, 130, 
	20, 131, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	131, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 132, 5, 121, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 121, 7, 118, 
	7, 7, 7, 7, 7, 119, 120, 7, 
	7, 121, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 123, 
	7, 7, 7, 7, 7, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 7, 7, 7, 122, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 131, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	131, 26, 26, 26, 26, 26, 26, 26, 
	26, 133, 26, 26, 132, 26, 134, 26, 
	135, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 135, 
	42, 42, 42, 42, 42, 42, 42, 136, 
	137, 42, 42, 138, 42, 42, 42, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 140, 42, 42, 42, 42, 42, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 42, 42, 42, 139, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 127, 125, 135, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 135, 42, 42, 42, 
	42, 42, 42, 42, 42, 137, 42, 42, 
	138, 42, 42, 42, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 42, 42, 
	42, 42, 42, 42, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	42, 42, 42, 141, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	142, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 142, 
	0, 0, 0, 0, 0, 0, 0, 143, 
	0, 0, 0, 0, 0, 0, 0, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 0, 0, 0, 0, 0, 0, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 0, 0, 0, 144, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 5, 146, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 149, 5, 150, 
	5, 5, 151, 153, 152, 154, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 154, 0, 0, 0, 
	0, 0, 0, 0, 155, 0, 0, 0, 
	0, 0, 0, 0, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 0, 0, 
	0, 0, 0, 0, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	0, 0, 0, 156, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	157, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 157, 
	5, 5, 5, 5, 5, 5, 5, 158, 
	5, 159, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	159, 7, 160, 7, 7, 7, 7, 7, 
	161, 162, 7, 7, 163, 7, 7, 7, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 165, 7, 7, 7, 7, 7, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 7, 7, 7, 164, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 159, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 159, 15, 160, 15, 15, 
	15, 15, 15, 15, 162, 15, 15, 163, 
	15, 15, 15, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 15, 15, 15, 
	15, 15, 15, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 15, 
	15, 15, 166, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 168, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 169, 167, 170, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 170, 20, 20, 20, 20, 20, 
	20, 20, 20, 171, 20, 20, 172, 20, 
	173, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 173, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 174, 5, 163, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 163, 7, 160, 7, 
	7, 7, 7, 7, 161, 162, 7, 7, 
	163, 7, 7, 7, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 165, 7, 
	7, 7, 7, 7, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	7, 7, 7, 164, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	173, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 173, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	175, 26, 26, 174, 26, 176, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 176, 26, 177, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 177, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 5, 179, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 179, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 5, 181, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 181, 0, 0, 0, 0, 
	0, 0, 0, 182, 0, 0, 0, 0, 
	0, 0, 0, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 0, 0, 0, 
	0, 0, 0, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 0, 
	0, 0, 183, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 184, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	185, 7, 7, 7, 7, 7, 186, 187, 
	7, 7, 188, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	190, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 184, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 184, 15, 185, 15, 15, 15, 15, 
	15, 15, 187, 15, 15, 188, 15, 15, 
	15, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 15, 15, 15, 15, 15, 
	15, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 15, 15, 15, 
	191, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 193, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 194, 
	192, 195, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	195, 20, 20, 20, 20, 20, 20, 20, 
	20, 196, 20, 20, 197, 20, 198, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 198, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 199, 5, 188, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 188, 7, 185, 7, 7, 7, 
	7, 7, 186, 187, 7, 7, 188, 7, 
	7, 7, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 190, 7, 7, 7, 
	7, 7, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 7, 7, 
	7, 189, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 198, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 198, 26, 26, 
	26, 26, 26, 26, 26, 26, 200, 26, 
	26, 199, 26, 201, 202, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 201, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 203, 26, 204, 205, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 204, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 206, 5, 207, 5, 5, 208, 210, 
	209, 211, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	211, 42, 42, 42, 42, 42, 42, 42, 
	212, 213, 42, 42, 214, 42, 42, 42, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 216, 42, 42, 42, 42, 42, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 42, 42, 42, 215, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 194, 192, 211, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 211, 42, 42, 
	42, 42, 42, 42, 42, 42, 213, 42, 
	42, 214, 42, 42, 42, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 42, 
	42, 42, 42, 42, 42, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 42, 42, 42, 217, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 218, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	218, 0, 0, 0, 0, 0, 0, 0, 
	219, 0, 0, 0, 0, 0, 0, 0, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 0, 0, 0, 0, 0, 0, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 0, 0, 0, 220, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 221, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 221, 5, 5, 5, 5, 
	5, 5, 5, 222, 5, 223, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 223, 42, 42, 42, 
	42, 42, 42, 42, 224, 225, 42, 42, 
	226, 42, 42, 42, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 228, 42, 
	42, 42, 42, 42, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	42, 42, 42, 227, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	169, 167, 223, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 223, 42, 42, 42, 42, 42, 42, 
	42, 42, 225, 42, 42, 226, 42, 42, 
	42, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 42, 42, 42, 42, 42, 
	42, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 42, 42, 42, 
	229, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 230, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 230, 0, 0, 0, 
	0, 0, 0, 0, 231, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 0, 0, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	0, 0, 0, 232, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	233, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 233, 
	0, 0, 0, 0, 0, 0, 0, 234, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 0, 0, 0, 235, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 236, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 236, 5, 5, 5, 5, 5, 
	5, 5, 237, 5, 238, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 238, 7, 239, 7, 7, 
	7, 7, 7, 240, 241, 7, 7, 242, 
	7, 7, 7, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 7, 7, 
	7, 7, 7, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 7, 
	7, 7, 243, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 238, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 238, 15, 
	239, 15, 15, 15, 15, 15, 15, 241, 
	15, 15, 242, 15, 15, 15, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	15, 15, 15, 15, 15, 15, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 15, 15, 15, 245, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 247, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 248, 246, 249, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 249, 20, 20, 
	20, 20, 20, 20, 20, 20, 250, 20, 
	20, 251, 20, 252, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 252, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 253, 5, 
	242, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 242, 
	7, 239, 7, 7, 7, 7, 7, 240, 
	241, 7, 7, 242, 7, 7, 7, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 244, 7, 7, 7, 7, 7, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 7, 7, 7, 243, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 252, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 252, 26, 26, 26, 26, 26, 
	26, 26, 26, 254, 26, 26, 253, 26, 
	255, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 255, 
	26, 256, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	256, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 5, 
	258, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 258, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 5, 260, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 260, 0, 
	0, 0, 0, 0, 0, 0, 261, 0, 
	0, 0, 0, 0, 0, 0, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	0, 0, 0, 0, 0, 0, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 0, 0, 0, 262, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 263, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 263, 7, 264, 7, 7, 7, 7, 
	7, 265, 266, 7, 7, 267, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 269, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 263, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 263, 15, 264, 15, 
	15, 15, 15, 15, 15, 266, 15, 15, 
	267, 15, 15, 15, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 15, 15, 
	15, 15, 15, 15, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	15, 15, 15, 270, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	272, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 273, 271, 274, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 274, 20, 20, 20, 20, 
	20, 20, 20, 20, 275, 20, 20, 276, 
	20, 277, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	277, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 278, 5, 267, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 267, 7, 264, 
	7, 7, 7, 7, 7, 265, 266, 7, 
	7, 267, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 269, 
	7, 7, 7, 7, 7, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 7, 7, 7, 268, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 277, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	277, 26, 26, 26, 26, 26, 26, 26, 
	26, 279, 26, 26, 278, 26, 280, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 280, 42, 42, 
	42, 42, 42, 42, 42, 281, 282, 42, 
	42, 283, 42, 42, 42, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 285, 
	42, 42, 42, 42, 42, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 42, 42, 42, 284, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 273, 271, 280, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 280, 42, 42, 42, 42, 42, 
	42, 42, 42, 282, 42, 42, 283, 42, 
	42, 42, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 42, 42, 42, 42, 
	42, 42, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 42, 42, 
	42, 286, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 287, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 287, 0, 0, 
	0, 0, 0, 0, 0, 288, 0, 0, 
	0, 0, 0, 0, 0, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 0, 
	0, 0, 0, 0, 0, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 0, 0, 0, 289, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 290, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	290, 5, 5, 5, 5, 5, 5, 5, 
	291, 5, 292, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 292, 42, 42, 42, 42, 42, 42, 
	42, 293, 294, 42, 42, 295, 42, 42, 
	42, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 297, 42, 42, 42, 42, 
	42, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 42, 42, 42, 
	296, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 248, 246, 292, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 292, 42, 
	42, 42, 42, 42, 42, 42, 42, 294, 
	42, 42, 295, 42, 42, 42, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	42, 42, 42, 42, 42, 42, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 42, 42, 42, 298, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 299, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 299, 0, 0, 0, 0, 0, 0, 
	0, 300, 0, 0, 0, 0, 0, 0, 
	0, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 0, 0, 0, 0, 0, 
	0, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 0, 0, 0, 
	301, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 5, 5, 5, 
	5, 26, 26, 5, 5, 5, 26, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 22, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 19, 4, 0, 
	21, 5, 6, 20, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 15, 132, 16, 17, 18, 
	18, 132, 0, 7, 9, 10, 8, 19, 
	4, 21, 2, 3, 22, 133, 24, 133, 
	24, 0, 134, 26, 26, 27, 28, 134, 
	0, 30, 135, 31, 35, 30, 0, 34, 
	31, 32, 33, 135, 135, 34, 35, 30, 
	37, 38, 48, 37, 38, 39, 40, 44, 
	136, 43, 45, 39, 47, 40, 41, 46, 
	42, 136, 43, 42, 43, 136, 42, 44, 
	136, 43, 45, 39, 47, 37, 38, 48, 
	50, 51, 62, 50, 51, 52, 53, 57, 
	58, 56, 59, 52, 61, 53, 54, 60, 
	55, 58, 56, 55, 56, 58, 137, 55, 
	57, 58, 56, 59, 52, 61, 50, 51, 
	62, 64, 138, 64, 139, 66, 67, 68, 
	68, 139, 70, 71, 102, 70, 71, 72, 
	73, 77, 78, 76, 99, 72, 101, 73, 
	74, 100, 75, 78, 76, 75, 76, 78, 
	79, 79, 80, 81, 80, 81, 82, 97, 
	83, 84, 88, 89, 87, 94, 83, 96, 
	84, 85, 95, 86, 89, 87, 86, 87, 
	89, 90, 140, 91, 90, 140, 91, 92, 
	93, 93, 140, 86, 88, 89, 87, 94, 
	83, 96, 98, 82, 97, 98, 82, 75, 
	77, 78, 76, 99, 72, 101, 70, 71, 
	102, 104, 105, 131, 104, 105, 106, 107, 
	111, 112, 110, 128, 106, 130, 107, 108, 
	129, 109, 112, 110, 109, 110, 112, 113, 
	113, 114, 115, 114, 115, 116, 126, 117, 
	118, 122, 141, 121, 123, 117, 125, 118, 
	119, 124, 120, 141, 121, 120, 121, 141, 
	120, 122, 141, 121, 123, 117, 125, 127, 
	116, 126, 127, 116, 109, 111, 112, 110, 
	128, 106, 130, 104, 105, 131
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 0, 28, 0, 29, 0, 0, 30, 
	31, 32, 34, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 42, 16, 43, 
	39, 44, 45, 10, 18, 18, 18, 46, 
	48, 0, 49, 10, 16, 13, 51, 16, 
	18, 18, 18, 52, 53, 39, 39, 38, 
	54, 55, 56, 0, 6, 9, 10, 11, 
	57, 9, 12, 13, 16, 18, 18, 18, 
	21, 58, 21, 0, 0, 59, 35, 36, 
	60, 35, 37, 38, 39, 40, 41, 37, 
	61, 62, 63, 0, 6, 9, 10, 11, 
	9, 9, 12, 13, 16, 18, 18, 18, 
	21, 21, 21, 0, 0, 0, 64, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 25, 65, 27, 66, 0, 0, 30, 
	31, 67, 61, 62, 63, 0, 6, 9, 
	10, 11, 9, 9, 12, 13, 16, 18, 
	18, 18, 21, 21, 21, 0, 0, 0, 
	68, 0, 25, 69, 27, 61, 62, 63, 
	9, 10, 11, 9, 9, 12, 13, 16, 
	18, 18, 18, 21, 21, 21, 0, 0, 
	0, 70, 71, 70, 0, 72, 0, 0, 
	30, 31, 73, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 0, 6, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 74, 75, 76, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 24, 
	0, 25, 26, 27, 61, 77, 63, 9, 
	10, 11, 78, 9, 12, 13, 16, 18, 
	18, 18, 21, 79, 21, 0, 0, 80, 
	35, 36, 81, 35, 37, 38, 39, 40, 
	41, 37, 0, 6, 35, 36, 35, 35, 
	37, 38, 39, 40, 41, 37
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 0, 0, 0, 
	0, 0, 0, 33, 17, 33, 1, 1, 
	1, 17, 17, 17, 17, 47, 50, 17, 
	17, 17, 1, 1, 1, 0, 7, 14, 
	17, 19, 0, 7, 22, 33, 17, 33, 
	1, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 33, 17, 33, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 0, 
	0, 1, 7, 14, 17, 19, 0, 7, 
	22, 22, 0, 0, 0, 0, 33, 17, 
	33, 1, 0, 33, 17, 33, 1, 1, 
	0, 7, 14, 17, 19, 0, 7, 22, 
	22, 0, 0, 1, 7, 14, 17, 19, 
	0, 7, 22, 33, 17, 33, 1, 0, 
	33, 17, 33, 1, 0, 0, 0, 0, 
	82, 82, 0, 0, 0, 82
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 132;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 44 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 59 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 31 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 66 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 68 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 70 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 72 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 28 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 37 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 43 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 46 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 51 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 30 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 73 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 32 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 71 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 42 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 38 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 45 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 80 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 53 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 60 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 63 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 61 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 54 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 5 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 81 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 79 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 3 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 74 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 4 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 75 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 49 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 57 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 82 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 47 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 33 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 50 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 10, 122, 
	10, 122, 10, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	122, 92, 92, 9, 122, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 44, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 122, 
	9, 122, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 32, 1, 39, 
	1, 1, 1, 114, 1, 114, 114, 113, 
	113, 25, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 114, 32, 114, 114, 
	59, 36, 36, 114, 36, 114, 1, 114, 
	114, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 1, 114, 1, 114, 114, 94, 
	117, 38, 1, 1, 1, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 24, 118, 
	118, 114, 114, 114, 59, 36, 36, 114, 
	36, 39, 39, 1, 1, 1, 114, 1, 
	114, 114, 32, 114, 1, 114, 114, 114, 
	32, 114, 114, 59, 36, 36, 114, 36, 
	24, 118, 118, 114, 114, 114, 59, 36, 
	36, 114, 36, 114, 1, 114, 114, 32, 
	114, 1, 114, 114, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 960, 962, 
	1002, 1004, 1006, 1008, 1123, 1125, 1240, 1355, 
	1469, 1583, 1609, 1669, 1671, 1673, 1788, 1903, 
	1963, 1965, 1967, 2081, 2195, 2310, 2343, 2458, 
	2573, 2633, 2670, 2707, 2822, 2859, 2974, 2976, 
	3091, 3206, 3321, 3354, 3469, 3584, 3644, 3681, 
	3718, 3833, 3870, 3872, 3987, 3989, 4104, 4219, 
	4314, 4432, 4471, 4473, 4475, 4477, 4592, 4625, 
	4740, 4855, 4915, 4952, 4989, 5104, 5141, 5166, 
	5285, 5404, 5519, 5634, 5749, 5809, 5846, 5883, 
	5998, 6035, 6075, 6115, 6117, 6119, 6121, 6236, 
	6238, 6353, 6468, 6501, 6616, 6618, 6733, 6848, 
	6963, 6996, 7111, 7226, 7286, 7323, 7360, 7475, 
	7512, 7537, 7656, 7775, 7890, 8005, 8120, 8180, 
	8217, 8254, 8369, 8406, 8521, 8523, 8638, 8753, 
	8786, 8901, 8903, 9018, 9133, 9134, 9135, 9136, 
	9137, 9138, 9139, 9140, 9141, 9142
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 33, 5, 
	5, 5, 5, 5, 5, 5, 34, 5, 
	35, 5, 35, 36, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 35, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	37, 5, 38, 5, 5, 39, 41, 40, 
	43, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 43, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	45, 42, 42, 46, 42, 42, 42, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 48, 42, 42, 42, 42, 42, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 42, 42, 42, 47, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 19, 17, 43, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 43, 42, 42, 42, 
	42, 42, 42, 42, 42, 45, 42, 42, 
	46, 42, 42, 42, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 42, 42, 
	42, 42, 42, 42, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	42, 42, 42, 49, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	50, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 0, 0, 0, 0, 0, 0, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 0, 0, 0, 52, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 53, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 0, 0, 0, 0, 0, 
	0, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 0, 0, 0, 
	54, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 0, 0, 0, 
	0, 0, 0, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 0, 
	0, 0, 56, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 58, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 59, 
	57, 61, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 62, 60, 63, 57, 62, 
	60, 65, 66, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	65, 64, 67, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 69, 64, 64, 64, 64, 64, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 64, 64, 64, 68, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 65, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 65, 70, 67, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 70, 70, 70, 
	70, 70, 70, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 70, 
	70, 70, 71, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 75, 57, 74, 72, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 77, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 79, 0, 0, 0, 0, 0, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 0, 0, 0, 78, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 80, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 80, 0, 0, 0, 0, 0, 
	0, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 0, 0, 0, 0, 
	0, 0, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 0, 0, 
	0, 82, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 83, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 83, 5, 5, 
	5, 5, 5, 5, 5, 84, 5, 85, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 7, 
	86, 7, 7, 7, 7, 7, 87, 88, 
	7, 7, 89, 7, 7, 7, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	91, 7, 7, 7, 7, 7, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 7, 7, 7, 90, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 85, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 85, 15, 86, 15, 15, 15, 15, 
	15, 15, 88, 15, 15, 89, 15, 15, 
	15, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 15, 15, 15, 15, 15, 
	15, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 15, 15, 15, 
	92, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 94, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 95, 
	93, 96, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	96, 20, 20, 20, 20, 20, 20, 20, 
	20, 97, 20, 20, 98, 20, 99, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 99, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 100, 5, 89, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 89, 7, 86, 7, 7, 7, 
	7, 7, 87, 88, 7, 7, 89, 7, 
	7, 7, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 91, 7, 7, 7, 
	7, 7, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 7, 7, 
	7, 90, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 99, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 99, 26, 26, 
	26, 26, 26, 26, 26, 26, 101, 26, 
	26, 100, 26, 102, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 102, 42, 42, 42, 42, 42, 
	42, 42, 103, 104, 42, 42, 105, 42, 
	42, 42, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 107, 42, 42, 42, 
	42, 42, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 42, 42, 
	42, 106, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 95, 93, 
	102, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 102, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	104, 42, 42, 105, 42, 42, 42, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 42, 42, 42, 42, 42, 42, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 42, 42, 42, 108, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 109, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 109, 0, 0, 0, 0, 0, 
	0, 0, 110, 0, 0, 0, 0, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 112, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	0, 0, 0, 0, 0, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 0, 
	0, 0, 0, 0, 0, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 0, 0, 0, 114, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 115, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	115, 5, 5, 5, 5, 5, 5, 5, 
	116, 5, 117, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 118, 7, 7, 7, 7, 
	7, 119, 120, 7, 7, 121, 7, 7, 
	7, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 123, 7, 7, 7, 7, 
	7, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 7, 7, 7, 
	122, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 117, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 117, 15, 118, 15, 
	15, 15, 15, 15, 15, 120, 15, 15, 
	121, 15, 15, 15, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 15, 15, 
	15, 15, 15, 15, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	15, 15, 15, 124, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	126, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 127, 125, 128, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 128, 20, 20, 20, 20, 
	20, 20, 20, 20, 129, 20, 20, 130, 
	20, 131, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	131, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 132, 5, 121, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 121, 7, 118, 
	7, 7, 7, 7, 7, 119, 120, 7, 
	7, 121, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 123, 
	7, 7, 7, 7, 7, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 7, 7, 7, 122, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 131, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	131, 26, 26, 26, 26, 26, 26, 26, 
	26, 133, 26, 26, 132, 26, 134, 26, 
	135, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 135, 
	42, 42, 42, 42, 42, 42, 42, 136, 
	137, 42, 42, 138, 42, 42, 42, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 140, 42, 42, 42, 42, 42, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 42, 42, 42, 139, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 127, 125, 135, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 135, 42, 42, 42, 
	42, 42, 42, 42, 42, 137, 42, 42, 
	138, 42, 42, 42, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 42, 42, 
	42, 42, 42, 42, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	42, 42, 42, 141, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	142, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 142, 
	0, 0, 0, 0, 0, 0, 0, 143, 
	0, 0, 0, 0, 0, 0, 0, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 0, 0, 0, 0, 0, 0, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 0, 0, 0, 144, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 5, 146, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 149, 5, 150, 
	5, 5, 151, 153, 152, 154, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 154, 0, 0, 0, 
	0, 0, 0, 0, 155, 0, 0, 0, 
	0, 0, 0, 0, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 0, 0, 
	0, 0, 0, 0, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	0, 0, 0, 156, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	157, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 157, 
	5, 5, 5, 5, 5, 5, 5, 158, 
	5, 159, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	159, 7, 160, 7, 7, 7, 7, 7, 
	161, 162, 7, 7, 163, 7, 7, 7, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 165, 7, 7, 7, 7, 7, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 7, 7, 7, 164, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 159, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 159, 15, 160, 15, 15, 
	15, 15, 15, 15, 162, 15, 15, 163, 
	15, 15, 15, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 15, 15, 15, 
	15, 15, 15, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 15, 
	15, 15, 166, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 168, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 169, 167, 170, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 170, 20, 20, 20, 20, 20, 
	20, 20, 20, 171, 20, 20, 172, 20, 
	173, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 173, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 174, 5, 163, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 163, 7, 160, 7, 
	7, 7, 7, 7, 161, 162, 7, 7, 
	163, 7, 7, 7, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 165, 7, 
	7, 7, 7, 7, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	7, 7, 7, 164, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	173, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 173, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	175, 26, 26, 174, 26, 176, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 176, 26, 177, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 177, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 5, 179, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 179, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 5, 181, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 181, 0, 0, 0, 0, 
	0, 0, 0, 182, 0, 0, 0, 0, 
	0, 0, 0, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 0, 0, 0, 
	0, 0, 0, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 0, 
	0, 0, 183, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 184, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	185, 7, 7, 7, 7, 7, 186, 187, 
	7, 7, 188, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	190, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 184, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 184, 15, 185, 15, 15, 15, 15, 
	15, 15, 187, 15, 15, 188, 15, 15, 
	15, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 15, 15, 15, 15, 15, 
	15, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 15, 15, 15, 
	191, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 193, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 194, 
	192, 195, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	195, 20, 20, 20, 20, 20, 20, 20, 
	20, 196, 20, 20, 197, 20, 198, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 198, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 199, 5, 188, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 188, 7, 185, 7, 7, 7, 
	7, 7, 186, 187, 7, 7, 188, 7, 
	7, 7, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 190, 7, 7, 7, 
	7, 7, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 7, 7, 
	7, 189, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 198, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 198, 26, 26, 
	26, 26, 26, 26, 26, 26, 200, 26, 
	26, 199, 26, 201, 202, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 201, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 203, 26, 204, 205, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 204, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 206, 5, 207, 5, 5, 208, 210, 
	209, 211, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	211, 42, 42, 42, 42, 42, 42, 42, 
	212, 213, 42, 42, 214, 42, 42, 42, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 216, 42, 42, 42, 42, 42, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 42, 42, 42, 215, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 194, 192, 211, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 211, 42, 42, 
	42, 42, 42, 42, 42, 42, 213, 42, 
	42, 214, 42, 42, 42, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 42, 
	42, 42, 42, 42, 42, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 42, 42, 42, 217, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 218, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	218, 0, 0, 0, 0, 0, 0, 0, 
	219, 0, 0, 0, 0, 0, 0, 0, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 0, 0, 0, 0, 0, 0, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 0, 0, 0, 220, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 221, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 221, 5, 5, 5, 5, 
	5, 5, 5, 222, 5, 223, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 223, 42, 42, 42, 
	42, 42, 42, 42, 224, 225, 42, 42, 
	226, 42, 42, 42, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 228, 42, 
	42, 42, 42, 42, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	42, 42, 42, 227, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	169, 167, 223, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 223, 42, 42, 42, 42, 42, 42, 
	42, 42, 225, 42, 42, 226, 42, 42, 
	42, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 42, 42, 42, 42, 42, 
	42, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 42, 42, 42, 
	229, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 230, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 230, 0, 0, 0, 
	0, 0, 0, 0, 231, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 0, 0, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	0, 0, 0, 232, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	233, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 233, 
	0, 0, 0, 0, 0, 0, 0, 234, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 0, 0, 0, 235, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 236, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 236, 5, 5, 5, 5, 5, 
	5, 5, 237, 5, 238, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 238, 7, 239, 7, 7, 
	7, 7, 7, 240, 241, 7, 7, 242, 
	7, 7, 7, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 7, 7, 
	7, 7, 7, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 7, 
	7, 7, 243, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 238, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 238, 15, 
	239, 15, 15, 15, 15, 15, 15, 241, 
	15, 15, 242, 15, 15, 15, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	15, 15, 15, 15, 15, 15, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 15, 15, 15, 245, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 247, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 248, 246, 249, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 249, 20, 20, 
	20, 20, 20, 20, 20, 20, 250, 20, 
	20, 251, 20, 252, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 252, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 253, 5, 
	242, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 242, 
	7, 239, 7, 7, 7, 7, 7, 240, 
	241, 7, 7, 242, 7, 7, 7, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 244, 7, 7, 7, 7, 7, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 7, 7, 7, 243, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 252, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 252, 26, 26, 26, 26, 26, 
	26, 26, 26, 254, 26, 26, 253, 26, 
	255, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 255, 
	26, 256, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	256, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 5, 
	258, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 258, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 5, 260, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 260, 0, 
	0, 0, 0, 0, 0, 0, 261, 0, 
	0, 0, 0, 0, 0, 0, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	0, 0, 0, 0, 0, 0, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 0, 0, 0, 262, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 263, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 263, 7, 264, 7, 7, 7, 7, 
	7, 265, 266, 7, 7, 267, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 269, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 263, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 263, 15, 264, 15, 
	15, 15, 15, 15, 15, 266, 15, 15, 
	267, 15, 15, 15, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 15, 15, 
	15, 15, 15, 15, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	15, 15, 15, 270, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	272, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 273, 271, 274, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 274, 20, 20, 20, 20, 
	20, 20, 20, 20, 275, 20, 20, 276, 
	20, 277, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	277, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 278, 5, 267, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 267, 7, 264, 
	7, 7, 7, 7, 7, 265, 266, 7, 
	7, 267, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 269, 
	7, 7, 7, 7, 7, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 7, 7, 7, 268, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 277, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	277, 26, 26, 26, 26, 26, 26, 26, 
	26, 279, 26, 26, 278, 26, 280, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 280, 42, 42, 
	42, 42, 42, 42, 42, 281, 282, 42, 
	42, 283, 42, 42, 42, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 285, 
	42, 42, 42, 42, 42, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 42, 42, 42, 284, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 273, 271, 280, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 280, 42, 42, 42, 42, 42, 
	42, 42, 42, 282, 42, 42, 283, 42, 
	42, 42, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 42, 42, 42, 42, 
	42, 42, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 42, 42, 
	42, 286, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 287, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 287, 0, 0, 
	0, 0, 0, 0, 0, 288, 0, 0, 
	0, 0, 0, 0, 0, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 0, 
	0, 0, 0, 0, 0, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 0, 0, 0, 289, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 290, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	290, 5, 5, 5, 5, 5, 5, 5, 
	291, 5, 292, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 292, 42, 42, 42, 42, 42, 42, 
	42, 293, 294, 42, 42, 295, 42, 42, 
	42, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 297, 42, 42, 42, 42, 
	42, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 42, 42, 42, 
	296, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 248, 246, 292, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 292, 42, 
	42, 42, 42, 42, 42, 42, 42, 294, 
	42, 42, 295, 42, 42, 42, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	42, 42, 42, 42, 42, 42, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 42, 42, 42, 298, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 299, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 299, 0, 0, 0, 0, 0, 0, 
	0, 300, 0, 0, 0, 0, 0, 0, 
	0, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 0, 0, 0, 0, 0, 
	0, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 0, 0, 0, 
	301, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 5, 5, 5, 
	5, 26, 26, 5, 5, 5, 26, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 22, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 19, 4, 0, 
	21, 5, 6, 20, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 15, 132, 16, 17, 18, 
	18, 132, 0, 7, 9, 10, 8, 19, 
	4, 21, 2, 3, 22, 133, 24, 133, 
	24, 0, 134, 26, 26, 27, 28, 134, 
	0, 30, 135, 31, 35, 30, 0, 34, 
	31, 32, 33, 135, 135, 34, 35, 30, 
	37, 38, 48, 37, 38, 39, 40, 44, 
	136, 43, 45, 39, 47, 40, 41, 46, 
	42, 136, 43, 42, 43, 136, 42, 44, 
	136, 43, 45, 39, 47, 37, 38, 48, 
	50, 51, 62, 50, 51, 52, 53, 57, 
	58, 56, 59, 52, 61, 53, 54, 60, 
	55, 58, 56, 55, 56, 58, 137, 55, 
	57, 58, 56, 59, 52, 61, 50, 51, 
	62, 64, 138, 64, 139, 66, 67, 68, 
	68, 139, 70, 71, 102, 70, 71, 72, 
	73, 77, 78, 76, 99, 72, 101, 73, 
	74, 100, 75, 78, 76, 75, 76, 78, 
	79, 79, 80, 81, 80, 81, 82, 97, 
	83, 84, 88, 89, 87, 94, 83, 96, 
	84, 85, 95, 86, 89, 87, 86, 87, 
	89, 90, 140, 91, 90, 140, 91, 92, 
	93, 93, 140, 86, 88, 89, 87, 94, 
	83, 96, 98, 82, 97, 98, 82, 75, 
	77, 78, 76, 99, 72, 101, 70, 71, 
	102, 104, 105, 131, 104, 105, 106, 107, 
	111, 112, 110, 128, 106, 130, 107, 108, 
	129, 109, 112, 110, 109, 110, 112, 113, 
	113, 114, 115, 114, 115, 116, 126, 117, 
	118, 122, 141, 121, 123, 117, 125, 118, 
	119, 124, 120, 141, 121, 120, 121, 141, 
	120, 122, 141, 121, 123, 117, 125, 127, 
	116, 126, 127, 116, 109, 111, 112, 110, 
	128, 106, 130, 104, 105, 131
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 0, 28, 0, 29, 0, 0, 30, 
	31, 32, 34, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 42, 16, 43, 
	39, 44, 45, 10, 18, 18, 18, 46, 
	48, 0, 49, 10, 16, 13, 51, 16, 
	18, 18, 18, 52, 53, 39, 39, 38, 
	54, 55, 56, 0, 6, 9, 10, 11, 
	57, 9, 12, 13, 16, 18, 18, 18, 
	21, 58, 21, 0, 0, 59, 35, 36, 
	60, 35, 37, 38, 39, 40, 41, 37, 
	61, 62, 63, 0, 6, 9, 10, 11, 
	9, 9, 12, 13, 16, 18, 18, 18, 
	21, 21, 21, 0, 0, 0, 64, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 25, 65, 27, 66, 0, 0, 30, 
	31, 67, 61, 62, 63, 0, 6, 9, 
	10, 11, 9, 9, 12, 13, 16, 18, 
	18, 18, 21, 21, 21, 0, 0, 0, 
	68, 0, 25, 69, 27, 61, 62, 63, 
	9, 10, 11, 9, 9, 12, 13, 16, 
	18, 18, 18, 21, 21, 21, 0, 0, 
	0, 70, 71, 70, 0, 72, 0, 0, 
	30, 31, 73, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 0, 6, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 74, 75, 76, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 24, 
	0, 25, 26, 27, 61, 77, 63, 9, 
	10, 11, 78, 9, 12, 13, 16, 18, 
	18, 18, 21, 79, 21, 0, 0, 80, 
	35, 36, 81, 35, 37, 38, 39, 40, 
	41, 37, 0, 6, 35, 36, 35, 35, 
	37, 38, 39, 40, 41, 37
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 0, 0, 0, 
	0, 0, 0, 33, 17, 33, 1, 1, 
	1, 17, 17, 17, 17, 47, 50, 17, 
	17, 17, 1, 1, 1, 0, 7, 14, 
	17, 19, 0, 7, 22, 33, 17, 33, 
	1, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 33, 17, 33, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 0, 
	0, 1, 7, 14, 17, 19, 0, 7, 
	22, 22, 0, 0, 0, 0, 33, 17, 
	33, 1, 0, 33, 17, 33, 1, 1, 
	0, 7, 14, 17, 19, 0, 7, 22, 
	22, 0, 0, 1, 7, 14, 17, 19, 
	0, 7, 22, 33, 17, 33, 1, 0, 
	33, 17, 33, 1, 0, 0, 0, 0, 
	82, 82, 0, 0, 0, 82
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 132;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 44 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 59 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 31 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 66 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 68 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 70 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 72 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 28 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 37 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 43 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 46 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 51 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 30 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 73 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 32 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 71 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 42 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 38 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 45 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 80 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 53 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 60 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 63 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 61 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 54 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 5 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 81 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 79 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 3 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 74 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 4 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 75 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 49 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 57 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 82 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 47 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 33 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 50 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 10, 122, 
	10, 122, 10, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	122, 92, 92, 9, 122, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 44, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 122, 
	9, 122, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 32, 1, 39, 
	1, 1, 1, 114, 1, 114, 114, 113, 
	113, 25, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 114, 32, 114, 114, 
	59, 36, 36, 114, 36, 114, 1, 114, 
	114, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 1, 114, 1, 114, 114, 94, 
	117, 38, 1, 1, 1, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 24, 118, 
	118, 114, 114, 114, 59, 36, 36, 114, 
	36, 39, 39, 1, 1, 1, 114, 1, 
	114, 114, 32, 114, 1, 114, 114, 114, 
	32, 114, 114, 59, 36, 36, 114, 36, 
	24, 118, 118, 114, 114, 114, 59, 36, 
	36, 114, 36, 114, 1, 114, 114, 32, 
	114, 1, 114, 114, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 960, 962, 
	1002, 1004, 1006, 1008, 1123, 1125, 1240, 1355, 
	1469, 1583, 1609, 1669, 1671, 1673, 1788, 1903, 
	1963, 1965, 1967, 2081, 2195, 2310, 2343, 2458, 
	2573, 2633, 2670, 2707, 2822, 2859, 2974, 2976, 
	3091, 3206, 3321, 3354, 3469, 3584, 3644, 3681, 
	3718, 3833, 3870, 3872, 3987, 3989, 4104, 4219, 
	4314, 4432, 4471, 4473, 4475, 4477, 4592, 4625, 
	4740, 4855, 4915, 4952, 4989, 5104, 5141, 5166, 
	5285, 5404, 5519, 5634, 5749, 5809, 5846, 5883, 
	5998, 6035, 6075, 6115, 6117, 6119, 6121, 6236, 
	6238, 6353, 6468, 6501, 6616, 6618, 6733, 6848, 
	6963, 6996, 7111, 7226, 7286, 7323, 7360, 7475, 
	7512, 7537, 7656, 7775, 7890, 8005, 8120, 8180, 
	8217, 8254, 8369, 8406, 8521, 8523, 8638, 8753, 
	8786, 8901, 8903, 9018, 9133, 9134, 9135, 9136, 
	9137, 9138, 9139, 9140, 9141, 9142
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 33, 5, 
	5, 5, 5, 5, 5, 5, 34, 5, 
	35, 5, 35, 36, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 35, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	37, 5, 38, 5, 5, 39, 41, 40, 
	43, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 43, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	45, 42, 42, 46, 42, 42, 42, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 48, 42, 42, 42, 42, 42, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 42, 42, 42, 47, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 19, 17, 43, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 43, 42, 42, 42, 
	42, 42, 42, 42, 42, 45, 42, 42, 
	46, 42, 42, 42, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 42, 42, 
	42, 42, 42, 42, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	42, 42, 42, 49, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	50, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 0, 0, 0, 0, 0, 0, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 0, 0, 0, 52, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 53, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 0, 0, 0, 0, 0, 
	0, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 0, 0, 0, 
	54, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 0, 0, 0, 
	0, 0, 0, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 0, 
	0, 0, 56, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 58, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 59, 
	57, 61, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 62, 60, 63, 57, 62, 
	60, 65, 66, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	65, 64, 67, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 69, 64, 64, 64, 64, 64, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 64, 64, 64, 68, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 65, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 65, 70, 67, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 70, 70, 70, 
	70, 70, 70, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 70, 
	70, 70, 71, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 75, 57, 74, 72, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 77, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 79, 0, 0, 0, 0, 0, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 0, 0, 0, 78, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 80, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 80, 0, 0, 0, 0, 0, 
	0, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 0, 0, 0, 0, 
	0, 0, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 0, 0, 
	0, 82, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 83, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 83, 5, 5, 
	5, 5, 5, 5, 5, 84, 5, 85, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 7, 
	86, 7, 7, 7, 7, 7, 87, 88, 
	7, 7, 89, 7, 7, 7, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	91, 7, 7, 7, 7, 7, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 7, 7, 7, 90, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 85, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 85, 15, 86, 15, 15, 15, 15, 
	15, 15, 88, 15, 15, 89, 15, 15, 
	15, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 15, 15, 15, 15, 15, 
	15, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 15, 15, 15, 
	92, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 94, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 95, 
	93, 96, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	96, 20, 20, 20, 20, 20, 20, 20, 
	20, 97, 20, 20, 98, 20, 99, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 99, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 100, 5, 89, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 89, 7, 86, 7, 7, 7, 
	7, 7, 87, 88, 7, 7, 89, 7, 
	7, 7, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 91, 7, 7, 7, 
	7, 7, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 7, 7, 
	7, 90, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 99, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 99, 26, 26, 
	26, 26, 26, 26, 26, 26, 101, 26, 
	26, 100, 26, 102, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 102, 42, 42, 42, 42, 42, 
	42, 42, 103, 104, 42, 42, 105, 42, 
	42, 42, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 107, 42, 42, 42, 
	42, 42, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 42, 42, 
	42, 106, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 95, 93, 
	102, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 102, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	104, 42, 42, 105, 42, 42, 42, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 42, 42, 42, 42, 42, 42, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 42, 42, 42, 108, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 109, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 109, 0, 0, 0, 0, 0, 
	0, 0, 110, 0, 0, 0, 0, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 112, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	0, 0, 0, 0, 0, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 0, 
	0, 0, 0, 0, 0, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 0, 0, 0, 114, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 115, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	115, 5, 5, 5, 5, 5, 5, 5, 
	116, 5, 117, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 118, 7, 7, 7, 7, 
	7, 119, 120, 7, 7, 121, 7, 7, 
	7, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 123, 7, 7, 7, 7, 
	7, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 7, 7, 7, 
	122, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 117, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 117, 15, 118, 15, 
	15, 15, 15, 15, 15, 120, 15, 15, 
	121, 15, 15, 15, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 15, 15, 
	15, 15, 15, 15, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	15, 15, 15, 124, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	126, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 127, 125, 128, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 128, 20, 20, 20, 20, 
	20, 20, 20, 20, 129, 20, 20, 130, 
	20, 131, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	131, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 132, 5, 121, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 121, 7, 118, 
	7, 7, 7, 7, 7, 119, 120, 7, 
	7, 121, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 123, 
	7, 7, 7, 7, 7, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 7, 7, 7, 122, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 131, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	131, 26, 26, 26, 26, 26, 26, 26, 
	26, 133, 26, 26, 132, 26, 134, 26, 
	135, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 135, 
	42, 42, 42, 42, 42, 42, 42, 136, 
	137, 42, 42, 138, 42, 42, 42, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 140, 42, 42, 42, 42, 42, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 42, 42, 42, 139, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 127, 125, 135, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 135, 42, 42, 42, 
	42, 42, 42, 42, 42, 137, 42, 42, 
	138, 42, 42, 42, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 42, 42, 
	42, 42, 42, 42, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	42, 42, 42, 141, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	142, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 142, 
	0, 0, 0, 0, 0, 0, 0, 143, 
	0, 0, 0, 0, 0, 0, 0, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 0, 0, 0, 0, 0, 0, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 0, 0, 0, 144, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 5, 146, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 149, 5, 150, 
	5, 5, 151, 153, 152, 154, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 154, 0, 0, 0, 
	0, 0, 0, 0, 155, 0, 0, 0, 
	0, 0, 0, 0, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 0, 0, 
	0, 0, 0, 0, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	0, 0, 0, 156, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	157, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 157, 
	5, 5, 5, 5, 5, 5, 5, 158, 
	5, 159, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	159, 7, 160, 7, 7, 7, 7, 7, 
	161, 162, 7, 7, 163, 7, 7, 7, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 165, 7, 7, 7, 7, 7, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 7, 7, 7, 164, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 159, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 159, 15, 160, 15, 15, 
	15, 15, 15, 15, 162, 15, 15, 163, 
	15, 15, 15, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 15, 15, 15, 
	15, 15, 15, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 15, 
	15, 15, 166, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 168, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 169, 167, 170, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 170, 20, 20, 20, 20, 20, 
	20, 20, 20, 171, 20, 20, 172, 20, 
	173, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 173, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 174, 5, 163, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 163, 7, 160, 7, 
	7, 7, 7, 7, 161, 162, 7, 7, 
	163, 7, 7, 7, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 165, 7, 
	7, 7, 7, 7, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	7, 7, 7, 164, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	173, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 173, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	175, 26, 26, 174, 26, 176, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 176, 26, 177, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 177, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 5, 179, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 179, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 5, 181, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 181, 0, 0, 0, 0, 
	0, 0, 0, 182, 0, 0, 0, 0, 
	0, 0, 0, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 0, 0, 0, 
	0, 0, 0, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 0, 
	0, 0, 183, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 184, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	185, 7, 7, 7, 7, 7, 186, 187, 
	7, 7, 188, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	190, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 184, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 184, 15, 185, 15, 15, 15, 15, 
	15, 15, 187, 15, 15, 188, 15, 15, 
	15, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 15, 15, 15, 15, 15, 
	15, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 15, 15, 15, 
	191, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 193, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 194, 
	192, 195, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	195, 20, 20, 20, 20, 20, 20, 20, 
	20, 196, 20, 20, 197, 20, 198, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 198, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 199, 5, 188, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 188, 7, 185, 7, 7, 7, 
	7, 7, 186, 187, 7, 7, 188, 7, 
	7, 7, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 190, 7, 7, 7, 
	7, 7, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 7, 7, 
	7, 189, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 198, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 198, 26, 26, 
	26, 26, 26, 26, 26, 26, 200, 26, 
	26, 199, 26, 201, 202, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 201, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 203, 26, 204, 205, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 204, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 206, 5, 207, 5, 5, 208, 210, 
	209, 211, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	211, 42, 42, 42, 42, 42, 42, 42, 
	212, 213, 42, 42, 214, 42, 42, 42, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 216, 42, 42, 42, 42, 42, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 42, 42, 42, 215, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 194, 192, 211, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 211, 42, 42, 
	42, 42, 42, 42, 42, 42, 213, 42, 
	42, 214, 42, 42, 42, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 42, 
	42, 42, 42, 42, 42, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 42, 42, 42, 217, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 218, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	218, 0, 0, 0, 0, 0, 0, 0, 
	219, 0, 0, 0, 0, 0, 0, 0, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 0, 0, 0, 0, 0, 0, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 0, 0, 0, 220, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 221, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 221, 5, 5, 5, 5, 
	5, 5, 5, 222, 5, 223, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 223, 42, 42, 42, 
	42, 42, 42, 42, 224, 225, 42, 42, 
	226, 42, 42, 42, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 228, 42, 
	42, 42, 42, 42, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	42, 42, 42, 227, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	169, 167, 223, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 223, 42, 42, 42, 42, 42, 42, 
	42, 42, 225, 42, 42, 226, 42, 42, 
	42, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 42, 42, 42, 42, 42, 
	42, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 42, 42, 42, 
	229, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 230, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 230, 0, 0, 0, 
	0, 0, 0, 0, 231, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 0, 0, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	0, 0, 0, 232, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	233, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 233, 
	0, 0, 0, 0, 0, 0, 0, 234, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 0, 0, 0, 235, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 236, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 236, 5, 5, 5, 5, 5, 
	5, 5, 237, 5, 238, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 238, 7, 239, 7, 7, 
	7, 7, 7, 240, 241, 7, 7, 242, 
	7, 7, 7, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 7, 7, 
	7, 7, 7, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 7, 
	7, 7, 243, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 238, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 238, 15, 
	239, 15, 15, 15, 15, 15, 15, 241, 
	15, 15, 242, 15, 15, 15, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	15, 15, 15, 15, 15, 15, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 15, 15, 15, 245, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 247, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 248, 246, 249, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 249, 20, 20, 
	20, 20, 20, 20, 20, 20, 250, 20, 
	20, 251, 20, 252, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 252, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 253, 5, 
	242, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 242, 
	7, 239, 7, 7, 7, 7, 7, 240, 
	241, 7, 7, 242, 7, 7, 7, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 244, 7, 7, 7, 7, 7, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 7, 7, 7, 243, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 252, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 252, 26, 26, 26, 26, 26, 
	26, 26, 26, 254, 26, 26, 253, 26, 
	255, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 255, 
	26, 256, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	256, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 5, 
	258, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 258, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 5, 260, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 260, 0, 
	0, 0, 0, 0, 0, 0, 261, 0, 
	0, 0, 0, 0, 0, 0, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	0, 0, 0, 0, 0, 0, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 0, 0, 0, 262, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 263, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 263, 7, 264, 7, 7, 7, 7, 
	7, 265, 266, 7, 7, 267, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 269, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 263, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 263, 15, 264, 15, 
	15, 15, 15, 15, 15, 266, 15, 15, 
	267, 15, 15, 15, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 15, 15, 
	15, 15, 15, 15, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	15, 15, 15, 270, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	272, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 273, 271, 274, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 274, 20, 20, 20, 20, 
	20, 20, 20, 20, 275, 20, 20, 276, 
	20, 277, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	277, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 278, 5, 267, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 267, 7, 264, 
	7, 7, 7, 7, 7, 265, 266, 7, 
	7, 267, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 269, 
	7, 7, 7, 7, 7, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 7, 7, 7, 268, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 277, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	277, 26, 26, 26, 26, 26, 26, 26, 
	26, 279, 26, 26, 278, 26, 280, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 280, 42, 42, 
	42, 42, 42, 42, 42, 281, 282, 42, 
	42, 283, 42, 42, 42, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 285, 
	42, 42, 42, 42, 42, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 42, 42, 42, 284, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 273, 271, 280, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 280, 42, 42, 42, 42, 42, 
	42, 42, 42, 282, 42, 42, 283, 42, 
	42, 42, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 42, 42, 42, 42, 
	42, 42, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 42, 42, 
	42, 286, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 287, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 287, 0, 0, 
	0, 0, 0, 0, 0, 288, 0, 0, 
	0, 0, 0, 0, 0, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 0, 
	0, 0, 0, 0, 0, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 0, 0, 0, 289, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 290, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	290, 5, 5, 5, 5, 5, 5, 5, 
	291, 5, 292, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 292, 42, 42, 42, 42, 42, 42, 
	42, 293, 294, 42, 42, 295, 42, 42, 
	42, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 297, 42, 42, 42, 42, 
	42, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 42, 42, 42, 
	296, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 248, 246, 292, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 292, 42, 
	42, 42, 42, 42, 42, 42, 42, 294, 
	42, 42, 295, 42, 42, 42, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	42, 42, 42, 42, 42, 42, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 42, 42, 42, 298, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 299, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 299, 0, 0, 0, 0, 0, 0, 
	0, 300, 0, 0, 0, 0, 0, 0, 
	0, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 0, 0, 0, 0, 0, 
	0, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 0, 0, 0, 
	301, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 5, 5, 5, 
	5, 26, 26, 5, 5, 5, 26, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 22, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 19, 4, 0, 
	21, 5, 6, 20, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 15, 132, 16, 17, 18, 
	18, 132, 0, 7, 9, 10, 8, 19, 
	4, 21, 2, 3, 22, 133, 24, 133, 
	24, 0, 134, 26, 26, 27, 28, 134, 
	0, 30, 135, 31, 35, 30, 0, 34, 
	31, 32, 33, 135, 135, 34, 35, 30, 
	37, 38, 48, 37, 38, 39, 40, 44, 
	136, 43, 45, 39, 47, 40, 41, 46, 
	42, 136, 43, 42, 43, 136, 42, 44, 
	136, 43, 45, 39, 47, 37, 38, 48, 
	50, 51, 62, 50, 51, 52, 53, 57, 
	58, 56, 59, 52, 61, 53, 54, 60, 
	55, 58, 56, 55, 56, 58, 137, 55, 
	57, 58, 56, 59, 52, 61, 50, 51, 
	62, 64, 138, 64, 139, 66, 67, 68, 
	68, 139, 70, 71, 102, 70, 71, 72, 
	73, 77, 78, 76, 99, 72, 101, 73, 
	74, 100, 75, 78, 76, 75, 76, 78, 
	79, 79, 80, 81, 80, 81, 82, 97, 
	83, 84, 88, 89, 87, 94, 83, 96, 
	84, 85, 95, 86, 89, 87, 86, 87, 
	89, 90, 140, 91, 90, 140, 91, 92, 
	93, 93, 140, 86, 88, 89, 87, 94, 
	83, 96, 98, 82, 97, 98, 82, 75, 
	77, 78, 76, 99, 72, 101, 70, 71, 
	102, 104, 105, 131, 104, 105, 106, 107, 
	111, 112, 110, 128, 106, 130, 107, 108, 
	129, 109, 112, 110, 109, 110, 112, 113, 
	113, 114, 115, 114, 115, 116, 126, 117, 
	118, 122, 141, 121, 123, 117, 125, 118, 
	119, 124, 120, 141, 121, 120, 121, 141, 
	120, 122, 141, 121, 123, 117, 125, 127, 
	116, 126, 127, 116, 109, 111, 112, 110, 
	128, 106, 130, 104, 105, 131
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 0, 28, 0, 29, 0, 0, 30, 
	31, 32, 34, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 42, 16, 43, 
	39, 44, 45, 10, 18, 18, 18, 46, 
	48, 0, 49, 10, 16, 13, 51, 16, 
	18, 18, 18, 52, 53, 39, 39, 38, 
	54, 55, 56, 0, 6, 9, 10, 11, 
	57, 9, 12, 13, 16, 18, 18, 18, 
	21, 58, 21, 0, 0, 59, 35, 36, 
	60, 35, 37, 38, 39, 40, 41, 37, 
	61, 62, 63, 0, 6, 9, 10, 11, 
	9, 9, 12, 13, 16, 18, 18, 18, 
	21, 21, 21, 0, 0, 0, 64, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 25, 65, 27, 66, 0, 0, 30, 
	31, 67, 61, 62, 63, 0, 6, 9, 
	10, 11, 9, 9, 12, 13, 16, 18, 
	18, 18, 21, 21, 21, 0, 0, 0, 
	68, 0, 25, 69, 27, 61, 62, 63, 
	9, 10, 11, 9, 9, 12, 13, 16, 
	18, 18, 18, 21, 21, 21, 0, 0, 
	0, 70, 71, 70, 0, 72, 0, 0, 
	30, 31, 73, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 0, 6, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 74, 75, 76, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 24, 
	0, 25, 26, 27, 61, 77, 63, 9, 
	10, 11, 78, 9, 12, 13, 16, 18, 
	18, 18, 21, 79, 21, 0, 0, 80, 
	35, 36, 81, 35, 37, 38, 39, 40, 
	41, 37, 0, 6, 35, 36, 35, 35, 
	37, 38, 39, 40, 41, 37
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 0, 0, 0, 
	0, 0, 0, 33, 17, 33, 1, 1, 
	1, 17, 17, 17, 17, 47, 50, 17, 
	17, 17, 1, 1, 1, 0, 7, 14, 
	17, 19, 0, 7, 22, 33, 17, 33, 
	1, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 33, 17, 33, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 0, 
	0, 1, 7, 14, 17, 19, 0, 7, 
	22, 22, 0, 0, 0, 0, 33, 17, 
	33, 1, 0, 33, 17, 33, 1, 1, 
	0, 7, 14, 17, 19, 0, 7, 22, 
	22, 0, 0, 1, 7, 14, 17, 19, 
	0, 7, 22, 33, 17, 33, 1, 0, 
	33, 17, 33, 1, 0, 0, 0, 0, 
	82, 82, 0, 0, 0, 82
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 132;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 44 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 59 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 31 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 66 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 68 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 70 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 72 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 28 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 37 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 43 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 46 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 51 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 30 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 73 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 32 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 71 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 42 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 38 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 45 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 80 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 53 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 60 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 63 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 61 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 54 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 5 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 81 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 79 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 3 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 74 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 4 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 75 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 49 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 57 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 82 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 47 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 33 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 50 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 10, 122, 
	10, 122, 10, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	122, 92, 92, 9, 122, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 44, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 122, 
	9, 122, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 32, 1, 39, 
	1, 1, 1, 114, 1, 114, 114, 113, 
	113, 25, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 114, 32, 114, 114, 
	59, 36, 36, 114, 36, 114, 1, 114, 
	114, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 1, 114, 1, 114, 114, 94, 
	117, 38, 1, 1, 1, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 24, 118, 
	118, 114, 114, 114, 59, 36, 36, 114, 
	36, 39, 39, 1, 1, 1, 114, 1, 
	114, 114, 32, 114, 1, 114, 114, 114, 
	32, 114, 114, 59, 36, 36, 114, 36, 
	24, 118, 118, 114, 114, 114, 59, 36, 
	36, 114, 36, 114, 1, 114, 114, 32, 
	114, 1, 114, 114, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 960, 962, 
	1002, 1004, 1006, 1008, 1123, 1125, 1240, 1355, 
	1469, 1583, 1609, 1669, 1671, 1673, 1788, 1903, 
	1963, 1965, 1967, 2081, 2195, 2310, 2343, 2458, 
	2573, 2633, 2670, 2707, 2822, 2859, 2974, 2976, 
	3091, 3206, 3321, 3354, 3469, 3584, 3644, 3681, 
	3718, 3833, 3870, 3872, 3987, 3989, 4104, 4219, 
	4314, 4432, 4471, 4473, 4475, 4477, 4592, 4625, 
	4740, 4855, 4915, 4952, 4989, 5104, 5141, 5166, 
	5285, 5404, 5519, 5634, 5749, 5809, 5846, 5883, 
	5998, 6035, 6075, 6115, 6117, 6119, 6121, 6236, 
	6238, 6353, 6468, 6501, 6616, 6618, 6733, 6848, 
	6963, 6996, 7111, 7226, 7286, 7323, 7360, 7475, 
	7512, 7537, 7656, 7775, 7890, 8005, 8120, 8180, 
	8217, 8254, 8369, 8406, 8521, 8523, 8638, 8753, 
	8786, 8901, 8903, 9018, 9133, 9134, 9135, 9136, 
	9137, 9138, 9139, 9140, 9141, 9142
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 33, 5, 
	5, 5, 5, 5, 5, 5, 34, 5, 
	35, 5, 35, 36, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 35, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	37, 5, 38, 5, 5, 39, 41, 40, 
	43, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 43, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	45, 42, 42, 46, 42, 42, 42, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 48, 42, 42, 42, 42, 42, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 42, 42, 42, 47, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 19, 17, 43, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 43, 42, 42, 42, 
	42, 42, 42, 42, 42, 45, 42, 42, 
	46, 42, 42, 42, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 42, 42, 
	42, 42, 42, 42, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	42, 42, 42, 49, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	50, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 0, 0, 0, 0, 0, 0, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 0, 0, 0, 52, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 53, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 0, 0, 0, 0, 0, 
	0, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 0, 0, 0, 
	54, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 0, 0, 0, 
	0, 0, 0, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 0, 
	0, 0, 56, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 58, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 59, 
	57, 61, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 62, 60, 63, 57, 62, 
	60, 65, 66, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	65, 64, 67, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 69, 64, 64, 64, 64, 64, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 64, 64, 64, 68, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 65, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 65, 70, 67, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 70, 70, 70, 
	70, 70, 70, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 70, 
	70, 70, 71, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 75, 57, 74, 72, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 77, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 79, 0, 0, 0, 0, 0, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 0, 0, 0, 78, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 80, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 80, 0, 0, 0, 0, 0, 
	0, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 0, 0, 0, 0, 
	0, 0, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 0, 0, 
	0, 82, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 83, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 83, 5, 5, 
	5, 5, 5, 5, 5, 84, 5, 85, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 7, 
	86, 7, 7, 7, 7, 7, 87, 88, 
	7, 7, 89, 7, 7, 7, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	91, 7, 7, 7, 7, 7, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 7, 7, 7, 90, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 85, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 85, 15, 86, 15, 15, 15, 15, 
	15, 15, 88, 15, 15, 89, 15, 15, 
	15, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 15, 15, 15, 15, 15, 
	15, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 15, 15, 15, 
	92, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 94, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 95, 
	93, 96, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	96, 20, 20, 20, 20, 20, 20, 20, 
	20, 97, 20, 20, 98, 20, 99, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 99, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 100, 5, 89, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 89, 7, 86, 7, 7, 7, 
	7, 7, 87, 88, 7, 7, 89, 7, 
	7, 7, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 91, 7, 7, 7, 
	7, 7, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 7, 7, 
	7, 90, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 99, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 99, 26, 26, 
	26, 26, 26, 26, 26, 26, 101, 26, 
	26, 100, 26, 102, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 102, 42, 42, 42, 42, 42, 
	42, 42, 103, 104, 42, 42, 105, 42, 
	42, 42, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 107, 42, 42, 42, 
	42, 42, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 42, 42, 
	42, 106, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 95, 93, 
	102, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 102, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	104, 42, 42, 105, 42, 42, 42, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 42, 42, 42, 42, 42, 42, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 42, 42, 42, 108, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 109, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 109, 0, 0, 0, 0, 0, 
	0, 0, 110, 0, 0, 0, 0, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 112, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	0, 0, 0, 0, 0, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 0, 
	0, 0, 0, 0, 0, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 0, 0, 0, 114, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 115, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	115, 5, 5, 5, 5, 5, 5, 5, 
	116, 5, 117, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 118, 7, 7, 7, 7, 
	7, 119, 120, 7, 7, 121, 7, 7, 
	7, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 123, 7, 7, 7, 7, 
	7, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 7, 7, 7, 
	122, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 117, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 117, 15, 118, 15, 
	15, 15, 15, 15, 15, 120, 15, 15, 
	121, 15, 15, 15, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 15, 15, 
	15, 15, 15, 15, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	15, 15, 15, 124, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	126, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 127, 125, 128, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 128, 20, 20, 20, 20, 
	20, 20, 20, 20, 129, 20, 20, 130, 
	20, 131, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	131, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 132, 5, 121, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 121, 7, 118, 
	7, 7, 7, 7, 7, 119, 120, 7, 
	7, 121, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 123, 
	7, 7, 7, 7, 7, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 7, 7, 7, 122, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 131, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	131, 26, 26, 26, 26, 26, 26, 26, 
	26, 133, 26, 26, 132, 26, 134, 26, 
	135, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 135, 
	42, 42, 42, 42, 42, 42, 42, 136, 
	137, 42, 42, 138, 42, 42, 42, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 140, 42, 42, 42, 42, 42, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 42, 42, 42, 139, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 127, 125, 135, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 135, 42, 42, 42, 
	42, 42, 42, 42, 42, 137, 42, 42, 
	138, 42, 42, 42, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 42, 42, 
	42, 42, 42, 42, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	42, 42, 42, 141, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	142, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 142, 
	0, 0, 0, 0, 0, 0, 0, 143, 
	0, 0, 0, 0, 0, 0, 0, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 0, 0, 0, 0, 0, 0, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 0, 0, 0, 144, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 5, 146, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 149, 5, 150, 
	5, 5, 151, 153, 152, 154, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 154, 0, 0, 0, 
	0, 0, 0, 0, 155, 0, 0, 0, 
	0, 0, 0, 0, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 0, 0, 
	0, 0, 0, 0, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	0, 0, 0, 156, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	157, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 157, 
	5, 5, 5, 5, 5, 5, 5, 158, 
	5, 159, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	159, 7, 160, 7, 7, 7, 7, 7, 
	161, 162, 7, 7, 163, 7, 7, 7, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 165, 7, 7, 7, 7, 7, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 7, 7, 7, 164, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 159, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 159, 15, 160, 15, 15, 
	15, 15, 15, 15, 162, 15, 15, 163, 
	15, 15, 15, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 15, 15, 15, 
	15, 15, 15, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 15, 
	15, 15, 166, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 168, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 169, 167, 170, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 170, 20, 20, 20, 20, 20, 
	20, 20, 20, 171, 20, 20, 172, 20, 
	173, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 173, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 174, 5, 163, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 163, 7, 160, 7, 
	7, 7, 7, 7, 161, 162, 7, 7, 
	163, 7, 7, 7, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 165, 7, 
	7, 7, 7, 7, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	7, 7, 7, 164, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	173, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 173, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	175, 26, 26, 174, 26, 176, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 176, 26, 177, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 177, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 5, 179, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 179, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 5, 181, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 181, 0, 0, 0, 0, 
	0, 0, 0, 182, 0, 0, 0, 0, 
	0, 0, 0, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 0, 0, 0, 
	0, 0, 0, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 0, 
	0, 0, 183, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 184, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	185, 7, 7, 7, 7, 7, 186, 187, 
	7, 7, 188, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	190, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 184, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 184, 15, 185, 15, 15, 15, 15, 
	15, 15, 187, 15, 15, 188, 15, 15, 
	15, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 15, 15, 15, 15, 15, 
	15, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 15, 15, 15, 
	191, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 193, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 194, 
	192, 195, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	195, 20, 20, 20, 20, 20, 20, 20, 
	20, 196, 20, 20, 197, 20, 198, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 198, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 199, 5, 188, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 188, 7, 185, 7, 7, 7, 
	7, 7, 186, 187, 7, 7, 188, 7, 
	7, 7, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 190, 7, 7, 7, 
	7, 7, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 7, 7, 
	7, 189, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 198, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 198, 26, 26, 
	26, 26, 26, 26, 26, 26, 200, 26, 
	26, 199, 26, 201, 202, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 201, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 203, 26, 204, 205, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 204, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 206, 5, 207, 5, 5, 208, 210, 
	209, 211, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	211, 42, 42, 42, 42, 42, 42, 42, 
	212, 213, 42, 42, 214, 42, 42, 42, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 216, 42, 42, 42, 42, 42, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 42, 42, 42, 215, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 194, 192, 211, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 211, 42, 42, 
	42, 42, 42, 42, 42, 42, 213, 42, 
	42, 214, 42, 42, 42, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 42, 
	42, 42, 42, 42, 42, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 42, 42, 42, 217, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 218, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	218, 0, 0, 0, 0, 0, 0, 0, 
	219, 0, 0, 0, 0, 0, 0, 0, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 0, 0, 0, 0, 0, 0, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 0, 0, 0, 220, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 221, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 221, 5, 5, 5, 5, 
	5, 5, 5, 222, 5, 223, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 223, 42, 42, 42, 
	42, 42, 42, 42, 224, 225, 42, 42, 
	226, 42, 42, 42, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 228, 42, 
	42, 42, 42, 42, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	42, 42, 42, 227, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	169, 167, 223, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 223, 42, 42, 42, 42, 42, 42, 
	42, 42, 225, 42, 42, 226, 42, 42, 
	42, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 42, 42, 42, 42, 42, 
	42, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 42, 42, 42, 
	229, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 230, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 230, 0, 0, 0, 
	0, 0, 0, 0, 231, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 0, 0, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	0, 0, 0, 232, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	233, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 233, 
	0, 0, 0, 0, 0, 0, 0, 234, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 0, 0, 0, 235, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 236, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 236, 5, 5, 5, 5, 5, 
	5, 5, 237, 5, 238, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 238, 7, 239, 7, 7, 
	7, 7, 7, 240, 241, 7, 7, 242, 
	7, 7, 7, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 7, 7, 
	7, 7, 7, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 7, 
	7, 7, 243, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 238, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 238, 15, 
	239, 15, 15, 15, 15, 15, 15, 241, 
	15, 15, 242, 15, 15, 15, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	15, 15, 15, 15, 15, 15, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 15, 15, 15, 245, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 247, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 248, 246, 249, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 249, 20, 20, 
	20, 20, 20, 20, 20, 20, 250, 20, 
	20, 251, 20, 252, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 252, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 253, 5, 
	242, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 242, 
	7, 239, 7, 7, 7, 7, 7, 240, 
	241, 7, 7, 242, 7, 7, 7, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 244, 7, 7, 7, 7, 7, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 7, 7, 7, 243, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 252, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 252, 26, 26, 26, 26, 26, 
	26, 26, 26, 254, 26, 26, 253, 26, 
	255, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 255, 
	26, 256, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	256, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 5, 
	258, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 258, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 5, 260, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 260, 0, 
	0, 0, 0, 0, 0, 0, 261, 0, 
	0, 0, 0, 0, 0, 0, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	0, 0, 0, 0, 0, 0, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 0, 0, 0, 262, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 263, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 263, 7, 264, 7, 7, 7, 7, 
	7, 265, 266, 7, 7, 267, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 269, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 263, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 263, 15, 264, 15, 
	15, 15, 15, 15, 15, 266, 15, 15, 
	267, 15, 15, 15, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 15, 15, 
	15, 15, 15, 15, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	15, 15, 15, 270, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	272, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 273, 271, 274, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 274, 20, 20, 20, 20, 
	20, 20, 20, 20, 275, 20, 20, 276, 
	20, 277, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	277, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 278, 5, 267, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 267, 7, 264, 
	7, 7, 7, 7, 7, 265, 266, 7, 
	7, 267, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 269, 
	7, 7, 7, 7, 7, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 7, 7, 7, 268, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 277, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	277, 26, 26, 26, 26, 26, 26, 26, 
	26, 279, 26, 26, 278, 26, 280, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 280, 42, 42, 
	42, 42, 42, 42, 42, 281, 282, 42, 
	42, 283, 42, 42, 42, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 285, 
	42, 42, 42, 42, 42, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 42, 42, 42, 284, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 273, 271, 280, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 280, 42, 42, 42, 42, 42, 
	42, 42, 42, 282, 42, 42, 283, 42, 
	42, 42, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 42, 42, 42, 42, 
	42, 42, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 42, 42, 
	42, 286, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 287, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 287, 0, 0, 
	0, 0, 0, 0, 0, 288, 0, 0, 
	0, 0, 0, 0, 0, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 0, 
	0, 0, 0, 0, 0, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 0, 0, 0, 289, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 290, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	290, 5, 5, 5, 5, 5, 5, 5, 
	291, 5, 292, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 292, 42, 42, 42, 42, 42, 42, 
	42, 293, 294, 42, 42, 295, 42, 42, 
	42, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 297, 42, 42, 42, 42, 
	42, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 42, 42, 42, 
	296, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 248, 246, 292, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 292, 42, 
	42, 42, 42, 42, 42, 42, 42, 294, 
	42, 42, 295, 42, 42, 42, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	42, 42, 42, 42, 42, 42, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 42, 42, 42, 298, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 299, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 299, 0, 0, 0, 0, 0, 0, 
	0, 300, 0, 0, 0, 0, 0, 0, 
	0, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 0, 0, 0, 0, 0, 
	0, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 0, 0, 0, 
	301, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 5, 5, 5, 
	5, 26, 26, 5, 5, 5, 26, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 22, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 19, 4, 0, 
	21, 5, 6, 20, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 15, 132, 16, 17, 18, 
	18, 132, 0, 7, 9, 10, 8, 19, 
	4, 21, 2, 3, 22, 133, 24, 133, 
	24, 0, 134, 26, 26, 27, 28, 134, 
	0, 30, 135, 31, 35, 30, 0, 34, 
	31, 32, 33, 135, 135, 34, 35, 30, 
	37, 38, 48, 37, 38, 39, 40, 44, 
	136, 43, 45, 39, 47, 40, 41, 46, 
	42, 136, 43, 42, 43, 136, 42, 44, 
	136, 43, 45, 39, 47, 37, 38, 48, 
	50, 51, 62, 50, 51, 52, 53, 57, 
	58, 56, 59, 52, 61, 53, 54, 60, 
	55, 58, 56, 55, 56, 58, 137, 55, 
	57, 58, 56, 59, 52, 61, 50, 51, 
	62, 64, 138, 64, 139, 66, 67, 68, 
	68, 139, 70, 71, 102, 70, 71, 72, 
	73, 77, 78, 76, 99, 72, 101, 73, 
	74, 100, 75, 78, 76, 75, 76, 78, 
	79, 79, 80, 81, 80, 81, 82, 97, 
	83, 84, 88, 89, 87, 94, 83, 96, 
	84, 85, 95, 86, 89, 87, 86, 87, 
	89, 90, 140, 91, 90, 140, 91, 92, 
	93, 93, 140, 86, 88, 89, 87, 94, 
	83, 96, 98, 82, 97, 98, 82, 75, 
	77, 78, 76, 99, 72, 101, 70, 71, 
	102, 104, 105, 131, 104, 105, 106, 107, 
	111, 112, 110, 128, 106, 130, 107, 108, 
	129, 109, 112, 110, 109, 110, 112, 113, 
	113, 114, 115, 114, 115, 116, 126, 117, 
	118, 122, 141, 121, 123, 117, 125, 118, 
	119, 124, 120, 141, 121, 120, 121, 141, 
	120, 122, 141, 121, 123, 117, 125, 127, 
	116, 126, 127, 116, 109, 111, 112, 110, 
	128, 106, 130, 104, 105, 131
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 0, 28, 0, 29, 0, 0, 30, 
	31, 32, 34, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 42, 16, 43, 
	39, 44, 45, 10, 18, 18, 18, 46, 
	48, 0, 49, 10, 16, 13, 51, 16, 
	18, 18, 18, 52, 53, 39, 39, 38, 
	54, 55, 56, 0, 6, 9, 10, 11, 
	57, 9, 12, 13, 16, 18, 18, 18, 
	21, 58, 21, 0, 0, 59, 35, 36, 
	60, 35, 37, 38, 39, 40, 41, 37, 
	61, 62, 63, 0, 6, 9, 10, 11, 
	9, 9, 12, 13, 16, 18, 18, 18, 
	21, 21, 21, 0, 0, 0, 64, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 25, 65, 27, 66, 0, 0, 30, 
	31, 67, 61, 62, 63, 0, 6, 9, 
	10, 11, 9, 9, 12, 13, 16, 18, 
	18, 18, 21, 21, 21, 0, 0, 0, 
	68, 0, 25, 69, 27, 61, 62, 63, 
	9, 10, 11, 9, 9, 12, 13, 16, 
	18, 18, 18, 21, 21, 21, 0, 0, 
	0, 70, 71, 70, 0, 72, 0, 0, 
	30, 31, 73, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 0, 6, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 74, 75, 76, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 24, 
	0, 25, 26, 27, 61, 77, 63, 9, 
	10, 11, 78, 9, 12, 13, 16, 18, 
	18, 18, 21, 79, 21, 0, 0, 80, 
	35, 36, 81, 35, 37, 38, 39, 40, 
	41, 37, 0, 6, 35, 36, 35, 35, 
	37, 38, 39, 40, 41, 37
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 0, 0, 0, 
	0, 0, 0, 33, 17, 33, 1, 1, 
	1, 17, 17, 17, 17, 47, 50, 17, 
	17, 17, 1, 1, 1, 0, 7, 14, 
	17, 19, 0, 7, 22, 33, 17, 33, 
	1, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 33, 17, 33, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 0, 
	0, 1, 7, 14, 17, 19, 0, 7, 
	22, 22, 0, 0, 0, 0, 33, 17, 
	33, 1, 0, 33, 17, 33, 1, 1, 
	0, 7, 14, 17, 19, 0, 7, 22, 
	22, 0, 0, 1, 7, 14, 17, 19, 
	0, 7, 22, 33, 17, 33, 1, 0, 
	33, 17, 33, 1, 0, 0, 0, 0, 
	82, 82, 0, 0, 0, 82
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 132;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 44 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 59 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 31 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 66 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 68 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 70 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 72 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 28 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 37 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 43 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 46 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 51 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 30 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 73 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 32 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 71 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 42 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 38 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 45 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 80 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 53 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 60 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 63 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 61 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 54 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 5 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 81 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 79 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 3 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 74 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 4 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 75 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 49 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 57 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 82 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 47 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 33 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 50 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 10, 122, 
	10, 122, 10, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	122, 92, 92, 9, 122, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 44, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 122, 
	9, 122, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 32, 1, 39, 
	1, 1, 1, 114, 1, 114, 114, 113, 
	113, 25, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 114, 32, 114, 114, 
	59, 36, 36, 114, 36, 114, 1, 114, 
	114, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 1, 114, 1, 114, 114, 94, 
	117, 38, 1, 1, 1, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 24, 118, 
	118, 114, 114, 114, 59, 36, 36, 114, 
	36, 39, 39, 1, 1, 1, 114, 1, 
	114, 114, 32, 114, 1, 114, 114, 114, 
	32, 114, 114, 59, 36, 36, 114, 36, 
	24, 118, 118, 114, 114, 114, 59, 36, 
	36, 114, 36, 114, 1, 114, 114, 32, 
	114, 1, 114, 114, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 960, 962, 
	1002, 1004, 1006, 1008, 1123, 1125, 1240, 1355, 
	1469, 1583, 1609, 1669, 1671, 1673, 1788, 1903, 
	1963, 1965, 1967, 2081, 2195, 2310, 2343, 2458, 
	2573, 2633, 2670, 2707, 2822, 2859, 2974, 2976, 
	3091, 3206, 3321, 3354, 3469, 3584, 3644, 3681, 
	3718, 3833, 3870, 3872, 3987, 3989, 4104, 4219, 
	4314, 4432, 4471, 4473, 4475, 4477, 4592, 4625, 
	4740, 4855, 4915, 4952, 4989, 5104, 5141, 5166, 
	5285, 5404, 5519, 5634, 5749, 5809, 5846, 5883, 
	5998, 6035, 6075, 6115, 6117, 6119, 6121, 6236, 
	6238, 6353, 6468, 6501, 6616, 6618, 6733, 6848, 
	6963, 6996, 7111, 7226, 7286, 7323, 7360, 7475, 
	7512, 7537, 7656, 7775, 7890, 8005, 8120, 8180, 
	8217, 8254, 8369, 8406, 8521, 8523, 8638, 8753, 
	8786, 8901, 8903, 9018, 9133, 9134, 9135, 9136, 
	9137, 9138, 9139, 9140, 9141, 9142
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 33, 5, 
	5, 5, 5, 5, 5, 5, 34, 5, 
	35, 5, 35, 36, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 35, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	37, 5, 38, 5, 5, 39, 41, 40, 
	43, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 43, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	45, 42, 42, 46, 42, 42, 42, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 48, 42, 42, 42, 42, 42, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 42, 42, 42, 47, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 19, 17, 43, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 43, 42, 42, 42, 
	42, 42, 42, 42, 42, 45, 42, 42, 
	46, 42, 42, 42, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 42, 42, 
	42, 42, 42, 42, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	42, 42, 42, 49, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	50, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 0, 0, 0, 0, 0, 0, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 0, 0, 0, 52, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 53, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 0, 0, 0, 0, 0, 
	0, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 0, 0, 0, 
	54, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 0, 0, 0, 
	0, 0, 0, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 0, 
	0, 0, 56, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 58, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 59, 
	57, 61, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 62, 60, 63, 57, 62, 
	60, 65, 66, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	65, 64, 67, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 69, 64, 64, 64, 64, 64, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 64, 64, 64, 68, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 65, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 65, 70, 67, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 70, 70, 70, 
	70, 70, 70, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 70, 
	70, 70, 71, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 75, 57, 74, 72, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 77, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 79, 0, 0, 0, 0, 0, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 0, 0, 0, 78, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 80, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 80, 0, 0, 0, 0, 0, 
	0, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 0, 0, 0, 0, 
	0, 0, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 0, 0, 
	0, 82, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 83, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 83, 5, 5, 
	5, 5, 5, 5, 5, 84, 5, 85, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 7, 
	86, 7, 7, 7, 7, 7, 87, 88, 
	7, 7, 89, 7, 7, 7, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	91, 7, 7, 7, 7, 7, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 7, 7, 7, 90, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 85, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 85, 15, 86, 15, 15, 15, 15, 
	15, 15, 88, 15, 15, 89, 15, 15, 
	15, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 15, 15, 15, 15, 15, 
	15, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 15, 15, 15, 
	92, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 94, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 95, 
	93, 96, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	96, 20, 20, 20, 20, 20, 20, 20, 
	20, 97, 20, 20, 98, 20, 99, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 99, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 100, 5, 89, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 89, 7, 86, 7, 7, 7, 
	7, 7, 87, 88, 7, 7, 89, 7, 
	7, 7, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 91, 7, 7, 7, 
	7, 7, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 7, 7, 
	7, 90, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 99, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 99, 26, 26, 
	26, 26, 26, 26, 26, 26, 101, 26, 
	26, 100, 26, 102, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 102, 42, 42, 42, 42, 42, 
	42, 42, 103, 104, 42, 42, 105, 42, 
	42, 42, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 107, 42, 42, 42, 
	42, 42, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 42, 42, 
	42, 106, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 95, 93, 
	102, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 102, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	104, 42, 42, 105, 42, 42, 42, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 42, 42, 42, 42, 42, 42, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 42, 42, 42, 108, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 109, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 109, 0, 0, 0, 0, 0, 
	0, 0, 110, 0, 0, 0, 0, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 112, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	0, 0, 0, 0, 0, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 0, 
	0, 0, 0, 0, 0, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 0, 0, 0, 114, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 115, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	115, 5, 5, 5, 5, 5, 5, 5, 
	116, 5, 117, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 118, 7, 7, 7, 7, 
	7, 119, 120, 7, 7, 121, 7, 7, 
	7, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 123, 7, 7, 7, 7, 
	7, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 7, 7, 7, 
	122, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 117, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 117, 15, 118, 15, 
	15, 15, 15, 15, 15, 120, 15, 15, 
	121, 15, 15, 15, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 15, 15, 
	15, 15, 15, 15, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	15, 15, 15, 124, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	126, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 127, 125, 128, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 128, 20, 20, 20, 20, 
	20, 20, 20, 20, 129, 20, 20, 130, 
	20, 131, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	131, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 132, 5, 121, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 121, 7, 118, 
	7, 7, 7, 7, 7, 119, 120, 7, 
	7, 121, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 123, 
	7, 7, 7, 7, 7, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 7, 7, 7, 122, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 131, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	131, 26, 26, 26, 26, 26, 26, 26, 
	26, 133, 26, 26, 132, 26, 134, 26, 
	135, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 135, 
	42, 42, 42, 42, 42, 42, 42, 136, 
	137, 42, 42, 138, 42, 42, 42, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 140, 42, 42, 42, 42, 42, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 42, 42, 42, 139, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 127, 125, 135, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 135, 42, 42, 42, 
	42, 42, 42, 42, 42, 137, 42, 42, 
	138, 42, 42, 42, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 42, 42, 
	42, 42, 42, 42, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	42, 42, 42, 141, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	142, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 142, 
	0, 0, 0, 0, 0, 0, 0, 143, 
	0, 0, 0, 0, 0, 0, 0, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 0, 0, 0, 0, 0, 0, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 0, 0, 0, 144, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 5, 146, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 149, 5, 150, 
	5, 5, 151, 153, 152, 154, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 154, 0, 0, 0, 
	0, 0, 0, 0, 155, 0, 0, 0, 
	0, 0, 0, 0, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 0, 0, 
	0, 0, 0, 0, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	0, 0, 0, 156, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	157, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 157, 
	5, 5, 5, 5, 5, 5, 5, 158, 
	5, 159, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	159, 7, 160, 7, 7, 7, 7, 7, 
	161, 162, 7, 7, 163, 7, 7, 7, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 165, 7, 7, 7, 7, 7, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 7, 7, 7, 164, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 159, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 159, 15, 160, 15, 15, 
	15, 15, 15, 15, 162, 15, 15, 163, 
	15, 15, 15, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 15, 15, 15, 
	15, 15, 15, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 15, 
	15, 15, 166, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 168, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 169, 167, 170, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 170, 20, 20, 20, 20, 20, 
	20, 20, 20, 171, 20, 20, 172, 20, 
	173, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 173, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 174, 5, 163, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 163, 7, 160, 7, 
	7, 7, 7, 7, 161, 162, 7, 7, 
	163, 7, 7, 7, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 165, 7, 
	7, 7, 7, 7, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	7, 7, 7, 164, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	173, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 173, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	175, 26, 26, 174, 26, 176, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 176, 26, 177, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 177, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 5, 179, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 179, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 5, 181, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 181, 0, 0, 0, 0, 
	0, 0, 0, 182, 0, 0, 0, 0, 
	0, 0, 0, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 0, 0, 0, 
	0, 0, 0, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 0, 
	0, 0, 183, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 184, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	185, 7, 7, 7, 7, 7, 186, 187, 
	7, 7, 188, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	190, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 184, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 184, 15, 185, 15, 15, 15, 15, 
	15, 15, 187, 15, 15, 188, 15, 15, 
	15, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 15, 15, 15, 15, 15, 
	15, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 15, 15, 15, 
	191, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 193, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 194, 
	192, 195, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	195, 20, 20, 20, 20, 20, 20, 20, 
	20, 196, 20, 20, 197, 20, 198, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 198, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 199, 5, 188, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 188, 7, 185, 7, 7, 7, 
	7, 7, 186, 187, 7, 7, 188, 7, 
	7, 7, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 190, 7, 7, 7, 
	7, 7, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 7, 7, 
	7, 189, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 198, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 198, 26, 26, 
	26, 26, 26, 26, 26, 26, 200, 26, 
	26, 199, 26, 201, 202, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 201, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 203, 26, 204, 205, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 204, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 206, 5, 207, 5, 5, 208, 210, 
	209, 211, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	211, 42, 42, 42, 42, 42, 42, 42, 
	212, 213, 42, 42, 214, 42, 42, 42, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 216, 42, 42, 42, 42, 42, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 42, 42, 42, 215, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 194, 192, 211, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 211, 42, 42, 
	42, 42, 42, 42, 42, 42, 213, 42, 
	42, 214, 42, 42, 42, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 42, 
	42, 42, 42, 42, 42, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 42, 42, 42, 217, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 218, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	218, 0, 0, 0, 0, 0, 0, 0, 
	219, 0, 0, 0, 0, 0, 0, 0, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 0, 0, 0, 0, 0, 0, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 0, 0, 0, 220, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 221, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 221, 5, 5, 5, 5, 
	5, 5, 5, 222, 5, 223, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 223, 42, 42, 42, 
	42, 42, 42, 42, 224, 225, 42, 42, 
	226, 42, 42, 42, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 228, 42, 
	42, 42, 42, 42, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	42, 42, 42, 227, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	169, 167, 223, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 223, 42, 42, 42, 42, 42, 42, 
	42, 42, 225, 42, 42, 226, 42, 42, 
	42, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 42, 42, 42, 42, 42, 
	42, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 42, 42, 42, 
	229, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 230, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 230, 0, 0, 0, 
	0, 0, 0, 0, 231, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 0, 0, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	0, 0, 0, 232, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	233, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 233, 
	0, 0, 0, 0, 0, 0, 0, 234, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 0, 0, 0, 235, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 236, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 236, 5, 5, 5, 5, 5, 
	5, 5, 237, 5, 238, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 238, 7, 239, 7, 7, 
	7, 7, 7, 240, 241, 7, 7, 242, 
	7, 7, 7, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 7, 7, 
	7, 7, 7, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 7, 
	7, 7, 243, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 238, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 238, 15, 
	239, 15, 15, 15, 15, 15, 15, 241, 
	15, 15, 242, 15, 15, 15, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	15, 15, 15, 15, 15, 15, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 15, 15, 15, 245, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 247, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 248, 246, 249, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 249, 20, 20, 
	20, 20, 20, 20, 20, 20, 250, 20, 
	20, 251, 20, 252, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 252, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 253, 5, 
	242, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 242, 
	7, 239, 7, 7, 7, 7, 7, 240, 
	241, 7, 7, 242, 7, 7, 7, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 244, 7, 7, 7, 7, 7, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 7, 7, 7, 243, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 252, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 252, 26, 26, 26, 26, 26, 
	26, 26, 26, 254, 26, 26, 253, 26, 
	255, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 255, 
	26, 256, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	256, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 5, 
	258, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 258, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 5, 260, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 260, 0, 
	0, 0, 0, 0, 0, 0, 261, 0, 
	0, 0, 0, 0, 0, 0, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	0, 0, 0, 0, 0, 0, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 0, 0, 0, 262, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 263, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 263, 7, 264, 7, 7, 7, 7, 
	7, 265, 266, 7, 7, 267, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 269, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 263, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 263, 15, 264, 15, 
	15, 15, 15, 15, 15, 266, 15, 15, 
	267, 15, 15, 15, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 15, 15, 
	15, 15, 15, 15, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	15, 15, 15, 270, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	272, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 273, 271, 274, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 274, 20, 20, 20, 20, 
	20, 20, 20, 20, 275, 20, 20, 276, 
	20, 277, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	277, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 278, 5, 267, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 267, 7, 264, 
	7, 7, 7, 7, 7, 265, 266, 7, 
	7, 267, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 269, 
	7, 7, 7, 7, 7, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 7, 7, 7, 268, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 277, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	277, 26, 26, 26, 26, 26, 26, 26, 
	26, 279, 26, 26, 278, 26, 280, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 280, 42, 42, 
	42, 42, 42, 42, 42, 281, 282, 42, 
	42, 283, 42, 42, 42, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 285, 
	42, 42, 42, 42, 42, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 42, 42, 42, 284, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 273, 271, 280, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 280, 42, 42, 42, 42, 42, 
	42, 42, 42, 282, 42, 42, 283, 42, 
	42, 42, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 42, 42, 42, 42, 
	42, 42, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 42, 42, 
	42, 286, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 287, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 287, 0, 0, 
	0, 0, 0, 0, 0, 288, 0, 0, 
	0, 0, 0, 0, 0, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 0, 
	0, 0, 0, 0, 0, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 0, 0, 0, 289, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 290, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	290, 5, 5, 5, 5, 5, 5, 5, 
	291, 5, 292, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 292, 42, 42, 42, 42, 42, 42, 
	42, 293, 294, 42, 42, 295, 42, 42, 
	42, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 297, 42, 42, 42, 42, 
	42, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 42, 42, 42, 
	296, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 248, 246, 292, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 292, 42, 
	42, 42, 42, 42, 42, 42, 42, 294, 
	42, 42, 295, 42, 42, 42, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	42, 42, 42, 42, 42, 42, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 42, 42, 42, 298, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 299, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 299, 0, 0, 0, 0, 0, 0, 
	0, 300, 0, 0, 0, 0, 0, 0, 
	0, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 0, 0, 0, 0, 0, 
	0, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 0, 0, 0, 
	301, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 5, 5, 5, 
	5, 26, 26, 5, 5, 5, 26, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 22, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 19, 4, 0, 
	21, 5, 6, 20, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 15, 132, 16, 17, 18, 
	18, 132, 0, 7, 9, 10, 8, 19, 
	4, 21, 2, 3, 22, 133, 24, 133, 
	24, 0, 134, 26, 26, 27, 28, 134, 
	0, 30, 135, 31, 35, 30, 0, 34, 
	31, 32, 33, 135, 135, 34, 35, 30, 
	37, 38, 48, 37, 38, 39, 40, 44, 
	136, 43, 45, 39, 47, 40, 41, 46, 
	42, 136, 43, 42, 43, 136, 42, 44, 
	136, 43, 45, 39, 47, 37, 38, 48, 
	50, 51, 62, 50, 51, 52, 53, 57, 
	58, 56, 59, 52, 61, 53, 54, 60, 
	55, 58, 56, 55, 56, 58, 137, 55, 
	57, 58, 56, 59, 52, 61, 50, 51, 
	62, 64, 138, 64, 139, 66, 67, 68, 
	68, 139, 70, 71, 102, 70, 71, 72, 
	73, 77, 78, 76, 99, 72, 101, 73, 
	74, 100, 75, 78, 76, 75, 76, 78, 
	79, 79, 80, 81, 80, 81, 82, 97, 
	83, 84, 88, 89, 87, 94, 83, 96, 
	84, 85, 95, 86, 89, 87, 86, 87, 
	89, 90, 140, 91, 90, 140, 91, 92, 
	93, 93, 140, 86, 88, 89, 87, 94, 
	83, 96, 98, 82, 97, 98, 82, 75, 
	77, 78, 76, 99, 72, 101, 70, 71, 
	102, 104, 105, 131, 104, 105, 106, 107, 
	111, 112, 110, 128, 106, 130, 107, 108, 
	129, 109, 112, 110, 109, 110, 112, 113, 
	113, 114, 115, 114, 115, 116, 126, 117, 
	118, 122, 141, 121, 123, 117, 125, 118, 
	119, 124, 120, 141, 121, 120, 121, 141, 
	120, 122, 141, 121, 123, 117, 125, 127, 
	116, 126, 127, 116, 109, 111, 112, 110, 
	128, 106, 130, 104, 105, 131
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 0, 28, 0, 29, 0, 0, 30, 
	31, 32, 34, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 42, 16, 43, 
	39, 44, 45, 10, 18, 18, 18, 46, 
	48, 0, 49, 10, 16, 13, 51, 16, 
	18, 18, 18, 52, 53, 39, 39, 38, 
	54, 55, 56, 0, 6, 9, 10, 11, 
	57, 9, 12, 13, 16, 18, 18, 18, 
	21, 58, 21, 0, 0, 59, 35, 36, 
	60, 35, 37, 38, 39, 40, 41, 37, 
	61, 62, 63, 0, 6, 9, 10, 11, 
	9, 9, 12, 13, 16, 18, 18, 18, 
	21, 21, 21, 0, 0, 0, 64, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 25, 65, 27, 66, 0, 0, 30, 
	31, 67, 61, 62, 63, 0, 6, 9, 
	10, 11, 9, 9, 12, 13, 16, 18, 
	18, 18, 21, 21, 21, 0, 0, 0, 
	68, 0, 25, 69, 27, 61, 62, 63, 
	9, 10, 11, 9, 9, 12, 13, 16, 
	18, 18, 18, 21, 21, 21, 0, 0, 
	0, 70, 71, 70, 0, 72, 0, 0, 
	30, 31, 73, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 0, 6, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 74, 75, 76, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 24, 
	0, 25, 26, 27, 61, 77, 63, 9, 
	10, 11, 78, 9, 12, 13, 16, 18, 
	18, 18, 21, 79, 21, 0, 0, 80, 
	35, 36, 81, 35, 37, 38, 39, 40, 
	41, 37, 0, 6, 35, 36, 35, 35, 
	37, 38, 39, 40, 41, 37
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 0, 0, 0, 
	0, 0, 0, 33, 17, 33, 1, 1, 
	1, 17, 17, 17, 17, 47, 50, 17, 
	17, 17, 1, 1, 1, 0, 7, 14, 
	17, 19, 0, 7, 22, 33, 17, 33, 
	1, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 33, 17, 33, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 0, 
	0, 1, 7, 14, 17, 19, 0, 7, 
	22, 22, 0, 0, 0, 0, 33, 17, 
	33, 1, 0, 33, 17, 33, 1, 1, 
	0, 7, 14, 17, 19, 0, 7, 22, 
	22, 0, 0, 1, 7, 14, 17, 19, 
	0, 7, 22, 33, 17, 33, 1, 0, 
	33, 17, 33, 1, 0, 0, 0, 0, 
	82, 82, 0, 0, 0, 82
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 132;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 44 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 59 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 31 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 66 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 68 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 70 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 72 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 28 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 37 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 43 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 46 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 51 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 30 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 73 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 32 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 71 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 42 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 38 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 45 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 80 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 53 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 60 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 63 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 61 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 54 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 5 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 81 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 79 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 3 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 74 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 4 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 75 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 49 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 57 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 82 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 47 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 33 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 50 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end


=end
# end: ragel

require_relative '../ast/node'
require_relative '../mixin/buffer'
require_relative '../nonblocking_io_wrapper'

module BELParser
  module Parsers
    module Expression
      module NestedStatement

        class << self

          MAX_LENGTH = 1024 * 128 # 128K

          def parse(content)
            return nil unless content

            Parser.new(content).each do |obj|
              yield obj
            end
          end
        end

        private

        class Parser
          include Enumerable
          include BELParser::Parsers::Buffer
          include BELParser::Parsers::AST::Sexp

          def initialize(content)
            @content = content
      # begin: ragel        
            
class << self
	attr_accessor :_bel_trans_keys
	private :_bel_trans_keys, :_bel_trans_keys=
end
self._bel_trans_keys = [
	0, 0, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 32, 
	9, 126, 9, 126, 9, 
	40, 41, 41, 9, 47, 
	47, 47, 10, 10, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 10, 122, 
	10, 122, 10, 34, 34, 92, 
	10, 10, 92, 92, 9, 
	122, 9, 122, 34, 92, 
	10, 10, 92, 92, 10, 122, 
	10, 122, 9, 122, 9, 
	40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 44, 
	9, 122, 9, 44, 9, 
	122, 92, 92, 9, 122, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 9, 122, 34, 
	92, 9, 44, 9, 44, 
	9, 122, 9, 44, 10, 10, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 33, 126, 
	10, 126, 10, 47, 47, 47, 
	10, 10, 10, 10, 9, 
	122, 9, 40, 9, 122, 
	9, 122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 
	44, 9, 32, 9, 126, 
	9, 126, 9, 122, 9, 122, 
	9, 122, 34, 92, 9, 
	44, 9, 44, 9, 122, 
	9, 44, 9, 47, 9, 47, 
	47, 47, 10, 10, 10, 
	10, 9, 122, 92, 92, 
	9, 122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 122, 
	9, 40, 9, 122, 9, 122, 
	34, 92, 9, 44, 9, 
	44, 9, 122, 9, 44, 
	9, 32, 9, 126, 9, 126, 
	9, 122, 9, 122, 9, 
	122, 34, 92, 9, 44, 
	9, 44, 9, 122, 9, 44, 
	9, 122, 92, 92, 9, 
	122, 9, 122, 9, 40, 
	9, 122, 92, 92, 9, 122, 
	9, 122, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_bel_key_spans
	private :_bel_key_spans, :_bel_key_spans=
end
self._bel_key_spans = [
	0, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 24, 118, 118, 32, 1, 39, 
	1, 1, 1, 114, 1, 114, 114, 113, 
	113, 25, 59, 1, 1, 114, 114, 59, 
	1, 1, 113, 113, 114, 32, 114, 114, 
	59, 36, 36, 114, 36, 114, 1, 114, 
	114, 114, 32, 114, 114, 59, 36, 36, 
	114, 36, 1, 114, 1, 114, 114, 94, 
	117, 38, 1, 1, 1, 114, 32, 114, 
	114, 59, 36, 36, 114, 36, 24, 118, 
	118, 114, 114, 114, 59, 36, 36, 114, 
	36, 39, 39, 1, 1, 1, 114, 1, 
	114, 114, 32, 114, 1, 114, 114, 114, 
	32, 114, 114, 59, 36, 36, 114, 36, 
	24, 118, 118, 114, 114, 114, 59, 36, 
	36, 114, 36, 114, 1, 114, 114, 32, 
	114, 1, 114, 114, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_bel_index_offsets
	private :_bel_index_offsets, :_bel_index_offsets=
end
self._bel_index_offsets = [
	0, 0, 115, 148, 263, 378, 438, 475, 
	512, 627, 664, 689, 808, 927, 960, 962, 
	1002, 1004, 1006, 1008, 1123, 1125, 1240, 1355, 
	1469, 1583, 1609, 1669, 1671, 1673, 1788, 1903, 
	1963, 1965, 1967, 2081, 2195, 2310, 2343, 2458, 
	2573, 2633, 2670, 2707, 2822, 2859, 2974, 2976, 
	3091, 3206, 3321, 3354, 3469, 3584, 3644, 3681, 
	3718, 3833, 3870, 3872, 3987, 3989, 4104, 4219, 
	4314, 4432, 4471, 4473, 4475, 4477, 4592, 4625, 
	4740, 4855, 4915, 4952, 4989, 5104, 5141, 5166, 
	5285, 5404, 5519, 5634, 5749, 5809, 5846, 5883, 
	5998, 6035, 6075, 6115, 6117, 6119, 6121, 6236, 
	6238, 6353, 6468, 6501, 6616, 6618, 6733, 6848, 
	6963, 6996, 7111, 7226, 7286, 7323, 7360, 7475, 
	7512, 7537, 7656, 7775, 7890, 8005, 8120, 8180, 
	8217, 8254, 8369, 8406, 8521, 8523, 8638, 8753, 
	8786, 8901, 8903, 9018, 9133, 9134, 9135, 9136, 
	9137, 9138, 9139, 9140, 9141, 9142
]

class << self
	attr_accessor :_bel_indicies
	private :_bel_indicies, :_bel_indicies=
end
self._bel_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 5, 6, 5, 8, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 8, 7, 9, 7, 7, 
	7, 7, 7, 10, 11, 7, 7, 12, 
	7, 7, 7, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 14, 7, 7, 
	7, 7, 7, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 7, 
	7, 7, 13, 7, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 7, 8, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 8, 15, 
	9, 15, 15, 15, 15, 15, 15, 11, 
	15, 15, 12, 15, 15, 15, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	15, 15, 15, 15, 15, 15, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 15, 15, 15, 16, 15, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 15, 18, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 19, 17, 21, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 21, 20, 20, 
	20, 20, 20, 20, 20, 20, 22, 20, 
	20, 23, 20, 24, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 24, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 25, 5, 
	12, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 12, 
	7, 9, 7, 7, 7, 7, 7, 10, 
	11, 7, 7, 12, 7, 7, 7, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 14, 7, 7, 7, 7, 7, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 7, 7, 7, 13, 7, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 7, 24, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 24, 26, 26, 26, 26, 26, 
	26, 26, 26, 27, 26, 26, 25, 26, 
	28, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 28, 
	26, 29, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	29, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	30, 30, 30, 30, 30, 30, 30, 5, 
	31, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 31, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 5, 33, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 33, 5, 
	5, 5, 5, 5, 5, 5, 34, 5, 
	35, 5, 35, 36, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 35, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	37, 5, 38, 5, 5, 39, 41, 40, 
	43, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 43, 
	42, 42, 42, 42, 42, 42, 42, 44, 
	45, 42, 42, 46, 42, 42, 42, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 48, 42, 42, 42, 42, 42, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 42, 42, 42, 47, 42, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 42, 19, 17, 43, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 43, 42, 42, 42, 
	42, 42, 42, 42, 42, 45, 42, 42, 
	46, 42, 42, 42, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 42, 42, 
	42, 42, 42, 42, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	42, 42, 42, 49, 42, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 42, 
	50, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 0, 0, 0, 0, 0, 0, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 0, 0, 0, 52, 0, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 0, 53, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 0, 0, 0, 0, 0, 
	0, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 0, 0, 0, 
	54, 0, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 0, 0, 0, 
	0, 0, 0, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 0, 
	0, 0, 56, 0, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 0, 58, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 59, 
	57, 61, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 60, 60, 60, 60, 60, 
	60, 60, 60, 62, 60, 63, 57, 62, 
	60, 65, 66, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	65, 64, 67, 64, 64, 64, 64, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 69, 64, 64, 64, 64, 64, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 64, 64, 64, 68, 
	64, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 68, 68, 68, 68, 68, 
	68, 68, 68, 64, 65, 66, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 65, 70, 67, 70, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 70, 70, 70, 
	70, 70, 70, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 70, 
	70, 70, 71, 70, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 71, 71, 
	71, 71, 71, 71, 71, 71, 70, 73, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 74, 72, 75, 57, 74, 72, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 77, 0, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 79, 0, 0, 0, 0, 0, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 0, 0, 0, 78, 0, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 0, 80, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 80, 0, 0, 0, 0, 0, 
	0, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 0, 0, 0, 0, 
	0, 0, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 0, 0, 
	0, 82, 0, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 0, 83, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 83, 5, 5, 
	5, 5, 5, 5, 5, 84, 5, 85, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 85, 7, 
	86, 7, 7, 7, 7, 7, 87, 88, 
	7, 7, 89, 7, 7, 7, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	91, 7, 7, 7, 7, 7, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 7, 7, 7, 90, 7, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 7, 85, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 85, 15, 86, 15, 15, 15, 15, 
	15, 15, 88, 15, 15, 89, 15, 15, 
	15, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 15, 15, 15, 15, 15, 
	15, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 15, 15, 15, 
	92, 15, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 15, 94, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 95, 
	93, 96, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	96, 20, 20, 20, 20, 20, 20, 20, 
	20, 97, 20, 20, 98, 20, 99, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 99, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 100, 5, 89, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 89, 7, 86, 7, 7, 7, 
	7, 7, 87, 88, 7, 7, 89, 7, 
	7, 7, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 91, 7, 7, 7, 
	7, 7, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 7, 7, 
	7, 90, 7, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 7, 99, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 99, 26, 26, 
	26, 26, 26, 26, 26, 26, 101, 26, 
	26, 100, 26, 102, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 102, 42, 42, 42, 42, 42, 
	42, 42, 103, 104, 42, 42, 105, 42, 
	42, 42, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 107, 42, 42, 42, 
	42, 42, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 42, 42, 
	42, 106, 42, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 42, 95, 93, 
	102, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 102, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	104, 42, 42, 105, 42, 42, 42, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 42, 42, 42, 42, 42, 42, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 42, 42, 42, 108, 42, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 42, 109, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 109, 0, 0, 0, 0, 0, 
	0, 0, 110, 0, 0, 0, 0, 0, 
	0, 0, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 0, 0, 0, 0, 
	0, 0, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 0, 0, 
	0, 111, 0, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 0, 112, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 112, 0, 0, 
	0, 0, 0, 0, 0, 113, 0, 0, 
	0, 0, 0, 0, 0, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 0, 
	0, 0, 0, 0, 0, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 0, 0, 0, 114, 0, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	0, 115, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	115, 5, 5, 5, 5, 5, 5, 5, 
	116, 5, 117, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 117, 7, 118, 7, 7, 7, 7, 
	7, 119, 120, 7, 7, 121, 7, 7, 
	7, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 123, 7, 7, 7, 7, 
	7, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 7, 7, 7, 
	122, 7, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 7, 117, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 117, 15, 118, 15, 
	15, 15, 15, 15, 15, 120, 15, 15, 
	121, 15, 15, 15, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 15, 15, 
	15, 15, 15, 15, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	15, 15, 15, 124, 15, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 15, 
	126, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 125, 125, 125, 125, 125, 125, 
	125, 125, 127, 125, 128, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 128, 20, 20, 20, 20, 
	20, 20, 20, 20, 129, 20, 20, 130, 
	20, 131, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	131, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 132, 5, 121, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 121, 7, 118, 
	7, 7, 7, 7, 7, 119, 120, 7, 
	7, 121, 7, 7, 7, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 123, 
	7, 7, 7, 7, 7, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 7, 7, 7, 122, 7, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	122, 122, 122, 122, 122, 122, 122, 122, 
	7, 131, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	131, 26, 26, 26, 26, 26, 26, 26, 
	26, 133, 26, 26, 132, 26, 134, 26, 
	135, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 135, 
	42, 42, 42, 42, 42, 42, 42, 136, 
	137, 42, 42, 138, 42, 42, 42, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 140, 42, 42, 42, 42, 42, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 42, 42, 42, 139, 42, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 139, 139, 139, 139, 139, 139, 
	139, 139, 42, 127, 125, 135, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 135, 42, 42, 42, 
	42, 42, 42, 42, 42, 137, 42, 42, 
	138, 42, 42, 42, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 42, 42, 
	42, 42, 42, 42, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	42, 42, 42, 141, 42, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 42, 
	142, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 142, 
	0, 0, 0, 0, 0, 0, 0, 143, 
	0, 0, 0, 0, 0, 0, 0, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 0, 0, 0, 0, 0, 0, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 0, 0, 0, 144, 0, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 0, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 145, 145, 145, 145, 145, 145, 145, 
	145, 5, 146, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 5, 
	148, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 149, 5, 150, 
	5, 5, 151, 153, 152, 154, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 154, 0, 0, 0, 
	0, 0, 0, 0, 155, 0, 0, 0, 
	0, 0, 0, 0, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 0, 0, 
	0, 0, 0, 0, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	0, 0, 0, 156, 0, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 0, 
	157, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 157, 
	5, 5, 5, 5, 5, 5, 5, 158, 
	5, 159, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	159, 7, 160, 7, 7, 7, 7, 7, 
	161, 162, 7, 7, 163, 7, 7, 7, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 165, 7, 7, 7, 7, 7, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 7, 7, 7, 164, 
	7, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 7, 159, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 159, 15, 160, 15, 15, 
	15, 15, 15, 15, 162, 15, 15, 163, 
	15, 15, 15, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 15, 15, 15, 
	15, 15, 15, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 15, 
	15, 15, 166, 15, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 15, 168, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 167, 167, 167, 167, 167, 167, 167, 
	167, 169, 167, 170, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 170, 20, 20, 20, 20, 20, 
	20, 20, 20, 171, 20, 20, 172, 20, 
	173, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 173, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 174, 5, 163, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 163, 7, 160, 7, 
	7, 7, 7, 7, 161, 162, 7, 7, 
	163, 7, 7, 7, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 165, 7, 
	7, 7, 7, 7, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	7, 7, 7, 164, 7, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 7, 
	173, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 173, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	175, 26, 26, 174, 26, 176, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 176, 26, 177, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 177, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 5, 179, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 179, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 5, 181, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 181, 0, 0, 0, 0, 
	0, 0, 0, 182, 0, 0, 0, 0, 
	0, 0, 0, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 0, 0, 0, 
	0, 0, 0, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 0, 
	0, 0, 183, 0, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 0, 184, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 184, 7, 
	185, 7, 7, 7, 7, 7, 186, 187, 
	7, 7, 188, 7, 7, 7, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	190, 7, 7, 7, 7, 7, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 7, 7, 7, 189, 7, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 7, 184, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 184, 15, 185, 15, 15, 15, 15, 
	15, 15, 187, 15, 15, 188, 15, 15, 
	15, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 15, 15, 15, 15, 15, 
	15, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 15, 15, 15, 
	191, 15, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 15, 193, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 194, 
	192, 195, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	195, 20, 20, 20, 20, 20, 20, 20, 
	20, 196, 20, 20, 197, 20, 198, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 198, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 199, 5, 188, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 188, 7, 185, 7, 7, 7, 
	7, 7, 186, 187, 7, 7, 188, 7, 
	7, 7, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 190, 7, 7, 7, 
	7, 7, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 7, 7, 
	7, 189, 7, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 7, 198, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 198, 26, 26, 
	26, 26, 26, 26, 26, 26, 200, 26, 
	26, 199, 26, 201, 202, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 201, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 203, 26, 204, 205, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 204, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 206, 5, 207, 5, 5, 208, 210, 
	209, 211, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	211, 42, 42, 42, 42, 42, 42, 42, 
	212, 213, 42, 42, 214, 42, 42, 42, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 216, 42, 42, 42, 42, 42, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 42, 42, 42, 215, 
	42, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 42, 194, 192, 211, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 211, 42, 42, 
	42, 42, 42, 42, 42, 42, 213, 42, 
	42, 214, 42, 42, 42, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 42, 
	42, 42, 42, 42, 42, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 42, 42, 42, 217, 42, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	42, 218, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	218, 0, 0, 0, 0, 0, 0, 0, 
	219, 0, 0, 0, 0, 0, 0, 0, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 0, 0, 0, 0, 0, 0, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 0, 0, 0, 220, 
	0, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 221, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 221, 5, 5, 5, 5, 
	5, 5, 5, 222, 5, 223, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 223, 42, 42, 42, 
	42, 42, 42, 42, 224, 225, 42, 42, 
	226, 42, 42, 42, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 228, 42, 
	42, 42, 42, 42, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	42, 42, 42, 227, 42, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 42, 
	169, 167, 223, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 223, 42, 42, 42, 42, 42, 42, 
	42, 42, 225, 42, 42, 226, 42, 42, 
	42, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 42, 42, 42, 42, 42, 
	42, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 42, 42, 42, 
	229, 42, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 42, 230, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 230, 0, 0, 0, 
	0, 0, 0, 0, 231, 0, 0, 0, 
	0, 0, 0, 0, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 0, 0, 
	0, 0, 0, 0, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	0, 0, 0, 232, 0, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	233, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 233, 
	0, 0, 0, 0, 0, 0, 0, 234, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 0, 0, 0, 235, 0, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 0, 236, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 236, 5, 5, 5, 5, 5, 
	5, 5, 237, 5, 238, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 238, 7, 239, 7, 7, 
	7, 7, 7, 240, 241, 7, 7, 242, 
	7, 7, 7, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 244, 7, 7, 
	7, 7, 7, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 7, 
	7, 7, 243, 7, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 7, 238, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 238, 15, 
	239, 15, 15, 15, 15, 15, 15, 241, 
	15, 15, 242, 15, 15, 15, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	15, 15, 15, 15, 15, 15, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 15, 15, 15, 245, 15, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 15, 247, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 248, 246, 249, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 249, 20, 20, 
	20, 20, 20, 20, 20, 20, 250, 20, 
	20, 251, 20, 252, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 252, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 253, 5, 
	242, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 242, 
	7, 239, 7, 7, 7, 7, 7, 240, 
	241, 7, 7, 242, 7, 7, 7, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 244, 7, 7, 7, 7, 7, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 7, 7, 7, 243, 7, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 7, 252, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 252, 26, 26, 26, 26, 26, 
	26, 26, 26, 254, 26, 26, 253, 26, 
	255, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 255, 
	26, 256, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	256, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 5, 
	258, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 258, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 5, 260, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 260, 0, 
	0, 0, 0, 0, 0, 0, 261, 0, 
	0, 0, 0, 0, 0, 0, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	0, 0, 0, 0, 0, 0, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 0, 0, 0, 262, 0, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 0, 263, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 263, 7, 264, 7, 7, 7, 7, 
	7, 265, 266, 7, 7, 267, 7, 7, 
	7, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 269, 7, 7, 7, 7, 
	7, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 7, 7, 7, 
	268, 7, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 7, 263, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 263, 15, 264, 15, 
	15, 15, 15, 15, 15, 266, 15, 15, 
	267, 15, 15, 15, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 15, 15, 
	15, 15, 15, 15, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	15, 15, 15, 270, 15, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 15, 
	272, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 273, 271, 274, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 274, 20, 20, 20, 20, 
	20, 20, 20, 20, 275, 20, 20, 276, 
	20, 277, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	277, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 278, 5, 267, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 267, 7, 264, 
	7, 7, 7, 7, 7, 265, 266, 7, 
	7, 267, 7, 7, 7, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 269, 
	7, 7, 7, 7, 7, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 7, 7, 7, 268, 7, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	7, 277, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	277, 26, 26, 26, 26, 26, 26, 26, 
	26, 279, 26, 26, 278, 26, 280, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 280, 42, 42, 
	42, 42, 42, 42, 42, 281, 282, 42, 
	42, 283, 42, 42, 42, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 285, 
	42, 42, 42, 42, 42, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 42, 42, 42, 284, 42, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	42, 273, 271, 280, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 280, 42, 42, 42, 42, 42, 
	42, 42, 42, 282, 42, 42, 283, 42, 
	42, 42, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 42, 42, 42, 42, 
	42, 42, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 42, 42, 
	42, 286, 42, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 42, 287, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 287, 0, 0, 
	0, 0, 0, 0, 0, 288, 0, 0, 
	0, 0, 0, 0, 0, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 0, 
	0, 0, 0, 0, 0, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 0, 0, 0, 289, 0, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	0, 290, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	290, 5, 5, 5, 5, 5, 5, 5, 
	291, 5, 292, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 292, 42, 42, 42, 42, 42, 42, 
	42, 293, 294, 42, 42, 295, 42, 42, 
	42, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 297, 42, 42, 42, 42, 
	42, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 42, 42, 42, 
	296, 42, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 42, 248, 246, 292, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 292, 42, 
	42, 42, 42, 42, 42, 42, 42, 294, 
	42, 42, 295, 42, 42, 42, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	42, 42, 42, 42, 42, 42, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 42, 42, 42, 298, 42, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 298, 298, 298, 
	298, 42, 299, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 299, 0, 0, 0, 0, 0, 0, 
	0, 300, 0, 0, 0, 0, 0, 0, 
	0, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 0, 0, 0, 0, 0, 
	0, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 0, 0, 0, 
	301, 0, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 0, 5, 5, 5, 
	5, 26, 26, 5, 5, 5, 26, 0
]

class << self
	attr_accessor :_bel_trans_targs
	private :_bel_trans_targs, :_bel_trans_targs=
end
self._bel_trans_targs = [
	0, 2, 3, 22, 2, 0, 3, 0, 
	4, 5, 9, 10, 8, 19, 4, 0, 
	21, 5, 6, 20, 0, 7, 10, 8, 
	7, 8, 0, 10, 11, 11, 12, 13, 
	12, 13, 14, 15, 132, 16, 17, 18, 
	18, 132, 0, 7, 9, 10, 8, 19, 
	4, 21, 2, 3, 22, 133, 24, 133, 
	24, 0, 134, 26, 26, 27, 28, 134, 
	0, 30, 135, 31, 35, 30, 0, 34, 
	31, 32, 33, 135, 135, 34, 35, 30, 
	37, 38, 48, 37, 38, 39, 40, 44, 
	136, 43, 45, 39, 47, 40, 41, 46, 
	42, 136, 43, 42, 43, 136, 42, 44, 
	136, 43, 45, 39, 47, 37, 38, 48, 
	50, 51, 62, 50, 51, 52, 53, 57, 
	58, 56, 59, 52, 61, 53, 54, 60, 
	55, 58, 56, 55, 56, 58, 137, 55, 
	57, 58, 56, 59, 52, 61, 50, 51, 
	62, 64, 138, 64, 139, 66, 67, 68, 
	68, 139, 70, 71, 102, 70, 71, 72, 
	73, 77, 78, 76, 99, 72, 101, 73, 
	74, 100, 75, 78, 76, 75, 76, 78, 
	79, 79, 80, 81, 80, 81, 82, 97, 
	83, 84, 88, 89, 87, 94, 83, 96, 
	84, 85, 95, 86, 89, 87, 86, 87, 
	89, 90, 140, 91, 90, 140, 91, 92, 
	93, 93, 140, 86, 88, 89, 87, 94, 
	83, 96, 98, 82, 97, 98, 82, 75, 
	77, 78, 76, 99, 72, 101, 70, 71, 
	102, 104, 105, 131, 104, 105, 106, 107, 
	111, 112, 110, 128, 106, 130, 107, 108, 
	129, 109, 112, 110, 109, 110, 112, 113, 
	113, 114, 115, 114, 115, 116, 126, 117, 
	118, 122, 141, 121, 123, 117, 125, 118, 
	119, 124, 120, 141, 121, 120, 121, 141, 
	120, 122, 141, 121, 123, 117, 125, 127, 
	116, 126, 127, 116, 109, 111, 112, 110, 
	128, 106, 130, 104, 105, 131
]

class << self
	attr_accessor :_bel_trans_actions
	private :_bel_trans_actions, :_bel_trans_actions=
end
self._bel_trans_actions = [
	2, 3, 4, 5, 0, 0, 6, 8, 
	9, 10, 11, 9, 9, 12, 13, 15, 
	16, 18, 18, 18, 20, 21, 21, 21, 
	0, 0, 23, 0, 24, 0, 25, 26, 
	27, 0, 28, 0, 29, 0, 0, 30, 
	31, 32, 34, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 42, 16, 43, 
	39, 44, 45, 10, 18, 18, 18, 46, 
	48, 0, 49, 10, 16, 13, 51, 16, 
	18, 18, 18, 52, 53, 39, 39, 38, 
	54, 55, 56, 0, 6, 9, 10, 11, 
	57, 9, 12, 13, 16, 18, 18, 18, 
	21, 58, 21, 0, 0, 59, 35, 36, 
	60, 35, 37, 38, 39, 40, 41, 37, 
	61, 62, 63, 0, 6, 9, 10, 11, 
	9, 9, 12, 13, 16, 18, 18, 18, 
	21, 21, 21, 0, 0, 0, 64, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 25, 65, 27, 66, 0, 0, 30, 
	31, 67, 61, 62, 63, 0, 6, 9, 
	10, 11, 9, 9, 12, 13, 16, 18, 
	18, 18, 21, 21, 21, 0, 0, 0, 
	68, 0, 25, 69, 27, 61, 62, 63, 
	9, 10, 11, 9, 9, 12, 13, 16, 
	18, 18, 18, 21, 21, 21, 0, 0, 
	0, 70, 71, 70, 0, 72, 0, 0, 
	30, 31, 73, 35, 36, 35, 35, 37, 
	38, 39, 40, 41, 37, 0, 6, 35, 
	36, 35, 35, 37, 38, 39, 40, 41, 
	37, 74, 75, 76, 0, 6, 9, 10, 
	11, 9, 9, 12, 13, 16, 18, 18, 
	18, 21, 21, 21, 0, 0, 0, 24, 
	0, 25, 26, 27, 61, 77, 63, 9, 
	10, 11, 78, 9, 12, 13, 16, 18, 
	18, 18, 21, 79, 21, 0, 0, 80, 
	35, 36, 81, 35, 37, 38, 39, 40, 
	41, 37, 0, 6, 35, 36, 35, 35, 
	37, 38, 39, 40, 41, 37
]

class << self
	attr_accessor :_bel_eof_actions
	private :_bel_eof_actions, :_bel_eof_actions=
end
self._bel_eof_actions = [
	0, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 0, 0, 0, 0, 0, 
	0, 0, 0, 33, 17, 33, 1, 1, 
	1, 17, 17, 17, 17, 47, 50, 17, 
	17, 17, 1, 1, 1, 0, 7, 14, 
	17, 19, 0, 7, 22, 33, 17, 33, 
	1, 1, 0, 7, 14, 17, 19, 0, 
	7, 22, 22, 33, 17, 33, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 7, 
	14, 17, 19, 0, 7, 22, 22, 0, 
	0, 1, 7, 14, 17, 19, 0, 7, 
	22, 22, 0, 0, 0, 0, 33, 17, 
	33, 1, 0, 33, 17, 33, 1, 1, 
	0, 7, 14, 17, 19, 0, 7, 22, 
	22, 0, 0, 1, 7, 14, 17, 19, 
	0, 7, 22, 33, 17, 33, 1, 0, 
	33, 17, 33, 1, 0, 0, 0, 0, 
	82, 82, 0, 0, 0, 82
]

class << self
	attr_accessor :bel_start
end
self.bel_start = 1;
class << self
	attr_accessor :bel_first_final
end
self.bel_first_final = 132;
class << self
	attr_accessor :bel_error
end
self.bel_error = 0;

class << self
	attr_accessor :bel_en_ident
end
self.bel_en_ident = 23;
class << self
	attr_accessor :bel_en_string
end
self.bel_en_string = 25;
class << self
	attr_accessor :bel_en_bel_parameter
end
self.bel_en_bel_parameter = 29;
class << self
	attr_accessor :bel_en_inner_term
end
self.bel_en_inner_term = 36;
class << self
	attr_accessor :bel_en_term
end
self.bel_en_term = 49;
class << self
	attr_accessor :bel_en_relationship
end
self.bel_en_relationship = 63;
class << self
	attr_accessor :bel_en_comment
end
self.bel_en_comment = 65;
class << self
	attr_accessor :bel_en_simple_statement
end
self.bel_en_simple_statement = 69;
class << self
	attr_accessor :bel_en_inner_statement
end
self.bel_en_inner_statement = 103;
class << self
	attr_accessor :bel_en_nested_statement
end
self.bel_en_nested_statement = 1;


      # end: ragel        
          end

          def each
            @buffers    = {}
            @incomplete = {}
            eof         = :ignored
            stack       = []
            data        = @content.unpack('C*')
            p           = 0
            pe          = data.length
            eof         = data.length

      # begin: ragel        
            
begin
	p ||= 0
	pe ||= data.length
	cs = bel_start
	top = 0
end

            
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = cs << 1
	_inds = _bel_index_offsets[cs]
	_slen = _bel_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_bel_trans_keys[_keys] <= _wide && 
			_wide <= _bel_trans_keys[_keys + 1] 
		    ) then
			_bel_indicies[ _inds + _wide - _bel_trans_keys[_keys] ] 
		 else 
			_bel_indicies[ _inds + _slen ]
		 end
	cs = _bel_trans_targs[_trans]
	if _bel_trans_actions[_trans] != 0
	case _bel_trans_actions[_trans]
	when 39 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 2 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 18 then
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 44 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 6 then
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 59 then
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 64 then
		begin

    yield @buffers[:term_stack][-1]
  		end
	when 23 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 27 then
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 69 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
	when 31 then
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 66 then
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 68 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 70 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
	when 72 then
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 28 then
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 29 then
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 16 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
	when 37 then
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 43 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 48 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 34 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 10 then
		begin

    @incomplete[:string] = []
  		end
		begin

    @incomplete[:string] << data[p].ord
  		end
	when 46 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 51 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 20 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 25 then
		begin

    @buffers[:relationship] = []
  		end
		begin

    @buffers[:relationship] << data[p].ord
  		end
	when 65 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    yield @buffers[:relationship]
  		end
	when 26 then
		begin

    @buffers[:relationship] = relationship(
                                utf8_string(@buffers[:relationship]))
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:relationship]
  		end
	when 30 then
		begin

    @buffers[:comment] = []
  		end
		begin

    @buffers[:comment] << data[p].ord
  		end
	when 67 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    yield @buffers[:comment] || comment(nil)
  		end
	when 73 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 32 then
		begin

    @buffers[:comment] = comment(
                           utf8_string(@buffers[:comment]))
  		end
		begin

    comment   = @buffers[:comment] ||= comment(nil)
    statement = @buffers[:statement_stack][-1] << comment
    yield nested_statement(statement)
  		end
	when 24 then
		begin

    @buffers[:subject]    = subject(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:subject]
  		end
	when 71 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:comment] ||= comment(nil)
    yield simple_statement(
            statement(
              @buffers[:subject],
              @buffers[:relationship],
              @buffers[:object],
              @buffers[:comment]))
  		end
	when 42 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
	when 38 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 40 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 36 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 8 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 45 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
	when 15 then
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
	when 80 then
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 12 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 13 then
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] = parameter(prefix(@buffers[:ident]))
  		end
	when 53 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 35 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 41 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 52 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 21 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 60 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 58 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 11 then
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    p -= @incomplete[:function].length + 1
    	begin
		stack[top] = cs
		top+= 1
		cs = 36
		_goto_level = _again
		next
	end

  		end
	when 63 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 56 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 61 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 54 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 5 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 76 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    @incomplete[:ident] << data[p].ord
  		end
		begin

    @incomplete[:function] << data[p].ord
  		end
	when 81 then
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 79 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 62 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 55 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] << t
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 3 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 74 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
	when 77 then
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
		begin

    	begin
		stack[top] = cs
		top+= 1
		cs = 103
		_goto_level = _again
		next
	end

  		end
	when 4 then
		begin

    @buffers[:statement_stack] = [ statement() ]
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 75 then
		begin

    @buffers[:statement_stack] << statement()
  		end
		begin

    t = term(complete: false)
    @buffers[:term_stack] = [t]
  		end
		begin

    @incomplete[:function] = []
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    fx = @incomplete.delete(:function)
    @buffers[:function] = identifier(utf8_string(fx))
  		end
		begin

    fx                        = @buffers[:function]
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << function(fx)
  		end
	when 49 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    yield @buffers[:parameter]
  		end
	when 9 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
	when 57 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    inner_term = @buffers[:term_stack].pop
    @buffers[:term_stack][-1] = @buffers[:term_stack][-1] << argument(inner_term)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	when 78 then
		begin

    @incomplete[:string] = []
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty?
    ast_node = string(utf8_string(string), complete: completed)
    @buffers[:string] = ast_node
    @ended = true
  		end
		begin

    yield @buffers[:string]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:string])
  		end
		begin

    @incomplete[:ident] = []
  		end
		begin

    ident = @incomplete.delete(:ident)
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    @buffers[:ident] = ast_node
  		end
		begin

    yield @buffers[:ident]
  		end
		begin

    @buffers[:parameter] ||= parameter(prefix(nil))
    @buffers[:parameter]   = @buffers[:parameter] << value(@buffers[:ident])
  		end
		begin

    # add a child parameter argument to the last term (creates a new term)
    t = @buffers[:term_stack][-1] << argument(@buffers[:parameter])
    t.complete = true
    @buffers[:term_stack][-1] = t
    @buffers[:parameter]      = nil
  		end
		begin

    @buffers[:object]     = object(
                              @buffers[:term_stack][-1])
    @buffers[:term_stack] = nil
  		end
		begin

    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << @buffers[:object]
  		end
		begin

    inner_statement = @buffers[:statement_stack].pop
    @buffers[:object] = inner_statement
    @buffers[:statement_stack][-1] = @buffers[:statement_stack][-1] << object(inner_statement)
    	begin
		top -= 1
		cs = stack[top]
		_goto_level = _again
		next
	end

  		end
	end
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	  case _bel_eof_actions[cs]
	when 82 then
		begin

  		end
	when 1 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 17 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 22 then
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 47 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
	when 33 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 50 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
	when 19 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 7 then
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	when 14 then
		begin

    string = @incomplete.delete(:string)
    completed = !string.empty? && @ended
    ast_node = string(utf8_string(string), complete: completed)
    yield ast_node
  		end
		begin

    string = @incomplete.delete(:string) || []
    completed = !string.empty?
    ast_node = string(utf8_string(@buffers[:string]).sub(/\n$/, ''))
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    ident = @incomplete.delete(:ident) || []
    completed = !ident.empty?
    ast_node = identifier(utf8_string(ident), complete: completed)
    yield ast_node
  		end
		begin

    # $ all states; error_term

    unless @incomplete.empty?
      fx = @incomplete.delete(:function)
      fx = identifier(utf8_string(fx))
      # add a child function to the last term (creates a new term)
      t = @buffers[:term_stack][-1] << function(fx)
      @buffers[:term_stack][-1] = t
    end

    yield @buffers[:term_stack][-1]
  		end
		begin

  		end
	  end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

      # end: ragel        
          end
        end
      end
    end
  end
end

if __FILE__ == $0
  $stdin.each_line do |line|
    BELParser::Parsers::Expression::NestedStatement.parse(line) { |obj|
      puts obj.inspect
    }
  end
end

# vim: ft=ruby ts=2 sw=2:
# encoding: utf-8
